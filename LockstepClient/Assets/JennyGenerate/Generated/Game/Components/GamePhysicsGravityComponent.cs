//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public PhysicsGravityComponent physicsGravity { get { return (PhysicsGravityComponent)GetComponent(GameComponentsLookup.PhysicsGravity); } }
    public bool hasPhysicsGravity { get { return HasComponent(GameComponentsLookup.PhysicsGravity); } }

    public void AddPhysicsGravity(Lockstep.LVector3 newGravity, bool newIsGround) {
        var index = GameComponentsLookup.PhysicsGravity;
        var component = (PhysicsGravityComponent)CreateComponent(index, typeof(PhysicsGravityComponent));
        component.gravity = newGravity;
        component.isGround = newIsGround;
        AddComponent(index, component);
    }

    public void ReplacePhysicsGravity(Lockstep.LVector3 newGravity, bool newIsGround) {
        var index = GameComponentsLookup.PhysicsGravity;
        var component = (PhysicsGravityComponent)CreateComponent(index, typeof(PhysicsGravityComponent));
        component.gravity = newGravity;
        component.isGround = newIsGround;
        ReplaceComponent(index, component);
    }

    public void RemovePhysicsGravity() {
        RemoveComponent(GameComponentsLookup.PhysicsGravity);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPhysicsGravity;

    public static Entitas.IMatcher<GameEntity> PhysicsGravity {
        get {
            if (_matcherPhysicsGravity == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.PhysicsGravity);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPhysicsGravity = matcher;
            }

            return _matcherPhysicsGravity;
        }
    }
}
