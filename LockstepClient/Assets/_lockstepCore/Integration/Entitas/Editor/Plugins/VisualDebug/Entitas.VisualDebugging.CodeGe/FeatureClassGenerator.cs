using DesperateDevs.CodeGeneration;

namespace Entitas.VisualDebugging.CodeGeneration.Plugins;

public class FeatureClassGenerator : ICodeGenerator, ICodeGenerationPlugin
{
	private const string FEATURE_TEMPLATE = "#if (!ENTITAS_DISABLE_VISUAL_DEBUGGING && UNITY_EDITOR)\n\npublic class Feature : Entitas.VisualDebugging.Unity.DebugSystems {\n\n    public Feature(string name) : base(name) {\n    }\n\n    public Feature() : base(true) {\n        var typeName = DesperateDevs.Utils.SerializationTypeExtension.ToCompilableString(GetType());\n        var shortType = DesperateDevs.Utils.SerializationTypeExtension.ShortTypeName(typeName);\n        var readableType = DesperateDevs.Utils.StringExtension.ToSpacedCamelCase(shortType);\n\n        initialize(readableType);\n    }\n}\n\n#elif (!ENTITAS_DISABLE_DEEP_PROFILING && DEVELOPMENT_BUILD)\n\npublic class Feature : Entitas.Systems {\n\n    System.Collections.Generic.List<string> _initializeSystemNames;\n    System.Collections.Generic.List<string> _executeSystemNames;\n    System.Collections.Generic.List<string> _cleanupSystemNames;\n    System.Collections.Generic.List<string> _tearDownSystemNames;\n\n    public Feature(string name) : this() {\n    }\n\n    public Feature() {\n        _initializeSystemNames = new System.Collections.Generic.List<string>();\n        _executeSystemNames = new System.Collections.Generic.List<string>();\n        _cleanupSystemNames = new System.Collections.Generic.List<string>();\n        _tearDownSystemNames = new System.Collections.Generic.List<string>();\n    }\n\n    public override Entitas.Systems Add(Entitas.ISystem system) {\n        var systemName = system.GetType().FullName;\n\n        if (system is Entitas.IInitializeSystem) {\n            _initializeSystemNames.Add(systemName);\n        }\n\n        if (system is Entitas.IExecuteSystem) {\n            _executeSystemNames.Add(systemName);\n        }\n\n        if (system is Entitas.ICleanupSystem) {\n            _cleanupSystemNames.Add(systemName);\n        }\n\n        if (system is Entitas.ITearDownSystem) {\n            _tearDownSystemNames.Add(systemName);\n        }\n\n        return base.Add(system);\n    }\n\n    public override void Initialize() {\n        for (int i = 0; i < _initializeSystems.Count; i++) {\n            UnityEngine.Profiling.Profiler.BeginSample(_initializeSystemNames[i]);\n            _initializeSystems[i].Initialize();\n            UnityEngine.Profiling.Profiler.EndSample();\n        }\n    }\n\n    public override void Execute() {\n        for (int i = 0; i < _executeSystems.Count; i++) {\n            UnityEngine.Profiling.Profiler.BeginSample(_executeSystemNames[i]);\n            _executeSystems[i].Execute();\n            UnityEngine.Profiling.Profiler.EndSample();\n        }\n    }\n\n    public override void Cleanup() {\n        for (int i = 0; i < _cleanupSystems.Count; i++) {\n            UnityEngine.Profiling.Profiler.BeginSample(_cleanupSystemNames[i]);\n            _cleanupSystems[i].Cleanup();\n            UnityEngine.Profiling.Profiler.EndSample();\n        }\n    }\n\n    public override void TearDown() {\n        for (int i = 0; i < _tearDownSystems.Count; i++) {\n            UnityEngine.Profiling.Profiler.BeginSample(_tearDownSystemNames[i]);\n            _tearDownSystems[i].TearDown();\n            UnityEngine.Profiling.Profiler.EndSample();\n        }\n    }\n}\n\n#else\n\npublic class Feature : Entitas.Systems {\n\n    public Feature(string name) {\n    }\n\n    public Feature() {\n    }\n}\n\n#endif\n";

	public string name => "Feature Class";

	public int priority => 0;

	public bool runInDryMode => true;

	public CodeGenFile[] Generate(CodeGeneratorData[] data)
	{
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Expected O, but got Unknown
		return (CodeGenFile[])(object)new CodeGenFile[1]
		{
			new CodeGenFile("Feature.cs", "#if (!ENTITAS_DISABLE_VISUAL_DEBUGGING && UNITY_EDITOR)\n\npublic class Feature : Entitas.VisualDebugging.Unity.DebugSystems {\n\n    public Feature(string name) : base(name) {\n    }\n\n    public Feature() : base(true) {\n        var typeName = DesperateDevs.Utils.SerializationTypeExtension.ToCompilableString(GetType());\n        var shortType = DesperateDevs.Utils.SerializationTypeExtension.ShortTypeName(typeName);\n        var readableType = DesperateDevs.Utils.StringExtension.ToSpacedCamelCase(shortType);\n\n        initialize(readableType);\n    }\n}\n\n#elif (!ENTITAS_DISABLE_DEEP_PROFILING && DEVELOPMENT_BUILD)\n\npublic class Feature : Entitas.Systems {\n\n    System.Collections.Generic.List<string> _initializeSystemNames;\n    System.Collections.Generic.List<string> _executeSystemNames;\n    System.Collections.Generic.List<string> _cleanupSystemNames;\n    System.Collections.Generic.List<string> _tearDownSystemNames;\n\n    public Feature(string name) : this() {\n    }\n\n    public Feature() {\n        _initializeSystemNames = new System.Collections.Generic.List<string>();\n        _executeSystemNames = new System.Collections.Generic.List<string>();\n        _cleanupSystemNames = new System.Collections.Generic.List<string>();\n        _tearDownSystemNames = new System.Collections.Generic.List<string>();\n    }\n\n    public override Entitas.Systems Add(Entitas.ISystem system) {\n        var systemName = system.GetType().FullName;\n\n        if (system is Entitas.IInitializeSystem) {\n            _initializeSystemNames.Add(systemName);\n        }\n\n        if (system is Entitas.IExecuteSystem) {\n            _executeSystemNames.Add(systemName);\n        }\n\n        if (system is Entitas.ICleanupSystem) {\n            _cleanupSystemNames.Add(systemName);\n        }\n\n        if (system is Entitas.ITearDownSystem) {\n            _tearDownSystemNames.Add(systemName);\n        }\n\n        return base.Add(system);\n    }\n\n    public override void Initialize() {\n        for (int i = 0; i < _initializeSystems.Count; i++) {\n            UnityEngine.Profiling.Profiler.BeginSample(_initializeSystemNames[i]);\n            _initializeSystems[i].Initialize();\n            UnityEngine.Profiling.Profiler.EndSample();\n        }\n    }\n\n    public override void Execute() {\n        for (int i = 0; i < _executeSystems.Count; i++) {\n            UnityEngine.Profiling.Profiler.BeginSample(_executeSystemNames[i]);\n            _executeSystems[i].Execute();\n            UnityEngine.Profiling.Profiler.EndSample();\n        }\n    }\n\n    public override void Cleanup() {\n        for (int i = 0; i < _cleanupSystems.Count; i++) {\n            UnityEngine.Profiling.Profiler.BeginSample(_cleanupSystemNames[i]);\n            _cleanupSystems[i].Cleanup();\n            UnityEngine.Profiling.Profiler.EndSample();\n        }\n    }\n\n    public override void TearDown() {\n        for (int i = 0; i < _tearDownSystems.Count; i++) {\n            UnityEngine.Profiling.Profiler.BeginSample(_tearDownSystemNames[i]);\n            _tearDownSystems[i].TearDown();\n            UnityEngine.Profiling.Profiler.EndSample();\n        }\n    }\n}\n\n#else\n\npublic class Feature : Entitas.Systems {\n\n    public Feature(string name) {\n    }\n\n    public Feature() {\n    }\n}\n\n#endif\n", GetType().FullName)
		};
	}
}
