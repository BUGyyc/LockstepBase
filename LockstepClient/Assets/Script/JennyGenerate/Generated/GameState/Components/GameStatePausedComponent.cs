//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameStateContext {

    public GameStateEntity pausedEntity { get { return GetGroup(GameStateMatcher.Paused).GetSingleEntity(); } }

    public bool isPaused {
        get { return pausedEntity != null; }
        set {
            var entity = pausedEntity;
            if (value != (entity != null)) {
                if (value) {
                    CreateEntity().isPaused = true;
                } else {
                    entity.Destroy();
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameStateEntity {

    static readonly Lockstep.Core.State.GameState.PausedComponent pausedComponent = new Lockstep.Core.State.GameState.PausedComponent();

    public bool isPaused {
        get { return HasComponent(GameStateComponentsLookup.Paused); }
        set {
            if (value != isPaused) {
                var index = GameStateComponentsLookup.Paused;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : pausedComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameStateMatcher {

    static Entitas.IMatcher<GameStateEntity> _matcherPaused;

    public static Entitas.IMatcher<GameStateEntity> Paused {
        get {
            if (_matcherPaused == null) {
                var matcher = (Entitas.Matcher<GameStateEntity>)Entitas.Matcher<GameStateEntity>.AllOf(GameStateComponentsLookup.Paused);
                matcher.componentNames = GameStateComponentsLookup.componentNames;
                _matcherPaused = matcher;
            }

            return _matcherPaused;
        }
    }
}
