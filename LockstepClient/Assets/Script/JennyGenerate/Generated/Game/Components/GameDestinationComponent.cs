//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Lockstep;

public partial class GameEntity {

    static readonly Lockstep.Core.State.Game.DestinationComponent destinationComponent = new Lockstep.Core.State.Game.DestinationComponent();

    public bool isDestination {
        get { return HasComponent(GameComponentsLookup.Destination); }
        set {
            if (value != isDestination) {
                var index = GameComponentsLookup.Destination;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : destinationComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }

    public void ReplaceDestination(LVector3 val)
    {
        var index = GameComponentsLookup.Destination;
        var component = (Lockstep.Core.State.Game.DestinationComponent)CreateComponent(index, typeof(Lockstep.Core.State.Game.DestinationComponent));
        component.value = val;
        ReplaceComponent(index, component);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherDestination;

    public static Entitas.IMatcher<GameEntity> Destination {
        get {
            if (_matcherDestination == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Destination);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherDestination = matcher;
            }

            return _matcherDestination;
        }
    }
}
