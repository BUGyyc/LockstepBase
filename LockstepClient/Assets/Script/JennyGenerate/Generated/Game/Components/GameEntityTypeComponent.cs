//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public EntityTypeComponent entityType { get { return (EntityTypeComponent)GetComponent(GameComponentsLookup.EntityType); } }
    public bool hasEntityType { get { return HasComponent(GameComponentsLookup.EntityType); } }

    public void AddEntityType(EntityType newType) {
        var index = GameComponentsLookup.EntityType;
        var component = (EntityTypeComponent)CreateComponent(index, typeof(EntityTypeComponent));
        component.type = newType;
        AddComponent(index, component);
    }

    public void ReplaceEntityType(EntityType newType) {
        var index = GameComponentsLookup.EntityType;
        var component = (EntityTypeComponent)CreateComponent(index, typeof(EntityTypeComponent));
        component.type = newType;
        ReplaceComponent(index, component);
    }

    public void RemoveEntityType() {
        RemoveComponent(GameComponentsLookup.EntityType);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherEntityType;

    public static Entitas.IMatcher<GameEntity> EntityType {
        get {
            if (_matcherEntityType == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.EntityType);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherEntityType = matcher;
            }

            return _matcherEntityType;
        }
    }
}
