// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Protocol {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class ProtoBattle {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Protocol_CreateEntityNotify__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.CreateEntityNotify, global::Protocol.CreateEntityNotify.Builder> internal__static_Protocol_CreateEntityNotify__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_DeleteEntityNotify__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.DeleteEntityNotify, global::Protocol.DeleteEntityNotify.Builder> internal__static_Protocol_DeleteEntityNotify__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_MoveActionMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.MoveActionMsg, global::Protocol.MoveActionMsg.Builder> internal__static_Protocol_MoveActionMsg__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_ActionMoveMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.ActionMoveMsg, global::Protocol.ActionMoveMsg.Builder> internal__static_Protocol_ActionMoveMsg__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_StateMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.StateMsg, global::Protocol.StateMsg.Builder> internal__static_Protocol_StateMsg__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_EntitySyncData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.EntitySyncData, global::Protocol.EntitySyncData.Builder> internal__static_Protocol_EntitySyncData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_AnimationStateSyncData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.AnimationStateSyncData, global::Protocol.AnimationStateSyncData.Builder> internal__static_Protocol_AnimationStateSyncData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_Attr__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.Attr, global::Protocol.Attr.Builder> internal__static_Protocol_Attr__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_CharacterSyncData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.CharacterSyncData, global::Protocol.CharacterSyncData.Builder> internal__static_Protocol_CharacterSyncData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_BagSyncData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.BagSyncData, global::Protocol.BagSyncData.Builder> internal__static_Protocol_BagSyncData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_TagItemData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.TagItemData, global::Protocol.TagItemData.Builder> internal__static_Protocol_TagItemData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_TagSyncData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.TagSyncData, global::Protocol.TagSyncData.Builder> internal__static_Protocol_TagSyncData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_AttributeSyncData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.AttributeSyncData, global::Protocol.AttributeSyncData.Builder> internal__static_Protocol_AttributeSyncData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_LifeSyncData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.LifeSyncData, global::Protocol.LifeSyncData.Builder> internal__static_Protocol_LifeSyncData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_SkillCtrlSyncData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.SkillCtrlSyncData, global::Protocol.SkillCtrlSyncData.Builder> internal__static_Protocol_SkillCtrlSyncData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_BuffCtrlSyncData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.BuffCtrlSyncData, global::Protocol.BuffCtrlSyncData.Builder> internal__static_Protocol_BuffCtrlSyncData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_BuffItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.BuffItem, global::Protocol.BuffItem.Builder> internal__static_Protocol_BuffItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_BuffEffectItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.BuffEffectItem, global::Protocol.BuffEffectItem.Builder> internal__static_Protocol_BuffEffectItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_SkillSyncData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.SkillSyncData, global::Protocol.SkillSyncData.Builder> internal__static_Protocol_SkillSyncData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_ThingSyncData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.ThingSyncData, global::Protocol.ThingSyncData.Builder> internal__static_Protocol_ThingSyncData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_HeroSyncData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.HeroSyncData, global::Protocol.HeroSyncData.Builder> internal__static_Protocol_HeroSyncData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_GMCommandReq__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.GMCommandReq, global::Protocol.GMCommandReq.Builder> internal__static_Protocol_GMCommandReq__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static ProtoBattle() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJwcm90b19iYXR0bGUucHJvdG8SCFByb3RvY29sGh1pbmNsdWRlL3lkX2Zp", 
            "ZWxkb3B0aW9ucy5wcm90bxoScHJvdG9fY29tbW9uLnByb3RvGhJwcm90b19j", 
            "b25maWcucHJvdG8iWAoSQ3JlYXRlRW50aXR5Tm90aWZ5EkIKEGVudGl0eV9k", 
            "YXRhX2xpc3QYASADKAsyGC5Qcm90b2NvbC5FbnRpdHlTeW5jRGF0YVIOZW50", 
            "aXR5RGF0YUxpc3QiOgoSRGVsZXRlRW50aXR5Tm90aWZ5EiQKDmVudGl0eV9p", 
            "ZF9saXN0GAEgAygNUgxlbnRpdHlJZExpc3QivQIKDU1vdmVBY3Rpb25Nc2cS", 
            "GwoJZW50aXR5X2lkGAEgASgNUghlbnRpdHlJZBIdCgptb3ZlX3N0YXRlGAIg", 
            "ASgNUgltb3ZlU3RhdGUSHQoKbW92ZV9hbmdsZRgDIAEoAlIJbW92ZUFuZ2xl", 
            "EhkKCHZpZXdfcm93GAQgASgFUgd2aWV3Um93Eh0KCnZpZXdfcGl0Y2gYBSAB", 
            "KAVSCXZpZXdQaXRjaBIfCgtpZ25vcmVfbG9jaxgGIAEoCFIKaWdub3JlTG9j", 
            "axIWCgZtb3Rpb24YByABKA1SBm1vdGlvbhIkCg5sb2NrX3RhcmdldF9pZBgI", 
            "IAEoDVIMbG9ja1RhcmdldElkEhsKCWJsZW5kZXJfeBgJIAEoAlIIYmxlbmRl", 
            "clgSGwoJYmxlbmRlcl95GAogASgCUghibGVuZGVyWSKCAgoNQWN0aW9uTW92", 
            "ZU1zZxIbCgllbnRpdHlfaWQYASACKA1SCGVudGl0eUlkEhIKBG1vdmUYAiAB", 
            "KAhSBG1vdmUSHQoKbW92ZV9hbmdsZRgDIAEoBVIJbW92ZUFuZ2xlEhAKA3J1", 
            "bhgEIAEoCFIDcnVuEhkKCHZpZXdfcm93GAUgASgFUgd2aWV3Um93Eh0KCnZp", 
            "ZXdfcGl0Y2gYBiABKAVSCXZpZXdQaXRjaBIXCgdpbl9zaXR1GAcgASgIUgZp", 
            "blNpdHUSHwoLaWdub3JlX2xvY2sYCCABKAhSCmlnbm9yZUxvY2sSGwoJYWlt", 
            "X3N0YXRlGAkgASgIUghhaW1TdGF0ZSLFAQoIU3RhdGVNc2cSFAoFZnJhbWUY", 
            "ASABKA1SBWZyYW1lEkYKEmVudGl0eXNfbWVyZ2VfbGlzdBgDIAMoCzIYLlBy", 
            "b3RvY29sLkVudGl0eVN5bmNEYXRhUhBlbnRpdHlzTWVyZ2VMaXN0EjgKFWFk", 
            "ZGVudGl0eXNfbWVyZ2VfbGlzdBjrByADKAsyGC5Qcm90b2NvbC5FbnRpdHlT", 
            "eW5jRGF0YRIhChhyZW1vdmVlbnRpdHlzX21lcmdlX2xpc3QY0w8gAygNIvoF", 
            "Cg5FbnRpdHlTeW5jRGF0YRIOCgJpZBgBIAIoDVICaWQSKAoEdHlwZRgCIAEo", 
            "DjIULlByb3RvY29sLkVudGl0eVR5cGVSBHR5cGUSKgoIcG9zaXRpb24YAyAB", 
            "KAsyDi5Qcm90b2NvbC5JbnQzUghwb3NpdGlvbhIqCghyb3RhdGlvbhgEIAEo", 
            "CzIOLlByb3RvY29sLkludDNSCHJvdGF0aW9uEhIKBGNhbXAYBSABKA1SBGNh", 
            "bXASOAoJYXR0cl9kYXRhGAYgASgLMhsuUHJvdG9jb2wuQXR0cmlidXRlU3lu", 
            "Y0RhdGFSCGF0dHJEYXRhEjMKCWxpZmVfZGF0YRgHIAEoCzIWLlByb3RvY29s", 
            "LkxpZmVTeW5jRGF0YVIIbGlmZURhdGESMAoIYmFnX2RhdGEYCCABKAsyFS5Q", 
            "cm90b2NvbC5CYWdTeW5jRGF0YVIHYmFnRGF0YRJDCg9za2lsbF9jdHJsX2Rh", 
            "dGEYCSABKAsyGy5Qcm90b2NvbC5Ta2lsbEN0cmxTeW5jRGF0YVINc2tpbGxD", 
            "dHJsRGF0YRJACg5idWZmX2N0cmxfZGF0YRgKIAEoCzIaLlByb3RvY29sLkJ1", 
            "ZmZDdHJsU3luY0RhdGFSDGJ1ZmZDdHJsRGF0YRIwCgh0YWdfZGF0YRgMIAEo", 
            "CzIVLlByb3RvY29sLlRhZ1N5bmNEYXRhUgd0YWdEYXRhEjMKCWhlcm9fZGF0", 
            "YRgNIAEoCzIWLlByb3RvY29sLkhlcm9TeW5jRGF0YVIIaGVyb0RhdGESQgoO", 
            "Y2hhcmFjdGVyX2RhdGEYECABKAsyGy5Qcm90b2NvbC5DaGFyYWN0ZXJTeW5j", 
            "RGF0YVINY2hhcmFjdGVyRGF0YRJGCg5hbmlfc3RhdGVfZGF0YRgVIAEoCzIg", 
            "LlByb3RvY29sLkFuaW1hdGlvblN0YXRlU3luY0RhdGFSDGFuaVN0YXRlRGF0", 
            "YRInCg9hbmltYXRpb25fc3RhdGUYFiABKAhSDmFuaW1hdGlvblN0YXRlIqIB", 
            "ChZBbmltYXRpb25TdGF0ZVN5bmNEYXRhEh0KCm1haW5fc3RhdGUYASABKA1S", 
            "CW1haW5TdGF0ZRIbCglzdWJfc3RhdGUYAiABKA1SCHN1YlN0YXRlEiYKD2xh", 
            "c3RfbWFpbl9zdGF0ZRgDIAEoDVINbGFzdE1haW5TdGF0ZRIkCg5sYXN0X3N1", 
            "Yl9zdGF0ZRgEIAEoDVIMbGFzdFN1YlN0YXRlIioKBEF0dHISDgoCaWQYASAC", 
            "KA1SAmlkEhIKBGRhdGEYAiACKAJSBGRhdGEiIwoRQ2hhcmFjdGVyU3luY0Rh", 
            "dGESDgoCaWQYASABKA1SAmlkIh0KC0JhZ1N5bmNEYXRhEg4KAmlkGAEgAigN", 
            "UgJpZCIzCgtUYWdJdGVtRGF0YRIOCgJpZBgBIAIoDVICaWQSFAoFdmFsdWUY", 
            "AiABKAVSBXZhbHVlIq8BCgtUYWdTeW5jRGF0YRJEChN0YWdfZGF0YV9tZXJn", 
            "ZV9saXN0GAEgAygLMhUuUHJvdG9jb2wuVGFnSXRlbURhdGFSEHRhZ0RhdGFN", 
            "ZXJnZUxpc3QSNgoWYWRkdGFnX2RhdGFfbWVyZ2VfbGlzdBjpByADKAsyFS5Q", 
            "cm90b2NvbC5UYWdJdGVtRGF0YRIiChlyZW1vdmV0YWdfZGF0YV9tZXJnZV9s", 
            "aXN0GNEPIAMoDSKQAgoRQXR0cmlidXRlU3luY0RhdGESNgoPYXR0cl9tZXJn", 
            "ZV9saXN0GAEgAygLMg4uUHJvdG9jb2wuQXR0clINYXR0ck1lcmdlTGlzdBIv", 
            "ChRpbml0X2F0dHJfbWVyZ2VfbGlzdBgCIAMoDVIRaW5pdEF0dHJNZXJnZUxp", 
            "c3QSKwoSYWRkYXR0cl9tZXJnZV9saXN0GOkHIAMoCzIOLlByb3RvY29sLkF0", 
            "dHISHgoVcmVtb3ZlYXR0cl9tZXJnZV9saXN0GNEPIAMoDRIgChdhZGRpbml0", 
            "X2F0dHJfbWVyZ2VfbGlzdBjqByADKA0SIwoacmVtb3ZlaW5pdF9hdHRyX21l", 
            "cmdlX2xpc3QY0g8gAygNImMKDExpZmVTeW5jRGF0YRIbCgllbnRpdHlfaHAY", 
            "ASABKAJSCGVudGl0eUhwEiIKDWVudGl0eV9tYXhfaHAYAiABKAJSC2VudGl0", 
            "eU1heEhwEhIKBGRlYWQYAyABKAhSBGRlYWQi1AIKEVNraWxsQ3RybFN5bmNE", 
            "YXRhEkMKEXNraWxsc19tZXJnZV9saXN0GAEgAygLMhcuUHJvdG9jb2wuU2tp", 
            "bGxTeW5jRGF0YVIPc2tpbGxzTWVyZ2VMaXN0EiwKEmxvY2tfcmVsZWFzZV9j", 
            "b3VudBgCIAEoBVIQbG9ja1JlbGVhc2VDb3VudBItChNza2lsbF9pZF9tZXJn", 
            "ZV9saXN0GAMgAygNUhBza2lsbElkTWVyZ2VMaXN0EjYKFGFkZHNraWxsc19t", 
            "ZXJnZV9saXN0GOkHIAMoCzIXLlByb3RvY29sLlNraWxsU3luY0RhdGESIAoX", 
            "cmVtb3Zlc2tpbGxzX21lcmdlX2xpc3QY0Q8gAygEEh8KFmFkZHNraWxsX2lk", 
            "X21lcmdlX2xpc3QY6wcgAygNEiIKGXJlbW92ZXNraWxsX2lkX21lcmdlX2xp", 
            "c3QY0w8gAygNIp8BChBCdWZmQ3RybFN5bmNEYXRhEjoKD2J1ZmZfbWVyZ2Vf", 
            "bGlzdBgBIAMoCzISLlByb3RvY29sLkJ1ZmZJdGVtUg1idWZmTWVyZ2VMaXN0", 
            "Ei8KEmFkZGJ1ZmZfbWVyZ2VfbGlzdBjpByADKAsyEi5Qcm90b2NvbC5CdWZm", 
            "SXRlbRIeChVyZW1vdmVidWZmX21lcmdlX2xpc3QY0Q8gAygNIvMDCghCdWZm", 
            "SXRlbRIOCgJpZBgBIAIoDVICaWQSGwoJc3RlcF90aW1lGAIgASgCUghzdGVw", 
            "VGltZRIkCg5rZWVwX2xpdmVfdGltZRgDIAEoAlIMa2VlcExpdmVUaW1lEhkK", 
            "CGFkZF90aW1lGAQgASgCUgdhZGRUaW1lEh0KCnN0YXJ0X3RpbWUYBSABKAJS", 
            "CXN0YXJ0VGltZRIqChFsYXN0X2V4ZWN1dGVfdGltZRgGIAEoAlIPbGFzdEV4", 
            "ZWN1dGVUaW1lEh0KCmRlbGF5X3RpbWUYByABKAJSCWRlbGF5VGltZRIdCgpi", 
            "dWZmX2NvdW50GAggASgNUglidWZmQ291bnQSGwoJaXNfZGVsZXRlGAkgASgI", 
            "Ughpc0RlbGV0ZRJNChZidWZmX2VmZmVjdF9tZXJnZV9saXN0GAogAygLMhgu", 
            "UHJvdG9jb2wuQnVmZkVmZmVjdEl0ZW1SE2J1ZmZFZmZlY3RNZXJnZUxpc3QS", 
            "HwoLZGVsZXRlX3RpbWUYCyABKAJSCmRlbGV0ZVRpbWUSPAoZYWRkYnVmZl9l", 
            "ZmZlY3RfbWVyZ2VfbGlzdBjyByADKAsyGC5Qcm90b2NvbC5CdWZmRWZmZWN0", 
            "SXRlbRIlChxyZW1vdmVidWZmX2VmZmVjdF9tZXJnZV9saXN0GNoPIAMoDSKz", 
            "AwoOQnVmZkVmZmVjdEl0ZW0SDgoCaWQYASACKA1SAmlkEhsKCXN0ZXBfdGlt", 
            "ZRgCIAEoAlIIc3RlcFRpbWUSJAoOa2VlcF9saXZlX3RpbWUYAyABKAJSDGtl", 
            "ZXBMaXZlVGltZRIZCghhZGRfdGltZRgEIAEoAlIHYWRkVGltZRIdCgpzdGFy", 
            "dF90aW1lGAUgASgCUglzdGFydFRpbWUSKgoRbGFzdF9leGVjdXRlX3RpbWUY", 
            "BiABKAJSD2xhc3RFeGVjdXRlVGltZRIdCgpkZWxheV90aW1lGAcgASgCUglk", 
            "ZWxheVRpbWUSHwoLaXNfY29tcGxldGUYCCABKAhSCmlzQ29tcGxldGUSLwoU", 
            "bmVlZF9yZXNldF9vbl9yZW1vdmUYCSABKAhSEW5lZWRSZXNldE9uUmVtb3Zl", 
            "EigKEGVmZmVjdF9hZGRfdmFsdWUYCiABKAJSDmVmZmVjdEFkZFZhbHVlEiwK", 
            "EmVmZmVjdF9tdWx0aV92YWx1ZRgLIAEoAlIQZWZmZWN0TXVsdGlWYWx1ZRIf", 
            "CgtkZWxldGVfdGltZRgMIAEoAlIKZGVsZXRlVGltZSI8Cg1Ta2lsbFN5bmNE", 
            "YXRhEg4KAmlkGAEgAigEUgJpZBIbCglyZW1haW5fY2QYAiABKAJSCHJlbWFp", 
            "bkNkIpoBCg1UaGluZ1N5bmNEYXRhEhkKCHRoaW5nX2lkGAEgAigEUgd0aGlu", 
            "Z0lkEicKBHR5cGUYAiABKA4yEy5Qcm90b2NvbC5UaGluZ1R5cGVSBHR5cGUS", 
            "DgoCaWQYAyABKA1SAmlkEjUKCGNvbGxpZGVyGAQgASgLMhkuUHJvdG9jb2wu", 
            "Qm94Q29sbGlkZXJEYXRhUghjb2xsaWRlciKcAQoMSGVyb1N5bmNEYXRhEhcK", 
            "B2hlcm9faWQYASABKA1SBmhlcm9JZBIXCgdza2luX2lkGAIgASgNUgZza2lu", 
            "SWQSGQoIbW9kZWxfaWQYAyABKA1SB21vZGVsSWQSPwoPaGVyb19wb3dlcl90", 
            "eXBlGAQgASgOMhcuUHJvdG9jb2wuSGVyb1Bvd2VyVHlwZVINaGVyb1Bvd2Vy", 
            "VHlwZSIqCgxHTUNvbW1hbmRSZXESGgoIY29tbWFuZHMYASADKAlSCGNvbW1h", 
          "bmRz"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Protocol_CreateEntityNotify__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Protocol_CreateEntityNotify__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.CreateEntityNotify, global::Protocol.CreateEntityNotify.Builder>(internal__static_Protocol_CreateEntityNotify__Descriptor,
                new string[] { "EntityDataList", });
        internal__static_Protocol_DeleteEntityNotify__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Protocol_DeleteEntityNotify__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.DeleteEntityNotify, global::Protocol.DeleteEntityNotify.Builder>(internal__static_Protocol_DeleteEntityNotify__Descriptor,
                new string[] { "EntityIdList", });
        internal__static_Protocol_MoveActionMsg__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Protocol_MoveActionMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.MoveActionMsg, global::Protocol.MoveActionMsg.Builder>(internal__static_Protocol_MoveActionMsg__Descriptor,
                new string[] { "EntityId", "MoveState", "MoveAngle", "ViewRow", "ViewPitch", "IgnoreLock", "Motion", "LockTargetId", "BlenderX", "BlenderY", });
        internal__static_Protocol_ActionMoveMsg__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Protocol_ActionMoveMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.ActionMoveMsg, global::Protocol.ActionMoveMsg.Builder>(internal__static_Protocol_ActionMoveMsg__Descriptor,
                new string[] { "EntityId", "Move", "MoveAngle", "Run", "ViewRow", "ViewPitch", "InSitu", "IgnoreLock", "AimState", });
        internal__static_Protocol_StateMsg__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Protocol_StateMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.StateMsg, global::Protocol.StateMsg.Builder>(internal__static_Protocol_StateMsg__Descriptor,
                new string[] { "Frame", "EntitysMergeList", "AddentitysMergeList", "RemoveentitysMergeList", });
        internal__static_Protocol_EntitySyncData__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Protocol_EntitySyncData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.EntitySyncData, global::Protocol.EntitySyncData.Builder>(internal__static_Protocol_EntitySyncData__Descriptor,
                new string[] { "Id", "Type", "Position", "Rotation", "Camp", "AttrData", "LifeData", "BagData", "SkillCtrlData", "BuffCtrlData", "TagData", "HeroData", "CharacterData", "AniStateData", "AnimationState", });
        internal__static_Protocol_AnimationStateSyncData__Descriptor = Descriptor.MessageTypes[6];
        internal__static_Protocol_AnimationStateSyncData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.AnimationStateSyncData, global::Protocol.AnimationStateSyncData.Builder>(internal__static_Protocol_AnimationStateSyncData__Descriptor,
                new string[] { "MainState", "SubState", "LastMainState", "LastSubState", });
        internal__static_Protocol_Attr__Descriptor = Descriptor.MessageTypes[7];
        internal__static_Protocol_Attr__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.Attr, global::Protocol.Attr.Builder>(internal__static_Protocol_Attr__Descriptor,
                new string[] { "Id", "Data", });
        internal__static_Protocol_CharacterSyncData__Descriptor = Descriptor.MessageTypes[8];
        internal__static_Protocol_CharacterSyncData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.CharacterSyncData, global::Protocol.CharacterSyncData.Builder>(internal__static_Protocol_CharacterSyncData__Descriptor,
                new string[] { "Id", });
        internal__static_Protocol_BagSyncData__Descriptor = Descriptor.MessageTypes[9];
        internal__static_Protocol_BagSyncData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.BagSyncData, global::Protocol.BagSyncData.Builder>(internal__static_Protocol_BagSyncData__Descriptor,
                new string[] { "Id", });
        internal__static_Protocol_TagItemData__Descriptor = Descriptor.MessageTypes[10];
        internal__static_Protocol_TagItemData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.TagItemData, global::Protocol.TagItemData.Builder>(internal__static_Protocol_TagItemData__Descriptor,
                new string[] { "Id", "Value", });
        internal__static_Protocol_TagSyncData__Descriptor = Descriptor.MessageTypes[11];
        internal__static_Protocol_TagSyncData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.TagSyncData, global::Protocol.TagSyncData.Builder>(internal__static_Protocol_TagSyncData__Descriptor,
                new string[] { "TagDataMergeList", "AddtagDataMergeList", "RemovetagDataMergeList", });
        internal__static_Protocol_AttributeSyncData__Descriptor = Descriptor.MessageTypes[12];
        internal__static_Protocol_AttributeSyncData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.AttributeSyncData, global::Protocol.AttributeSyncData.Builder>(internal__static_Protocol_AttributeSyncData__Descriptor,
                new string[] { "AttrMergeList", "InitAttrMergeList", "AddattrMergeList", "RemoveattrMergeList", "AddinitAttrMergeList", "RemoveinitAttrMergeList", });
        internal__static_Protocol_LifeSyncData__Descriptor = Descriptor.MessageTypes[13];
        internal__static_Protocol_LifeSyncData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.LifeSyncData, global::Protocol.LifeSyncData.Builder>(internal__static_Protocol_LifeSyncData__Descriptor,
                new string[] { "EntityHp", "EntityMaxHp", "Dead", });
        internal__static_Protocol_SkillCtrlSyncData__Descriptor = Descriptor.MessageTypes[14];
        internal__static_Protocol_SkillCtrlSyncData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.SkillCtrlSyncData, global::Protocol.SkillCtrlSyncData.Builder>(internal__static_Protocol_SkillCtrlSyncData__Descriptor,
                new string[] { "SkillsMergeList", "LockReleaseCount", "SkillIdMergeList", "AddskillsMergeList", "RemoveskillsMergeList", "AddskillIdMergeList", "RemoveskillIdMergeList", });
        internal__static_Protocol_BuffCtrlSyncData__Descriptor = Descriptor.MessageTypes[15];
        internal__static_Protocol_BuffCtrlSyncData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.BuffCtrlSyncData, global::Protocol.BuffCtrlSyncData.Builder>(internal__static_Protocol_BuffCtrlSyncData__Descriptor,
                new string[] { "BuffMergeList", "AddbuffMergeList", "RemovebuffMergeList", });
        internal__static_Protocol_BuffItem__Descriptor = Descriptor.MessageTypes[16];
        internal__static_Protocol_BuffItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.BuffItem, global::Protocol.BuffItem.Builder>(internal__static_Protocol_BuffItem__Descriptor,
                new string[] { "Id", "StepTime", "KeepLiveTime", "AddTime", "StartTime", "LastExecuteTime", "DelayTime", "BuffCount", "IsDelete", "BuffEffectMergeList", "DeleteTime", "AddbuffEffectMergeList", "RemovebuffEffectMergeList", });
        internal__static_Protocol_BuffEffectItem__Descriptor = Descriptor.MessageTypes[17];
        internal__static_Protocol_BuffEffectItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.BuffEffectItem, global::Protocol.BuffEffectItem.Builder>(internal__static_Protocol_BuffEffectItem__Descriptor,
                new string[] { "Id", "StepTime", "KeepLiveTime", "AddTime", "StartTime", "LastExecuteTime", "DelayTime", "IsComplete", "NeedResetOnRemove", "EffectAddValue", "EffectMultiValue", "DeleteTime", });
        internal__static_Protocol_SkillSyncData__Descriptor = Descriptor.MessageTypes[18];
        internal__static_Protocol_SkillSyncData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.SkillSyncData, global::Protocol.SkillSyncData.Builder>(internal__static_Protocol_SkillSyncData__Descriptor,
                new string[] { "Id", "RemainCd", });
        internal__static_Protocol_ThingSyncData__Descriptor = Descriptor.MessageTypes[19];
        internal__static_Protocol_ThingSyncData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.ThingSyncData, global::Protocol.ThingSyncData.Builder>(internal__static_Protocol_ThingSyncData__Descriptor,
                new string[] { "ThingId", "Type", "Id", "Collider", });
        internal__static_Protocol_HeroSyncData__Descriptor = Descriptor.MessageTypes[20];
        internal__static_Protocol_HeroSyncData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.HeroSyncData, global::Protocol.HeroSyncData.Builder>(internal__static_Protocol_HeroSyncData__Descriptor,
                new string[] { "HeroId", "SkinId", "ModelId", "HeroPowerType", });
        internal__static_Protocol_GMCommandReq__Descriptor = Descriptor.MessageTypes[21];
        internal__static_Protocol_GMCommandReq__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.GMCommandReq, global::Protocol.GMCommandReq.Builder>(internal__static_Protocol_GMCommandReq__Descriptor,
                new string[] { "Commands", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::yd_fieldoptions.YdFieldoptions.RegisterAllExtensions(registry);
        global::Protocol.ProtoCommon.RegisterAllExtensions(registry);
        global::Protocol.ProtoConfig.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::yd_fieldoptions.YdFieldoptions.Descriptor, 
          global::Protocol.ProtoCommon.Descriptor, 
          global::Protocol.ProtoConfig.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CreateEntityNotify : pb::GeneratedMessage<CreateEntityNotify, CreateEntityNotify.Builder> {
    public CreateEntityNotify() { }
    private static readonly CreateEntityNotify defaultInstance = new CreateEntityNotify().MakeReadOnly();
    private static readonly string[] _createEntityNotifyFieldNames = new string[] { "entity_data_list" };
    private static readonly uint[] _createEntityNotifyFieldTags = new uint[] { 10 };
    public static CreateEntityNotify DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CreateEntityNotify DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CreateEntityNotify ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_CreateEntityNotify__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CreateEntityNotify, CreateEntityNotify.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_CreateEntityNotify__FieldAccessorTable; }
    }
    
    public const int EntityDataListFieldNumber = 1;
    private pbc::PopsicleList<global::Protocol.EntitySyncData> entityDataList_ = new pbc::PopsicleList<global::Protocol.EntitySyncData>();
    public scg::IList<global::Protocol.EntitySyncData> EntityDataList {
      get { return pbc::Lists.AsReadOnly(entityDataList_); }
    }
    public int EntityDataListCount {
      get { return entityDataList_.Count; }
    }
    public global::Protocol.EntitySyncData GetEntityDataList(int index) {
      return entityDataList_[index];
    }
    public global::Protocol.EntitySyncData FindEntityDataList(System.Predicate<global::Protocol.EntitySyncData> match) {
      return entityDataList_.Find(match);
    }
    public System.Collections.Generic.IList<global::Protocol.EntitySyncData> FindAllEntityDataList(System.Predicate<global::Protocol.EntitySyncData> match) {
      return entityDataList_.FindAll(match);
    }
    public void SetEntityDataList(int index, global::Protocol.EntitySyncData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (index < 0 || index >= entityDataList_.Count) return;
      entityDataList_[index] = value;
    }
    public void AddEntityDataList(global::Protocol.EntitySyncData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      entityDataList_.Add(value);
    }
    public void AddRangeEntityDataList(scg::IEnumerable<global::Protocol.EntitySyncData> values) {
      entityDataList_.Add(values);
    }
    public void RemoveEntityDataList(global::Protocol.EntitySyncData value) {
      if (!entityDataList_.Contains(value)) return;
      entityDataList_.Remove(value);
    }
    public void RemoveAtEntityDataList(int index) {
      if (index < 0 || index >= entityDataList_.Count) return;
      entityDataList_.RemoveAt(index);
    }
    public void ClearEntityDataList() {
      if (entityDataList_.Count <= 0) return;
      entityDataList_.Clear();
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Protocol.EntitySyncData element in EntityDataList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _createEntityNotifyFieldNames;
      if (entityDataList_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], entityDataList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      foreach (global::Protocol.EntitySyncData element in EntityDataList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public CreateEntityNotify CommitChange() {
      CreateEntityNotify other = new CreateEntityNotify();
      bool isChange = false;
      isChange = true;
      other.entityDataList_.Add(entityDataList_);
      return isChange?other:null;
    }
    
    public void MergeFrom(CreateEntityNotify other, bool isFull = false) {
      if (other == global::Protocol.CreateEntityNotify.DefaultInstance) return;
        entityDataList_.Clear();
        entityDataList_.Add(other.entityDataList_);
    }
    
    public static CreateEntityNotify ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateEntityNotify ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateEntityNotify ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateEntityNotify ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateEntityNotify ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateEntityNotify ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CreateEntityNotify ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CreateEntityNotify ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CreateEntityNotify ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateEntityNotify ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CreateEntityNotify MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CreateEntityNotify prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CreateEntityNotify, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CreateEntityNotify cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CreateEntityNotify result;
      
      private CreateEntityNotify PrepareBuilder() {
        if (resultIsReadOnly) {
          CreateEntityNotify original = result;
          result = new CreateEntityNotify();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CreateEntityNotify MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.CreateEntityNotify.Descriptor; }
      }
      
      public override CreateEntityNotify DefaultInstanceForType {
        get { return global::Protocol.CreateEntityNotify.DefaultInstance; }
      }
      
      public override CreateEntityNotify BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CreateEntityNotify) {
          return MergeFrom((CreateEntityNotify) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CreateEntityNotify other) {
        if (other == global::Protocol.CreateEntityNotify.DefaultInstance) return this;
        PrepareBuilder();
        if (other.entityDataList_.Count != 0) {
          result.entityDataList_.Add(other.entityDataList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_createEntityNotifyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _createEntityNotifyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.entityDataList_, global::Protocol.EntitySyncData.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Protocol.EntitySyncData> EntityDataList {
        get { return PrepareBuilder().entityDataList_; }
      }
      public int EntityDataListCount {
        get { return result.EntityDataListCount; }
      }
      public global::Protocol.EntitySyncData GetEntityDataList(int index) {
        return result.GetEntityDataList(index);
      }
      public Builder SetEntityDataList(int index, global::Protocol.EntitySyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entityDataList_[index] = value;
        return this;
      }
      public Builder SetEntityDataList(int index, global::Protocol.EntitySyncData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entityDataList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEntityDataList(global::Protocol.EntitySyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entityDataList_.Add(value);
        return this;
      }
      public Builder AddEntityDataList(global::Protocol.EntitySyncData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entityDataList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEntityDataList(scg::IEnumerable<global::Protocol.EntitySyncData> values) {
        PrepareBuilder();
        result.entityDataList_.Add(values);
        return this;
      }
      public Builder ClearEntityDataList() {
        PrepareBuilder();
        result.entityDataList_.Clear();
        return this;
      }
    }
    static CreateEntityNotify() {
      object.ReferenceEquals(global::Protocol.ProtoBattle.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DeleteEntityNotify : pb::GeneratedMessage<DeleteEntityNotify, DeleteEntityNotify.Builder> {
    public DeleteEntityNotify() { }
    private static readonly DeleteEntityNotify defaultInstance = new DeleteEntityNotify().MakeReadOnly();
    private static readonly string[] _deleteEntityNotifyFieldNames = new string[] { "entity_id_list" };
    private static readonly uint[] _deleteEntityNotifyFieldTags = new uint[] { 8 };
    public static DeleteEntityNotify DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DeleteEntityNotify DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DeleteEntityNotify ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_DeleteEntityNotify__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DeleteEntityNotify, DeleteEntityNotify.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_DeleteEntityNotify__FieldAccessorTable; }
    }
    
    public const int EntityIdListFieldNumber = 1;
    private pbc::PopsicleList<uint> entityIdList_ = new pbc::PopsicleList<uint>();
    private bool isEntityIdListChanged = true;
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> EntityIdList {
      get { return pbc::Lists.AsReadOnly(entityIdList_); }
    }
    public int EntityIdListCount {
      get { return entityIdList_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetEntityIdList(int index) {
      return entityIdList_[index];
    }
    [global::System.CLSCompliant(false)]
    public void SetEntityIdList(int index, uint value) {
      if (index < 0 || index >= entityIdList_.Count) return;
      entityIdList_[index] = value;
      isEntityIdListChanged = true;
    }
    [global::System.CLSCompliant(false)]
    public void AddEntityIdList(uint value) {
      entityIdList_.Add(value);
      isEntityIdListChanged = true;
    }
    [global::System.CLSCompliant(false)]
    public void AddRangeEntityIdList(scg::IEnumerable<uint> values) {
      entityIdList_.Add(values);
      isEntityIdListChanged = true;
    }
    public void RemoveEntityIdList(uint value) {
      if (!entityIdList_.Contains(value)) return;
      entityIdList_.Remove(value);
      isEntityIdListChanged = true;
    }
    public void RemoveAtEntityIdList(int index) {
      if (index < 0 || index >= entityIdList_.Count) return;
      entityIdList_.RemoveAt(index);
      isEntityIdListChanged = true;
    }
    public void ClearEntityIdList() {
      if (entityIdList_.Count <= 0) return;
      entityIdList_.Clear();
      isEntityIdListChanged = true;
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _deleteEntityNotifyFieldNames;
      if (entityIdList_.Count > 0) {
        output.WriteUInt32Array(1, field_names[0], entityIdList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      {
        int dataSize = 0;
        foreach (uint element in EntityIdList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * entityIdList_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public DeleteEntityNotify CommitChange() {
      DeleteEntityNotify other = new DeleteEntityNotify();
      bool isChange = false;
        isChange = true;
        other.entityIdList_.Add(entityIdList_);
      return isChange?other:null;
    }
    
    public void MergeFrom(DeleteEntityNotify other, bool isFull = false) {
      if (other == global::Protocol.DeleteEntityNotify.DefaultInstance) return;
      if (other.entityIdList_.Count != 0) {
        entityIdList_.Clear();
        entityIdList_.Add(other.entityIdList_);
      }
    }
    
    public static DeleteEntityNotify ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeleteEntityNotify ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeleteEntityNotify ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeleteEntityNotify ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeleteEntityNotify ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeleteEntityNotify ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DeleteEntityNotify ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DeleteEntityNotify ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DeleteEntityNotify ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeleteEntityNotify ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DeleteEntityNotify MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DeleteEntityNotify prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DeleteEntityNotify, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DeleteEntityNotify cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DeleteEntityNotify result;
      
      private DeleteEntityNotify PrepareBuilder() {
        if (resultIsReadOnly) {
          DeleteEntityNotify original = result;
          result = new DeleteEntityNotify();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DeleteEntityNotify MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.DeleteEntityNotify.Descriptor; }
      }
      
      public override DeleteEntityNotify DefaultInstanceForType {
        get { return global::Protocol.DeleteEntityNotify.DefaultInstance; }
      }
      
      public override DeleteEntityNotify BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DeleteEntityNotify) {
          return MergeFrom((DeleteEntityNotify) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DeleteEntityNotify other) {
        if (other == global::Protocol.DeleteEntityNotify.DefaultInstance) return this;
        PrepareBuilder();
        if (other.entityIdList_.Count != 0) {
          result.entityIdList_.Add(other.entityIdList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_deleteEntityNotifyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _deleteEntityNotifyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadUInt32Array(tag, field_name, result.entityIdList_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> EntityIdList {
        get { return PrepareBuilder().entityIdList_; }
      }
      public int EntityIdListCount {
        get { return result.EntityIdListCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetEntityIdList(int index) {
        return result.GetEntityIdList(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetEntityIdList(int index, uint value) {
        PrepareBuilder();
        result.entityIdList_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddEntityIdList(uint value) {
        PrepareBuilder();
        result.entityIdList_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeEntityIdList(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.entityIdList_.Add(values);
        return this;
      }
      public Builder ClearEntityIdList() {
        PrepareBuilder();
        result.entityIdList_.Clear();
        return this;
      }
    }
    static DeleteEntityNotify() {
      object.ReferenceEquals(global::Protocol.ProtoBattle.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MoveActionMsg : pb::GeneratedMessage<MoveActionMsg, MoveActionMsg.Builder> {
    public MoveActionMsg() { }
    private static readonly MoveActionMsg defaultInstance = new MoveActionMsg().MakeReadOnly();
    private static readonly string[] _moveActionMsgFieldNames = new string[] { "blender_x", "blender_y", "entity_id", "ignore_lock", "lock_target_id", "motion", "move_angle", "move_state", "view_pitch", "view_row" };
    private static readonly uint[] _moveActionMsgFieldTags = new uint[] { 77, 85, 8, 48, 64, 56, 29, 16, 40, 32 };
    public static MoveActionMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MoveActionMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MoveActionMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_MoveActionMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MoveActionMsg, MoveActionMsg.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_MoveActionMsg__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private bool isEntityIdChanged = true;
    private uint entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    [global::System.CLSCompliant(false)]
    public uint EntityId {
      get { return entityId_; }
      set { hasEntityId = true;
        isEntityIdChanged = true;
        entityId_ = value;}
    }
    
    public const int MoveStateFieldNumber = 2;
    private bool hasMoveState;
    private bool isMoveStateChanged = true;
    private uint moveState_;
    public bool HasMoveState {
      get { return hasMoveState; }
    }
    [global::System.CLSCompliant(false)]
    public uint MoveState {
      get { return moveState_; }
      set { hasMoveState = true;
        isMoveStateChanged = true;
        moveState_ = value;}
    }
    
    public const int MoveAngleFieldNumber = 3;
    private bool hasMoveAngle;
    private bool isMoveAngleChanged = true;
    private float moveAngle_;
    public bool HasMoveAngle {
      get { return hasMoveAngle; }
    }
    public float MoveAngle {
      get { return moveAngle_; }
      set { hasMoveAngle = true;
        isMoveAngleChanged = true;
        moveAngle_ = value;}
    }
    
    public const int ViewRowFieldNumber = 4;
    private bool hasViewRow;
    private bool isViewRowChanged = true;
    private int viewRow_;
    public bool HasViewRow {
      get { return hasViewRow; }
    }
    public int ViewRow {
      get { return viewRow_; }
      set { hasViewRow = true;
        isViewRowChanged = true;
        viewRow_ = value;}
    }
    
    public const int ViewPitchFieldNumber = 5;
    private bool hasViewPitch;
    private bool isViewPitchChanged = true;
    private int viewPitch_;
    public bool HasViewPitch {
      get { return hasViewPitch; }
    }
    public int ViewPitch {
      get { return viewPitch_; }
      set { hasViewPitch = true;
        isViewPitchChanged = true;
        viewPitch_ = value;}
    }
    
    public const int IgnoreLockFieldNumber = 6;
    private bool hasIgnoreLock;
    private bool isIgnoreLockChanged = true;
    private bool ignoreLock_;
    public bool HasIgnoreLock {
      get { return hasIgnoreLock; }
    }
    public bool IgnoreLock {
      get { return ignoreLock_; }
      set { hasIgnoreLock = true;
        isIgnoreLockChanged = true;
        ignoreLock_ = value;}
    }
    
    public const int MotionFieldNumber = 7;
    private bool hasMotion;
    private bool isMotionChanged = true;
    private uint motion_;
    public bool HasMotion {
      get { return hasMotion; }
    }
    [global::System.CLSCompliant(false)]
    public uint Motion {
      get { return motion_; }
      set { hasMotion = true;
        isMotionChanged = true;
        motion_ = value;}
    }
    
    public const int LockTargetIdFieldNumber = 8;
    private bool hasLockTargetId;
    private bool isLockTargetIdChanged = true;
    private uint lockTargetId_;
    public bool HasLockTargetId {
      get { return hasLockTargetId; }
    }
    [global::System.CLSCompliant(false)]
    public uint LockTargetId {
      get { return lockTargetId_; }
      set { hasLockTargetId = true;
        isLockTargetIdChanged = true;
        lockTargetId_ = value;}
    }
    
    public const int BlenderXFieldNumber = 9;
    private bool hasBlenderX;
    private bool isBlenderXChanged = true;
    private float blenderX_;
    public bool HasBlenderX {
      get { return hasBlenderX; }
    }
    public float BlenderX {
      get { return blenderX_; }
      set { hasBlenderX = true;
        isBlenderXChanged = true;
        blenderX_ = value;}
    }
    
    public const int BlenderYFieldNumber = 10;
    private bool hasBlenderY;
    private bool isBlenderYChanged = true;
    private float blenderY_;
    public bool HasBlenderY {
      get { return hasBlenderY; }
    }
    public float BlenderY {
      get { return blenderY_; }
      set { hasBlenderY = true;
        isBlenderYChanged = true;
        blenderY_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _moveActionMsgFieldNames;
      if (hasEntityId) {
        output.WriteUInt32(1, field_names[2], EntityId);
      }
      if (hasMoveState) {
        output.WriteUInt32(2, field_names[7], MoveState);
      }
      if (hasMoveAngle) {
        output.WriteFloat(3, field_names[6], MoveAngle);
      }
      if (hasViewRow) {
        output.WriteInt32(4, field_names[9], ViewRow);
      }
      if (hasViewPitch) {
        output.WriteInt32(5, field_names[8], ViewPitch);
      }
      if (hasIgnoreLock) {
        output.WriteBool(6, field_names[3], IgnoreLock);
      }
      if (hasMotion) {
        output.WriteUInt32(7, field_names[5], Motion);
      }
      if (hasLockTargetId) {
        output.WriteUInt32(8, field_names[4], LockTargetId);
      }
      if (hasBlenderX) {
        output.WriteFloat(9, field_names[0], BlenderX);
      }
      if (hasBlenderY) {
        output.WriteFloat(10, field_names[1], BlenderY);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasEntityId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, EntityId);
      }
      if (hasMoveState) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, MoveState);
      }
      if (hasMoveAngle) {
        size += pb::CodedOutputStream.ComputeFloatSize(3, MoveAngle);
      }
      if (hasViewRow) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, ViewRow);
      }
      if (hasViewPitch) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, ViewPitch);
      }
      if (hasIgnoreLock) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, IgnoreLock);
      }
      if (hasMotion) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, Motion);
      }
      if (hasLockTargetId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, LockTargetId);
      }
      if (hasBlenderX) {
        size += pb::CodedOutputStream.ComputeFloatSize(9, BlenderX);
      }
      if (hasBlenderY) {
        size += pb::CodedOutputStream.ComputeFloatSize(10, BlenderY);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public MoveActionMsg CommitChange() {
      MoveActionMsg other = new MoveActionMsg();
      bool isChange = false;
      if (isEntityIdChanged) {
        isChange = true;
        other.EntityId = EntityId;
        isEntityIdChanged = false;
      }
      if (isMoveStateChanged) {
        isChange = true;
        other.MoveState = MoveState;
        isMoveStateChanged = false;
      }
      if (isMoveAngleChanged) {
        isChange = true;
        other.MoveAngle = MoveAngle;
        isMoveAngleChanged = false;
      }
      if (isViewRowChanged) {
        isChange = true;
        other.ViewRow = ViewRow;
        isViewRowChanged = false;
      }
      if (isViewPitchChanged) {
        isChange = true;
        other.ViewPitch = ViewPitch;
        isViewPitchChanged = false;
      }
      if (isIgnoreLockChanged) {
        isChange = true;
        other.IgnoreLock = IgnoreLock;
        isIgnoreLockChanged = false;
      }
      if (isMotionChanged) {
        isChange = true;
        other.Motion = Motion;
        isMotionChanged = false;
      }
      if (isLockTargetIdChanged) {
        isChange = true;
        other.LockTargetId = LockTargetId;
        isLockTargetIdChanged = false;
      }
      if (isBlenderXChanged) {
        isChange = true;
        other.BlenderX = BlenderX;
        isBlenderXChanged = false;
      }
      if (isBlenderYChanged) {
        isChange = true;
        other.BlenderY = BlenderY;
        isBlenderYChanged = false;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(MoveActionMsg other, bool isFull = false) {
      if (other == global::Protocol.MoveActionMsg.DefaultInstance) return;
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasMoveState) {
        MoveState = other.MoveState;
      }
      if (other.HasMoveAngle) {
        MoveAngle = other.MoveAngle;
      }
      if (other.HasViewRow) {
        ViewRow = other.ViewRow;
      }
      if (other.HasViewPitch) {
        ViewPitch = other.ViewPitch;
      }
      if (other.HasIgnoreLock) {
        IgnoreLock = other.IgnoreLock;
      }
      if (other.HasMotion) {
        Motion = other.Motion;
      }
      if (other.HasLockTargetId) {
        LockTargetId = other.LockTargetId;
      }
      if (other.HasBlenderX) {
        BlenderX = other.BlenderX;
      }
      if (other.HasBlenderY) {
        BlenderY = other.BlenderY;
      }
    }
    
    public static MoveActionMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MoveActionMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MoveActionMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MoveActionMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MoveActionMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MoveActionMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MoveActionMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MoveActionMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MoveActionMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MoveActionMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MoveActionMsg MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MoveActionMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MoveActionMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MoveActionMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MoveActionMsg result;
      
      private MoveActionMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          MoveActionMsg original = result;
          result = new MoveActionMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MoveActionMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.MoveActionMsg.Descriptor; }
      }
      
      public override MoveActionMsg DefaultInstanceForType {
        get { return global::Protocol.MoveActionMsg.DefaultInstance; }
      }
      
      public override MoveActionMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MoveActionMsg) {
          return MergeFrom((MoveActionMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MoveActionMsg other) {
        if (other == global::Protocol.MoveActionMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          EntityId = other.EntityId;
        }
        if (other.HasMoveState) {
          MoveState = other.MoveState;
        }
        if (other.HasMoveAngle) {
          MoveAngle = other.MoveAngle;
        }
        if (other.HasViewRow) {
          ViewRow = other.ViewRow;
        }
        if (other.HasViewPitch) {
          ViewPitch = other.ViewPitch;
        }
        if (other.HasIgnoreLock) {
          IgnoreLock = other.IgnoreLock;
        }
        if (other.HasMotion) {
          Motion = other.Motion;
        }
        if (other.HasLockTargetId) {
          LockTargetId = other.LockTargetId;
        }
        if (other.HasBlenderX) {
          BlenderX = other.BlenderX;
        }
        if (other.HasBlenderY) {
          BlenderY = other.BlenderY;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_moveActionMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _moveActionMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityId = input.ReadUInt32(ref result.entityId_);
              break;
            }
            case 16: {
              result.hasMoveState = input.ReadUInt32(ref result.moveState_);
              break;
            }
            case 29: {
              result.hasMoveAngle = input.ReadFloat(ref result.moveAngle_);
              break;
            }
            case 32: {
              result.hasViewRow = input.ReadInt32(ref result.viewRow_);
              break;
            }
            case 40: {
              result.hasViewPitch = input.ReadInt32(ref result.viewPitch_);
              break;
            }
            case 48: {
              result.hasIgnoreLock = input.ReadBool(ref result.ignoreLock_);
              break;
            }
            case 56: {
              result.hasMotion = input.ReadUInt32(ref result.motion_);
              break;
            }
            case 64: {
              result.hasLockTargetId = input.ReadUInt32(ref result.lockTargetId_);
              break;
            }
            case 77: {
              result.hasBlenderX = input.ReadFloat(ref result.blenderX_);
              break;
            }
            case 85: {
              result.hasBlenderY = input.ReadFloat(ref result.blenderY_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
        get { return result.hasEntityId; }
      }
      [global::System.CLSCompliant(false)]
      public uint EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetEntityId(uint value) {
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = 0;
        return this;
      }
      
      public bool HasMoveState {
        get { return result.hasMoveState; }
      }
      [global::System.CLSCompliant(false)]
      public uint MoveState {
        get { return result.MoveState; }
        set { SetMoveState(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMoveState(uint value) {
        PrepareBuilder();
        result.hasMoveState = true;
        result.moveState_ = value;
        return this;
      }
      public Builder ClearMoveState() {
        PrepareBuilder();
        result.hasMoveState = false;
        result.moveState_ = 0;
        return this;
      }
      
      public bool HasMoveAngle {
        get { return result.hasMoveAngle; }
      }
      public float MoveAngle {
        get { return result.MoveAngle; }
        set { SetMoveAngle(value); }
      }
      public Builder SetMoveAngle(float value) {
        PrepareBuilder();
        result.hasMoveAngle = true;
        result.moveAngle_ = value;
        return this;
      }
      public Builder ClearMoveAngle() {
        PrepareBuilder();
        result.hasMoveAngle = false;
        result.moveAngle_ = 0F;
        return this;
      }
      
      public bool HasViewRow {
        get { return result.hasViewRow; }
      }
      public int ViewRow {
        get { return result.ViewRow; }
        set { SetViewRow(value); }
      }
      public Builder SetViewRow(int value) {
        PrepareBuilder();
        result.hasViewRow = true;
        result.viewRow_ = value;
        return this;
      }
      public Builder ClearViewRow() {
        PrepareBuilder();
        result.hasViewRow = false;
        result.viewRow_ = 0;
        return this;
      }
      
      public bool HasViewPitch {
        get { return result.hasViewPitch; }
      }
      public int ViewPitch {
        get { return result.ViewPitch; }
        set { SetViewPitch(value); }
      }
      public Builder SetViewPitch(int value) {
        PrepareBuilder();
        result.hasViewPitch = true;
        result.viewPitch_ = value;
        return this;
      }
      public Builder ClearViewPitch() {
        PrepareBuilder();
        result.hasViewPitch = false;
        result.viewPitch_ = 0;
        return this;
      }
      
      public bool HasIgnoreLock {
        get { return result.hasIgnoreLock; }
      }
      public bool IgnoreLock {
        get { return result.IgnoreLock; }
        set { SetIgnoreLock(value); }
      }
      public Builder SetIgnoreLock(bool value) {
        PrepareBuilder();
        result.hasIgnoreLock = true;
        result.ignoreLock_ = value;
        return this;
      }
      public Builder ClearIgnoreLock() {
        PrepareBuilder();
        result.hasIgnoreLock = false;
        result.ignoreLock_ = false;
        return this;
      }
      
      public bool HasMotion {
        get { return result.hasMotion; }
      }
      [global::System.CLSCompliant(false)]
      public uint Motion {
        get { return result.Motion; }
        set { SetMotion(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMotion(uint value) {
        PrepareBuilder();
        result.hasMotion = true;
        result.motion_ = value;
        return this;
      }
      public Builder ClearMotion() {
        PrepareBuilder();
        result.hasMotion = false;
        result.motion_ = 0;
        return this;
      }
      
      public bool HasLockTargetId {
        get { return result.hasLockTargetId; }
      }
      [global::System.CLSCompliant(false)]
      public uint LockTargetId {
        get { return result.LockTargetId; }
        set { SetLockTargetId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLockTargetId(uint value) {
        PrepareBuilder();
        result.hasLockTargetId = true;
        result.lockTargetId_ = value;
        return this;
      }
      public Builder ClearLockTargetId() {
        PrepareBuilder();
        result.hasLockTargetId = false;
        result.lockTargetId_ = 0;
        return this;
      }
      
      public bool HasBlenderX {
        get { return result.hasBlenderX; }
      }
      public float BlenderX {
        get { return result.BlenderX; }
        set { SetBlenderX(value); }
      }
      public Builder SetBlenderX(float value) {
        PrepareBuilder();
        result.hasBlenderX = true;
        result.blenderX_ = value;
        return this;
      }
      public Builder ClearBlenderX() {
        PrepareBuilder();
        result.hasBlenderX = false;
        result.blenderX_ = 0F;
        return this;
      }
      
      public bool HasBlenderY {
        get { return result.hasBlenderY; }
      }
      public float BlenderY {
        get { return result.BlenderY; }
        set { SetBlenderY(value); }
      }
      public Builder SetBlenderY(float value) {
        PrepareBuilder();
        result.hasBlenderY = true;
        result.blenderY_ = value;
        return this;
      }
      public Builder ClearBlenderY() {
        PrepareBuilder();
        result.hasBlenderY = false;
        result.blenderY_ = 0F;
        return this;
      }
    }
    static MoveActionMsg() {
      object.ReferenceEquals(global::Protocol.ProtoBattle.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ActionMoveMsg : pb::GeneratedMessage<ActionMoveMsg, ActionMoveMsg.Builder> {
    public ActionMoveMsg() { }
    private static readonly ActionMoveMsg defaultInstance = new ActionMoveMsg().MakeReadOnly();
    private static readonly string[] _actionMoveMsgFieldNames = new string[] { "aim_state", "entity_id", "ignore_lock", "in_situ", "move", "move_angle", "run", "view_pitch", "view_row" };
    private static readonly uint[] _actionMoveMsgFieldTags = new uint[] { 72, 8, 64, 56, 16, 24, 32, 48, 40 };
    public static ActionMoveMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ActionMoveMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ActionMoveMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_ActionMoveMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ActionMoveMsg, ActionMoveMsg.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_ActionMoveMsg__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private uint entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    [global::System.CLSCompliant(false)]
    public uint EntityId {
      get { return entityId_; }
      set { hasEntityId = true;
        entityId_ = value;}
    }
    
    public const int MoveFieldNumber = 2;
    private bool hasMove;
    private bool isMoveChanged = true;
    private bool move_;
    public bool HasMove {
      get { return hasMove; }
    }
    public bool Move {
      get { return move_; }
      set { hasMove = true;
        isMoveChanged = true;
        move_ = value;}
    }
    
    public const int MoveAngleFieldNumber = 3;
    private bool hasMoveAngle;
    private bool isMoveAngleChanged = true;
    private int moveAngle_;
    public bool HasMoveAngle {
      get { return hasMoveAngle; }
    }
    public int MoveAngle {
      get { return moveAngle_; }
      set { hasMoveAngle = true;
        isMoveAngleChanged = true;
        moveAngle_ = value;}
    }
    
    public const int RunFieldNumber = 4;
    private bool hasRun;
    private bool isRunChanged = true;
    private bool run_;
    public bool HasRun {
      get { return hasRun; }
    }
    public bool Run {
      get { return run_; }
      set { hasRun = true;
        isRunChanged = true;
        run_ = value;}
    }
    
    public const int ViewRowFieldNumber = 5;
    private bool hasViewRow;
    private bool isViewRowChanged = true;
    private int viewRow_;
    public bool HasViewRow {
      get { return hasViewRow; }
    }
    public int ViewRow {
      get { return viewRow_; }
      set { hasViewRow = true;
        isViewRowChanged = true;
        viewRow_ = value;}
    }
    
    public const int ViewPitchFieldNumber = 6;
    private bool hasViewPitch;
    private bool isViewPitchChanged = true;
    private int viewPitch_;
    public bool HasViewPitch {
      get { return hasViewPitch; }
    }
    public int ViewPitch {
      get { return viewPitch_; }
      set { hasViewPitch = true;
        isViewPitchChanged = true;
        viewPitch_ = value;}
    }
    
    public const int InSituFieldNumber = 7;
    private bool hasInSitu;
    private bool isInSituChanged = true;
    private bool inSitu_;
    public bool HasInSitu {
      get { return hasInSitu; }
    }
    public bool InSitu {
      get { return inSitu_; }
      set { hasInSitu = true;
        isInSituChanged = true;
        inSitu_ = value;}
    }
    
    public const int IgnoreLockFieldNumber = 8;
    private bool hasIgnoreLock;
    private bool isIgnoreLockChanged = true;
    private bool ignoreLock_;
    public bool HasIgnoreLock {
      get { return hasIgnoreLock; }
    }
    public bool IgnoreLock {
      get { return ignoreLock_; }
      set { hasIgnoreLock = true;
        isIgnoreLockChanged = true;
        ignoreLock_ = value;}
    }
    
    public const int AimStateFieldNumber = 9;
    private bool hasAimState;
    private bool isAimStateChanged = true;
    private bool aimState_;
    public bool HasAimState {
      get { return hasAimState; }
    }
    public bool AimState {
      get { return aimState_; }
      set { hasAimState = true;
        isAimStateChanged = true;
        aimState_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _actionMoveMsgFieldNames;
      if (hasEntityId) {
        output.WriteUInt32(1, field_names[1], EntityId);
      }
      if (hasMove) {
        output.WriteBool(2, field_names[4], Move);
      }
      if (hasMoveAngle) {
        output.WriteInt32(3, field_names[5], MoveAngle);
      }
      if (hasRun) {
        output.WriteBool(4, field_names[6], Run);
      }
      if (hasViewRow) {
        output.WriteInt32(5, field_names[8], ViewRow);
      }
      if (hasViewPitch) {
        output.WriteInt32(6, field_names[7], ViewPitch);
      }
      if (hasInSitu) {
        output.WriteBool(7, field_names[3], InSitu);
      }
      if (hasIgnoreLock) {
        output.WriteBool(8, field_names[2], IgnoreLock);
      }
      if (hasAimState) {
        output.WriteBool(9, field_names[0], AimState);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasEntityId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, EntityId);
      }
      if (hasMove) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Move);
      }
      if (hasMoveAngle) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, MoveAngle);
      }
      if (hasRun) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, Run);
      }
      if (hasViewRow) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, ViewRow);
      }
      if (hasViewPitch) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, ViewPitch);
      }
      if (hasInSitu) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, InSitu);
      }
      if (hasIgnoreLock) {
        size += pb::CodedOutputStream.ComputeBoolSize(8, IgnoreLock);
      }
      if (hasAimState) {
        size += pb::CodedOutputStream.ComputeBoolSize(9, AimState);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public ActionMoveMsg CommitChange() {
      ActionMoveMsg other = new ActionMoveMsg();
      bool isChange = false;
      other.EntityId = EntityId;
      if (isMoveChanged) {
        isChange = true;
        other.Move = Move;
        isMoveChanged = false;
      }
      if (isMoveAngleChanged) {
        isChange = true;
        other.MoveAngle = MoveAngle;
        isMoveAngleChanged = false;
      }
      if (isRunChanged) {
        isChange = true;
        other.Run = Run;
        isRunChanged = false;
      }
      if (isViewRowChanged) {
        isChange = true;
        other.ViewRow = ViewRow;
        isViewRowChanged = false;
      }
      if (isViewPitchChanged) {
        isChange = true;
        other.ViewPitch = ViewPitch;
        isViewPitchChanged = false;
      }
      if (isInSituChanged) {
        isChange = true;
        other.InSitu = InSitu;
        isInSituChanged = false;
      }
      if (isIgnoreLockChanged) {
        isChange = true;
        other.IgnoreLock = IgnoreLock;
        isIgnoreLockChanged = false;
      }
      if (isAimStateChanged) {
        isChange = true;
        other.AimState = AimState;
        isAimStateChanged = false;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(ActionMoveMsg other, bool isFull = false) {
      if (other == global::Protocol.ActionMoveMsg.DefaultInstance) return;
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasMove) {
        Move = other.Move;
      }
      if (other.HasMoveAngle) {
        MoveAngle = other.MoveAngle;
      }
      if (other.HasRun) {
        Run = other.Run;
      }
      if (other.HasViewRow) {
        ViewRow = other.ViewRow;
      }
      if (other.HasViewPitch) {
        ViewPitch = other.ViewPitch;
      }
      if (other.HasInSitu) {
        InSitu = other.InSitu;
      }
      if (other.HasIgnoreLock) {
        IgnoreLock = other.IgnoreLock;
      }
      if (other.HasAimState) {
        AimState = other.AimState;
      }
    }
    
    public static ActionMoveMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ActionMoveMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ActionMoveMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ActionMoveMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ActionMoveMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ActionMoveMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ActionMoveMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ActionMoveMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ActionMoveMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ActionMoveMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ActionMoveMsg MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ActionMoveMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ActionMoveMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ActionMoveMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ActionMoveMsg result;
      
      private ActionMoveMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          ActionMoveMsg original = result;
          result = new ActionMoveMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ActionMoveMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.ActionMoveMsg.Descriptor; }
      }
      
      public override ActionMoveMsg DefaultInstanceForType {
        get { return global::Protocol.ActionMoveMsg.DefaultInstance; }
      }
      
      public override ActionMoveMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ActionMoveMsg) {
          return MergeFrom((ActionMoveMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ActionMoveMsg other) {
        if (other == global::Protocol.ActionMoveMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          EntityId = other.EntityId;
        }
        if (other.HasMove) {
          Move = other.Move;
        }
        if (other.HasMoveAngle) {
          MoveAngle = other.MoveAngle;
        }
        if (other.HasRun) {
          Run = other.Run;
        }
        if (other.HasViewRow) {
          ViewRow = other.ViewRow;
        }
        if (other.HasViewPitch) {
          ViewPitch = other.ViewPitch;
        }
        if (other.HasInSitu) {
          InSitu = other.InSitu;
        }
        if (other.HasIgnoreLock) {
          IgnoreLock = other.IgnoreLock;
        }
        if (other.HasAimState) {
          AimState = other.AimState;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_actionMoveMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _actionMoveMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityId = input.ReadUInt32(ref result.entityId_);
              break;
            }
            case 16: {
              result.hasMove = input.ReadBool(ref result.move_);
              break;
            }
            case 24: {
              result.hasMoveAngle = input.ReadInt32(ref result.moveAngle_);
              break;
            }
            case 32: {
              result.hasRun = input.ReadBool(ref result.run_);
              break;
            }
            case 40: {
              result.hasViewRow = input.ReadInt32(ref result.viewRow_);
              break;
            }
            case 48: {
              result.hasViewPitch = input.ReadInt32(ref result.viewPitch_);
              break;
            }
            case 56: {
              result.hasInSitu = input.ReadBool(ref result.inSitu_);
              break;
            }
            case 64: {
              result.hasIgnoreLock = input.ReadBool(ref result.ignoreLock_);
              break;
            }
            case 72: {
              result.hasAimState = input.ReadBool(ref result.aimState_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
        get { return result.hasEntityId; }
      }
      [global::System.CLSCompliant(false)]
      public uint EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetEntityId(uint value) {
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = 0;
        return this;
      }
      
      public bool HasMove {
        get { return result.hasMove; }
      }
      public bool Move {
        get { return result.Move; }
        set { SetMove(value); }
      }
      public Builder SetMove(bool value) {
        PrepareBuilder();
        result.hasMove = true;
        result.move_ = value;
        return this;
      }
      public Builder ClearMove() {
        PrepareBuilder();
        result.hasMove = false;
        result.move_ = false;
        return this;
      }
      
      public bool HasMoveAngle {
        get { return result.hasMoveAngle; }
      }
      public int MoveAngle {
        get { return result.MoveAngle; }
        set { SetMoveAngle(value); }
      }
      public Builder SetMoveAngle(int value) {
        PrepareBuilder();
        result.hasMoveAngle = true;
        result.moveAngle_ = value;
        return this;
      }
      public Builder ClearMoveAngle() {
        PrepareBuilder();
        result.hasMoveAngle = false;
        result.moveAngle_ = 0;
        return this;
      }
      
      public bool HasRun {
        get { return result.hasRun; }
      }
      public bool Run {
        get { return result.Run; }
        set { SetRun(value); }
      }
      public Builder SetRun(bool value) {
        PrepareBuilder();
        result.hasRun = true;
        result.run_ = value;
        return this;
      }
      public Builder ClearRun() {
        PrepareBuilder();
        result.hasRun = false;
        result.run_ = false;
        return this;
      }
      
      public bool HasViewRow {
        get { return result.hasViewRow; }
      }
      public int ViewRow {
        get { return result.ViewRow; }
        set { SetViewRow(value); }
      }
      public Builder SetViewRow(int value) {
        PrepareBuilder();
        result.hasViewRow = true;
        result.viewRow_ = value;
        return this;
      }
      public Builder ClearViewRow() {
        PrepareBuilder();
        result.hasViewRow = false;
        result.viewRow_ = 0;
        return this;
      }
      
      public bool HasViewPitch {
        get { return result.hasViewPitch; }
      }
      public int ViewPitch {
        get { return result.ViewPitch; }
        set { SetViewPitch(value); }
      }
      public Builder SetViewPitch(int value) {
        PrepareBuilder();
        result.hasViewPitch = true;
        result.viewPitch_ = value;
        return this;
      }
      public Builder ClearViewPitch() {
        PrepareBuilder();
        result.hasViewPitch = false;
        result.viewPitch_ = 0;
        return this;
      }
      
      public bool HasInSitu {
        get { return result.hasInSitu; }
      }
      public bool InSitu {
        get { return result.InSitu; }
        set { SetInSitu(value); }
      }
      public Builder SetInSitu(bool value) {
        PrepareBuilder();
        result.hasInSitu = true;
        result.inSitu_ = value;
        return this;
      }
      public Builder ClearInSitu() {
        PrepareBuilder();
        result.hasInSitu = false;
        result.inSitu_ = false;
        return this;
      }
      
      public bool HasIgnoreLock {
        get { return result.hasIgnoreLock; }
      }
      public bool IgnoreLock {
        get { return result.IgnoreLock; }
        set { SetIgnoreLock(value); }
      }
      public Builder SetIgnoreLock(bool value) {
        PrepareBuilder();
        result.hasIgnoreLock = true;
        result.ignoreLock_ = value;
        return this;
      }
      public Builder ClearIgnoreLock() {
        PrepareBuilder();
        result.hasIgnoreLock = false;
        result.ignoreLock_ = false;
        return this;
      }
      
      public bool HasAimState {
        get { return result.hasAimState; }
      }
      public bool AimState {
        get { return result.AimState; }
        set { SetAimState(value); }
      }
      public Builder SetAimState(bool value) {
        PrepareBuilder();
        result.hasAimState = true;
        result.aimState_ = value;
        return this;
      }
      public Builder ClearAimState() {
        PrepareBuilder();
        result.hasAimState = false;
        result.aimState_ = false;
        return this;
      }
    }
    static ActionMoveMsg() {
      object.ReferenceEquals(global::Protocol.ProtoBattle.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StateMsg : pb::GeneratedMessage<StateMsg, StateMsg.Builder> {
    public StateMsg() { }
    private static readonly StateMsg defaultInstance = new StateMsg().MakeReadOnly();
    private static readonly string[] _stateMsgFieldNames = new string[] { "addentitys_merge_list", "entitys_merge_list", "frame", "removeentitys_merge_list" };
    private static readonly uint[] _stateMsgFieldTags = new uint[] { 8026, 26, 8, 16024 };
    public static StateMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StateMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StateMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_StateMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StateMsg, StateMsg.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_StateMsg__FieldAccessorTable; }
    }
    
    public const int FrameFieldNumber = 1;
    private bool hasFrame;
    private bool isFrameChanged = true;
    private uint frame_;
    public bool HasFrame {
      get { return hasFrame; }
    }
    [global::System.CLSCompliant(false)]
    public uint Frame {
      get { return frame_; }
      set { hasFrame = true;
        isFrameChanged = true;
        frame_ = value;}
    }
    
    public const int EntitysMergeListFieldNumber = 3;
    private pbc::PopsicleList<global::Protocol.EntitySyncData> entitysMergeList_ = new pbc::PopsicleList<global::Protocol.EntitySyncData>();
    public scg::IList<global::Protocol.EntitySyncData> EntitysMergeList {
      get { return pbc::Lists.AsReadOnly(entitysMergeList_); }
    }
    public int EntitysMergeListCount {
      get { return entitysMergeList_.Count; }
    }
    public global::Protocol.EntitySyncData GetEntitysMergeList(int index) {
      return entitysMergeList_[index];
    }
    public global::Protocol.EntitySyncData FindEntitysMergeList(System.Predicate<global::Protocol.EntitySyncData> match) {
      return entitysMergeList_.Find(match);
    }
    public System.Collections.Generic.IList<global::Protocol.EntitySyncData> FindAllEntitysMergeList(System.Predicate<global::Protocol.EntitySyncData> match) {
      return entitysMergeList_.FindAll(match);
    }
    public void SetEntitysMergeList(int index, global::Protocol.EntitySyncData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (index < 0 || index >= entitysMergeList_.Count) return;
      removeentitysMergeList_.Add(entitysMergeList_[index].Id);
      addentitysMergeList_.Add(value);
      entitysMergeList_[index] = value;
    }
    public void AddEntitysMergeList(global::Protocol.EntitySyncData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      entitysMergeList_.Add(value);
      addentitysMergeList_.Add(value);
    }
    public void AddRangeEntitysMergeList(scg::IEnumerable<global::Protocol.EntitySyncData> values) {
      entitysMergeList_.Add(values);
      addentitysMergeList_.Add(values);
    }
    public void RemoveEntitysMergeList(global::Protocol.EntitySyncData value) {
      if (!entitysMergeList_.Contains(value)) return;
      removeentitysMergeList_.Add(value.Id);
      entitysMergeList_.Remove(value);
    }
    public void RemoveAtEntitysMergeList(int index) {
      if (index < 0 || index >= entitysMergeList_.Count) return;
      removeentitysMergeList_.Add(entitysMergeList_[index].Id);
      entitysMergeList_.RemoveAt(index);
    }
    public void ClearEntitysMergeList() {
      if (entitysMergeList_.Count <= 0) return;
      foreach (var item in entitysMergeList_)
      {
        removeentitysMergeList_.Add(item.Id);
      }
      entitysMergeList_.Clear();
    }
    
    public const int AddentitysMergeListFieldNumber = 1003;
    private pbc::PopsicleList<global::Protocol.EntitySyncData> addentitysMergeList_ = new pbc::PopsicleList<global::Protocol.EntitySyncData>();
    public scg::IList<global::Protocol.EntitySyncData> AddentitysMergeList {
      get { return pbc::Lists.AsReadOnly(addentitysMergeList_); }
    }
    public int AddentitysMergeListCount {
      get { return addentitysMergeList_.Count; }
    }
    public global::Protocol.EntitySyncData GetAddentitysMergeList(int index) {
      return addentitysMergeList_[index];
    }
    public global::Protocol.EntitySyncData FindAddentitysMergeList(System.Predicate<global::Protocol.EntitySyncData> match) {
      return addentitysMergeList_.Find(match);
    }
    public System.Collections.Generic.IList<global::Protocol.EntitySyncData> FindAllAddentitysMergeList(System.Predicate<global::Protocol.EntitySyncData> match) {
      return addentitysMergeList_.FindAll(match);
    }
    
    public const int RemoveentitysMergeListFieldNumber = 2003;
    private pbc::PopsicleList<uint> removeentitysMergeList_ = new pbc::PopsicleList<uint>();
    private bool isRemoveentitysMergeListChanged = true;
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> RemoveentitysMergeList {
      get { return pbc::Lists.AsReadOnly(removeentitysMergeList_); }
    }
    public int RemoveentitysMergeListCount {
      get { return removeentitysMergeList_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetRemoveentitysMergeList(int index) {
      return removeentitysMergeList_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Protocol.EntitySyncData element in EntitysMergeList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Protocol.EntitySyncData element in AddentitysMergeList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _stateMsgFieldNames;
      if (hasFrame) {
        output.WriteUInt32(1, field_names[2], Frame);
      }
      if (entitysMergeList_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], entitysMergeList_);
      }
      if (addentitysMergeList_.Count > 0) {
        output.WriteMessageArray(1003, field_names[0], addentitysMergeList_);
      }
      if (removeentitysMergeList_.Count > 0) {
        output.WriteUInt32Array(2003, field_names[3], removeentitysMergeList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasFrame) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Frame);
      }
      foreach (global::Protocol.EntitySyncData element in EntitysMergeList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      foreach (global::Protocol.EntitySyncData element in AddentitysMergeList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1003, element);
      }
      {
        int dataSize = 0;
        foreach (uint element in RemoveentitysMergeList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * removeentitysMergeList_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public StateMsg CommitChange() {
      StateMsg other = new StateMsg();
      bool isChange = false;
      if (isFrameChanged) {
        isChange = true;
        other.Frame = Frame;
        isFrameChanged = false;
      }
        
      if (addentitysMergeList_.Count > 0) 
      { 
        isChange = true;
        other.addentitysMergeList_.Add(addentitysMergeList_);
      }
      if (removeentitysMergeList_.Count > 0) 
      { 
        isChange = true;
        other.removeentitysMergeList_.Add(removeentitysMergeList_);
      }
      if (entitysMergeList_.Count > 0) 
      { 
        foreach (var item in entitysMergeList_) 
        { 
          bool isExist = false; 
          foreach (var item1 in addentitysMergeList_) 
          { 
            if (item.Id == item1.Id)
            { 
              isExist = true; 
            } 
          } 
           
          if (!isExist) 
          { 
            var entitysMergeListcommit = item.CommitChange();
            if(entitysMergeListcommit!=null)
            {
              isChange = true;
              other.entitysMergeList_.Add(entitysMergeListcommit);
            }
          } 
        } 
      }
      addentitysMergeList_.Clear();
      removeentitysMergeList_.Clear();
      return isChange?other:null;
    }
    
    public void MergeFrom(StateMsg other, bool isFull = false) {
      if (other == global::Protocol.StateMsg.DefaultInstance) return;
      if (other.HasFrame) {
        Frame = other.Frame;
      }
      if (other.removeentitysMergeList_.Count > 0) 
      { 
        int index = -1;
        foreach (var item in other.removeentitysMergeList_)
        { 
          for(int i=0; i<entitysMergeList_.Count; i++)
          { 
            if (entitysMergeList_[i].Id == item) 
            { 
              index = i;
              break;
            } 
          } 
          
          if(index >= 0)
            entitysMergeList_.RemoveAt(index);
        }
      }
      if (other.addentitysMergeList_.Count > 0) 
      { 
        foreach (var item in other.addentitysMergeList_) 
        { 
          bool isExist = false; 
          foreach (var item1 in entitysMergeList_) 
          { 
            if (item.Id == item1.Id)
            { 
              item1.MergeFrom(item, isFull); 
              isExist = true;
              break;
            } 
          } 
           
          if (!isExist) 
          { 
             entitysMergeList_.Add(item);
          } 
        } 
      }
      if (other.entitysMergeList_.Count > 0) 
      { 
        foreach (var item in other.entitysMergeList_) 
        { 
          foreach(var item1 in entitysMergeList_) 
          { 
            if (item.Id == item1.Id)
            { 
              item1.MergeFrom(item, isFull);
            } 
          } 
        } 
      }
      if(addentitysMergeList_.Count > 0)addentitysMergeList_.Clear();
      if(removeentitysMergeList_.Count > 0)removeentitysMergeList_.Clear();
      if (isFull) 
      {
        if (other.entitysMergeList_.Count != 0) {
          entitysMergeList_.Clear();
          entitysMergeList_.Add(other.entitysMergeList_);
        }
      }
    }
    
    public static StateMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StateMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StateMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StateMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StateMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StateMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StateMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StateMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StateMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StateMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StateMsg MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StateMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StateMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StateMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StateMsg result;
      
      private StateMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          StateMsg original = result;
          result = new StateMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StateMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.StateMsg.Descriptor; }
      }
      
      public override StateMsg DefaultInstanceForType {
        get { return global::Protocol.StateMsg.DefaultInstance; }
      }
      
      public override StateMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StateMsg) {
          return MergeFrom((StateMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StateMsg other) {
        if (other == global::Protocol.StateMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFrame) {
          Frame = other.Frame;
        }
        if (other.entitysMergeList_.Count != 0) {
          result.entitysMergeList_.Add(other.entitysMergeList_);
        }
        if (other.addentitysMergeList_.Count != 0) {
          result.addentitysMergeList_.Add(other.addentitysMergeList_);
        }
        if (other.removeentitysMergeList_.Count != 0) {
          result.removeentitysMergeList_.Add(other.removeentitysMergeList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stateMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stateMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasFrame = input.ReadUInt32(ref result.frame_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.entitysMergeList_, global::Protocol.EntitySyncData.DefaultInstance, extensionRegistry);
              break;
            }
            case 8026: {
              input.ReadMessageArray(tag, field_name, result.addentitysMergeList_, global::Protocol.EntitySyncData.DefaultInstance, extensionRegistry);
              break;
            }
            case 16026:
            case 16024: {
              input.ReadUInt32Array(tag, field_name, result.removeentitysMergeList_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFrame {
        get { return result.hasFrame; }
      }
      [global::System.CLSCompliant(false)]
      public uint Frame {
        get { return result.Frame; }
        set { SetFrame(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFrame(uint value) {
        PrepareBuilder();
        result.hasFrame = true;
        result.frame_ = value;
        return this;
      }
      public Builder ClearFrame() {
        PrepareBuilder();
        result.hasFrame = false;
        result.frame_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::Protocol.EntitySyncData> EntitysMergeList {
        get { return PrepareBuilder().entitysMergeList_; }
      }
      public int EntitysMergeListCount {
        get { return result.EntitysMergeListCount; }
      }
      public global::Protocol.EntitySyncData GetEntitysMergeList(int index) {
        return result.GetEntitysMergeList(index);
      }
      public Builder SetEntitysMergeList(int index, global::Protocol.EntitySyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entitysMergeList_[index] = value;
        return this;
      }
      public Builder SetEntitysMergeList(int index, global::Protocol.EntitySyncData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entitysMergeList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEntitysMergeList(global::Protocol.EntitySyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entitysMergeList_.Add(value);
        return this;
      }
      public Builder AddEntitysMergeList(global::Protocol.EntitySyncData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entitysMergeList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEntitysMergeList(scg::IEnumerable<global::Protocol.EntitySyncData> values) {
        PrepareBuilder();
        result.entitysMergeList_.Add(values);
        return this;
      }
      public Builder ClearEntitysMergeList() {
        PrepareBuilder();
        result.entitysMergeList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Protocol.EntitySyncData> AddentitysMergeList {
        get { return PrepareBuilder().addentitysMergeList_; }
      }
      public int AddentitysMergeListCount {
        get { return result.AddentitysMergeListCount; }
      }
      public global::Protocol.EntitySyncData GetAddentitysMergeList(int index) {
        return result.GetAddentitysMergeList(index);
      }
      public Builder SetAddentitysMergeList(int index, global::Protocol.EntitySyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.addentitysMergeList_[index] = value;
        return this;
      }
      public Builder SetAddentitysMergeList(int index, global::Protocol.EntitySyncData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.addentitysMergeList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAddentitysMergeList(global::Protocol.EntitySyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.addentitysMergeList_.Add(value);
        return this;
      }
      public Builder AddAddentitysMergeList(global::Protocol.EntitySyncData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.addentitysMergeList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAddentitysMergeList(scg::IEnumerable<global::Protocol.EntitySyncData> values) {
        PrepareBuilder();
        result.addentitysMergeList_.Add(values);
        return this;
      }
      public Builder ClearAddentitysMergeList() {
        PrepareBuilder();
        result.addentitysMergeList_.Clear();
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> RemoveentitysMergeList {
        get { return PrepareBuilder().removeentitysMergeList_; }
      }
      public int RemoveentitysMergeListCount {
        get { return result.RemoveentitysMergeListCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetRemoveentitysMergeList(int index) {
        return result.GetRemoveentitysMergeList(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRemoveentitysMergeList(int index, uint value) {
        PrepareBuilder();
        result.removeentitysMergeList_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRemoveentitysMergeList(uint value) {
        PrepareBuilder();
        result.removeentitysMergeList_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeRemoveentitysMergeList(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.removeentitysMergeList_.Add(values);
        return this;
      }
      public Builder ClearRemoveentitysMergeList() {
        PrepareBuilder();
        result.removeentitysMergeList_.Clear();
        return this;
      }
    }
    static StateMsg() {
      object.ReferenceEquals(global::Protocol.ProtoBattle.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EntitySyncData : pb::GeneratedMessage<EntitySyncData, EntitySyncData.Builder> {
    public EntitySyncData() { }
    private static readonly EntitySyncData defaultInstance = new EntitySyncData().MakeReadOnly();
    private static readonly string[] _entitySyncDataFieldNames = new string[] { "ani_state_data", "animation_state", "attr_data", "bag_data", "buff_ctrl_data", "camp", "character_data", "hero_data", "id", "life_data", "position", "rotation", "skill_ctrl_data", "tag_data", "type" };
    private static readonly uint[] _entitySyncDataFieldTags = new uint[] { 170, 176, 50, 66, 82, 40, 130, 106, 8, 58, 26, 34, 74, 98, 16 };
    public static EntitySyncData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EntitySyncData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EntitySyncData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_EntitySyncData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EntitySyncData, EntitySyncData.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_EntitySyncData__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    [global::System.CLSCompliant(false)]
    public uint Id {
      get { return id_; }
      set { hasId = true;
        id_ = value;}
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private global::Protocol.EntityType type_ = global::Protocol.EntityType.Hero;
    private bool isTypeChanged = true;
    public bool HasType {
      get { return hasType; }
    }
    public global::Protocol.EntityType Type {
      get { return type_; }
      set { hasType = true;
        isTypeChanged = true;
        type_ = value;}
    }
    
    public const int PositionFieldNumber = 3;
    private bool hasPosition;
    private global::Protocol.Int3 position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::Protocol.Int3 Position {
      get { return position_; }
      set { hasPosition = true;
        position_ = value;}
    }
    public void MergePosition(global::Protocol.Int3 value, bool isFull = false) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (HasPosition &&
        position_ != global::Protocol.Int3.DefaultInstance) {
        position_.MergeFrom(value, isFull);
      } else {
        position_ = value;
      }
    }
    
    public const int RotationFieldNumber = 4;
    private bool hasRotation;
    private global::Protocol.Int3 rotation_;
    public bool HasRotation {
      get { return hasRotation; }
    }
    public global::Protocol.Int3 Rotation {
      get { return rotation_; }
      set { hasRotation = true;
        rotation_ = value;}
    }
    public void MergeRotation(global::Protocol.Int3 value, bool isFull = false) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (HasRotation &&
        rotation_ != global::Protocol.Int3.DefaultInstance) {
        rotation_.MergeFrom(value, isFull);
      } else {
        rotation_ = value;
      }
    }
    
    public const int CampFieldNumber = 5;
    private bool hasCamp;
    private bool isCampChanged = true;
    private uint camp_;
    public bool HasCamp {
      get { return hasCamp; }
    }
    [global::System.CLSCompliant(false)]
    public uint Camp {
      get { return camp_; }
      set { hasCamp = true;
        isCampChanged = true;
        camp_ = value;}
    }
    
    public const int AttrDataFieldNumber = 6;
    private bool hasAttrData;
    private global::Protocol.AttributeSyncData attrData_;
    public bool HasAttrData {
      get { return hasAttrData; }
    }
    public global::Protocol.AttributeSyncData AttrData {
      get { return attrData_; }
      set { hasAttrData = true;
        attrData_ = value;}
    }
    public void MergeAttrData(global::Protocol.AttributeSyncData value, bool isFull = false) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (HasAttrData &&
        attrData_ != global::Protocol.AttributeSyncData.DefaultInstance) {
        attrData_.MergeFrom(value, isFull);
      } else {
        attrData_ = value;
      }
    }
    
    public const int LifeDataFieldNumber = 7;
    private bool hasLifeData;
    private global::Protocol.LifeSyncData lifeData_;
    public bool HasLifeData {
      get { return hasLifeData; }
    }
    public global::Protocol.LifeSyncData LifeData {
      get { return lifeData_; }
      set { hasLifeData = true;
        lifeData_ = value;}
    }
    public void MergeLifeData(global::Protocol.LifeSyncData value, bool isFull = false) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (HasLifeData &&
        lifeData_ != global::Protocol.LifeSyncData.DefaultInstance) {
        lifeData_.MergeFrom(value, isFull);
      } else {
        lifeData_ = value;
      }
    }
    
    public const int BagDataFieldNumber = 8;
    private bool hasBagData;
    private global::Protocol.BagSyncData bagData_;
    public bool HasBagData {
      get { return hasBagData; }
    }
    public global::Protocol.BagSyncData BagData {
      get { return bagData_; }
      set { hasBagData = true;
        bagData_ = value;}
    }
    public void MergeBagData(global::Protocol.BagSyncData value, bool isFull = false) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (HasBagData &&
        bagData_ != global::Protocol.BagSyncData.DefaultInstance) {
        bagData_.MergeFrom(value, isFull);
      } else {
        bagData_ = value;
      }
    }
    
    public const int SkillCtrlDataFieldNumber = 9;
    private bool hasSkillCtrlData;
    private global::Protocol.SkillCtrlSyncData skillCtrlData_;
    public bool HasSkillCtrlData {
      get { return hasSkillCtrlData; }
    }
    public global::Protocol.SkillCtrlSyncData SkillCtrlData {
      get { return skillCtrlData_; }
      set { hasSkillCtrlData = true;
        skillCtrlData_ = value;}
    }
    public void MergeSkillCtrlData(global::Protocol.SkillCtrlSyncData value, bool isFull = false) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (HasSkillCtrlData &&
        skillCtrlData_ != global::Protocol.SkillCtrlSyncData.DefaultInstance) {
        skillCtrlData_.MergeFrom(value, isFull);
      } else {
        skillCtrlData_ = value;
      }
    }
    
    public const int BuffCtrlDataFieldNumber = 10;
    private bool hasBuffCtrlData;
    private global::Protocol.BuffCtrlSyncData buffCtrlData_;
    public bool HasBuffCtrlData {
      get { return hasBuffCtrlData; }
    }
    public global::Protocol.BuffCtrlSyncData BuffCtrlData {
      get { return buffCtrlData_; }
      set { hasBuffCtrlData = true;
        buffCtrlData_ = value;}
    }
    public void MergeBuffCtrlData(global::Protocol.BuffCtrlSyncData value, bool isFull = false) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (HasBuffCtrlData &&
        buffCtrlData_ != global::Protocol.BuffCtrlSyncData.DefaultInstance) {
        buffCtrlData_.MergeFrom(value, isFull);
      } else {
        buffCtrlData_ = value;
      }
    }
    
    public const int TagDataFieldNumber = 12;
    private bool hasTagData;
    private global::Protocol.TagSyncData tagData_;
    public bool HasTagData {
      get { return hasTagData; }
    }
    public global::Protocol.TagSyncData TagData {
      get { return tagData_; }
      set { hasTagData = true;
        tagData_ = value;}
    }
    public void MergeTagData(global::Protocol.TagSyncData value, bool isFull = false) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (HasTagData &&
        tagData_ != global::Protocol.TagSyncData.DefaultInstance) {
        tagData_.MergeFrom(value, isFull);
      } else {
        tagData_ = value;
      }
    }
    
    public const int HeroDataFieldNumber = 13;
    private bool hasHeroData;
    private global::Protocol.HeroSyncData heroData_;
    public bool HasHeroData {
      get { return hasHeroData; }
    }
    public global::Protocol.HeroSyncData HeroData {
      get { return heroData_; }
      set { hasHeroData = true;
        heroData_ = value;}
    }
    public void MergeHeroData(global::Protocol.HeroSyncData value, bool isFull = false) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (HasHeroData &&
        heroData_ != global::Protocol.HeroSyncData.DefaultInstance) {
        heroData_.MergeFrom(value, isFull);
      } else {
        heroData_ = value;
      }
    }
    
    public const int CharacterDataFieldNumber = 16;
    private bool hasCharacterData;
    private global::Protocol.CharacterSyncData characterData_;
    public bool HasCharacterData {
      get { return hasCharacterData; }
    }
    public global::Protocol.CharacterSyncData CharacterData {
      get { return characterData_; }
      set { hasCharacterData = true;
        characterData_ = value;}
    }
    public void MergeCharacterData(global::Protocol.CharacterSyncData value, bool isFull = false) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (HasCharacterData &&
        characterData_ != global::Protocol.CharacterSyncData.DefaultInstance) {
        characterData_.MergeFrom(value, isFull);
      } else {
        characterData_ = value;
      }
    }
    
    public const int AniStateDataFieldNumber = 21;
    private bool hasAniStateData;
    private global::Protocol.AnimationStateSyncData aniStateData_;
    public bool HasAniStateData {
      get { return hasAniStateData; }
    }
    public global::Protocol.AnimationStateSyncData AniStateData {
      get { return aniStateData_; }
      set { hasAniStateData = true;
        aniStateData_ = value;}
    }
    public void MergeAniStateData(global::Protocol.AnimationStateSyncData value, bool isFull = false) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (HasAniStateData &&
        aniStateData_ != global::Protocol.AnimationStateSyncData.DefaultInstance) {
        aniStateData_.MergeFrom(value, isFull);
      } else {
        aniStateData_ = value;
      }
    }
    
    public const int AnimationStateFieldNumber = 22;
    private bool hasAnimationState;
    private bool isAnimationStateChanged = true;
    private bool animationState_;
    public bool HasAnimationState {
      get { return hasAnimationState; }
    }
    public bool AnimationState {
      get { return animationState_; }
      set { hasAnimationState = true;
        isAnimationStateChanged = true;
        animationState_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (HasAttrData) {
          if (!AttrData.IsInitialized) return false;
        }
        if (HasBagData) {
          if (!BagData.IsInitialized) return false;
        }
        if (HasSkillCtrlData) {
          if (!SkillCtrlData.IsInitialized) return false;
        }
        if (HasBuffCtrlData) {
          if (!BuffCtrlData.IsInitialized) return false;
        }
        if (HasTagData) {
          if (!TagData.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _entitySyncDataFieldNames;
      if (hasId) {
        output.WriteUInt32(1, field_names[8], Id);
      }
      if (hasType) {
        output.WriteEnum(2, field_names[14], (int) Type, Type);
      }
      if (hasPosition) {
        output.WriteMessage(3, field_names[10], Position);
      }
      if (hasRotation) {
        output.WriteMessage(4, field_names[11], Rotation);
      }
      if (hasCamp) {
        output.WriteUInt32(5, field_names[5], Camp);
      }
      if (hasAttrData) {
        output.WriteMessage(6, field_names[2], AttrData);
      }
      if (hasLifeData) {
        output.WriteMessage(7, field_names[9], LifeData);
      }
      if (hasBagData) {
        output.WriteMessage(8, field_names[3], BagData);
      }
      if (hasSkillCtrlData) {
        output.WriteMessage(9, field_names[12], SkillCtrlData);
      }
      if (hasBuffCtrlData) {
        output.WriteMessage(10, field_names[4], BuffCtrlData);
      }
      if (hasTagData) {
        output.WriteMessage(12, field_names[13], TagData);
      }
      if (hasHeroData) {
        output.WriteMessage(13, field_names[7], HeroData);
      }
      if (hasCharacterData) {
        output.WriteMessage(16, field_names[6], CharacterData);
      }
      if (hasAniStateData) {
        output.WriteMessage(21, field_names[0], AniStateData);
      }
      if (hasAnimationState) {
        output.WriteBool(22, field_names[1], AnimationState);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Type);
      }
      if (hasPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Position);
      }
      if (hasRotation) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Rotation);
      }
      if (hasCamp) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, Camp);
      }
      if (hasAttrData) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, AttrData);
      }
      if (hasLifeData) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, LifeData);
      }
      if (hasBagData) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, BagData);
      }
      if (hasSkillCtrlData) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, SkillCtrlData);
      }
      if (hasBuffCtrlData) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, BuffCtrlData);
      }
      if (hasTagData) {
        size += pb::CodedOutputStream.ComputeMessageSize(12, TagData);
      }
      if (hasHeroData) {
        size += pb::CodedOutputStream.ComputeMessageSize(13, HeroData);
      }
      if (hasCharacterData) {
        size += pb::CodedOutputStream.ComputeMessageSize(16, CharacterData);
      }
      if (hasAniStateData) {
        size += pb::CodedOutputStream.ComputeMessageSize(21, AniStateData);
      }
      if (hasAnimationState) {
        size += pb::CodedOutputStream.ComputeBoolSize(22, AnimationState);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public EntitySyncData CommitChange() {
      EntitySyncData other = new EntitySyncData();
      bool isChange = false;
      other.Id = Id;
      if (isTypeChanged) {
        isChange = true;
        other.Type = Type;
        isTypeChanged = false;
      }
      
      var Positioncommit = Position?.CommitChange();
      if(Positioncommit!=null)
      {
          isChange = true;
          other.Position = Positioncommit;
      }
      
      var Rotationcommit = Rotation?.CommitChange();
      if(Rotationcommit!=null)
      {
          isChange = true;
          other.Rotation = Rotationcommit;
      }
      if (isCampChanged) {
        isChange = true;
        other.Camp = Camp;
        isCampChanged = false;
      }
      
      var AttrDatacommit = AttrData?.CommitChange();
      if(AttrDatacommit!=null)
      {
          isChange = true;
          other.AttrData = AttrDatacommit;
      }
      
      var LifeDatacommit = LifeData?.CommitChange();
      if(LifeDatacommit!=null)
      {
          isChange = true;
          other.LifeData = LifeDatacommit;
      }
      
      var BagDatacommit = BagData?.CommitChange();
      if(BagDatacommit!=null)
      {
          isChange = true;
          other.BagData = BagDatacommit;
      }
      
      var SkillCtrlDatacommit = SkillCtrlData?.CommitChange();
      if(SkillCtrlDatacommit!=null)
      {
          isChange = true;
          other.SkillCtrlData = SkillCtrlDatacommit;
      }
      
      var BuffCtrlDatacommit = BuffCtrlData?.CommitChange();
      if(BuffCtrlDatacommit!=null)
      {
          isChange = true;
          other.BuffCtrlData = BuffCtrlDatacommit;
      }
      
      var TagDatacommit = TagData?.CommitChange();
      if(TagDatacommit!=null)
      {
          isChange = true;
          other.TagData = TagDatacommit;
      }
      
      var HeroDatacommit = HeroData?.CommitChange();
      if(HeroDatacommit!=null)
      {
          isChange = true;
          other.HeroData = HeroDatacommit;
      }
      
      var CharacterDatacommit = CharacterData?.CommitChange();
      if(CharacterDatacommit!=null)
      {
          isChange = true;
          other.CharacterData = CharacterDatacommit;
      }
      
      var AniStateDatacommit = AniStateData?.CommitChange();
      if(AniStateDatacommit!=null)
      {
          isChange = true;
          other.AniStateData = AniStateDatacommit;
      }
      if (isAnimationStateChanged) {
        isChange = true;
        other.AnimationState = AnimationState;
        isAnimationStateChanged = false;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(EntitySyncData other, bool isFull = false) {
      if (other == global::Protocol.EntitySyncData.DefaultInstance) return;
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      
      if (other.HasPosition)
      {
        MergePosition(other.Position, isFull);
      }
      
      if (other.HasRotation)
      {
        MergeRotation(other.Rotation, isFull);
      }
      if (other.HasCamp) {
        Camp = other.Camp;
      }
      
      if (other.HasAttrData)
      {
        MergeAttrData(other.AttrData, isFull);
      }
      
      if (other.HasLifeData)
      {
        MergeLifeData(other.LifeData, isFull);
      }
      
      if (other.HasBagData)
      {
        MergeBagData(other.BagData, isFull);
      }
      
      if (other.HasSkillCtrlData)
      {
        MergeSkillCtrlData(other.SkillCtrlData, isFull);
      }
      
      if (other.HasBuffCtrlData)
      {
        MergeBuffCtrlData(other.BuffCtrlData, isFull);
      }
      
      if (other.HasTagData)
      {
        MergeTagData(other.TagData, isFull);
      }
      
      if (other.HasHeroData)
      {
        MergeHeroData(other.HeroData, isFull);
      }
      
      if (other.HasCharacterData)
      {
        MergeCharacterData(other.CharacterData, isFull);
      }
      
      if (other.HasAniStateData)
      {
        MergeAniStateData(other.AniStateData, isFull);
      }
      if (other.HasAnimationState) {
        AnimationState = other.AnimationState;
      }
    }
    
    public static EntitySyncData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EntitySyncData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EntitySyncData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EntitySyncData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EntitySyncData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EntitySyncData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EntitySyncData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EntitySyncData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EntitySyncData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EntitySyncData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EntitySyncData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EntitySyncData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EntitySyncData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EntitySyncData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EntitySyncData result;
      
      private EntitySyncData PrepareBuilder() {
        if (resultIsReadOnly) {
          EntitySyncData original = result;
          result = new EntitySyncData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EntitySyncData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.EntitySyncData.Descriptor; }
      }
      
      public override EntitySyncData DefaultInstanceForType {
        get { return global::Protocol.EntitySyncData.DefaultInstance; }
      }
      
      public override EntitySyncData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EntitySyncData) {
          return MergeFrom((EntitySyncData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EntitySyncData other) {
        if (other == global::Protocol.EntitySyncData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        if (other.HasRotation) {
          MergeRotation(other.Rotation);
        }
        if (other.HasCamp) {
          Camp = other.Camp;
        }
        if (other.HasAttrData) {
          MergeAttrData(other.AttrData);
        }
        if (other.HasLifeData) {
          MergeLifeData(other.LifeData);
        }
        if (other.HasBagData) {
          MergeBagData(other.BagData);
        }
        if (other.HasSkillCtrlData) {
          MergeSkillCtrlData(other.SkillCtrlData);
        }
        if (other.HasBuffCtrlData) {
          MergeBuffCtrlData(other.BuffCtrlData);
        }
        if (other.HasTagData) {
          MergeTagData(other.TagData);
        }
        if (other.HasHeroData) {
          MergeHeroData(other.HeroData);
        }
        if (other.HasCharacterData) {
          MergeCharacterData(other.CharacterData);
        }
        if (other.HasAniStateData) {
          MergeAniStateData(other.AniStateData);
        }
        if (other.HasAnimationState) {
          AnimationState = other.AnimationState;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_entitySyncDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _entitySyncDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt32(ref result.id_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 26: {
              global::Protocol.Int3.Builder subBuilder = global::Protocol.Int3.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Protocol.Int3.Builder subBuilder = global::Protocol.Int3.CreateBuilder();
              if (result.hasRotation) {
                subBuilder.MergeFrom(Rotation);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Rotation = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasCamp = input.ReadUInt32(ref result.camp_);
              break;
            }
            case 50: {
              global::Protocol.AttributeSyncData.Builder subBuilder = global::Protocol.AttributeSyncData.CreateBuilder();
              if (result.hasAttrData) {
                subBuilder.MergeFrom(AttrData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AttrData = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::Protocol.LifeSyncData.Builder subBuilder = global::Protocol.LifeSyncData.CreateBuilder();
              if (result.hasLifeData) {
                subBuilder.MergeFrom(LifeData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LifeData = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::Protocol.BagSyncData.Builder subBuilder = global::Protocol.BagSyncData.CreateBuilder();
              if (result.hasBagData) {
                subBuilder.MergeFrom(BagData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BagData = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::Protocol.SkillCtrlSyncData.Builder subBuilder = global::Protocol.SkillCtrlSyncData.CreateBuilder();
              if (result.hasSkillCtrlData) {
                subBuilder.MergeFrom(SkillCtrlData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SkillCtrlData = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              global::Protocol.BuffCtrlSyncData.Builder subBuilder = global::Protocol.BuffCtrlSyncData.CreateBuilder();
              if (result.hasBuffCtrlData) {
                subBuilder.MergeFrom(BuffCtrlData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BuffCtrlData = subBuilder.BuildPartial();
              break;
            }
            case 98: {
              global::Protocol.TagSyncData.Builder subBuilder = global::Protocol.TagSyncData.CreateBuilder();
              if (result.hasTagData) {
                subBuilder.MergeFrom(TagData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TagData = subBuilder.BuildPartial();
              break;
            }
            case 106: {
              global::Protocol.HeroSyncData.Builder subBuilder = global::Protocol.HeroSyncData.CreateBuilder();
              if (result.hasHeroData) {
                subBuilder.MergeFrom(HeroData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroData = subBuilder.BuildPartial();
              break;
            }
            case 130: {
              global::Protocol.CharacterSyncData.Builder subBuilder = global::Protocol.CharacterSyncData.CreateBuilder();
              if (result.hasCharacterData) {
                subBuilder.MergeFrom(CharacterData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CharacterData = subBuilder.BuildPartial();
              break;
            }
            case 170: {
              global::Protocol.AnimationStateSyncData.Builder subBuilder = global::Protocol.AnimationStateSyncData.CreateBuilder();
              if (result.hasAniStateData) {
                subBuilder.MergeFrom(AniStateData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AniStateData = subBuilder.BuildPartial();
              break;
            }
            case 176: {
              result.hasAnimationState = input.ReadBool(ref result.animationState_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      [global::System.CLSCompliant(false)]
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::Protocol.EntityType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Protocol.EntityType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::Protocol.EntityType.Hero;
        return this;
      }
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::Protocol.Int3 Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::Protocol.Int3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::Protocol.Int3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::Protocol.Int3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.HasPosition &&
            result.position_ != global::Protocol.Int3.DefaultInstance) {
            result.position_ = global::Protocol.Int3.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
          result.hasPosition = true;
        }
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
      
      public bool HasRotation {
       get { return result.hasRotation; }
      }
      public global::Protocol.Int3 Rotation {
        get { return result.Rotation; }
        set { SetRotation(value); }
      }
      public Builder SetRotation(global::Protocol.Int3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRotation = true;
        result.rotation_ = value;
        return this;
      }
      public Builder SetRotation(global::Protocol.Int3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRotation = true;
        result.rotation_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRotation(global::Protocol.Int3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.HasRotation &&
            result.rotation_ != global::Protocol.Int3.DefaultInstance) {
            result.rotation_ = global::Protocol.Int3.CreateBuilder(result.rotation_).MergeFrom(value).BuildPartial();
        } else {
          result.rotation_ = value;
          result.hasRotation = true;
        }
        return this;
      }
      public Builder ClearRotation() {
        PrepareBuilder();
        result.hasRotation = false;
        result.rotation_ = null;
        return this;
      }
      
      public bool HasCamp {
        get { return result.hasCamp; }
      }
      [global::System.CLSCompliant(false)]
      public uint Camp {
        get { return result.Camp; }
        set { SetCamp(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCamp(uint value) {
        PrepareBuilder();
        result.hasCamp = true;
        result.camp_ = value;
        return this;
      }
      public Builder ClearCamp() {
        PrepareBuilder();
        result.hasCamp = false;
        result.camp_ = 0;
        return this;
      }
      
      public bool HasAttrData {
       get { return result.hasAttrData; }
      }
      public global::Protocol.AttributeSyncData AttrData {
        get { return result.AttrData; }
        set { SetAttrData(value); }
      }
      public Builder SetAttrData(global::Protocol.AttributeSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAttrData = true;
        result.attrData_ = value;
        return this;
      }
      public Builder SetAttrData(global::Protocol.AttributeSyncData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAttrData = true;
        result.attrData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAttrData(global::Protocol.AttributeSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.HasAttrData &&
            result.attrData_ != global::Protocol.AttributeSyncData.DefaultInstance) {
            result.attrData_ = global::Protocol.AttributeSyncData.CreateBuilder(result.attrData_).MergeFrom(value).BuildPartial();
        } else {
          result.attrData_ = value;
          result.hasAttrData = true;
        }
        return this;
      }
      public Builder ClearAttrData() {
        PrepareBuilder();
        result.hasAttrData = false;
        result.attrData_ = null;
        return this;
      }
      
      public bool HasLifeData {
       get { return result.hasLifeData; }
      }
      public global::Protocol.LifeSyncData LifeData {
        get { return result.LifeData; }
        set { SetLifeData(value); }
      }
      public Builder SetLifeData(global::Protocol.LifeSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLifeData = true;
        result.lifeData_ = value;
        return this;
      }
      public Builder SetLifeData(global::Protocol.LifeSyncData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLifeData = true;
        result.lifeData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLifeData(global::Protocol.LifeSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.HasLifeData &&
            result.lifeData_ != global::Protocol.LifeSyncData.DefaultInstance) {
            result.lifeData_ = global::Protocol.LifeSyncData.CreateBuilder(result.lifeData_).MergeFrom(value).BuildPartial();
        } else {
          result.lifeData_ = value;
          result.hasLifeData = true;
        }
        return this;
      }
      public Builder ClearLifeData() {
        PrepareBuilder();
        result.hasLifeData = false;
        result.lifeData_ = null;
        return this;
      }
      
      public bool HasBagData {
       get { return result.hasBagData; }
      }
      public global::Protocol.BagSyncData BagData {
        get { return result.BagData; }
        set { SetBagData(value); }
      }
      public Builder SetBagData(global::Protocol.BagSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBagData = true;
        result.bagData_ = value;
        return this;
      }
      public Builder SetBagData(global::Protocol.BagSyncData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBagData = true;
        result.bagData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBagData(global::Protocol.BagSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.HasBagData &&
            result.bagData_ != global::Protocol.BagSyncData.DefaultInstance) {
            result.bagData_ = global::Protocol.BagSyncData.CreateBuilder(result.bagData_).MergeFrom(value).BuildPartial();
        } else {
          result.bagData_ = value;
          result.hasBagData = true;
        }
        return this;
      }
      public Builder ClearBagData() {
        PrepareBuilder();
        result.hasBagData = false;
        result.bagData_ = null;
        return this;
      }
      
      public bool HasSkillCtrlData {
       get { return result.hasSkillCtrlData; }
      }
      public global::Protocol.SkillCtrlSyncData SkillCtrlData {
        get { return result.SkillCtrlData; }
        set { SetSkillCtrlData(value); }
      }
      public Builder SetSkillCtrlData(global::Protocol.SkillCtrlSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSkillCtrlData = true;
        result.skillCtrlData_ = value;
        return this;
      }
      public Builder SetSkillCtrlData(global::Protocol.SkillCtrlSyncData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSkillCtrlData = true;
        result.skillCtrlData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSkillCtrlData(global::Protocol.SkillCtrlSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.HasSkillCtrlData &&
            result.skillCtrlData_ != global::Protocol.SkillCtrlSyncData.DefaultInstance) {
            result.skillCtrlData_ = global::Protocol.SkillCtrlSyncData.CreateBuilder(result.skillCtrlData_).MergeFrom(value).BuildPartial();
        } else {
          result.skillCtrlData_ = value;
          result.hasSkillCtrlData = true;
        }
        return this;
      }
      public Builder ClearSkillCtrlData() {
        PrepareBuilder();
        result.hasSkillCtrlData = false;
        result.skillCtrlData_ = null;
        return this;
      }
      
      public bool HasBuffCtrlData {
       get { return result.hasBuffCtrlData; }
      }
      public global::Protocol.BuffCtrlSyncData BuffCtrlData {
        get { return result.BuffCtrlData; }
        set { SetBuffCtrlData(value); }
      }
      public Builder SetBuffCtrlData(global::Protocol.BuffCtrlSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBuffCtrlData = true;
        result.buffCtrlData_ = value;
        return this;
      }
      public Builder SetBuffCtrlData(global::Protocol.BuffCtrlSyncData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBuffCtrlData = true;
        result.buffCtrlData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBuffCtrlData(global::Protocol.BuffCtrlSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.HasBuffCtrlData &&
            result.buffCtrlData_ != global::Protocol.BuffCtrlSyncData.DefaultInstance) {
            result.buffCtrlData_ = global::Protocol.BuffCtrlSyncData.CreateBuilder(result.buffCtrlData_).MergeFrom(value).BuildPartial();
        } else {
          result.buffCtrlData_ = value;
          result.hasBuffCtrlData = true;
        }
        return this;
      }
      public Builder ClearBuffCtrlData() {
        PrepareBuilder();
        result.hasBuffCtrlData = false;
        result.buffCtrlData_ = null;
        return this;
      }
      
      public bool HasTagData {
       get { return result.hasTagData; }
      }
      public global::Protocol.TagSyncData TagData {
        get { return result.TagData; }
        set { SetTagData(value); }
      }
      public Builder SetTagData(global::Protocol.TagSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTagData = true;
        result.tagData_ = value;
        return this;
      }
      public Builder SetTagData(global::Protocol.TagSyncData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTagData = true;
        result.tagData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTagData(global::Protocol.TagSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.HasTagData &&
            result.tagData_ != global::Protocol.TagSyncData.DefaultInstance) {
            result.tagData_ = global::Protocol.TagSyncData.CreateBuilder(result.tagData_).MergeFrom(value).BuildPartial();
        } else {
          result.tagData_ = value;
          result.hasTagData = true;
        }
        return this;
      }
      public Builder ClearTagData() {
        PrepareBuilder();
        result.hasTagData = false;
        result.tagData_ = null;
        return this;
      }
      
      public bool HasHeroData {
       get { return result.hasHeroData; }
      }
      public global::Protocol.HeroSyncData HeroData {
        get { return result.HeroData; }
        set { SetHeroData(value); }
      }
      public Builder SetHeroData(global::Protocol.HeroSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroData = true;
        result.heroData_ = value;
        return this;
      }
      public Builder SetHeroData(global::Protocol.HeroSyncData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeroData = true;
        result.heroData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroData(global::Protocol.HeroSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.HasHeroData &&
            result.heroData_ != global::Protocol.HeroSyncData.DefaultInstance) {
            result.heroData_ = global::Protocol.HeroSyncData.CreateBuilder(result.heroData_).MergeFrom(value).BuildPartial();
        } else {
          result.heroData_ = value;
          result.hasHeroData = true;
        }
        return this;
      }
      public Builder ClearHeroData() {
        PrepareBuilder();
        result.hasHeroData = false;
        result.heroData_ = null;
        return this;
      }
      
      public bool HasCharacterData {
       get { return result.hasCharacterData; }
      }
      public global::Protocol.CharacterSyncData CharacterData {
        get { return result.CharacterData; }
        set { SetCharacterData(value); }
      }
      public Builder SetCharacterData(global::Protocol.CharacterSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCharacterData = true;
        result.characterData_ = value;
        return this;
      }
      public Builder SetCharacterData(global::Protocol.CharacterSyncData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCharacterData = true;
        result.characterData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCharacterData(global::Protocol.CharacterSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.HasCharacterData &&
            result.characterData_ != global::Protocol.CharacterSyncData.DefaultInstance) {
            result.characterData_ = global::Protocol.CharacterSyncData.CreateBuilder(result.characterData_).MergeFrom(value).BuildPartial();
        } else {
          result.characterData_ = value;
          result.hasCharacterData = true;
        }
        return this;
      }
      public Builder ClearCharacterData() {
        PrepareBuilder();
        result.hasCharacterData = false;
        result.characterData_ = null;
        return this;
      }
      
      public bool HasAniStateData {
       get { return result.hasAniStateData; }
      }
      public global::Protocol.AnimationStateSyncData AniStateData {
        get { return result.AniStateData; }
        set { SetAniStateData(value); }
      }
      public Builder SetAniStateData(global::Protocol.AnimationStateSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAniStateData = true;
        result.aniStateData_ = value;
        return this;
      }
      public Builder SetAniStateData(global::Protocol.AnimationStateSyncData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAniStateData = true;
        result.aniStateData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAniStateData(global::Protocol.AnimationStateSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.HasAniStateData &&
            result.aniStateData_ != global::Protocol.AnimationStateSyncData.DefaultInstance) {
            result.aniStateData_ = global::Protocol.AnimationStateSyncData.CreateBuilder(result.aniStateData_).MergeFrom(value).BuildPartial();
        } else {
          result.aniStateData_ = value;
          result.hasAniStateData = true;
        }
        return this;
      }
      public Builder ClearAniStateData() {
        PrepareBuilder();
        result.hasAniStateData = false;
        result.aniStateData_ = null;
        return this;
      }
      
      public bool HasAnimationState {
        get { return result.hasAnimationState; }
      }
      public bool AnimationState {
        get { return result.AnimationState; }
        set { SetAnimationState(value); }
      }
      public Builder SetAnimationState(bool value) {
        PrepareBuilder();
        result.hasAnimationState = true;
        result.animationState_ = value;
        return this;
      }
      public Builder ClearAnimationState() {
        PrepareBuilder();
        result.hasAnimationState = false;
        result.animationState_ = false;
        return this;
      }
    }
    static EntitySyncData() {
      object.ReferenceEquals(global::Protocol.ProtoBattle.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AnimationStateSyncData : pb::GeneratedMessage<AnimationStateSyncData, AnimationStateSyncData.Builder> {
    public AnimationStateSyncData() { }
    private static readonly AnimationStateSyncData defaultInstance = new AnimationStateSyncData().MakeReadOnly();
    private static readonly string[] _animationStateSyncDataFieldNames = new string[] { "last_main_state", "last_sub_state", "main_state", "sub_state" };
    private static readonly uint[] _animationStateSyncDataFieldTags = new uint[] { 24, 32, 8, 16 };
    public static AnimationStateSyncData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AnimationStateSyncData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AnimationStateSyncData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_AnimationStateSyncData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AnimationStateSyncData, AnimationStateSyncData.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_AnimationStateSyncData__FieldAccessorTable; }
    }
    
    public const int MainStateFieldNumber = 1;
    private bool hasMainState;
    private bool isMainStateChanged = true;
    private uint mainState_;
    public bool HasMainState {
      get { return hasMainState; }
    }
    [global::System.CLSCompliant(false)]
    public uint MainState {
      get { return mainState_; }
      set { hasMainState = true;
        isMainStateChanged = true;
        mainState_ = value;}
    }
    
    public const int SubStateFieldNumber = 2;
    private bool hasSubState;
    private bool isSubStateChanged = true;
    private uint subState_;
    public bool HasSubState {
      get { return hasSubState; }
    }
    [global::System.CLSCompliant(false)]
    public uint SubState {
      get { return subState_; }
      set { hasSubState = true;
        isSubStateChanged = true;
        subState_ = value;}
    }
    
    public const int LastMainStateFieldNumber = 3;
    private bool hasLastMainState;
    private bool isLastMainStateChanged = true;
    private uint lastMainState_;
    public bool HasLastMainState {
      get { return hasLastMainState; }
    }
    [global::System.CLSCompliant(false)]
    public uint LastMainState {
      get { return lastMainState_; }
      set { hasLastMainState = true;
        isLastMainStateChanged = true;
        lastMainState_ = value;}
    }
    
    public const int LastSubStateFieldNumber = 4;
    private bool hasLastSubState;
    private bool isLastSubStateChanged = true;
    private uint lastSubState_;
    public bool HasLastSubState {
      get { return hasLastSubState; }
    }
    [global::System.CLSCompliant(false)]
    public uint LastSubState {
      get { return lastSubState_; }
      set { hasLastSubState = true;
        isLastSubStateChanged = true;
        lastSubState_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _animationStateSyncDataFieldNames;
      if (hasMainState) {
        output.WriteUInt32(1, field_names[2], MainState);
      }
      if (hasSubState) {
        output.WriteUInt32(2, field_names[3], SubState);
      }
      if (hasLastMainState) {
        output.WriteUInt32(3, field_names[0], LastMainState);
      }
      if (hasLastSubState) {
        output.WriteUInt32(4, field_names[1], LastSubState);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasMainState) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, MainState);
      }
      if (hasSubState) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, SubState);
      }
      if (hasLastMainState) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, LastMainState);
      }
      if (hasLastSubState) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, LastSubState);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public AnimationStateSyncData CommitChange() {
      AnimationStateSyncData other = new AnimationStateSyncData();
      bool isChange = false;
      if (isMainStateChanged) {
        isChange = true;
        other.MainState = MainState;
        isMainStateChanged = false;
      }
      if (isSubStateChanged) {
        isChange = true;
        other.SubState = SubState;
        isSubStateChanged = false;
      }
      if (isLastMainStateChanged) {
        isChange = true;
        other.LastMainState = LastMainState;
        isLastMainStateChanged = false;
      }
      if (isLastSubStateChanged) {
        isChange = true;
        other.LastSubState = LastSubState;
        isLastSubStateChanged = false;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(AnimationStateSyncData other, bool isFull = false) {
      if (other == global::Protocol.AnimationStateSyncData.DefaultInstance) return;
      if (other.HasMainState) {
        MainState = other.MainState;
      }
      if (other.HasSubState) {
        SubState = other.SubState;
      }
      if (other.HasLastMainState) {
        LastMainState = other.LastMainState;
      }
      if (other.HasLastSubState) {
        LastSubState = other.LastSubState;
      }
    }
    
    public static AnimationStateSyncData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AnimationStateSyncData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AnimationStateSyncData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AnimationStateSyncData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AnimationStateSyncData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AnimationStateSyncData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AnimationStateSyncData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AnimationStateSyncData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AnimationStateSyncData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AnimationStateSyncData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AnimationStateSyncData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AnimationStateSyncData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AnimationStateSyncData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AnimationStateSyncData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AnimationStateSyncData result;
      
      private AnimationStateSyncData PrepareBuilder() {
        if (resultIsReadOnly) {
          AnimationStateSyncData original = result;
          result = new AnimationStateSyncData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AnimationStateSyncData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.AnimationStateSyncData.Descriptor; }
      }
      
      public override AnimationStateSyncData DefaultInstanceForType {
        get { return global::Protocol.AnimationStateSyncData.DefaultInstance; }
      }
      
      public override AnimationStateSyncData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AnimationStateSyncData) {
          return MergeFrom((AnimationStateSyncData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AnimationStateSyncData other) {
        if (other == global::Protocol.AnimationStateSyncData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMainState) {
          MainState = other.MainState;
        }
        if (other.HasSubState) {
          SubState = other.SubState;
        }
        if (other.HasLastMainState) {
          LastMainState = other.LastMainState;
        }
        if (other.HasLastSubState) {
          LastSubState = other.LastSubState;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_animationStateSyncDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _animationStateSyncDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMainState = input.ReadUInt32(ref result.mainState_);
              break;
            }
            case 16: {
              result.hasSubState = input.ReadUInt32(ref result.subState_);
              break;
            }
            case 24: {
              result.hasLastMainState = input.ReadUInt32(ref result.lastMainState_);
              break;
            }
            case 32: {
              result.hasLastSubState = input.ReadUInt32(ref result.lastSubState_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMainState {
        get { return result.hasMainState; }
      }
      [global::System.CLSCompliant(false)]
      public uint MainState {
        get { return result.MainState; }
        set { SetMainState(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMainState(uint value) {
        PrepareBuilder();
        result.hasMainState = true;
        result.mainState_ = value;
        return this;
      }
      public Builder ClearMainState() {
        PrepareBuilder();
        result.hasMainState = false;
        result.mainState_ = 0;
        return this;
      }
      
      public bool HasSubState {
        get { return result.hasSubState; }
      }
      [global::System.CLSCompliant(false)]
      public uint SubState {
        get { return result.SubState; }
        set { SetSubState(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSubState(uint value) {
        PrepareBuilder();
        result.hasSubState = true;
        result.subState_ = value;
        return this;
      }
      public Builder ClearSubState() {
        PrepareBuilder();
        result.hasSubState = false;
        result.subState_ = 0;
        return this;
      }
      
      public bool HasLastMainState {
        get { return result.hasLastMainState; }
      }
      [global::System.CLSCompliant(false)]
      public uint LastMainState {
        get { return result.LastMainState; }
        set { SetLastMainState(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLastMainState(uint value) {
        PrepareBuilder();
        result.hasLastMainState = true;
        result.lastMainState_ = value;
        return this;
      }
      public Builder ClearLastMainState() {
        PrepareBuilder();
        result.hasLastMainState = false;
        result.lastMainState_ = 0;
        return this;
      }
      
      public bool HasLastSubState {
        get { return result.hasLastSubState; }
      }
      [global::System.CLSCompliant(false)]
      public uint LastSubState {
        get { return result.LastSubState; }
        set { SetLastSubState(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLastSubState(uint value) {
        PrepareBuilder();
        result.hasLastSubState = true;
        result.lastSubState_ = value;
        return this;
      }
      public Builder ClearLastSubState() {
        PrepareBuilder();
        result.hasLastSubState = false;
        result.lastSubState_ = 0;
        return this;
      }
    }
    static AnimationStateSyncData() {
      object.ReferenceEquals(global::Protocol.ProtoBattle.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Attr : pb::GeneratedMessage<Attr, Attr.Builder> {
    public Attr() { }
    private static readonly Attr defaultInstance = new Attr().MakeReadOnly();
    private static readonly string[] _attrFieldNames = new string[] { "data", "id" };
    private static readonly uint[] _attrFieldTags = new uint[] { 21, 8 };
    public static Attr DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Attr DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Attr ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_Attr__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Attr, Attr.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_Attr__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    [global::System.CLSCompliant(false)]
    public uint Id {
      get { return id_; }
      set { hasId = true;
        id_ = value;}
    }
    
    public const int DataFieldNumber = 2;
    private bool hasData;
    private float data_;
    public bool HasData {
      get { return hasData; }
    }
    public float Data {
      get { return data_; }
      set { hasData = true;
        data_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _attrFieldNames;
      if (hasId) {
        output.WriteUInt32(1, field_names[1], Id);
      }
      if (hasData) {
        output.WriteFloat(2, field_names[0], Data);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
      }
      if (hasData) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, Data);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public Attr CommitChange() {
      Attr other = new Attr();
      bool isChange = false;
      other.Id = Id;
      other.Data = Data;
      return isChange?other:null;
    }
    
    public void MergeFrom(Attr other, bool isFull = false) {
      if (other == global::Protocol.Attr.DefaultInstance) return;
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasData) {
        Data = other.Data;
      }
    }
    
    public static Attr ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Attr ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Attr ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Attr ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Attr ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Attr ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Attr ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Attr ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Attr ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Attr ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Attr MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Attr prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Attr, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Attr cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Attr result;
      
      private Attr PrepareBuilder() {
        if (resultIsReadOnly) {
          Attr original = result;
          result = new Attr();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Attr MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.Attr.Descriptor; }
      }
      
      public override Attr DefaultInstanceForType {
        get { return global::Protocol.Attr.DefaultInstance; }
      }
      
      public override Attr BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Attr) {
          return MergeFrom((Attr) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Attr other) {
        if (other == global::Protocol.Attr.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasData) {
          Data = other.Data;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_attrFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _attrFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt32(ref result.id_);
              break;
            }
            case 21: {
              result.hasData = input.ReadFloat(ref result.data_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      [global::System.CLSCompliant(false)]
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasData {
        get { return result.hasData; }
      }
      public float Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(float value) {
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = 0F;
        return this;
      }
    }
    static Attr() {
      object.ReferenceEquals(global::Protocol.ProtoBattle.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CharacterSyncData : pb::GeneratedMessage<CharacterSyncData, CharacterSyncData.Builder> {
    public CharacterSyncData() { }
    private static readonly CharacterSyncData defaultInstance = new CharacterSyncData().MakeReadOnly();
    private static readonly string[] _characterSyncDataFieldNames = new string[] { "id" };
    private static readonly uint[] _characterSyncDataFieldTags = new uint[] { 8 };
    public static CharacterSyncData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CharacterSyncData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CharacterSyncData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_CharacterSyncData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CharacterSyncData, CharacterSyncData.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_CharacterSyncData__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private bool isIdChanged = true;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    [global::System.CLSCompliant(false)]
    public uint Id {
      get { return id_; }
      set { hasId = true;
        isIdChanged = true;
        id_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _characterSyncDataFieldNames;
      if (hasId) {
        output.WriteUInt32(1, field_names[0], Id);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public CharacterSyncData CommitChange() {
      CharacterSyncData other = new CharacterSyncData();
      bool isChange = false;
      if (isIdChanged) {
        isChange = true;
        other.Id = Id;
        isIdChanged = false;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(CharacterSyncData other, bool isFull = false) {
      if (other == global::Protocol.CharacterSyncData.DefaultInstance) return;
      if (other.HasId) {
        Id = other.Id;
      }
    }
    
    public static CharacterSyncData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CharacterSyncData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CharacterSyncData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CharacterSyncData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CharacterSyncData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CharacterSyncData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CharacterSyncData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CharacterSyncData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CharacterSyncData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CharacterSyncData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CharacterSyncData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CharacterSyncData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CharacterSyncData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CharacterSyncData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CharacterSyncData result;
      
      private CharacterSyncData PrepareBuilder() {
        if (resultIsReadOnly) {
          CharacterSyncData original = result;
          result = new CharacterSyncData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CharacterSyncData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.CharacterSyncData.Descriptor; }
      }
      
      public override CharacterSyncData DefaultInstanceForType {
        get { return global::Protocol.CharacterSyncData.DefaultInstance; }
      }
      
      public override CharacterSyncData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CharacterSyncData) {
          return MergeFrom((CharacterSyncData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CharacterSyncData other) {
        if (other == global::Protocol.CharacterSyncData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_characterSyncDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _characterSyncDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt32(ref result.id_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      [global::System.CLSCompliant(false)]
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
    }
    static CharacterSyncData() {
      object.ReferenceEquals(global::Protocol.ProtoBattle.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BagSyncData : pb::GeneratedMessage<BagSyncData, BagSyncData.Builder> {
    public BagSyncData() { }
    private static readonly BagSyncData defaultInstance = new BagSyncData().MakeReadOnly();
    private static readonly string[] _bagSyncDataFieldNames = new string[] { "id" };
    private static readonly uint[] _bagSyncDataFieldTags = new uint[] { 8 };
    public static BagSyncData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BagSyncData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BagSyncData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_BagSyncData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BagSyncData, BagSyncData.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_BagSyncData__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    [global::System.CLSCompliant(false)]
    public uint Id {
      get { return id_; }
      set { hasId = true;
        id_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _bagSyncDataFieldNames;
      if (hasId) {
        output.WriteUInt32(1, field_names[0], Id);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public BagSyncData CommitChange() {
      BagSyncData other = new BagSyncData();
      bool isChange = false;
      other.Id = Id;
      return isChange?other:null;
    }
    
    public void MergeFrom(BagSyncData other, bool isFull = false) {
      if (other == global::Protocol.BagSyncData.DefaultInstance) return;
      if (other.HasId) {
        Id = other.Id;
      }
    }
    
    public static BagSyncData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BagSyncData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BagSyncData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BagSyncData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BagSyncData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BagSyncData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BagSyncData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BagSyncData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BagSyncData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BagSyncData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BagSyncData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BagSyncData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BagSyncData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BagSyncData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BagSyncData result;
      
      private BagSyncData PrepareBuilder() {
        if (resultIsReadOnly) {
          BagSyncData original = result;
          result = new BagSyncData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BagSyncData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.BagSyncData.Descriptor; }
      }
      
      public override BagSyncData DefaultInstanceForType {
        get { return global::Protocol.BagSyncData.DefaultInstance; }
      }
      
      public override BagSyncData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BagSyncData) {
          return MergeFrom((BagSyncData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BagSyncData other) {
        if (other == global::Protocol.BagSyncData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bagSyncDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bagSyncDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt32(ref result.id_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      [global::System.CLSCompliant(false)]
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
    }
    static BagSyncData() {
      object.ReferenceEquals(global::Protocol.ProtoBattle.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TagItemData : pb::GeneratedMessage<TagItemData, TagItemData.Builder> {
    public TagItemData() { }
    private static readonly TagItemData defaultInstance = new TagItemData().MakeReadOnly();
    private static readonly string[] _tagItemDataFieldNames = new string[] { "id", "value" };
    private static readonly uint[] _tagItemDataFieldTags = new uint[] { 8, 16 };
    public static TagItemData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TagItemData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TagItemData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_TagItemData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TagItemData, TagItemData.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_TagItemData__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    [global::System.CLSCompliant(false)]
    public uint Id {
      get { return id_; }
      set { hasId = true;
        id_ = value;}
    }
    
    public const int ValueFieldNumber = 2;
    private bool hasValue;
    private bool isValueChanged = true;
    private int value_;
    public bool HasValue {
      get { return hasValue; }
    }
    public int Value {
      get { return value_; }
      set { hasValue = true;
        isValueChanged = true;
        value_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _tagItemDataFieldNames;
      if (hasId) {
        output.WriteUInt32(1, field_names[0], Id);
      }
      if (hasValue) {
        output.WriteInt32(2, field_names[1], Value);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
      }
      if (hasValue) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Value);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public TagItemData CommitChange() {
      TagItemData other = new TagItemData();
      bool isChange = false;
      other.Id = Id;
      if (isValueChanged) {
        isChange = true;
        other.Value = Value;
        isValueChanged = false;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(TagItemData other, bool isFull = false) {
      if (other == global::Protocol.TagItemData.DefaultInstance) return;
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
    }
    
    public static TagItemData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TagItemData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TagItemData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TagItemData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TagItemData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TagItemData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TagItemData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TagItemData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TagItemData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TagItemData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TagItemData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TagItemData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TagItemData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TagItemData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TagItemData result;
      
      private TagItemData PrepareBuilder() {
        if (resultIsReadOnly) {
          TagItemData original = result;
          result = new TagItemData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TagItemData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.TagItemData.Descriptor; }
      }
      
      public override TagItemData DefaultInstanceForType {
        get { return global::Protocol.TagItemData.DefaultInstance; }
      }
      
      public override TagItemData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TagItemData) {
          return MergeFrom((TagItemData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TagItemData other) {
        if (other == global::Protocol.TagItemData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tagItemDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tagItemDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasValue = input.ReadInt32(ref result.value_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      [global::System.CLSCompliant(false)]
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public int Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(int value) {
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = 0;
        return this;
      }
    }
    static TagItemData() {
      object.ReferenceEquals(global::Protocol.ProtoBattle.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TagSyncData : pb::GeneratedMessage<TagSyncData, TagSyncData.Builder> {
    public TagSyncData() { }
    private static readonly TagSyncData defaultInstance = new TagSyncData().MakeReadOnly();
    private static readonly string[] _tagSyncDataFieldNames = new string[] { "addtag_data_merge_list", "removetag_data_merge_list", "tag_data_merge_list" };
    private static readonly uint[] _tagSyncDataFieldTags = new uint[] { 8010, 16008, 10 };
    public static TagSyncData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TagSyncData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TagSyncData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_TagSyncData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TagSyncData, TagSyncData.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_TagSyncData__FieldAccessorTable; }
    }
    
    public const int TagDataMergeListFieldNumber = 1;
    private pbc::PopsicleList<global::Protocol.TagItemData> tagDataMergeList_ = new pbc::PopsicleList<global::Protocol.TagItemData>();
    public scg::IList<global::Protocol.TagItemData> TagDataMergeList {
      get { return pbc::Lists.AsReadOnly(tagDataMergeList_); }
    }
    public int TagDataMergeListCount {
      get { return tagDataMergeList_.Count; }
    }
    public global::Protocol.TagItemData GetTagDataMergeList(int index) {
      return tagDataMergeList_[index];
    }
    public global::Protocol.TagItemData FindTagDataMergeList(System.Predicate<global::Protocol.TagItemData> match) {
      return tagDataMergeList_.Find(match);
    }
    public System.Collections.Generic.IList<global::Protocol.TagItemData> FindAllTagDataMergeList(System.Predicate<global::Protocol.TagItemData> match) {
      return tagDataMergeList_.FindAll(match);
    }
    public void SetTagDataMergeList(int index, global::Protocol.TagItemData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (index < 0 || index >= tagDataMergeList_.Count) return;
      removetagDataMergeList_.Add(tagDataMergeList_[index].Id);
      addtagDataMergeList_.Add(value);
      tagDataMergeList_[index] = value;
    }
    public void AddTagDataMergeList(global::Protocol.TagItemData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      tagDataMergeList_.Add(value);
      addtagDataMergeList_.Add(value);
    }
    public void AddRangeTagDataMergeList(scg::IEnumerable<global::Protocol.TagItemData> values) {
      tagDataMergeList_.Add(values);
      addtagDataMergeList_.Add(values);
    }
    public void RemoveTagDataMergeList(global::Protocol.TagItemData value) {
      if (!tagDataMergeList_.Contains(value)) return;
      removetagDataMergeList_.Add(value.Id);
      tagDataMergeList_.Remove(value);
    }
    public void RemoveAtTagDataMergeList(int index) {
      if (index < 0 || index >= tagDataMergeList_.Count) return;
      removetagDataMergeList_.Add(tagDataMergeList_[index].Id);
      tagDataMergeList_.RemoveAt(index);
    }
    public void ClearTagDataMergeList() {
      if (tagDataMergeList_.Count <= 0) return;
      foreach (var item in tagDataMergeList_)
      {
        removetagDataMergeList_.Add(item.Id);
      }
      tagDataMergeList_.Clear();
    }
    
    public const int AddtagDataMergeListFieldNumber = 1001;
    private pbc::PopsicleList<global::Protocol.TagItemData> addtagDataMergeList_ = new pbc::PopsicleList<global::Protocol.TagItemData>();
    public scg::IList<global::Protocol.TagItemData> AddtagDataMergeList {
      get { return pbc::Lists.AsReadOnly(addtagDataMergeList_); }
    }
    public int AddtagDataMergeListCount {
      get { return addtagDataMergeList_.Count; }
    }
    public global::Protocol.TagItemData GetAddtagDataMergeList(int index) {
      return addtagDataMergeList_[index];
    }
    public global::Protocol.TagItemData FindAddtagDataMergeList(System.Predicate<global::Protocol.TagItemData> match) {
      return addtagDataMergeList_.Find(match);
    }
    public System.Collections.Generic.IList<global::Protocol.TagItemData> FindAllAddtagDataMergeList(System.Predicate<global::Protocol.TagItemData> match) {
      return addtagDataMergeList_.FindAll(match);
    }
    
    public const int RemovetagDataMergeListFieldNumber = 2001;
    private pbc::PopsicleList<uint> removetagDataMergeList_ = new pbc::PopsicleList<uint>();
    private bool isRemovetagDataMergeListChanged = true;
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> RemovetagDataMergeList {
      get { return pbc::Lists.AsReadOnly(removetagDataMergeList_); }
    }
    public int RemovetagDataMergeListCount {
      get { return removetagDataMergeList_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetRemovetagDataMergeList(int index) {
      return removetagDataMergeList_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Protocol.TagItemData element in TagDataMergeList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Protocol.TagItemData element in AddtagDataMergeList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _tagSyncDataFieldNames;
      if (tagDataMergeList_.Count > 0) {
        output.WriteMessageArray(1, field_names[2], tagDataMergeList_);
      }
      if (addtagDataMergeList_.Count > 0) {
        output.WriteMessageArray(1001, field_names[0], addtagDataMergeList_);
      }
      if (removetagDataMergeList_.Count > 0) {
        output.WriteUInt32Array(2001, field_names[1], removetagDataMergeList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      foreach (global::Protocol.TagItemData element in TagDataMergeList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      foreach (global::Protocol.TagItemData element in AddtagDataMergeList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1001, element);
      }
      {
        int dataSize = 0;
        foreach (uint element in RemovetagDataMergeList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * removetagDataMergeList_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public TagSyncData CommitChange() {
      TagSyncData other = new TagSyncData();
      bool isChange = false;
        
      if (addtagDataMergeList_.Count > 0) 
      { 
        isChange = true;
        other.addtagDataMergeList_.Add(addtagDataMergeList_);
      }
      if (removetagDataMergeList_.Count > 0) 
      { 
        isChange = true;
        other.removetagDataMergeList_.Add(removetagDataMergeList_);
      }
      if (tagDataMergeList_.Count > 0) 
      { 
        foreach (var item in tagDataMergeList_) 
        { 
          bool isExist = false; 
          foreach (var item1 in addtagDataMergeList_) 
          { 
            if (item.Id == item1.Id)
            { 
              isExist = true; 
            } 
          } 
           
          if (!isExist) 
          { 
            var tagDataMergeListcommit = item.CommitChange();
            if(tagDataMergeListcommit!=null)
            {
              isChange = true;
              other.tagDataMergeList_.Add(tagDataMergeListcommit);
            }
          } 
        } 
      }
      addtagDataMergeList_.Clear();
      removetagDataMergeList_.Clear();
      return isChange?other:null;
    }
    
    public void MergeFrom(TagSyncData other, bool isFull = false) {
      if (other == global::Protocol.TagSyncData.DefaultInstance) return;
      if (other.removetagDataMergeList_.Count > 0) 
      { 
        int index = -1;
        foreach (var item in other.removetagDataMergeList_)
        { 
          for(int i=0; i<tagDataMergeList_.Count; i++)
          { 
            if (tagDataMergeList_[i].Id == item) 
            { 
              index = i;
              break;
            } 
          } 
          
          if(index >= 0)
            tagDataMergeList_.RemoveAt(index);
        }
      }
      if (other.addtagDataMergeList_.Count > 0) 
      { 
        foreach (var item in other.addtagDataMergeList_) 
        { 
          bool isExist = false; 
          foreach (var item1 in tagDataMergeList_) 
          { 
            if (item.Id == item1.Id)
            { 
              item1.MergeFrom(item, isFull); 
              isExist = true;
              break;
            } 
          } 
           
          if (!isExist) 
          { 
             tagDataMergeList_.Add(item);
          } 
        } 
      }
      if (other.tagDataMergeList_.Count > 0) 
      { 
        foreach (var item in other.tagDataMergeList_) 
        { 
          foreach(var item1 in tagDataMergeList_) 
          { 
            if (item.Id == item1.Id)
            { 
              item1.MergeFrom(item, isFull);
            } 
          } 
        } 
      }
      if(addtagDataMergeList_.Count > 0)addtagDataMergeList_.Clear();
      if(removetagDataMergeList_.Count > 0)removetagDataMergeList_.Clear();
      if (isFull) 
      {
        if (other.tagDataMergeList_.Count != 0) {
          tagDataMergeList_.Clear();
          tagDataMergeList_.Add(other.tagDataMergeList_);
        }
      }
    }
    
    public static TagSyncData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TagSyncData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TagSyncData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TagSyncData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TagSyncData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TagSyncData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TagSyncData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TagSyncData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TagSyncData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TagSyncData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TagSyncData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TagSyncData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TagSyncData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TagSyncData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TagSyncData result;
      
      private TagSyncData PrepareBuilder() {
        if (resultIsReadOnly) {
          TagSyncData original = result;
          result = new TagSyncData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TagSyncData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.TagSyncData.Descriptor; }
      }
      
      public override TagSyncData DefaultInstanceForType {
        get { return global::Protocol.TagSyncData.DefaultInstance; }
      }
      
      public override TagSyncData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TagSyncData) {
          return MergeFrom((TagSyncData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TagSyncData other) {
        if (other == global::Protocol.TagSyncData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.tagDataMergeList_.Count != 0) {
          result.tagDataMergeList_.Add(other.tagDataMergeList_);
        }
        if (other.addtagDataMergeList_.Count != 0) {
          result.addtagDataMergeList_.Add(other.addtagDataMergeList_);
        }
        if (other.removetagDataMergeList_.Count != 0) {
          result.removetagDataMergeList_.Add(other.removetagDataMergeList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tagSyncDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tagSyncDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.tagDataMergeList_, global::Protocol.TagItemData.DefaultInstance, extensionRegistry);
              break;
            }
            case 8010: {
              input.ReadMessageArray(tag, field_name, result.addtagDataMergeList_, global::Protocol.TagItemData.DefaultInstance, extensionRegistry);
              break;
            }
            case 16010:
            case 16008: {
              input.ReadUInt32Array(tag, field_name, result.removetagDataMergeList_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Protocol.TagItemData> TagDataMergeList {
        get { return PrepareBuilder().tagDataMergeList_; }
      }
      public int TagDataMergeListCount {
        get { return result.TagDataMergeListCount; }
      }
      public global::Protocol.TagItemData GetTagDataMergeList(int index) {
        return result.GetTagDataMergeList(index);
      }
      public Builder SetTagDataMergeList(int index, global::Protocol.TagItemData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tagDataMergeList_[index] = value;
        return this;
      }
      public Builder SetTagDataMergeList(int index, global::Protocol.TagItemData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.tagDataMergeList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddTagDataMergeList(global::Protocol.TagItemData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tagDataMergeList_.Add(value);
        return this;
      }
      public Builder AddTagDataMergeList(global::Protocol.TagItemData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.tagDataMergeList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeTagDataMergeList(scg::IEnumerable<global::Protocol.TagItemData> values) {
        PrepareBuilder();
        result.tagDataMergeList_.Add(values);
        return this;
      }
      public Builder ClearTagDataMergeList() {
        PrepareBuilder();
        result.tagDataMergeList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Protocol.TagItemData> AddtagDataMergeList {
        get { return PrepareBuilder().addtagDataMergeList_; }
      }
      public int AddtagDataMergeListCount {
        get { return result.AddtagDataMergeListCount; }
      }
      public global::Protocol.TagItemData GetAddtagDataMergeList(int index) {
        return result.GetAddtagDataMergeList(index);
      }
      public Builder SetAddtagDataMergeList(int index, global::Protocol.TagItemData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.addtagDataMergeList_[index] = value;
        return this;
      }
      public Builder SetAddtagDataMergeList(int index, global::Protocol.TagItemData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.addtagDataMergeList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAddtagDataMergeList(global::Protocol.TagItemData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.addtagDataMergeList_.Add(value);
        return this;
      }
      public Builder AddAddtagDataMergeList(global::Protocol.TagItemData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.addtagDataMergeList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAddtagDataMergeList(scg::IEnumerable<global::Protocol.TagItemData> values) {
        PrepareBuilder();
        result.addtagDataMergeList_.Add(values);
        return this;
      }
      public Builder ClearAddtagDataMergeList() {
        PrepareBuilder();
        result.addtagDataMergeList_.Clear();
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> RemovetagDataMergeList {
        get { return PrepareBuilder().removetagDataMergeList_; }
      }
      public int RemovetagDataMergeListCount {
        get { return result.RemovetagDataMergeListCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetRemovetagDataMergeList(int index) {
        return result.GetRemovetagDataMergeList(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRemovetagDataMergeList(int index, uint value) {
        PrepareBuilder();
        result.removetagDataMergeList_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRemovetagDataMergeList(uint value) {
        PrepareBuilder();
        result.removetagDataMergeList_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeRemovetagDataMergeList(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.removetagDataMergeList_.Add(values);
        return this;
      }
      public Builder ClearRemovetagDataMergeList() {
        PrepareBuilder();
        result.removetagDataMergeList_.Clear();
        return this;
      }
    }
    static TagSyncData() {
      object.ReferenceEquals(global::Protocol.ProtoBattle.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AttributeSyncData : pb::GeneratedMessage<AttributeSyncData, AttributeSyncData.Builder> {
    public AttributeSyncData() { }
    private static readonly AttributeSyncData defaultInstance = new AttributeSyncData().MakeReadOnly();
    private static readonly string[] _attributeSyncDataFieldNames = new string[] { "addattr_merge_list", "addinit_attr_merge_list", "attr_merge_list", "init_attr_merge_list", "removeattr_merge_list", "removeinit_attr_merge_list" };
    private static readonly uint[] _attributeSyncDataFieldTags = new uint[] { 8010, 8016, 10, 16, 16008, 16016 };
    public static AttributeSyncData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AttributeSyncData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AttributeSyncData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_AttributeSyncData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AttributeSyncData, AttributeSyncData.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_AttributeSyncData__FieldAccessorTable; }
    }
    
    public const int AttrMergeListFieldNumber = 1;
    private pbc::PopsicleList<global::Protocol.Attr> attrMergeList_ = new pbc::PopsicleList<global::Protocol.Attr>();
    public scg::IList<global::Protocol.Attr> AttrMergeList {
      get { return pbc::Lists.AsReadOnly(attrMergeList_); }
    }
    public int AttrMergeListCount {
      get { return attrMergeList_.Count; }
    }
    public global::Protocol.Attr GetAttrMergeList(int index) {
      return attrMergeList_[index];
    }
    public global::Protocol.Attr FindAttrMergeList(System.Predicate<global::Protocol.Attr> match) {
      return attrMergeList_.Find(match);
    }
    public System.Collections.Generic.IList<global::Protocol.Attr> FindAllAttrMergeList(System.Predicate<global::Protocol.Attr> match) {
      return attrMergeList_.FindAll(match);
    }
    public void SetAttrMergeList(int index, global::Protocol.Attr value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (index < 0 || index >= attrMergeList_.Count) return;
      removeattrMergeList_.Add(attrMergeList_[index].Id);
      addattrMergeList_.Add(value);
      attrMergeList_[index] = value;
    }
    public void AddAttrMergeList(global::Protocol.Attr value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      attrMergeList_.Add(value);
      addattrMergeList_.Add(value);
    }
    public void AddRangeAttrMergeList(scg::IEnumerable<global::Protocol.Attr> values) {
      attrMergeList_.Add(values);
      addattrMergeList_.Add(values);
    }
    public void RemoveAttrMergeList(global::Protocol.Attr value) {
      if (!attrMergeList_.Contains(value)) return;
      removeattrMergeList_.Add(value.Id);
      attrMergeList_.Remove(value);
    }
    public void RemoveAtAttrMergeList(int index) {
      if (index < 0 || index >= attrMergeList_.Count) return;
      removeattrMergeList_.Add(attrMergeList_[index].Id);
      attrMergeList_.RemoveAt(index);
    }
    public void ClearAttrMergeList() {
      if (attrMergeList_.Count <= 0) return;
      foreach (var item in attrMergeList_)
      {
        removeattrMergeList_.Add(item.Id);
      }
      attrMergeList_.Clear();
    }
    
    public const int InitAttrMergeListFieldNumber = 2;
    private pbc::PopsicleList<uint> initAttrMergeList_ = new pbc::PopsicleList<uint>();
    private bool isInitAttrMergeListChanged = true;
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> InitAttrMergeList {
      get { return pbc::Lists.AsReadOnly(initAttrMergeList_); }
    }
    public int InitAttrMergeListCount {
      get { return initAttrMergeList_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetInitAttrMergeList(int index) {
      return initAttrMergeList_[index];
    }
    [global::System.CLSCompliant(false)]
    public void SetInitAttrMergeList(int index, uint value) {
      if (index < 0 || index >= initAttrMergeList_.Count) return;
      removeinitAttrMergeList_.Add(initAttrMergeList_[index]);
      addinitAttrMergeList_.Add(value);
      initAttrMergeList_[index] = value;
      isInitAttrMergeListChanged = true;
    }
    [global::System.CLSCompliant(false)]
    public void AddInitAttrMergeList(uint value) {
      initAttrMergeList_.Add(value);
      isInitAttrMergeListChanged = true;
      addinitAttrMergeList_.Add(value);
    }
    [global::System.CLSCompliant(false)]
    public void AddRangeInitAttrMergeList(scg::IEnumerable<uint> values) {
      initAttrMergeList_.Add(values);
      isInitAttrMergeListChanged = true;
      addinitAttrMergeList_.Add(values);
    }
    public void RemoveInitAttrMergeList(uint value) {
      if (!initAttrMergeList_.Contains(value)) return;
      removeinitAttrMergeList_.Add(value);
      initAttrMergeList_.Remove(value);
      isInitAttrMergeListChanged = true;
    }
    public void RemoveAtInitAttrMergeList(int index) {
      if (index < 0 || index >= initAttrMergeList_.Count) return;
      removeinitAttrMergeList_.Add(initAttrMergeList_[index]);
      initAttrMergeList_.RemoveAt(index);
      isInitAttrMergeListChanged = true;
    }
    public void ClearInitAttrMergeList() {
      if (initAttrMergeList_.Count <= 0) return;
      removeinitAttrMergeList_.Add(initAttrMergeList_);
      initAttrMergeList_.Clear();
      isInitAttrMergeListChanged = true;
    }
    
    public const int AddattrMergeListFieldNumber = 1001;
    private pbc::PopsicleList<global::Protocol.Attr> addattrMergeList_ = new pbc::PopsicleList<global::Protocol.Attr>();
    public scg::IList<global::Protocol.Attr> AddattrMergeList {
      get { return pbc::Lists.AsReadOnly(addattrMergeList_); }
    }
    public int AddattrMergeListCount {
      get { return addattrMergeList_.Count; }
    }
    public global::Protocol.Attr GetAddattrMergeList(int index) {
      return addattrMergeList_[index];
    }
    public global::Protocol.Attr FindAddattrMergeList(System.Predicate<global::Protocol.Attr> match) {
      return addattrMergeList_.Find(match);
    }
    public System.Collections.Generic.IList<global::Protocol.Attr> FindAllAddattrMergeList(System.Predicate<global::Protocol.Attr> match) {
      return addattrMergeList_.FindAll(match);
    }
    
    public const int RemoveattrMergeListFieldNumber = 2001;
    private pbc::PopsicleList<uint> removeattrMergeList_ = new pbc::PopsicleList<uint>();
    private bool isRemoveattrMergeListChanged = true;
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> RemoveattrMergeList {
      get { return pbc::Lists.AsReadOnly(removeattrMergeList_); }
    }
    public int RemoveattrMergeListCount {
      get { return removeattrMergeList_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetRemoveattrMergeList(int index) {
      return removeattrMergeList_[index];
    }
    
    public const int AddinitAttrMergeListFieldNumber = 1002;
    private pbc::PopsicleList<uint> addinitAttrMergeList_ = new pbc::PopsicleList<uint>();
    private bool isAddinitAttrMergeListChanged = true;
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> AddinitAttrMergeList {
      get { return pbc::Lists.AsReadOnly(addinitAttrMergeList_); }
    }
    public int AddinitAttrMergeListCount {
      get { return addinitAttrMergeList_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetAddinitAttrMergeList(int index) {
      return addinitAttrMergeList_[index];
    }
    
    public const int RemoveinitAttrMergeListFieldNumber = 2002;
    private pbc::PopsicleList<uint> removeinitAttrMergeList_ = new pbc::PopsicleList<uint>();
    private bool isRemoveinitAttrMergeListChanged = true;
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> RemoveinitAttrMergeList {
      get { return pbc::Lists.AsReadOnly(removeinitAttrMergeList_); }
    }
    public int RemoveinitAttrMergeListCount {
      get { return removeinitAttrMergeList_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetRemoveinitAttrMergeList(int index) {
      return removeinitAttrMergeList_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Protocol.Attr element in AttrMergeList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Protocol.Attr element in AddattrMergeList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _attributeSyncDataFieldNames;
      if (attrMergeList_.Count > 0) {
        output.WriteMessageArray(1, field_names[2], attrMergeList_);
      }
      if (initAttrMergeList_.Count > 0) {
        output.WriteUInt32Array(2, field_names[3], initAttrMergeList_);
      }
      if (addattrMergeList_.Count > 0) {
        output.WriteMessageArray(1001, field_names[0], addattrMergeList_);
      }
      if (addinitAttrMergeList_.Count > 0) {
        output.WriteUInt32Array(1002, field_names[1], addinitAttrMergeList_);
      }
      if (removeattrMergeList_.Count > 0) {
        output.WriteUInt32Array(2001, field_names[4], removeattrMergeList_);
      }
      if (removeinitAttrMergeList_.Count > 0) {
        output.WriteUInt32Array(2002, field_names[5], removeinitAttrMergeList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      foreach (global::Protocol.Attr element in AttrMergeList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      {
        int dataSize = 0;
        foreach (uint element in InitAttrMergeList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * initAttrMergeList_.Count;
      }
      foreach (global::Protocol.Attr element in AddattrMergeList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1001, element);
      }
      {
        int dataSize = 0;
        foreach (uint element in RemoveattrMergeList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * removeattrMergeList_.Count;
      }
      {
        int dataSize = 0;
        foreach (uint element in AddinitAttrMergeList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * addinitAttrMergeList_.Count;
      }
      {
        int dataSize = 0;
        foreach (uint element in RemoveinitAttrMergeList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * removeinitAttrMergeList_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public AttributeSyncData CommitChange() {
      AttributeSyncData other = new AttributeSyncData();
      bool isChange = false;
        
      if (addattrMergeList_.Count > 0) 
      { 
        isChange = true;
        other.addattrMergeList_.Add(addattrMergeList_);
      }
      if (removeattrMergeList_.Count > 0) 
      { 
        isChange = true;
        other.removeattrMergeList_.Add(removeattrMergeList_);
      }
      if (attrMergeList_.Count > 0) 
      { 
        foreach (var item in attrMergeList_) 
        { 
          bool isExist = false; 
          foreach (var item1 in addattrMergeList_) 
          { 
            if (item.Id == item1.Id)
            { 
              isExist = true; 
            } 
          } 
           
          if (!isExist) 
          { 
            var attrMergeListcommit = item.CommitChange();
            if(attrMergeListcommit!=null)
            {
              isChange = true;
              other.attrMergeList_.Add(attrMergeListcommit);
            }
          } 
        } 
      }
      addattrMergeList_.Clear();
      removeattrMergeList_.Clear();
      if (isInitAttrMergeListChanged) 
      { 
        isChange = true;
        if (addinitAttrMergeList_.Count > 0) 
        { 
          other.addinitAttrMergeList_.Add(addinitAttrMergeList_);
        }
        if (removeinitAttrMergeList_.Count > 0) 
        { 
          other.removeinitAttrMergeList_.Add(removeinitAttrMergeList_);
        }
        addinitAttrMergeList_.Clear();
        removeinitAttrMergeList_.Clear();
        isInitAttrMergeListChanged = false;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(AttributeSyncData other, bool isFull = false) {
      if (other == global::Protocol.AttributeSyncData.DefaultInstance) return;
      if (other.removeattrMergeList_.Count > 0) 
      { 
        int index = -1;
        foreach (var item in other.removeattrMergeList_)
        { 
          for(int i=0; i<attrMergeList_.Count; i++)
          { 
            if (attrMergeList_[i].Id == item) 
            { 
              index = i;
              break;
            } 
          } 
          
          if(index >= 0)
            attrMergeList_.RemoveAt(index);
        }
      }
      if (other.addattrMergeList_.Count > 0) 
      { 
        foreach (var item in other.addattrMergeList_) 
        { 
          bool isExist = false; 
          foreach (var item1 in attrMergeList_) 
          { 
            if (item.Id == item1.Id)
            { 
              item1.MergeFrom(item, isFull); 
              isExist = true;
              break;
            } 
          } 
           
          if (!isExist) 
          { 
             attrMergeList_.Add(item);
          } 
        } 
      }
      if (other.attrMergeList_.Count > 0) 
      { 
        foreach (var item in other.attrMergeList_) 
        { 
          foreach(var item1 in attrMergeList_) 
          { 
            if (item.Id == item1.Id)
            { 
              item1.MergeFrom(item, isFull);
            } 
          } 
        } 
      }
      if(addattrMergeList_.Count > 0)addattrMergeList_.Clear();
      if(removeattrMergeList_.Count > 0)removeattrMergeList_.Clear();
      if (isFull) 
      {
        if (other.attrMergeList_.Count != 0) {
          attrMergeList_.Clear();
          attrMergeList_.Add(other.attrMergeList_);
        }
      }
      if (other.removeinitAttrMergeList_.Count > 0) 
      { 
        foreach (var item in other.removeinitAttrMergeList_)
        { 
          initAttrMergeList_.Remove(item);
        } 
      }
      if (other.addinitAttrMergeList_.Count > 0) 
      { 
        // 由于数据可能从其他协议传递到客户端，list做去重操作 
        foreach (var item in other.addinitAttrMergeList_)
        { 
          if(!initAttrMergeList_.Contains(item)) 
            initAttrMergeList_.Add(item);
        } 
      }
      if(addinitAttrMergeList_.Count > 0)addinitAttrMergeList_.Clear();
      if(removeinitAttrMergeList_.Count > 0)removeinitAttrMergeList_.Clear();
      if (isFull) 
      {
        if (other.initAttrMergeList_.Count != 0) {
          initAttrMergeList_.Clear();
          initAttrMergeList_.Add(other.initAttrMergeList_);
        }
      }
    }
    
    public static AttributeSyncData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AttributeSyncData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AttributeSyncData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AttributeSyncData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AttributeSyncData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AttributeSyncData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AttributeSyncData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AttributeSyncData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AttributeSyncData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AttributeSyncData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AttributeSyncData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AttributeSyncData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AttributeSyncData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AttributeSyncData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AttributeSyncData result;
      
      private AttributeSyncData PrepareBuilder() {
        if (resultIsReadOnly) {
          AttributeSyncData original = result;
          result = new AttributeSyncData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AttributeSyncData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.AttributeSyncData.Descriptor; }
      }
      
      public override AttributeSyncData DefaultInstanceForType {
        get { return global::Protocol.AttributeSyncData.DefaultInstance; }
      }
      
      public override AttributeSyncData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AttributeSyncData) {
          return MergeFrom((AttributeSyncData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AttributeSyncData other) {
        if (other == global::Protocol.AttributeSyncData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.attrMergeList_.Count != 0) {
          result.attrMergeList_.Add(other.attrMergeList_);
        }
        if (other.initAttrMergeList_.Count != 0) {
          result.initAttrMergeList_.Add(other.initAttrMergeList_);
        }
        if (other.addattrMergeList_.Count != 0) {
          result.addattrMergeList_.Add(other.addattrMergeList_);
        }
        if (other.removeattrMergeList_.Count != 0) {
          result.removeattrMergeList_.Add(other.removeattrMergeList_);
        }
        if (other.addinitAttrMergeList_.Count != 0) {
          result.addinitAttrMergeList_.Add(other.addinitAttrMergeList_);
        }
        if (other.removeinitAttrMergeList_.Count != 0) {
          result.removeinitAttrMergeList_.Add(other.removeinitAttrMergeList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_attributeSyncDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _attributeSyncDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.attrMergeList_, global::Protocol.Attr.DefaultInstance, extensionRegistry);
              break;
            }
            case 18:
            case 16: {
              input.ReadUInt32Array(tag, field_name, result.initAttrMergeList_);
              break;
            }
            case 8010: {
              input.ReadMessageArray(tag, field_name, result.addattrMergeList_, global::Protocol.Attr.DefaultInstance, extensionRegistry);
              break;
            }
            case 8018:
            case 8016: {
              input.ReadUInt32Array(tag, field_name, result.addinitAttrMergeList_);
              break;
            }
            case 16010:
            case 16008: {
              input.ReadUInt32Array(tag, field_name, result.removeattrMergeList_);
              break;
            }
            case 16018:
            case 16016: {
              input.ReadUInt32Array(tag, field_name, result.removeinitAttrMergeList_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Protocol.Attr> AttrMergeList {
        get { return PrepareBuilder().attrMergeList_; }
      }
      public int AttrMergeListCount {
        get { return result.AttrMergeListCount; }
      }
      public global::Protocol.Attr GetAttrMergeList(int index) {
        return result.GetAttrMergeList(index);
      }
      public Builder SetAttrMergeList(int index, global::Protocol.Attr value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attrMergeList_[index] = value;
        return this;
      }
      public Builder SetAttrMergeList(int index, global::Protocol.Attr.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attrMergeList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttrMergeList(global::Protocol.Attr value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attrMergeList_.Add(value);
        return this;
      }
      public Builder AddAttrMergeList(global::Protocol.Attr.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attrMergeList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttrMergeList(scg::IEnumerable<global::Protocol.Attr> values) {
        PrepareBuilder();
        result.attrMergeList_.Add(values);
        return this;
      }
      public Builder ClearAttrMergeList() {
        PrepareBuilder();
        result.attrMergeList_.Clear();
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> InitAttrMergeList {
        get { return PrepareBuilder().initAttrMergeList_; }
      }
      public int InitAttrMergeListCount {
        get { return result.InitAttrMergeListCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetInitAttrMergeList(int index) {
        return result.GetInitAttrMergeList(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetInitAttrMergeList(int index, uint value) {
        PrepareBuilder();
        result.initAttrMergeList_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddInitAttrMergeList(uint value) {
        PrepareBuilder();
        result.initAttrMergeList_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeInitAttrMergeList(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.initAttrMergeList_.Add(values);
        return this;
      }
      public Builder ClearInitAttrMergeList() {
        PrepareBuilder();
        result.initAttrMergeList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Protocol.Attr> AddattrMergeList {
        get { return PrepareBuilder().addattrMergeList_; }
      }
      public int AddattrMergeListCount {
        get { return result.AddattrMergeListCount; }
      }
      public global::Protocol.Attr GetAddattrMergeList(int index) {
        return result.GetAddattrMergeList(index);
      }
      public Builder SetAddattrMergeList(int index, global::Protocol.Attr value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.addattrMergeList_[index] = value;
        return this;
      }
      public Builder SetAddattrMergeList(int index, global::Protocol.Attr.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.addattrMergeList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAddattrMergeList(global::Protocol.Attr value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.addattrMergeList_.Add(value);
        return this;
      }
      public Builder AddAddattrMergeList(global::Protocol.Attr.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.addattrMergeList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAddattrMergeList(scg::IEnumerable<global::Protocol.Attr> values) {
        PrepareBuilder();
        result.addattrMergeList_.Add(values);
        return this;
      }
      public Builder ClearAddattrMergeList() {
        PrepareBuilder();
        result.addattrMergeList_.Clear();
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> RemoveattrMergeList {
        get { return PrepareBuilder().removeattrMergeList_; }
      }
      public int RemoveattrMergeListCount {
        get { return result.RemoveattrMergeListCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetRemoveattrMergeList(int index) {
        return result.GetRemoveattrMergeList(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRemoveattrMergeList(int index, uint value) {
        PrepareBuilder();
        result.removeattrMergeList_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRemoveattrMergeList(uint value) {
        PrepareBuilder();
        result.removeattrMergeList_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeRemoveattrMergeList(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.removeattrMergeList_.Add(values);
        return this;
      }
      public Builder ClearRemoveattrMergeList() {
        PrepareBuilder();
        result.removeattrMergeList_.Clear();
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> AddinitAttrMergeList {
        get { return PrepareBuilder().addinitAttrMergeList_; }
      }
      public int AddinitAttrMergeListCount {
        get { return result.AddinitAttrMergeListCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetAddinitAttrMergeList(int index) {
        return result.GetAddinitAttrMergeList(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAddinitAttrMergeList(int index, uint value) {
        PrepareBuilder();
        result.addinitAttrMergeList_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddAddinitAttrMergeList(uint value) {
        PrepareBuilder();
        result.addinitAttrMergeList_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeAddinitAttrMergeList(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.addinitAttrMergeList_.Add(values);
        return this;
      }
      public Builder ClearAddinitAttrMergeList() {
        PrepareBuilder();
        result.addinitAttrMergeList_.Clear();
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> RemoveinitAttrMergeList {
        get { return PrepareBuilder().removeinitAttrMergeList_; }
      }
      public int RemoveinitAttrMergeListCount {
        get { return result.RemoveinitAttrMergeListCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetRemoveinitAttrMergeList(int index) {
        return result.GetRemoveinitAttrMergeList(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRemoveinitAttrMergeList(int index, uint value) {
        PrepareBuilder();
        result.removeinitAttrMergeList_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRemoveinitAttrMergeList(uint value) {
        PrepareBuilder();
        result.removeinitAttrMergeList_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeRemoveinitAttrMergeList(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.removeinitAttrMergeList_.Add(values);
        return this;
      }
      public Builder ClearRemoveinitAttrMergeList() {
        PrepareBuilder();
        result.removeinitAttrMergeList_.Clear();
        return this;
      }
    }
    static AttributeSyncData() {
      object.ReferenceEquals(global::Protocol.ProtoBattle.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LifeSyncData : pb::GeneratedMessage<LifeSyncData, LifeSyncData.Builder> {
    public LifeSyncData() { }
    private static readonly LifeSyncData defaultInstance = new LifeSyncData().MakeReadOnly();
    private static readonly string[] _lifeSyncDataFieldNames = new string[] { "dead", "entity_hp", "entity_max_hp" };
    private static readonly uint[] _lifeSyncDataFieldTags = new uint[] { 24, 13, 21 };
    public static LifeSyncData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LifeSyncData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LifeSyncData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_LifeSyncData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LifeSyncData, LifeSyncData.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_LifeSyncData__FieldAccessorTable; }
    }
    
    public const int EntityHpFieldNumber = 1;
    private bool hasEntityHp;
    private bool isEntityHpChanged = true;
    private float entityHp_;
    public bool HasEntityHp {
      get { return hasEntityHp; }
    }
    public float EntityHp {
      get { return entityHp_; }
      set { hasEntityHp = true;
        isEntityHpChanged = true;
        entityHp_ = value;}
    }
    
    public const int EntityMaxHpFieldNumber = 2;
    private bool hasEntityMaxHp;
    private bool isEntityMaxHpChanged = true;
    private float entityMaxHp_;
    public bool HasEntityMaxHp {
      get { return hasEntityMaxHp; }
    }
    public float EntityMaxHp {
      get { return entityMaxHp_; }
      set { hasEntityMaxHp = true;
        isEntityMaxHpChanged = true;
        entityMaxHp_ = value;}
    }
    
    public const int DeadFieldNumber = 3;
    private bool hasDead;
    private bool isDeadChanged = true;
    private bool dead_;
    public bool HasDead {
      get { return hasDead; }
    }
    public bool Dead {
      get { return dead_; }
      set { hasDead = true;
        isDeadChanged = true;
        dead_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _lifeSyncDataFieldNames;
      if (hasEntityHp) {
        output.WriteFloat(1, field_names[1], EntityHp);
      }
      if (hasEntityMaxHp) {
        output.WriteFloat(2, field_names[2], EntityMaxHp);
      }
      if (hasDead) {
        output.WriteBool(3, field_names[0], Dead);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasEntityHp) {
        size += pb::CodedOutputStream.ComputeFloatSize(1, EntityHp);
      }
      if (hasEntityMaxHp) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, EntityMaxHp);
      }
      if (hasDead) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, Dead);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public LifeSyncData CommitChange() {
      LifeSyncData other = new LifeSyncData();
      bool isChange = false;
      if (isEntityHpChanged) {
        isChange = true;
        other.EntityHp = EntityHp;
        isEntityHpChanged = false;
      }
      if (isEntityMaxHpChanged) {
        isChange = true;
        other.EntityMaxHp = EntityMaxHp;
        isEntityMaxHpChanged = false;
      }
      if (isDeadChanged) {
        isChange = true;
        other.Dead = Dead;
        isDeadChanged = false;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(LifeSyncData other, bool isFull = false) {
      if (other == global::Protocol.LifeSyncData.DefaultInstance) return;
      if (other.HasEntityHp) {
        EntityHp = other.EntityHp;
      }
      if (other.HasEntityMaxHp) {
        EntityMaxHp = other.EntityMaxHp;
      }
      if (other.HasDead) {
        Dead = other.Dead;
      }
    }
    
    public static LifeSyncData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LifeSyncData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LifeSyncData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LifeSyncData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LifeSyncData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LifeSyncData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LifeSyncData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LifeSyncData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LifeSyncData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LifeSyncData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LifeSyncData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LifeSyncData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LifeSyncData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LifeSyncData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LifeSyncData result;
      
      private LifeSyncData PrepareBuilder() {
        if (resultIsReadOnly) {
          LifeSyncData original = result;
          result = new LifeSyncData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LifeSyncData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.LifeSyncData.Descriptor; }
      }
      
      public override LifeSyncData DefaultInstanceForType {
        get { return global::Protocol.LifeSyncData.DefaultInstance; }
      }
      
      public override LifeSyncData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LifeSyncData) {
          return MergeFrom((LifeSyncData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LifeSyncData other) {
        if (other == global::Protocol.LifeSyncData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityHp) {
          EntityHp = other.EntityHp;
        }
        if (other.HasEntityMaxHp) {
          EntityMaxHp = other.EntityMaxHp;
        }
        if (other.HasDead) {
          Dead = other.Dead;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_lifeSyncDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _lifeSyncDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasEntityHp = input.ReadFloat(ref result.entityHp_);
              break;
            }
            case 21: {
              result.hasEntityMaxHp = input.ReadFloat(ref result.entityMaxHp_);
              break;
            }
            case 24: {
              result.hasDead = input.ReadBool(ref result.dead_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityHp {
        get { return result.hasEntityHp; }
      }
      public float EntityHp {
        get { return result.EntityHp; }
        set { SetEntityHp(value); }
      }
      public Builder SetEntityHp(float value) {
        PrepareBuilder();
        result.hasEntityHp = true;
        result.entityHp_ = value;
        return this;
      }
      public Builder ClearEntityHp() {
        PrepareBuilder();
        result.hasEntityHp = false;
        result.entityHp_ = 0F;
        return this;
      }
      
      public bool HasEntityMaxHp {
        get { return result.hasEntityMaxHp; }
      }
      public float EntityMaxHp {
        get { return result.EntityMaxHp; }
        set { SetEntityMaxHp(value); }
      }
      public Builder SetEntityMaxHp(float value) {
        PrepareBuilder();
        result.hasEntityMaxHp = true;
        result.entityMaxHp_ = value;
        return this;
      }
      public Builder ClearEntityMaxHp() {
        PrepareBuilder();
        result.hasEntityMaxHp = false;
        result.entityMaxHp_ = 0F;
        return this;
      }
      
      public bool HasDead {
        get { return result.hasDead; }
      }
      public bool Dead {
        get { return result.Dead; }
        set { SetDead(value); }
      }
      public Builder SetDead(bool value) {
        PrepareBuilder();
        result.hasDead = true;
        result.dead_ = value;
        return this;
      }
      public Builder ClearDead() {
        PrepareBuilder();
        result.hasDead = false;
        result.dead_ = false;
        return this;
      }
    }
    static LifeSyncData() {
      object.ReferenceEquals(global::Protocol.ProtoBattle.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SkillCtrlSyncData : pb::GeneratedMessage<SkillCtrlSyncData, SkillCtrlSyncData.Builder> {
    public SkillCtrlSyncData() { }
    private static readonly SkillCtrlSyncData defaultInstance = new SkillCtrlSyncData().MakeReadOnly();
    private static readonly string[] _skillCtrlSyncDataFieldNames = new string[] { "addskill_id_merge_list", "addskills_merge_list", "lock_release_count", "removeskill_id_merge_list", "removeskills_merge_list", "skill_id_merge_list", "skills_merge_list" };
    private static readonly uint[] _skillCtrlSyncDataFieldTags = new uint[] { 8024, 8010, 16, 16024, 16008, 24, 10 };
    public static SkillCtrlSyncData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SkillCtrlSyncData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SkillCtrlSyncData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_SkillCtrlSyncData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SkillCtrlSyncData, SkillCtrlSyncData.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_SkillCtrlSyncData__FieldAccessorTable; }
    }
    
    public const int SkillsMergeListFieldNumber = 1;
    private pbc::PopsicleList<global::Protocol.SkillSyncData> skillsMergeList_ = new pbc::PopsicleList<global::Protocol.SkillSyncData>();
    public scg::IList<global::Protocol.SkillSyncData> SkillsMergeList {
      get { return pbc::Lists.AsReadOnly(skillsMergeList_); }
    }
    public int SkillsMergeListCount {
      get { return skillsMergeList_.Count; }
    }
    public global::Protocol.SkillSyncData GetSkillsMergeList(int index) {
      return skillsMergeList_[index];
    }
    public global::Protocol.SkillSyncData FindSkillsMergeList(System.Predicate<global::Protocol.SkillSyncData> match) {
      return skillsMergeList_.Find(match);
    }
    public System.Collections.Generic.IList<global::Protocol.SkillSyncData> FindAllSkillsMergeList(System.Predicate<global::Protocol.SkillSyncData> match) {
      return skillsMergeList_.FindAll(match);
    }
    public void SetSkillsMergeList(int index, global::Protocol.SkillSyncData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (index < 0 || index >= skillsMergeList_.Count) return;
      removeskillsMergeList_.Add(skillsMergeList_[index].Id);
      addskillsMergeList_.Add(value);
      skillsMergeList_[index] = value;
    }
    public void AddSkillsMergeList(global::Protocol.SkillSyncData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      skillsMergeList_.Add(value);
      addskillsMergeList_.Add(value);
    }
    public void AddRangeSkillsMergeList(scg::IEnumerable<global::Protocol.SkillSyncData> values) {
      skillsMergeList_.Add(values);
      addskillsMergeList_.Add(values);
    }
    public void RemoveSkillsMergeList(global::Protocol.SkillSyncData value) {
      if (!skillsMergeList_.Contains(value)) return;
      removeskillsMergeList_.Add(value.Id);
      skillsMergeList_.Remove(value);
    }
    public void RemoveAtSkillsMergeList(int index) {
      if (index < 0 || index >= skillsMergeList_.Count) return;
      removeskillsMergeList_.Add(skillsMergeList_[index].Id);
      skillsMergeList_.RemoveAt(index);
    }
    public void ClearSkillsMergeList() {
      if (skillsMergeList_.Count <= 0) return;
      foreach (var item in skillsMergeList_)
      {
        removeskillsMergeList_.Add(item.Id);
      }
      skillsMergeList_.Clear();
    }
    
    public const int LockReleaseCountFieldNumber = 2;
    private bool hasLockReleaseCount;
    private bool isLockReleaseCountChanged = true;
    private int lockReleaseCount_;
    public bool HasLockReleaseCount {
      get { return hasLockReleaseCount; }
    }
    public int LockReleaseCount {
      get { return lockReleaseCount_; }
      set { hasLockReleaseCount = true;
        isLockReleaseCountChanged = true;
        lockReleaseCount_ = value;}
    }
    
    public const int SkillIdMergeListFieldNumber = 3;
    private pbc::PopsicleList<uint> skillIdMergeList_ = new pbc::PopsicleList<uint>();
    private bool isSkillIdMergeListChanged = true;
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> SkillIdMergeList {
      get { return pbc::Lists.AsReadOnly(skillIdMergeList_); }
    }
    public int SkillIdMergeListCount {
      get { return skillIdMergeList_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetSkillIdMergeList(int index) {
      return skillIdMergeList_[index];
    }
    [global::System.CLSCompliant(false)]
    public void SetSkillIdMergeList(int index, uint value) {
      if (index < 0 || index >= skillIdMergeList_.Count) return;
      removeskillIdMergeList_.Add(skillIdMergeList_[index]);
      addskillIdMergeList_.Add(value);
      skillIdMergeList_[index] = value;
      isSkillIdMergeListChanged = true;
    }
    [global::System.CLSCompliant(false)]
    public void AddSkillIdMergeList(uint value) {
      skillIdMergeList_.Add(value);
      isSkillIdMergeListChanged = true;
      addskillIdMergeList_.Add(value);
    }
    [global::System.CLSCompliant(false)]
    public void AddRangeSkillIdMergeList(scg::IEnumerable<uint> values) {
      skillIdMergeList_.Add(values);
      isSkillIdMergeListChanged = true;
      addskillIdMergeList_.Add(values);
    }
    public void RemoveSkillIdMergeList(uint value) {
      if (!skillIdMergeList_.Contains(value)) return;
      removeskillIdMergeList_.Add(value);
      skillIdMergeList_.Remove(value);
      isSkillIdMergeListChanged = true;
    }
    public void RemoveAtSkillIdMergeList(int index) {
      if (index < 0 || index >= skillIdMergeList_.Count) return;
      removeskillIdMergeList_.Add(skillIdMergeList_[index]);
      skillIdMergeList_.RemoveAt(index);
      isSkillIdMergeListChanged = true;
    }
    public void ClearSkillIdMergeList() {
      if (skillIdMergeList_.Count <= 0) return;
      removeskillIdMergeList_.Add(skillIdMergeList_);
      skillIdMergeList_.Clear();
      isSkillIdMergeListChanged = true;
    }
    
    public const int AddskillsMergeListFieldNumber = 1001;
    private pbc::PopsicleList<global::Protocol.SkillSyncData> addskillsMergeList_ = new pbc::PopsicleList<global::Protocol.SkillSyncData>();
    public scg::IList<global::Protocol.SkillSyncData> AddskillsMergeList {
      get { return pbc::Lists.AsReadOnly(addskillsMergeList_); }
    }
    public int AddskillsMergeListCount {
      get { return addskillsMergeList_.Count; }
    }
    public global::Protocol.SkillSyncData GetAddskillsMergeList(int index) {
      return addskillsMergeList_[index];
    }
    public global::Protocol.SkillSyncData FindAddskillsMergeList(System.Predicate<global::Protocol.SkillSyncData> match) {
      return addskillsMergeList_.Find(match);
    }
    public System.Collections.Generic.IList<global::Protocol.SkillSyncData> FindAllAddskillsMergeList(System.Predicate<global::Protocol.SkillSyncData> match) {
      return addskillsMergeList_.FindAll(match);
    }
    
    public const int RemoveskillsMergeListFieldNumber = 2001;
    private pbc::PopsicleList<ulong> removeskillsMergeList_ = new pbc::PopsicleList<ulong>();
    private bool isRemoveskillsMergeListChanged = true;
    [global::System.CLSCompliant(false)]
    public scg::IList<ulong> RemoveskillsMergeList {
      get { return pbc::Lists.AsReadOnly(removeskillsMergeList_); }
    }
    public int RemoveskillsMergeListCount {
      get { return removeskillsMergeList_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public ulong GetRemoveskillsMergeList(int index) {
      return removeskillsMergeList_[index];
    }
    
    public const int AddskillIdMergeListFieldNumber = 1003;
    private pbc::PopsicleList<uint> addskillIdMergeList_ = new pbc::PopsicleList<uint>();
    private bool isAddskillIdMergeListChanged = true;
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> AddskillIdMergeList {
      get { return pbc::Lists.AsReadOnly(addskillIdMergeList_); }
    }
    public int AddskillIdMergeListCount {
      get { return addskillIdMergeList_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetAddskillIdMergeList(int index) {
      return addskillIdMergeList_[index];
    }
    
    public const int RemoveskillIdMergeListFieldNumber = 2003;
    private pbc::PopsicleList<uint> removeskillIdMergeList_ = new pbc::PopsicleList<uint>();
    private bool isRemoveskillIdMergeListChanged = true;
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> RemoveskillIdMergeList {
      get { return pbc::Lists.AsReadOnly(removeskillIdMergeList_); }
    }
    public int RemoveskillIdMergeListCount {
      get { return removeskillIdMergeList_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetRemoveskillIdMergeList(int index) {
      return removeskillIdMergeList_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Protocol.SkillSyncData element in SkillsMergeList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Protocol.SkillSyncData element in AddskillsMergeList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _skillCtrlSyncDataFieldNames;
      if (skillsMergeList_.Count > 0) {
        output.WriteMessageArray(1, field_names[6], skillsMergeList_);
      }
      if (hasLockReleaseCount) {
        output.WriteInt32(2, field_names[2], LockReleaseCount);
      }
      if (skillIdMergeList_.Count > 0) {
        output.WriteUInt32Array(3, field_names[5], skillIdMergeList_);
      }
      if (addskillsMergeList_.Count > 0) {
        output.WriteMessageArray(1001, field_names[1], addskillsMergeList_);
      }
      if (addskillIdMergeList_.Count > 0) {
        output.WriteUInt32Array(1003, field_names[0], addskillIdMergeList_);
      }
      if (removeskillsMergeList_.Count > 0) {
        output.WriteUInt64Array(2001, field_names[4], removeskillsMergeList_);
      }
      if (removeskillIdMergeList_.Count > 0) {
        output.WriteUInt32Array(2003, field_names[3], removeskillIdMergeList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      foreach (global::Protocol.SkillSyncData element in SkillsMergeList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      if (hasLockReleaseCount) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, LockReleaseCount);
      }
      {
        int dataSize = 0;
        foreach (uint element in SkillIdMergeList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * skillIdMergeList_.Count;
      }
      foreach (global::Protocol.SkillSyncData element in AddskillsMergeList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1001, element);
      }
      {
        int dataSize = 0;
        foreach (ulong element in RemoveskillsMergeList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * removeskillsMergeList_.Count;
      }
      {
        int dataSize = 0;
        foreach (uint element in AddskillIdMergeList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * addskillIdMergeList_.Count;
      }
      {
        int dataSize = 0;
        foreach (uint element in RemoveskillIdMergeList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * removeskillIdMergeList_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public SkillCtrlSyncData CommitChange() {
      SkillCtrlSyncData other = new SkillCtrlSyncData();
      bool isChange = false;
        
      if (addskillsMergeList_.Count > 0) 
      { 
        isChange = true;
        other.addskillsMergeList_.Add(addskillsMergeList_);
      }
      if (removeskillsMergeList_.Count > 0) 
      { 
        isChange = true;
        other.removeskillsMergeList_.Add(removeskillsMergeList_);
      }
      if (skillsMergeList_.Count > 0) 
      { 
        foreach (var item in skillsMergeList_) 
        { 
          bool isExist = false; 
          foreach (var item1 in addskillsMergeList_) 
          { 
            if (item.Id == item1.Id)
            { 
              isExist = true; 
            } 
          } 
           
          if (!isExist) 
          { 
            var skillsMergeListcommit = item.CommitChange();
            if(skillsMergeListcommit!=null)
            {
              isChange = true;
              other.skillsMergeList_.Add(skillsMergeListcommit);
            }
          } 
        } 
      }
      addskillsMergeList_.Clear();
      removeskillsMergeList_.Clear();
      if (isLockReleaseCountChanged) {
        isChange = true;
        other.LockReleaseCount = LockReleaseCount;
        isLockReleaseCountChanged = false;
      }
      if (isSkillIdMergeListChanged) 
      { 
        isChange = true;
        if (addskillIdMergeList_.Count > 0) 
        { 
          other.addskillIdMergeList_.Add(addskillIdMergeList_);
        }
        if (removeskillIdMergeList_.Count > 0) 
        { 
          other.removeskillIdMergeList_.Add(removeskillIdMergeList_);
        }
        addskillIdMergeList_.Clear();
        removeskillIdMergeList_.Clear();
        isSkillIdMergeListChanged = false;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(SkillCtrlSyncData other, bool isFull = false) {
      if (other == global::Protocol.SkillCtrlSyncData.DefaultInstance) return;
      if (other.removeskillsMergeList_.Count > 0) 
      { 
        int index = -1;
        foreach (var item in other.removeskillsMergeList_)
        { 
          for(int i=0; i<skillsMergeList_.Count; i++)
          { 
            if (skillsMergeList_[i].Id == item) 
            { 
              index = i;
              break;
            } 
          } 
          
          if(index >= 0)
            skillsMergeList_.RemoveAt(index);
        }
      }
      if (other.addskillsMergeList_.Count > 0) 
      { 
        foreach (var item in other.addskillsMergeList_) 
        { 
          bool isExist = false; 
          foreach (var item1 in skillsMergeList_) 
          { 
            if (item.Id == item1.Id)
            { 
              item1.MergeFrom(item, isFull); 
              isExist = true;
              break;
            } 
          } 
           
          if (!isExist) 
          { 
             skillsMergeList_.Add(item);
          } 
        } 
      }
      if (other.skillsMergeList_.Count > 0) 
      { 
        foreach (var item in other.skillsMergeList_) 
        { 
          foreach(var item1 in skillsMergeList_) 
          { 
            if (item.Id == item1.Id)
            { 
              item1.MergeFrom(item, isFull);
            } 
          } 
        } 
      }
      if(addskillsMergeList_.Count > 0)addskillsMergeList_.Clear();
      if(removeskillsMergeList_.Count > 0)removeskillsMergeList_.Clear();
      if (isFull) 
      {
        if (other.skillsMergeList_.Count != 0) {
          skillsMergeList_.Clear();
          skillsMergeList_.Add(other.skillsMergeList_);
        }
      }
      if (other.HasLockReleaseCount) {
        LockReleaseCount = other.LockReleaseCount;
      }
      if (other.removeskillIdMergeList_.Count > 0) 
      { 
        foreach (var item in other.removeskillIdMergeList_)
        { 
          skillIdMergeList_.Remove(item);
        } 
      }
      if (other.addskillIdMergeList_.Count > 0) 
      { 
        // 由于数据可能从其他协议传递到客户端，list做去重操作 
        foreach (var item in other.addskillIdMergeList_)
        { 
          if(!skillIdMergeList_.Contains(item)) 
            skillIdMergeList_.Add(item);
        } 
      }
      if(addskillIdMergeList_.Count > 0)addskillIdMergeList_.Clear();
      if(removeskillIdMergeList_.Count > 0)removeskillIdMergeList_.Clear();
      if (isFull) 
      {
        if (other.skillIdMergeList_.Count != 0) {
          skillIdMergeList_.Clear();
          skillIdMergeList_.Add(other.skillIdMergeList_);
        }
      }
    }
    
    public static SkillCtrlSyncData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillCtrlSyncData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillCtrlSyncData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillCtrlSyncData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillCtrlSyncData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillCtrlSyncData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SkillCtrlSyncData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SkillCtrlSyncData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SkillCtrlSyncData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillCtrlSyncData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SkillCtrlSyncData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SkillCtrlSyncData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SkillCtrlSyncData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SkillCtrlSyncData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SkillCtrlSyncData result;
      
      private SkillCtrlSyncData PrepareBuilder() {
        if (resultIsReadOnly) {
          SkillCtrlSyncData original = result;
          result = new SkillCtrlSyncData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SkillCtrlSyncData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.SkillCtrlSyncData.Descriptor; }
      }
      
      public override SkillCtrlSyncData DefaultInstanceForType {
        get { return global::Protocol.SkillCtrlSyncData.DefaultInstance; }
      }
      
      public override SkillCtrlSyncData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SkillCtrlSyncData) {
          return MergeFrom((SkillCtrlSyncData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SkillCtrlSyncData other) {
        if (other == global::Protocol.SkillCtrlSyncData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.skillsMergeList_.Count != 0) {
          result.skillsMergeList_.Add(other.skillsMergeList_);
        }
        if (other.HasLockReleaseCount) {
          LockReleaseCount = other.LockReleaseCount;
        }
        if (other.skillIdMergeList_.Count != 0) {
          result.skillIdMergeList_.Add(other.skillIdMergeList_);
        }
        if (other.addskillsMergeList_.Count != 0) {
          result.addskillsMergeList_.Add(other.addskillsMergeList_);
        }
        if (other.removeskillsMergeList_.Count != 0) {
          result.removeskillsMergeList_.Add(other.removeskillsMergeList_);
        }
        if (other.addskillIdMergeList_.Count != 0) {
          result.addskillIdMergeList_.Add(other.addskillIdMergeList_);
        }
        if (other.removeskillIdMergeList_.Count != 0) {
          result.removeskillIdMergeList_.Add(other.removeskillIdMergeList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_skillCtrlSyncDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _skillCtrlSyncDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.skillsMergeList_, global::Protocol.SkillSyncData.DefaultInstance, extensionRegistry);
              break;
            }
            case 16: {
              result.hasLockReleaseCount = input.ReadInt32(ref result.lockReleaseCount_);
              break;
            }
            case 26:
            case 24: {
              input.ReadUInt32Array(tag, field_name, result.skillIdMergeList_);
              break;
            }
            case 8010: {
              input.ReadMessageArray(tag, field_name, result.addskillsMergeList_, global::Protocol.SkillSyncData.DefaultInstance, extensionRegistry);
              break;
            }
            case 8026:
            case 8024: {
              input.ReadUInt32Array(tag, field_name, result.addskillIdMergeList_);
              break;
            }
            case 16010:
            case 16008: {
              input.ReadUInt64Array(tag, field_name, result.removeskillsMergeList_);
              break;
            }
            case 16026:
            case 16024: {
              input.ReadUInt32Array(tag, field_name, result.removeskillIdMergeList_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Protocol.SkillSyncData> SkillsMergeList {
        get { return PrepareBuilder().skillsMergeList_; }
      }
      public int SkillsMergeListCount {
        get { return result.SkillsMergeListCount; }
      }
      public global::Protocol.SkillSyncData GetSkillsMergeList(int index) {
        return result.GetSkillsMergeList(index);
      }
      public Builder SetSkillsMergeList(int index, global::Protocol.SkillSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.skillsMergeList_[index] = value;
        return this;
      }
      public Builder SetSkillsMergeList(int index, global::Protocol.SkillSyncData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.skillsMergeList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSkillsMergeList(global::Protocol.SkillSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.skillsMergeList_.Add(value);
        return this;
      }
      public Builder AddSkillsMergeList(global::Protocol.SkillSyncData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.skillsMergeList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSkillsMergeList(scg::IEnumerable<global::Protocol.SkillSyncData> values) {
        PrepareBuilder();
        result.skillsMergeList_.Add(values);
        return this;
      }
      public Builder ClearSkillsMergeList() {
        PrepareBuilder();
        result.skillsMergeList_.Clear();
        return this;
      }
      
      public bool HasLockReleaseCount {
        get { return result.hasLockReleaseCount; }
      }
      public int LockReleaseCount {
        get { return result.LockReleaseCount; }
        set { SetLockReleaseCount(value); }
      }
      public Builder SetLockReleaseCount(int value) {
        PrepareBuilder();
        result.hasLockReleaseCount = true;
        result.lockReleaseCount_ = value;
        return this;
      }
      public Builder ClearLockReleaseCount() {
        PrepareBuilder();
        result.hasLockReleaseCount = false;
        result.lockReleaseCount_ = 0;
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> SkillIdMergeList {
        get { return PrepareBuilder().skillIdMergeList_; }
      }
      public int SkillIdMergeListCount {
        get { return result.SkillIdMergeListCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetSkillIdMergeList(int index) {
        return result.GetSkillIdMergeList(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSkillIdMergeList(int index, uint value) {
        PrepareBuilder();
        result.skillIdMergeList_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddSkillIdMergeList(uint value) {
        PrepareBuilder();
        result.skillIdMergeList_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeSkillIdMergeList(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.skillIdMergeList_.Add(values);
        return this;
      }
      public Builder ClearSkillIdMergeList() {
        PrepareBuilder();
        result.skillIdMergeList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Protocol.SkillSyncData> AddskillsMergeList {
        get { return PrepareBuilder().addskillsMergeList_; }
      }
      public int AddskillsMergeListCount {
        get { return result.AddskillsMergeListCount; }
      }
      public global::Protocol.SkillSyncData GetAddskillsMergeList(int index) {
        return result.GetAddskillsMergeList(index);
      }
      public Builder SetAddskillsMergeList(int index, global::Protocol.SkillSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.addskillsMergeList_[index] = value;
        return this;
      }
      public Builder SetAddskillsMergeList(int index, global::Protocol.SkillSyncData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.addskillsMergeList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAddskillsMergeList(global::Protocol.SkillSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.addskillsMergeList_.Add(value);
        return this;
      }
      public Builder AddAddskillsMergeList(global::Protocol.SkillSyncData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.addskillsMergeList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAddskillsMergeList(scg::IEnumerable<global::Protocol.SkillSyncData> values) {
        PrepareBuilder();
        result.addskillsMergeList_.Add(values);
        return this;
      }
      public Builder ClearAddskillsMergeList() {
        PrepareBuilder();
        result.addskillsMergeList_.Clear();
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<ulong> RemoveskillsMergeList {
        get { return PrepareBuilder().removeskillsMergeList_; }
      }
      public int RemoveskillsMergeListCount {
        get { return result.RemoveskillsMergeListCount; }
      }
      [global::System.CLSCompliant(false)]
      public ulong GetRemoveskillsMergeList(int index) {
        return result.GetRemoveskillsMergeList(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRemoveskillsMergeList(int index, ulong value) {
        PrepareBuilder();
        result.removeskillsMergeList_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRemoveskillsMergeList(ulong value) {
        PrepareBuilder();
        result.removeskillsMergeList_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeRemoveskillsMergeList(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.removeskillsMergeList_.Add(values);
        return this;
      }
      public Builder ClearRemoveskillsMergeList() {
        PrepareBuilder();
        result.removeskillsMergeList_.Clear();
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> AddskillIdMergeList {
        get { return PrepareBuilder().addskillIdMergeList_; }
      }
      public int AddskillIdMergeListCount {
        get { return result.AddskillIdMergeListCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetAddskillIdMergeList(int index) {
        return result.GetAddskillIdMergeList(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAddskillIdMergeList(int index, uint value) {
        PrepareBuilder();
        result.addskillIdMergeList_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddAddskillIdMergeList(uint value) {
        PrepareBuilder();
        result.addskillIdMergeList_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeAddskillIdMergeList(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.addskillIdMergeList_.Add(values);
        return this;
      }
      public Builder ClearAddskillIdMergeList() {
        PrepareBuilder();
        result.addskillIdMergeList_.Clear();
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> RemoveskillIdMergeList {
        get { return PrepareBuilder().removeskillIdMergeList_; }
      }
      public int RemoveskillIdMergeListCount {
        get { return result.RemoveskillIdMergeListCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetRemoveskillIdMergeList(int index) {
        return result.GetRemoveskillIdMergeList(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRemoveskillIdMergeList(int index, uint value) {
        PrepareBuilder();
        result.removeskillIdMergeList_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRemoveskillIdMergeList(uint value) {
        PrepareBuilder();
        result.removeskillIdMergeList_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeRemoveskillIdMergeList(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.removeskillIdMergeList_.Add(values);
        return this;
      }
      public Builder ClearRemoveskillIdMergeList() {
        PrepareBuilder();
        result.removeskillIdMergeList_.Clear();
        return this;
      }
    }
    static SkillCtrlSyncData() {
      object.ReferenceEquals(global::Protocol.ProtoBattle.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BuffCtrlSyncData : pb::GeneratedMessage<BuffCtrlSyncData, BuffCtrlSyncData.Builder> {
    public BuffCtrlSyncData() { }
    private static readonly BuffCtrlSyncData defaultInstance = new BuffCtrlSyncData().MakeReadOnly();
    private static readonly string[] _buffCtrlSyncDataFieldNames = new string[] { "addbuff_merge_list", "buff_merge_list", "removebuff_merge_list" };
    private static readonly uint[] _buffCtrlSyncDataFieldTags = new uint[] { 8010, 10, 16008 };
    public static BuffCtrlSyncData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BuffCtrlSyncData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BuffCtrlSyncData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_BuffCtrlSyncData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BuffCtrlSyncData, BuffCtrlSyncData.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_BuffCtrlSyncData__FieldAccessorTable; }
    }
    
    public const int BuffMergeListFieldNumber = 1;
    private pbc::PopsicleList<global::Protocol.BuffItem> buffMergeList_ = new pbc::PopsicleList<global::Protocol.BuffItem>();
    public scg::IList<global::Protocol.BuffItem> BuffMergeList {
      get { return pbc::Lists.AsReadOnly(buffMergeList_); }
    }
    public int BuffMergeListCount {
      get { return buffMergeList_.Count; }
    }
    public global::Protocol.BuffItem GetBuffMergeList(int index) {
      return buffMergeList_[index];
    }
    public global::Protocol.BuffItem FindBuffMergeList(System.Predicate<global::Protocol.BuffItem> match) {
      return buffMergeList_.Find(match);
    }
    public System.Collections.Generic.IList<global::Protocol.BuffItem> FindAllBuffMergeList(System.Predicate<global::Protocol.BuffItem> match) {
      return buffMergeList_.FindAll(match);
    }
    public void SetBuffMergeList(int index, global::Protocol.BuffItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (index < 0 || index >= buffMergeList_.Count) return;
      removebuffMergeList_.Add(buffMergeList_[index].Id);
      addbuffMergeList_.Add(value);
      buffMergeList_[index] = value;
    }
    public void AddBuffMergeList(global::Protocol.BuffItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      buffMergeList_.Add(value);
      addbuffMergeList_.Add(value);
    }
    public void AddRangeBuffMergeList(scg::IEnumerable<global::Protocol.BuffItem> values) {
      buffMergeList_.Add(values);
      addbuffMergeList_.Add(values);
    }
    public void RemoveBuffMergeList(global::Protocol.BuffItem value) {
      if (!buffMergeList_.Contains(value)) return;
      removebuffMergeList_.Add(value.Id);
      buffMergeList_.Remove(value);
    }
    public void RemoveAtBuffMergeList(int index) {
      if (index < 0 || index >= buffMergeList_.Count) return;
      removebuffMergeList_.Add(buffMergeList_[index].Id);
      buffMergeList_.RemoveAt(index);
    }
    public void ClearBuffMergeList() {
      if (buffMergeList_.Count <= 0) return;
      foreach (var item in buffMergeList_)
      {
        removebuffMergeList_.Add(item.Id);
      }
      buffMergeList_.Clear();
    }
    
    public const int AddbuffMergeListFieldNumber = 1001;
    private pbc::PopsicleList<global::Protocol.BuffItem> addbuffMergeList_ = new pbc::PopsicleList<global::Protocol.BuffItem>();
    public scg::IList<global::Protocol.BuffItem> AddbuffMergeList {
      get { return pbc::Lists.AsReadOnly(addbuffMergeList_); }
    }
    public int AddbuffMergeListCount {
      get { return addbuffMergeList_.Count; }
    }
    public global::Protocol.BuffItem GetAddbuffMergeList(int index) {
      return addbuffMergeList_[index];
    }
    public global::Protocol.BuffItem FindAddbuffMergeList(System.Predicate<global::Protocol.BuffItem> match) {
      return addbuffMergeList_.Find(match);
    }
    public System.Collections.Generic.IList<global::Protocol.BuffItem> FindAllAddbuffMergeList(System.Predicate<global::Protocol.BuffItem> match) {
      return addbuffMergeList_.FindAll(match);
    }
    
    public const int RemovebuffMergeListFieldNumber = 2001;
    private pbc::PopsicleList<uint> removebuffMergeList_ = new pbc::PopsicleList<uint>();
    private bool isRemovebuffMergeListChanged = true;
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> RemovebuffMergeList {
      get { return pbc::Lists.AsReadOnly(removebuffMergeList_); }
    }
    public int RemovebuffMergeListCount {
      get { return removebuffMergeList_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetRemovebuffMergeList(int index) {
      return removebuffMergeList_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Protocol.BuffItem element in BuffMergeList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Protocol.BuffItem element in AddbuffMergeList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _buffCtrlSyncDataFieldNames;
      if (buffMergeList_.Count > 0) {
        output.WriteMessageArray(1, field_names[1], buffMergeList_);
      }
      if (addbuffMergeList_.Count > 0) {
        output.WriteMessageArray(1001, field_names[0], addbuffMergeList_);
      }
      if (removebuffMergeList_.Count > 0) {
        output.WriteUInt32Array(2001, field_names[2], removebuffMergeList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      foreach (global::Protocol.BuffItem element in BuffMergeList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      foreach (global::Protocol.BuffItem element in AddbuffMergeList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1001, element);
      }
      {
        int dataSize = 0;
        foreach (uint element in RemovebuffMergeList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * removebuffMergeList_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public BuffCtrlSyncData CommitChange() {
      BuffCtrlSyncData other = new BuffCtrlSyncData();
      bool isChange = false;
        
      if (addbuffMergeList_.Count > 0) 
      { 
        isChange = true;
        other.addbuffMergeList_.Add(addbuffMergeList_);
      }
      if (removebuffMergeList_.Count > 0) 
      { 
        isChange = true;
        other.removebuffMergeList_.Add(removebuffMergeList_);
      }
      if (buffMergeList_.Count > 0) 
      { 
        foreach (var item in buffMergeList_) 
        { 
          bool isExist = false; 
          foreach (var item1 in addbuffMergeList_) 
          { 
            if (item.Id == item1.Id)
            { 
              isExist = true; 
            } 
          } 
           
          if (!isExist) 
          { 
            var buffMergeListcommit = item.CommitChange();
            if(buffMergeListcommit!=null)
            {
              isChange = true;
              other.buffMergeList_.Add(buffMergeListcommit);
            }
          } 
        } 
      }
      addbuffMergeList_.Clear();
      removebuffMergeList_.Clear();
      return isChange?other:null;
    }
    
    public void MergeFrom(BuffCtrlSyncData other, bool isFull = false) {
      if (other == global::Protocol.BuffCtrlSyncData.DefaultInstance) return;
      if (other.removebuffMergeList_.Count > 0) 
      { 
        int index = -1;
        foreach (var item in other.removebuffMergeList_)
        { 
          for(int i=0; i<buffMergeList_.Count; i++)
          { 
            if (buffMergeList_[i].Id == item) 
            { 
              index = i;
              break;
            } 
          } 
          
          if(index >= 0)
            buffMergeList_.RemoveAt(index);
        }
      }
      if (other.addbuffMergeList_.Count > 0) 
      { 
        foreach (var item in other.addbuffMergeList_) 
        { 
          bool isExist = false; 
          foreach (var item1 in buffMergeList_) 
          { 
            if (item.Id == item1.Id)
            { 
              item1.MergeFrom(item, isFull); 
              isExist = true;
              break;
            } 
          } 
           
          if (!isExist) 
          { 
             buffMergeList_.Add(item);
          } 
        } 
      }
      if (other.buffMergeList_.Count > 0) 
      { 
        foreach (var item in other.buffMergeList_) 
        { 
          foreach(var item1 in buffMergeList_) 
          { 
            if (item.Id == item1.Id)
            { 
              item1.MergeFrom(item, isFull);
            } 
          } 
        } 
      }
      if(addbuffMergeList_.Count > 0)addbuffMergeList_.Clear();
      if(removebuffMergeList_.Count > 0)removebuffMergeList_.Clear();
      if (isFull) 
      {
        if (other.buffMergeList_.Count != 0) {
          buffMergeList_.Clear();
          buffMergeList_.Add(other.buffMergeList_);
        }
      }
    }
    
    public static BuffCtrlSyncData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BuffCtrlSyncData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BuffCtrlSyncData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BuffCtrlSyncData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BuffCtrlSyncData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BuffCtrlSyncData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BuffCtrlSyncData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BuffCtrlSyncData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BuffCtrlSyncData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BuffCtrlSyncData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BuffCtrlSyncData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BuffCtrlSyncData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BuffCtrlSyncData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BuffCtrlSyncData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BuffCtrlSyncData result;
      
      private BuffCtrlSyncData PrepareBuilder() {
        if (resultIsReadOnly) {
          BuffCtrlSyncData original = result;
          result = new BuffCtrlSyncData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BuffCtrlSyncData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.BuffCtrlSyncData.Descriptor; }
      }
      
      public override BuffCtrlSyncData DefaultInstanceForType {
        get { return global::Protocol.BuffCtrlSyncData.DefaultInstance; }
      }
      
      public override BuffCtrlSyncData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BuffCtrlSyncData) {
          return MergeFrom((BuffCtrlSyncData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BuffCtrlSyncData other) {
        if (other == global::Protocol.BuffCtrlSyncData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.buffMergeList_.Count != 0) {
          result.buffMergeList_.Add(other.buffMergeList_);
        }
        if (other.addbuffMergeList_.Count != 0) {
          result.addbuffMergeList_.Add(other.addbuffMergeList_);
        }
        if (other.removebuffMergeList_.Count != 0) {
          result.removebuffMergeList_.Add(other.removebuffMergeList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_buffCtrlSyncDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _buffCtrlSyncDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.buffMergeList_, global::Protocol.BuffItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 8010: {
              input.ReadMessageArray(tag, field_name, result.addbuffMergeList_, global::Protocol.BuffItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 16010:
            case 16008: {
              input.ReadUInt32Array(tag, field_name, result.removebuffMergeList_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Protocol.BuffItem> BuffMergeList {
        get { return PrepareBuilder().buffMergeList_; }
      }
      public int BuffMergeListCount {
        get { return result.BuffMergeListCount; }
      }
      public global::Protocol.BuffItem GetBuffMergeList(int index) {
        return result.GetBuffMergeList(index);
      }
      public Builder SetBuffMergeList(int index, global::Protocol.BuffItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.buffMergeList_[index] = value;
        return this;
      }
      public Builder SetBuffMergeList(int index, global::Protocol.BuffItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.buffMergeList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBuffMergeList(global::Protocol.BuffItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.buffMergeList_.Add(value);
        return this;
      }
      public Builder AddBuffMergeList(global::Protocol.BuffItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.buffMergeList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBuffMergeList(scg::IEnumerable<global::Protocol.BuffItem> values) {
        PrepareBuilder();
        result.buffMergeList_.Add(values);
        return this;
      }
      public Builder ClearBuffMergeList() {
        PrepareBuilder();
        result.buffMergeList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Protocol.BuffItem> AddbuffMergeList {
        get { return PrepareBuilder().addbuffMergeList_; }
      }
      public int AddbuffMergeListCount {
        get { return result.AddbuffMergeListCount; }
      }
      public global::Protocol.BuffItem GetAddbuffMergeList(int index) {
        return result.GetAddbuffMergeList(index);
      }
      public Builder SetAddbuffMergeList(int index, global::Protocol.BuffItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.addbuffMergeList_[index] = value;
        return this;
      }
      public Builder SetAddbuffMergeList(int index, global::Protocol.BuffItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.addbuffMergeList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAddbuffMergeList(global::Protocol.BuffItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.addbuffMergeList_.Add(value);
        return this;
      }
      public Builder AddAddbuffMergeList(global::Protocol.BuffItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.addbuffMergeList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAddbuffMergeList(scg::IEnumerable<global::Protocol.BuffItem> values) {
        PrepareBuilder();
        result.addbuffMergeList_.Add(values);
        return this;
      }
      public Builder ClearAddbuffMergeList() {
        PrepareBuilder();
        result.addbuffMergeList_.Clear();
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> RemovebuffMergeList {
        get { return PrepareBuilder().removebuffMergeList_; }
      }
      public int RemovebuffMergeListCount {
        get { return result.RemovebuffMergeListCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetRemovebuffMergeList(int index) {
        return result.GetRemovebuffMergeList(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRemovebuffMergeList(int index, uint value) {
        PrepareBuilder();
        result.removebuffMergeList_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRemovebuffMergeList(uint value) {
        PrepareBuilder();
        result.removebuffMergeList_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeRemovebuffMergeList(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.removebuffMergeList_.Add(values);
        return this;
      }
      public Builder ClearRemovebuffMergeList() {
        PrepareBuilder();
        result.removebuffMergeList_.Clear();
        return this;
      }
    }
    static BuffCtrlSyncData() {
      object.ReferenceEquals(global::Protocol.ProtoBattle.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BuffItem : pb::GeneratedMessage<BuffItem, BuffItem.Builder> {
    public BuffItem() { }
    private static readonly BuffItem defaultInstance = new BuffItem().MakeReadOnly();
    private static readonly string[] _buffItemFieldNames = new string[] { "add_time", "addbuff_effect_merge_list", "buff_count", "buff_effect_merge_list", "delay_time", "delete_time", "id", "is_delete", "keep_live_time", "last_execute_time", "removebuff_effect_merge_list", "start_time", "step_time" };
    private static readonly uint[] _buffItemFieldTags = new uint[] { 37, 8082, 64, 82, 61, 93, 8, 72, 29, 53, 16080, 45, 21 };
    public static BuffItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BuffItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BuffItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_BuffItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BuffItem, BuffItem.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_BuffItem__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    [global::System.CLSCompliant(false)]
    public uint Id {
      get { return id_; }
      set { hasId = true;
        id_ = value;}
    }
    
    public const int StepTimeFieldNumber = 2;
    private bool hasStepTime;
    private bool isStepTimeChanged = true;
    private float stepTime_;
    public bool HasStepTime {
      get { return hasStepTime; }
    }
    public float StepTime {
      get { return stepTime_; }
      set { hasStepTime = true;
        isStepTimeChanged = true;
        stepTime_ = value;}
    }
    
    public const int KeepLiveTimeFieldNumber = 3;
    private bool hasKeepLiveTime;
    private bool isKeepLiveTimeChanged = true;
    private float keepLiveTime_;
    public bool HasKeepLiveTime {
      get { return hasKeepLiveTime; }
    }
    public float KeepLiveTime {
      get { return keepLiveTime_; }
      set { hasKeepLiveTime = true;
        isKeepLiveTimeChanged = true;
        keepLiveTime_ = value;}
    }
    
    public const int AddTimeFieldNumber = 4;
    private bool hasAddTime;
    private bool isAddTimeChanged = true;
    private float addTime_;
    public bool HasAddTime {
      get { return hasAddTime; }
    }
    public float AddTime {
      get { return addTime_; }
      set { hasAddTime = true;
        isAddTimeChanged = true;
        addTime_ = value;}
    }
    
    public const int StartTimeFieldNumber = 5;
    private bool hasStartTime;
    private bool isStartTimeChanged = true;
    private float startTime_;
    public bool HasStartTime {
      get { return hasStartTime; }
    }
    public float StartTime {
      get { return startTime_; }
      set { hasStartTime = true;
        isStartTimeChanged = true;
        startTime_ = value;}
    }
    
    public const int LastExecuteTimeFieldNumber = 6;
    private bool hasLastExecuteTime;
    private bool isLastExecuteTimeChanged = true;
    private float lastExecuteTime_;
    public bool HasLastExecuteTime {
      get { return hasLastExecuteTime; }
    }
    public float LastExecuteTime {
      get { return lastExecuteTime_; }
      set { hasLastExecuteTime = true;
        isLastExecuteTimeChanged = true;
        lastExecuteTime_ = value;}
    }
    
    public const int DelayTimeFieldNumber = 7;
    private bool hasDelayTime;
    private bool isDelayTimeChanged = true;
    private float delayTime_;
    public bool HasDelayTime {
      get { return hasDelayTime; }
    }
    public float DelayTime {
      get { return delayTime_; }
      set { hasDelayTime = true;
        isDelayTimeChanged = true;
        delayTime_ = value;}
    }
    
    public const int BuffCountFieldNumber = 8;
    private bool hasBuffCount;
    private bool isBuffCountChanged = true;
    private uint buffCount_;
    public bool HasBuffCount {
      get { return hasBuffCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint BuffCount {
      get { return buffCount_; }
      set { hasBuffCount = true;
        isBuffCountChanged = true;
        buffCount_ = value;}
    }
    
    public const int IsDeleteFieldNumber = 9;
    private bool hasIsDelete;
    private bool isIsDeleteChanged = true;
    private bool isDelete_;
    public bool HasIsDelete {
      get { return hasIsDelete; }
    }
    public bool IsDelete {
      get { return isDelete_; }
      set { hasIsDelete = true;
        isIsDeleteChanged = true;
        isDelete_ = value;}
    }
    
    public const int BuffEffectMergeListFieldNumber = 10;
    private pbc::PopsicleList<global::Protocol.BuffEffectItem> buffEffectMergeList_ = new pbc::PopsicleList<global::Protocol.BuffEffectItem>();
    public scg::IList<global::Protocol.BuffEffectItem> BuffEffectMergeList {
      get { return pbc::Lists.AsReadOnly(buffEffectMergeList_); }
    }
    public int BuffEffectMergeListCount {
      get { return buffEffectMergeList_.Count; }
    }
    public global::Protocol.BuffEffectItem GetBuffEffectMergeList(int index) {
      return buffEffectMergeList_[index];
    }
    public global::Protocol.BuffEffectItem FindBuffEffectMergeList(System.Predicate<global::Protocol.BuffEffectItem> match) {
      return buffEffectMergeList_.Find(match);
    }
    public System.Collections.Generic.IList<global::Protocol.BuffEffectItem> FindAllBuffEffectMergeList(System.Predicate<global::Protocol.BuffEffectItem> match) {
      return buffEffectMergeList_.FindAll(match);
    }
    public void SetBuffEffectMergeList(int index, global::Protocol.BuffEffectItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (index < 0 || index >= buffEffectMergeList_.Count) return;
      removebuffEffectMergeList_.Add(buffEffectMergeList_[index].Id);
      addbuffEffectMergeList_.Add(value);
      buffEffectMergeList_[index] = value;
    }
    public void AddBuffEffectMergeList(global::Protocol.BuffEffectItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      buffEffectMergeList_.Add(value);
      addbuffEffectMergeList_.Add(value);
    }
    public void AddRangeBuffEffectMergeList(scg::IEnumerable<global::Protocol.BuffEffectItem> values) {
      buffEffectMergeList_.Add(values);
      addbuffEffectMergeList_.Add(values);
    }
    public void RemoveBuffEffectMergeList(global::Protocol.BuffEffectItem value) {
      if (!buffEffectMergeList_.Contains(value)) return;
      removebuffEffectMergeList_.Add(value.Id);
      buffEffectMergeList_.Remove(value);
    }
    public void RemoveAtBuffEffectMergeList(int index) {
      if (index < 0 || index >= buffEffectMergeList_.Count) return;
      removebuffEffectMergeList_.Add(buffEffectMergeList_[index].Id);
      buffEffectMergeList_.RemoveAt(index);
    }
    public void ClearBuffEffectMergeList() {
      if (buffEffectMergeList_.Count <= 0) return;
      foreach (var item in buffEffectMergeList_)
      {
        removebuffEffectMergeList_.Add(item.Id);
      }
      buffEffectMergeList_.Clear();
    }
    
    public const int DeleteTimeFieldNumber = 11;
    private bool hasDeleteTime;
    private bool isDeleteTimeChanged = true;
    private float deleteTime_;
    public bool HasDeleteTime {
      get { return hasDeleteTime; }
    }
    public float DeleteTime {
      get { return deleteTime_; }
      set { hasDeleteTime = true;
        isDeleteTimeChanged = true;
        deleteTime_ = value;}
    }
    
    public const int AddbuffEffectMergeListFieldNumber = 1010;
    private pbc::PopsicleList<global::Protocol.BuffEffectItem> addbuffEffectMergeList_ = new pbc::PopsicleList<global::Protocol.BuffEffectItem>();
    public scg::IList<global::Protocol.BuffEffectItem> AddbuffEffectMergeList {
      get { return pbc::Lists.AsReadOnly(addbuffEffectMergeList_); }
    }
    public int AddbuffEffectMergeListCount {
      get { return addbuffEffectMergeList_.Count; }
    }
    public global::Protocol.BuffEffectItem GetAddbuffEffectMergeList(int index) {
      return addbuffEffectMergeList_[index];
    }
    public global::Protocol.BuffEffectItem FindAddbuffEffectMergeList(System.Predicate<global::Protocol.BuffEffectItem> match) {
      return addbuffEffectMergeList_.Find(match);
    }
    public System.Collections.Generic.IList<global::Protocol.BuffEffectItem> FindAllAddbuffEffectMergeList(System.Predicate<global::Protocol.BuffEffectItem> match) {
      return addbuffEffectMergeList_.FindAll(match);
    }
    
    public const int RemovebuffEffectMergeListFieldNumber = 2010;
    private pbc::PopsicleList<uint> removebuffEffectMergeList_ = new pbc::PopsicleList<uint>();
    private bool isRemovebuffEffectMergeListChanged = true;
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> RemovebuffEffectMergeList {
      get { return pbc::Lists.AsReadOnly(removebuffEffectMergeList_); }
    }
    public int RemovebuffEffectMergeListCount {
      get { return removebuffEffectMergeList_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetRemovebuffEffectMergeList(int index) {
      return removebuffEffectMergeList_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        foreach (global::Protocol.BuffEffectItem element in BuffEffectMergeList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Protocol.BuffEffectItem element in AddbuffEffectMergeList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _buffItemFieldNames;
      if (hasId) {
        output.WriteUInt32(1, field_names[6], Id);
      }
      if (hasStepTime) {
        output.WriteFloat(2, field_names[12], StepTime);
      }
      if (hasKeepLiveTime) {
        output.WriteFloat(3, field_names[8], KeepLiveTime);
      }
      if (hasAddTime) {
        output.WriteFloat(4, field_names[0], AddTime);
      }
      if (hasStartTime) {
        output.WriteFloat(5, field_names[11], StartTime);
      }
      if (hasLastExecuteTime) {
        output.WriteFloat(6, field_names[9], LastExecuteTime);
      }
      if (hasDelayTime) {
        output.WriteFloat(7, field_names[4], DelayTime);
      }
      if (hasBuffCount) {
        output.WriteUInt32(8, field_names[2], BuffCount);
      }
      if (hasIsDelete) {
        output.WriteBool(9, field_names[7], IsDelete);
      }
      if (buffEffectMergeList_.Count > 0) {
        output.WriteMessageArray(10, field_names[3], buffEffectMergeList_);
      }
      if (hasDeleteTime) {
        output.WriteFloat(11, field_names[5], DeleteTime);
      }
      if (addbuffEffectMergeList_.Count > 0) {
        output.WriteMessageArray(1010, field_names[1], addbuffEffectMergeList_);
      }
      if (removebuffEffectMergeList_.Count > 0) {
        output.WriteUInt32Array(2010, field_names[10], removebuffEffectMergeList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
      }
      if (hasStepTime) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, StepTime);
      }
      if (hasKeepLiveTime) {
        size += pb::CodedOutputStream.ComputeFloatSize(3, KeepLiveTime);
      }
      if (hasAddTime) {
        size += pb::CodedOutputStream.ComputeFloatSize(4, AddTime);
      }
      if (hasStartTime) {
        size += pb::CodedOutputStream.ComputeFloatSize(5, StartTime);
      }
      if (hasLastExecuteTime) {
        size += pb::CodedOutputStream.ComputeFloatSize(6, LastExecuteTime);
      }
      if (hasDelayTime) {
        size += pb::CodedOutputStream.ComputeFloatSize(7, DelayTime);
      }
      if (hasBuffCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, BuffCount);
      }
      if (hasIsDelete) {
        size += pb::CodedOutputStream.ComputeBoolSize(9, IsDelete);
      }
      foreach (global::Protocol.BuffEffectItem element in BuffEffectMergeList) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, element);
      }
      if (hasDeleteTime) {
        size += pb::CodedOutputStream.ComputeFloatSize(11, DeleteTime);
      }
      foreach (global::Protocol.BuffEffectItem element in AddbuffEffectMergeList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1010, element);
      }
      {
        int dataSize = 0;
        foreach (uint element in RemovebuffEffectMergeList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * removebuffEffectMergeList_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public BuffItem CommitChange() {
      BuffItem other = new BuffItem();
      bool isChange = false;
      other.Id = Id;
      if (isStepTimeChanged) {
        isChange = true;
        other.StepTime = StepTime;
        isStepTimeChanged = false;
      }
      if (isKeepLiveTimeChanged) {
        isChange = true;
        other.KeepLiveTime = KeepLiveTime;
        isKeepLiveTimeChanged = false;
      }
      if (isAddTimeChanged) {
        isChange = true;
        other.AddTime = AddTime;
        isAddTimeChanged = false;
      }
      if (isStartTimeChanged) {
        isChange = true;
        other.StartTime = StartTime;
        isStartTimeChanged = false;
      }
      if (isLastExecuteTimeChanged) {
        isChange = true;
        other.LastExecuteTime = LastExecuteTime;
        isLastExecuteTimeChanged = false;
      }
      if (isDelayTimeChanged) {
        isChange = true;
        other.DelayTime = DelayTime;
        isDelayTimeChanged = false;
      }
      if (isBuffCountChanged) {
        isChange = true;
        other.BuffCount = BuffCount;
        isBuffCountChanged = false;
      }
      if (isIsDeleteChanged) {
        isChange = true;
        other.IsDelete = IsDelete;
        isIsDeleteChanged = false;
      }
        
      if (addbuffEffectMergeList_.Count > 0) 
      { 
        isChange = true;
        other.addbuffEffectMergeList_.Add(addbuffEffectMergeList_);
      }
      if (removebuffEffectMergeList_.Count > 0) 
      { 
        isChange = true;
        other.removebuffEffectMergeList_.Add(removebuffEffectMergeList_);
      }
      if (buffEffectMergeList_.Count > 0) 
      { 
        foreach (var item in buffEffectMergeList_) 
        { 
          bool isExist = false; 
          foreach (var item1 in addbuffEffectMergeList_) 
          { 
            if (item.Id == item1.Id)
            { 
              isExist = true; 
            } 
          } 
           
          if (!isExist) 
          { 
            var buffEffectMergeListcommit = item.CommitChange();
            if(buffEffectMergeListcommit!=null)
            {
              isChange = true;
              other.buffEffectMergeList_.Add(buffEffectMergeListcommit);
            }
          } 
        } 
      }
      addbuffEffectMergeList_.Clear();
      removebuffEffectMergeList_.Clear();
      if (isDeleteTimeChanged) {
        isChange = true;
        other.DeleteTime = DeleteTime;
        isDeleteTimeChanged = false;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(BuffItem other, bool isFull = false) {
      if (other == global::Protocol.BuffItem.DefaultInstance) return;
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasStepTime) {
        StepTime = other.StepTime;
      }
      if (other.HasKeepLiveTime) {
        KeepLiveTime = other.KeepLiveTime;
      }
      if (other.HasAddTime) {
        AddTime = other.AddTime;
      }
      if (other.HasStartTime) {
        StartTime = other.StartTime;
      }
      if (other.HasLastExecuteTime) {
        LastExecuteTime = other.LastExecuteTime;
      }
      if (other.HasDelayTime) {
        DelayTime = other.DelayTime;
      }
      if (other.HasBuffCount) {
        BuffCount = other.BuffCount;
      }
      if (other.HasIsDelete) {
        IsDelete = other.IsDelete;
      }
      if (other.removebuffEffectMergeList_.Count > 0) 
      { 
        int index = -1;
        foreach (var item in other.removebuffEffectMergeList_)
        { 
          for(int i=0; i<buffEffectMergeList_.Count; i++)
          { 
            if (buffEffectMergeList_[i].Id == item) 
            { 
              index = i;
              break;
            } 
          } 
          
          if(index >= 0)
            buffEffectMergeList_.RemoveAt(index);
        }
      }
      if (other.addbuffEffectMergeList_.Count > 0) 
      { 
        foreach (var item in other.addbuffEffectMergeList_) 
        { 
          bool isExist = false; 
          foreach (var item1 in buffEffectMergeList_) 
          { 
            if (item.Id == item1.Id)
            { 
              item1.MergeFrom(item, isFull); 
              isExist = true;
              break;
            } 
          } 
           
          if (!isExist) 
          { 
             buffEffectMergeList_.Add(item);
          } 
        } 
      }
      if (other.buffEffectMergeList_.Count > 0) 
      { 
        foreach (var item in other.buffEffectMergeList_) 
        { 
          foreach(var item1 in buffEffectMergeList_) 
          { 
            if (item.Id == item1.Id)
            { 
              item1.MergeFrom(item, isFull);
            } 
          } 
        } 
      }
      if(addbuffEffectMergeList_.Count > 0)addbuffEffectMergeList_.Clear();
      if(removebuffEffectMergeList_.Count > 0)removebuffEffectMergeList_.Clear();
      if (isFull) 
      {
        if (other.buffEffectMergeList_.Count != 0) {
          buffEffectMergeList_.Clear();
          buffEffectMergeList_.Add(other.buffEffectMergeList_);
        }
      }
      if (other.HasDeleteTime) {
        DeleteTime = other.DeleteTime;
      }
    }
    
    public static BuffItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BuffItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BuffItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BuffItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BuffItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BuffItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BuffItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BuffItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BuffItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BuffItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BuffItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BuffItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BuffItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BuffItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BuffItem result;
      
      private BuffItem PrepareBuilder() {
        if (resultIsReadOnly) {
          BuffItem original = result;
          result = new BuffItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BuffItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.BuffItem.Descriptor; }
      }
      
      public override BuffItem DefaultInstanceForType {
        get { return global::Protocol.BuffItem.DefaultInstance; }
      }
      
      public override BuffItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BuffItem) {
          return MergeFrom((BuffItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BuffItem other) {
        if (other == global::Protocol.BuffItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasStepTime) {
          StepTime = other.StepTime;
        }
        if (other.HasKeepLiveTime) {
          KeepLiveTime = other.KeepLiveTime;
        }
        if (other.HasAddTime) {
          AddTime = other.AddTime;
        }
        if (other.HasStartTime) {
          StartTime = other.StartTime;
        }
        if (other.HasLastExecuteTime) {
          LastExecuteTime = other.LastExecuteTime;
        }
        if (other.HasDelayTime) {
          DelayTime = other.DelayTime;
        }
        if (other.HasBuffCount) {
          BuffCount = other.BuffCount;
        }
        if (other.HasIsDelete) {
          IsDelete = other.IsDelete;
        }
        if (other.buffEffectMergeList_.Count != 0) {
          result.buffEffectMergeList_.Add(other.buffEffectMergeList_);
        }
        if (other.HasDeleteTime) {
          DeleteTime = other.DeleteTime;
        }
        if (other.addbuffEffectMergeList_.Count != 0) {
          result.addbuffEffectMergeList_.Add(other.addbuffEffectMergeList_);
        }
        if (other.removebuffEffectMergeList_.Count != 0) {
          result.removebuffEffectMergeList_.Add(other.removebuffEffectMergeList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_buffItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _buffItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt32(ref result.id_);
              break;
            }
            case 21: {
              result.hasStepTime = input.ReadFloat(ref result.stepTime_);
              break;
            }
            case 29: {
              result.hasKeepLiveTime = input.ReadFloat(ref result.keepLiveTime_);
              break;
            }
            case 37: {
              result.hasAddTime = input.ReadFloat(ref result.addTime_);
              break;
            }
            case 45: {
              result.hasStartTime = input.ReadFloat(ref result.startTime_);
              break;
            }
            case 53: {
              result.hasLastExecuteTime = input.ReadFloat(ref result.lastExecuteTime_);
              break;
            }
            case 61: {
              result.hasDelayTime = input.ReadFloat(ref result.delayTime_);
              break;
            }
            case 64: {
              result.hasBuffCount = input.ReadUInt32(ref result.buffCount_);
              break;
            }
            case 72: {
              result.hasIsDelete = input.ReadBool(ref result.isDelete_);
              break;
            }
            case 82: {
              input.ReadMessageArray(tag, field_name, result.buffEffectMergeList_, global::Protocol.BuffEffectItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 93: {
              result.hasDeleteTime = input.ReadFloat(ref result.deleteTime_);
              break;
            }
            case 8082: {
              input.ReadMessageArray(tag, field_name, result.addbuffEffectMergeList_, global::Protocol.BuffEffectItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 16082:
            case 16080: {
              input.ReadUInt32Array(tag, field_name, result.removebuffEffectMergeList_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      [global::System.CLSCompliant(false)]
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasStepTime {
        get { return result.hasStepTime; }
      }
      public float StepTime {
        get { return result.StepTime; }
        set { SetStepTime(value); }
      }
      public Builder SetStepTime(float value) {
        PrepareBuilder();
        result.hasStepTime = true;
        result.stepTime_ = value;
        return this;
      }
      public Builder ClearStepTime() {
        PrepareBuilder();
        result.hasStepTime = false;
        result.stepTime_ = 0F;
        return this;
      }
      
      public bool HasKeepLiveTime {
        get { return result.hasKeepLiveTime; }
      }
      public float KeepLiveTime {
        get { return result.KeepLiveTime; }
        set { SetKeepLiveTime(value); }
      }
      public Builder SetKeepLiveTime(float value) {
        PrepareBuilder();
        result.hasKeepLiveTime = true;
        result.keepLiveTime_ = value;
        return this;
      }
      public Builder ClearKeepLiveTime() {
        PrepareBuilder();
        result.hasKeepLiveTime = false;
        result.keepLiveTime_ = 0F;
        return this;
      }
      
      public bool HasAddTime {
        get { return result.hasAddTime; }
      }
      public float AddTime {
        get { return result.AddTime; }
        set { SetAddTime(value); }
      }
      public Builder SetAddTime(float value) {
        PrepareBuilder();
        result.hasAddTime = true;
        result.addTime_ = value;
        return this;
      }
      public Builder ClearAddTime() {
        PrepareBuilder();
        result.hasAddTime = false;
        result.addTime_ = 0F;
        return this;
      }
      
      public bool HasStartTime {
        get { return result.hasStartTime; }
      }
      public float StartTime {
        get { return result.StartTime; }
        set { SetStartTime(value); }
      }
      public Builder SetStartTime(float value) {
        PrepareBuilder();
        result.hasStartTime = true;
        result.startTime_ = value;
        return this;
      }
      public Builder ClearStartTime() {
        PrepareBuilder();
        result.hasStartTime = false;
        result.startTime_ = 0F;
        return this;
      }
      
      public bool HasLastExecuteTime {
        get { return result.hasLastExecuteTime; }
      }
      public float LastExecuteTime {
        get { return result.LastExecuteTime; }
        set { SetLastExecuteTime(value); }
      }
      public Builder SetLastExecuteTime(float value) {
        PrepareBuilder();
        result.hasLastExecuteTime = true;
        result.lastExecuteTime_ = value;
        return this;
      }
      public Builder ClearLastExecuteTime() {
        PrepareBuilder();
        result.hasLastExecuteTime = false;
        result.lastExecuteTime_ = 0F;
        return this;
      }
      
      public bool HasDelayTime {
        get { return result.hasDelayTime; }
      }
      public float DelayTime {
        get { return result.DelayTime; }
        set { SetDelayTime(value); }
      }
      public Builder SetDelayTime(float value) {
        PrepareBuilder();
        result.hasDelayTime = true;
        result.delayTime_ = value;
        return this;
      }
      public Builder ClearDelayTime() {
        PrepareBuilder();
        result.hasDelayTime = false;
        result.delayTime_ = 0F;
        return this;
      }
      
      public bool HasBuffCount {
        get { return result.hasBuffCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint BuffCount {
        get { return result.BuffCount; }
        set { SetBuffCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBuffCount(uint value) {
        PrepareBuilder();
        result.hasBuffCount = true;
        result.buffCount_ = value;
        return this;
      }
      public Builder ClearBuffCount() {
        PrepareBuilder();
        result.hasBuffCount = false;
        result.buffCount_ = 0;
        return this;
      }
      
      public bool HasIsDelete {
        get { return result.hasIsDelete; }
      }
      public bool IsDelete {
        get { return result.IsDelete; }
        set { SetIsDelete(value); }
      }
      public Builder SetIsDelete(bool value) {
        PrepareBuilder();
        result.hasIsDelete = true;
        result.isDelete_ = value;
        return this;
      }
      public Builder ClearIsDelete() {
        PrepareBuilder();
        result.hasIsDelete = false;
        result.isDelete_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<global::Protocol.BuffEffectItem> BuffEffectMergeList {
        get { return PrepareBuilder().buffEffectMergeList_; }
      }
      public int BuffEffectMergeListCount {
        get { return result.BuffEffectMergeListCount; }
      }
      public global::Protocol.BuffEffectItem GetBuffEffectMergeList(int index) {
        return result.GetBuffEffectMergeList(index);
      }
      public Builder SetBuffEffectMergeList(int index, global::Protocol.BuffEffectItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.buffEffectMergeList_[index] = value;
        return this;
      }
      public Builder SetBuffEffectMergeList(int index, global::Protocol.BuffEffectItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.buffEffectMergeList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBuffEffectMergeList(global::Protocol.BuffEffectItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.buffEffectMergeList_.Add(value);
        return this;
      }
      public Builder AddBuffEffectMergeList(global::Protocol.BuffEffectItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.buffEffectMergeList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBuffEffectMergeList(scg::IEnumerable<global::Protocol.BuffEffectItem> values) {
        PrepareBuilder();
        result.buffEffectMergeList_.Add(values);
        return this;
      }
      public Builder ClearBuffEffectMergeList() {
        PrepareBuilder();
        result.buffEffectMergeList_.Clear();
        return this;
      }
      
      public bool HasDeleteTime {
        get { return result.hasDeleteTime; }
      }
      public float DeleteTime {
        get { return result.DeleteTime; }
        set { SetDeleteTime(value); }
      }
      public Builder SetDeleteTime(float value) {
        PrepareBuilder();
        result.hasDeleteTime = true;
        result.deleteTime_ = value;
        return this;
      }
      public Builder ClearDeleteTime() {
        PrepareBuilder();
        result.hasDeleteTime = false;
        result.deleteTime_ = 0F;
        return this;
      }
      
      public pbc::IPopsicleList<global::Protocol.BuffEffectItem> AddbuffEffectMergeList {
        get { return PrepareBuilder().addbuffEffectMergeList_; }
      }
      public int AddbuffEffectMergeListCount {
        get { return result.AddbuffEffectMergeListCount; }
      }
      public global::Protocol.BuffEffectItem GetAddbuffEffectMergeList(int index) {
        return result.GetAddbuffEffectMergeList(index);
      }
      public Builder SetAddbuffEffectMergeList(int index, global::Protocol.BuffEffectItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.addbuffEffectMergeList_[index] = value;
        return this;
      }
      public Builder SetAddbuffEffectMergeList(int index, global::Protocol.BuffEffectItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.addbuffEffectMergeList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAddbuffEffectMergeList(global::Protocol.BuffEffectItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.addbuffEffectMergeList_.Add(value);
        return this;
      }
      public Builder AddAddbuffEffectMergeList(global::Protocol.BuffEffectItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.addbuffEffectMergeList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAddbuffEffectMergeList(scg::IEnumerable<global::Protocol.BuffEffectItem> values) {
        PrepareBuilder();
        result.addbuffEffectMergeList_.Add(values);
        return this;
      }
      public Builder ClearAddbuffEffectMergeList() {
        PrepareBuilder();
        result.addbuffEffectMergeList_.Clear();
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> RemovebuffEffectMergeList {
        get { return PrepareBuilder().removebuffEffectMergeList_; }
      }
      public int RemovebuffEffectMergeListCount {
        get { return result.RemovebuffEffectMergeListCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetRemovebuffEffectMergeList(int index) {
        return result.GetRemovebuffEffectMergeList(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRemovebuffEffectMergeList(int index, uint value) {
        PrepareBuilder();
        result.removebuffEffectMergeList_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRemovebuffEffectMergeList(uint value) {
        PrepareBuilder();
        result.removebuffEffectMergeList_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeRemovebuffEffectMergeList(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.removebuffEffectMergeList_.Add(values);
        return this;
      }
      public Builder ClearRemovebuffEffectMergeList() {
        PrepareBuilder();
        result.removebuffEffectMergeList_.Clear();
        return this;
      }
    }
    static BuffItem() {
      object.ReferenceEquals(global::Protocol.ProtoBattle.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BuffEffectItem : pb::GeneratedMessage<BuffEffectItem, BuffEffectItem.Builder> {
    public BuffEffectItem() { }
    private static readonly BuffEffectItem defaultInstance = new BuffEffectItem().MakeReadOnly();
    private static readonly string[] _buffEffectItemFieldNames = new string[] { "add_time", "delay_time", "delete_time", "effect_add_value", "effect_multi_value", "id", "is_complete", "keep_live_time", "last_execute_time", "need_reset_on_remove", "start_time", "step_time" };
    private static readonly uint[] _buffEffectItemFieldTags = new uint[] { 37, 61, 101, 85, 93, 8, 64, 29, 53, 72, 45, 21 };
    public static BuffEffectItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BuffEffectItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BuffEffectItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_BuffEffectItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BuffEffectItem, BuffEffectItem.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_BuffEffectItem__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    [global::System.CLSCompliant(false)]
    public uint Id {
      get { return id_; }
      set { hasId = true;
        id_ = value;}
    }
    
    public const int StepTimeFieldNumber = 2;
    private bool hasStepTime;
    private bool isStepTimeChanged = true;
    private float stepTime_;
    public bool HasStepTime {
      get { return hasStepTime; }
    }
    public float StepTime {
      get { return stepTime_; }
      set { hasStepTime = true;
        isStepTimeChanged = true;
        stepTime_ = value;}
    }
    
    public const int KeepLiveTimeFieldNumber = 3;
    private bool hasKeepLiveTime;
    private bool isKeepLiveTimeChanged = true;
    private float keepLiveTime_;
    public bool HasKeepLiveTime {
      get { return hasKeepLiveTime; }
    }
    public float KeepLiveTime {
      get { return keepLiveTime_; }
      set { hasKeepLiveTime = true;
        isKeepLiveTimeChanged = true;
        keepLiveTime_ = value;}
    }
    
    public const int AddTimeFieldNumber = 4;
    private bool hasAddTime;
    private bool isAddTimeChanged = true;
    private float addTime_;
    public bool HasAddTime {
      get { return hasAddTime; }
    }
    public float AddTime {
      get { return addTime_; }
      set { hasAddTime = true;
        isAddTimeChanged = true;
        addTime_ = value;}
    }
    
    public const int StartTimeFieldNumber = 5;
    private bool hasStartTime;
    private bool isStartTimeChanged = true;
    private float startTime_;
    public bool HasStartTime {
      get { return hasStartTime; }
    }
    public float StartTime {
      get { return startTime_; }
      set { hasStartTime = true;
        isStartTimeChanged = true;
        startTime_ = value;}
    }
    
    public const int LastExecuteTimeFieldNumber = 6;
    private bool hasLastExecuteTime;
    private bool isLastExecuteTimeChanged = true;
    private float lastExecuteTime_;
    public bool HasLastExecuteTime {
      get { return hasLastExecuteTime; }
    }
    public float LastExecuteTime {
      get { return lastExecuteTime_; }
      set { hasLastExecuteTime = true;
        isLastExecuteTimeChanged = true;
        lastExecuteTime_ = value;}
    }
    
    public const int DelayTimeFieldNumber = 7;
    private bool hasDelayTime;
    private bool isDelayTimeChanged = true;
    private float delayTime_;
    public bool HasDelayTime {
      get { return hasDelayTime; }
    }
    public float DelayTime {
      get { return delayTime_; }
      set { hasDelayTime = true;
        isDelayTimeChanged = true;
        delayTime_ = value;}
    }
    
    public const int IsCompleteFieldNumber = 8;
    private bool hasIsComplete;
    private bool isIsCompleteChanged = true;
    private bool isComplete_;
    public bool HasIsComplete {
      get { return hasIsComplete; }
    }
    public bool IsComplete {
      get { return isComplete_; }
      set { hasIsComplete = true;
        isIsCompleteChanged = true;
        isComplete_ = value;}
    }
    
    public const int NeedResetOnRemoveFieldNumber = 9;
    private bool hasNeedResetOnRemove;
    private bool isNeedResetOnRemoveChanged = true;
    private bool needResetOnRemove_;
    public bool HasNeedResetOnRemove {
      get { return hasNeedResetOnRemove; }
    }
    public bool NeedResetOnRemove {
      get { return needResetOnRemove_; }
      set { hasNeedResetOnRemove = true;
        isNeedResetOnRemoveChanged = true;
        needResetOnRemove_ = value;}
    }
    
    public const int EffectAddValueFieldNumber = 10;
    private bool hasEffectAddValue;
    private bool isEffectAddValueChanged = true;
    private float effectAddValue_;
    public bool HasEffectAddValue {
      get { return hasEffectAddValue; }
    }
    public float EffectAddValue {
      get { return effectAddValue_; }
      set { hasEffectAddValue = true;
        isEffectAddValueChanged = true;
        effectAddValue_ = value;}
    }
    
    public const int EffectMultiValueFieldNumber = 11;
    private bool hasEffectMultiValue;
    private bool isEffectMultiValueChanged = true;
    private float effectMultiValue_;
    public bool HasEffectMultiValue {
      get { return hasEffectMultiValue; }
    }
    public float EffectMultiValue {
      get { return effectMultiValue_; }
      set { hasEffectMultiValue = true;
        isEffectMultiValueChanged = true;
        effectMultiValue_ = value;}
    }
    
    public const int DeleteTimeFieldNumber = 12;
    private bool hasDeleteTime;
    private bool isDeleteTimeChanged = true;
    private float deleteTime_;
    public bool HasDeleteTime {
      get { return hasDeleteTime; }
    }
    public float DeleteTime {
      get { return deleteTime_; }
      set { hasDeleteTime = true;
        isDeleteTimeChanged = true;
        deleteTime_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _buffEffectItemFieldNames;
      if (hasId) {
        output.WriteUInt32(1, field_names[5], Id);
      }
      if (hasStepTime) {
        output.WriteFloat(2, field_names[11], StepTime);
      }
      if (hasKeepLiveTime) {
        output.WriteFloat(3, field_names[7], KeepLiveTime);
      }
      if (hasAddTime) {
        output.WriteFloat(4, field_names[0], AddTime);
      }
      if (hasStartTime) {
        output.WriteFloat(5, field_names[10], StartTime);
      }
      if (hasLastExecuteTime) {
        output.WriteFloat(6, field_names[8], LastExecuteTime);
      }
      if (hasDelayTime) {
        output.WriteFloat(7, field_names[1], DelayTime);
      }
      if (hasIsComplete) {
        output.WriteBool(8, field_names[6], IsComplete);
      }
      if (hasNeedResetOnRemove) {
        output.WriteBool(9, field_names[9], NeedResetOnRemove);
      }
      if (hasEffectAddValue) {
        output.WriteFloat(10, field_names[3], EffectAddValue);
      }
      if (hasEffectMultiValue) {
        output.WriteFloat(11, field_names[4], EffectMultiValue);
      }
      if (hasDeleteTime) {
        output.WriteFloat(12, field_names[2], DeleteTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
      }
      if (hasStepTime) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, StepTime);
      }
      if (hasKeepLiveTime) {
        size += pb::CodedOutputStream.ComputeFloatSize(3, KeepLiveTime);
      }
      if (hasAddTime) {
        size += pb::CodedOutputStream.ComputeFloatSize(4, AddTime);
      }
      if (hasStartTime) {
        size += pb::CodedOutputStream.ComputeFloatSize(5, StartTime);
      }
      if (hasLastExecuteTime) {
        size += pb::CodedOutputStream.ComputeFloatSize(6, LastExecuteTime);
      }
      if (hasDelayTime) {
        size += pb::CodedOutputStream.ComputeFloatSize(7, DelayTime);
      }
      if (hasIsComplete) {
        size += pb::CodedOutputStream.ComputeBoolSize(8, IsComplete);
      }
      if (hasNeedResetOnRemove) {
        size += pb::CodedOutputStream.ComputeBoolSize(9, NeedResetOnRemove);
      }
      if (hasEffectAddValue) {
        size += pb::CodedOutputStream.ComputeFloatSize(10, EffectAddValue);
      }
      if (hasEffectMultiValue) {
        size += pb::CodedOutputStream.ComputeFloatSize(11, EffectMultiValue);
      }
      if (hasDeleteTime) {
        size += pb::CodedOutputStream.ComputeFloatSize(12, DeleteTime);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public BuffEffectItem CommitChange() {
      BuffEffectItem other = new BuffEffectItem();
      bool isChange = false;
      other.Id = Id;
      if (isStepTimeChanged) {
        isChange = true;
        other.StepTime = StepTime;
        isStepTimeChanged = false;
      }
      if (isKeepLiveTimeChanged) {
        isChange = true;
        other.KeepLiveTime = KeepLiveTime;
        isKeepLiveTimeChanged = false;
      }
      if (isAddTimeChanged) {
        isChange = true;
        other.AddTime = AddTime;
        isAddTimeChanged = false;
      }
      if (isStartTimeChanged) {
        isChange = true;
        other.StartTime = StartTime;
        isStartTimeChanged = false;
      }
      if (isLastExecuteTimeChanged) {
        isChange = true;
        other.LastExecuteTime = LastExecuteTime;
        isLastExecuteTimeChanged = false;
      }
      if (isDelayTimeChanged) {
        isChange = true;
        other.DelayTime = DelayTime;
        isDelayTimeChanged = false;
      }
      if (isIsCompleteChanged) {
        isChange = true;
        other.IsComplete = IsComplete;
        isIsCompleteChanged = false;
      }
      if (isNeedResetOnRemoveChanged) {
        isChange = true;
        other.NeedResetOnRemove = NeedResetOnRemove;
        isNeedResetOnRemoveChanged = false;
      }
      if (isEffectAddValueChanged) {
        isChange = true;
        other.EffectAddValue = EffectAddValue;
        isEffectAddValueChanged = false;
      }
      if (isEffectMultiValueChanged) {
        isChange = true;
        other.EffectMultiValue = EffectMultiValue;
        isEffectMultiValueChanged = false;
      }
      if (isDeleteTimeChanged) {
        isChange = true;
        other.DeleteTime = DeleteTime;
        isDeleteTimeChanged = false;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(BuffEffectItem other, bool isFull = false) {
      if (other == global::Protocol.BuffEffectItem.DefaultInstance) return;
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasStepTime) {
        StepTime = other.StepTime;
      }
      if (other.HasKeepLiveTime) {
        KeepLiveTime = other.KeepLiveTime;
      }
      if (other.HasAddTime) {
        AddTime = other.AddTime;
      }
      if (other.HasStartTime) {
        StartTime = other.StartTime;
      }
      if (other.HasLastExecuteTime) {
        LastExecuteTime = other.LastExecuteTime;
      }
      if (other.HasDelayTime) {
        DelayTime = other.DelayTime;
      }
      if (other.HasIsComplete) {
        IsComplete = other.IsComplete;
      }
      if (other.HasNeedResetOnRemove) {
        NeedResetOnRemove = other.NeedResetOnRemove;
      }
      if (other.HasEffectAddValue) {
        EffectAddValue = other.EffectAddValue;
      }
      if (other.HasEffectMultiValue) {
        EffectMultiValue = other.EffectMultiValue;
      }
      if (other.HasDeleteTime) {
        DeleteTime = other.DeleteTime;
      }
    }
    
    public static BuffEffectItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BuffEffectItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BuffEffectItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BuffEffectItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BuffEffectItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BuffEffectItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BuffEffectItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BuffEffectItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BuffEffectItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BuffEffectItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BuffEffectItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BuffEffectItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BuffEffectItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BuffEffectItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BuffEffectItem result;
      
      private BuffEffectItem PrepareBuilder() {
        if (resultIsReadOnly) {
          BuffEffectItem original = result;
          result = new BuffEffectItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BuffEffectItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.BuffEffectItem.Descriptor; }
      }
      
      public override BuffEffectItem DefaultInstanceForType {
        get { return global::Protocol.BuffEffectItem.DefaultInstance; }
      }
      
      public override BuffEffectItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BuffEffectItem) {
          return MergeFrom((BuffEffectItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BuffEffectItem other) {
        if (other == global::Protocol.BuffEffectItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasStepTime) {
          StepTime = other.StepTime;
        }
        if (other.HasKeepLiveTime) {
          KeepLiveTime = other.KeepLiveTime;
        }
        if (other.HasAddTime) {
          AddTime = other.AddTime;
        }
        if (other.HasStartTime) {
          StartTime = other.StartTime;
        }
        if (other.HasLastExecuteTime) {
          LastExecuteTime = other.LastExecuteTime;
        }
        if (other.HasDelayTime) {
          DelayTime = other.DelayTime;
        }
        if (other.HasIsComplete) {
          IsComplete = other.IsComplete;
        }
        if (other.HasNeedResetOnRemove) {
          NeedResetOnRemove = other.NeedResetOnRemove;
        }
        if (other.HasEffectAddValue) {
          EffectAddValue = other.EffectAddValue;
        }
        if (other.HasEffectMultiValue) {
          EffectMultiValue = other.EffectMultiValue;
        }
        if (other.HasDeleteTime) {
          DeleteTime = other.DeleteTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_buffEffectItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _buffEffectItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt32(ref result.id_);
              break;
            }
            case 21: {
              result.hasStepTime = input.ReadFloat(ref result.stepTime_);
              break;
            }
            case 29: {
              result.hasKeepLiveTime = input.ReadFloat(ref result.keepLiveTime_);
              break;
            }
            case 37: {
              result.hasAddTime = input.ReadFloat(ref result.addTime_);
              break;
            }
            case 45: {
              result.hasStartTime = input.ReadFloat(ref result.startTime_);
              break;
            }
            case 53: {
              result.hasLastExecuteTime = input.ReadFloat(ref result.lastExecuteTime_);
              break;
            }
            case 61: {
              result.hasDelayTime = input.ReadFloat(ref result.delayTime_);
              break;
            }
            case 64: {
              result.hasIsComplete = input.ReadBool(ref result.isComplete_);
              break;
            }
            case 72: {
              result.hasNeedResetOnRemove = input.ReadBool(ref result.needResetOnRemove_);
              break;
            }
            case 85: {
              result.hasEffectAddValue = input.ReadFloat(ref result.effectAddValue_);
              break;
            }
            case 93: {
              result.hasEffectMultiValue = input.ReadFloat(ref result.effectMultiValue_);
              break;
            }
            case 101: {
              result.hasDeleteTime = input.ReadFloat(ref result.deleteTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      [global::System.CLSCompliant(false)]
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasStepTime {
        get { return result.hasStepTime; }
      }
      public float StepTime {
        get { return result.StepTime; }
        set { SetStepTime(value); }
      }
      public Builder SetStepTime(float value) {
        PrepareBuilder();
        result.hasStepTime = true;
        result.stepTime_ = value;
        return this;
      }
      public Builder ClearStepTime() {
        PrepareBuilder();
        result.hasStepTime = false;
        result.stepTime_ = 0F;
        return this;
      }
      
      public bool HasKeepLiveTime {
        get { return result.hasKeepLiveTime; }
      }
      public float KeepLiveTime {
        get { return result.KeepLiveTime; }
        set { SetKeepLiveTime(value); }
      }
      public Builder SetKeepLiveTime(float value) {
        PrepareBuilder();
        result.hasKeepLiveTime = true;
        result.keepLiveTime_ = value;
        return this;
      }
      public Builder ClearKeepLiveTime() {
        PrepareBuilder();
        result.hasKeepLiveTime = false;
        result.keepLiveTime_ = 0F;
        return this;
      }
      
      public bool HasAddTime {
        get { return result.hasAddTime; }
      }
      public float AddTime {
        get { return result.AddTime; }
        set { SetAddTime(value); }
      }
      public Builder SetAddTime(float value) {
        PrepareBuilder();
        result.hasAddTime = true;
        result.addTime_ = value;
        return this;
      }
      public Builder ClearAddTime() {
        PrepareBuilder();
        result.hasAddTime = false;
        result.addTime_ = 0F;
        return this;
      }
      
      public bool HasStartTime {
        get { return result.hasStartTime; }
      }
      public float StartTime {
        get { return result.StartTime; }
        set { SetStartTime(value); }
      }
      public Builder SetStartTime(float value) {
        PrepareBuilder();
        result.hasStartTime = true;
        result.startTime_ = value;
        return this;
      }
      public Builder ClearStartTime() {
        PrepareBuilder();
        result.hasStartTime = false;
        result.startTime_ = 0F;
        return this;
      }
      
      public bool HasLastExecuteTime {
        get { return result.hasLastExecuteTime; }
      }
      public float LastExecuteTime {
        get { return result.LastExecuteTime; }
        set { SetLastExecuteTime(value); }
      }
      public Builder SetLastExecuteTime(float value) {
        PrepareBuilder();
        result.hasLastExecuteTime = true;
        result.lastExecuteTime_ = value;
        return this;
      }
      public Builder ClearLastExecuteTime() {
        PrepareBuilder();
        result.hasLastExecuteTime = false;
        result.lastExecuteTime_ = 0F;
        return this;
      }
      
      public bool HasDelayTime {
        get { return result.hasDelayTime; }
      }
      public float DelayTime {
        get { return result.DelayTime; }
        set { SetDelayTime(value); }
      }
      public Builder SetDelayTime(float value) {
        PrepareBuilder();
        result.hasDelayTime = true;
        result.delayTime_ = value;
        return this;
      }
      public Builder ClearDelayTime() {
        PrepareBuilder();
        result.hasDelayTime = false;
        result.delayTime_ = 0F;
        return this;
      }
      
      public bool HasIsComplete {
        get { return result.hasIsComplete; }
      }
      public bool IsComplete {
        get { return result.IsComplete; }
        set { SetIsComplete(value); }
      }
      public Builder SetIsComplete(bool value) {
        PrepareBuilder();
        result.hasIsComplete = true;
        result.isComplete_ = value;
        return this;
      }
      public Builder ClearIsComplete() {
        PrepareBuilder();
        result.hasIsComplete = false;
        result.isComplete_ = false;
        return this;
      }
      
      public bool HasNeedResetOnRemove {
        get { return result.hasNeedResetOnRemove; }
      }
      public bool NeedResetOnRemove {
        get { return result.NeedResetOnRemove; }
        set { SetNeedResetOnRemove(value); }
      }
      public Builder SetNeedResetOnRemove(bool value) {
        PrepareBuilder();
        result.hasNeedResetOnRemove = true;
        result.needResetOnRemove_ = value;
        return this;
      }
      public Builder ClearNeedResetOnRemove() {
        PrepareBuilder();
        result.hasNeedResetOnRemove = false;
        result.needResetOnRemove_ = false;
        return this;
      }
      
      public bool HasEffectAddValue {
        get { return result.hasEffectAddValue; }
      }
      public float EffectAddValue {
        get { return result.EffectAddValue; }
        set { SetEffectAddValue(value); }
      }
      public Builder SetEffectAddValue(float value) {
        PrepareBuilder();
        result.hasEffectAddValue = true;
        result.effectAddValue_ = value;
        return this;
      }
      public Builder ClearEffectAddValue() {
        PrepareBuilder();
        result.hasEffectAddValue = false;
        result.effectAddValue_ = 0F;
        return this;
      }
      
      public bool HasEffectMultiValue {
        get { return result.hasEffectMultiValue; }
      }
      public float EffectMultiValue {
        get { return result.EffectMultiValue; }
        set { SetEffectMultiValue(value); }
      }
      public Builder SetEffectMultiValue(float value) {
        PrepareBuilder();
        result.hasEffectMultiValue = true;
        result.effectMultiValue_ = value;
        return this;
      }
      public Builder ClearEffectMultiValue() {
        PrepareBuilder();
        result.hasEffectMultiValue = false;
        result.effectMultiValue_ = 0F;
        return this;
      }
      
      public bool HasDeleteTime {
        get { return result.hasDeleteTime; }
      }
      public float DeleteTime {
        get { return result.DeleteTime; }
        set { SetDeleteTime(value); }
      }
      public Builder SetDeleteTime(float value) {
        PrepareBuilder();
        result.hasDeleteTime = true;
        result.deleteTime_ = value;
        return this;
      }
      public Builder ClearDeleteTime() {
        PrepareBuilder();
        result.hasDeleteTime = false;
        result.deleteTime_ = 0F;
        return this;
      }
    }
    static BuffEffectItem() {
      object.ReferenceEquals(global::Protocol.ProtoBattle.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SkillSyncData : pb::GeneratedMessage<SkillSyncData, SkillSyncData.Builder> {
    public SkillSyncData() { }
    private static readonly SkillSyncData defaultInstance = new SkillSyncData().MakeReadOnly();
    private static readonly string[] _skillSyncDataFieldNames = new string[] { "id", "remain_cd" };
    private static readonly uint[] _skillSyncDataFieldTags = new uint[] { 8, 21 };
    public static SkillSyncData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SkillSyncData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SkillSyncData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_SkillSyncData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SkillSyncData, SkillSyncData.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_SkillSyncData__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private ulong id_;
    public bool HasId {
      get { return hasId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Id {
      get { return id_; }
      set { hasId = true;
        id_ = value;}
    }
    
    public const int RemainCdFieldNumber = 2;
    private bool hasRemainCd;
    private bool isRemainCdChanged = true;
    private float remainCd_;
    public bool HasRemainCd {
      get { return hasRemainCd; }
    }
    public float RemainCd {
      get { return remainCd_; }
      set { hasRemainCd = true;
        isRemainCdChanged = true;
        remainCd_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _skillSyncDataFieldNames;
      if (hasId) {
        output.WriteUInt64(1, field_names[0], Id);
      }
      if (hasRemainCd) {
        output.WriteFloat(2, field_names[1], RemainCd);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Id);
      }
      if (hasRemainCd) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, RemainCd);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public SkillSyncData CommitChange() {
      SkillSyncData other = new SkillSyncData();
      bool isChange = false;
      other.Id = Id;
      if (isRemainCdChanged) {
        isChange = true;
        other.RemainCd = RemainCd;
        isRemainCdChanged = false;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(SkillSyncData other, bool isFull = false) {
      if (other == global::Protocol.SkillSyncData.DefaultInstance) return;
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasRemainCd) {
        RemainCd = other.RemainCd;
      }
    }
    
    public static SkillSyncData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillSyncData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillSyncData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillSyncData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillSyncData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillSyncData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SkillSyncData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SkillSyncData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SkillSyncData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillSyncData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SkillSyncData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SkillSyncData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SkillSyncData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SkillSyncData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SkillSyncData result;
      
      private SkillSyncData PrepareBuilder() {
        if (resultIsReadOnly) {
          SkillSyncData original = result;
          result = new SkillSyncData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SkillSyncData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.SkillSyncData.Descriptor; }
      }
      
      public override SkillSyncData DefaultInstanceForType {
        get { return global::Protocol.SkillSyncData.DefaultInstance; }
      }
      
      public override SkillSyncData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SkillSyncData) {
          return MergeFrom((SkillSyncData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SkillSyncData other) {
        if (other == global::Protocol.SkillSyncData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasRemainCd) {
          RemainCd = other.RemainCd;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_skillSyncDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _skillSyncDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt64(ref result.id_);
              break;
            }
            case 21: {
              result.hasRemainCd = input.ReadFloat(ref result.remainCd_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetId(ulong value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0UL;
        return this;
      }
      
      public bool HasRemainCd {
        get { return result.hasRemainCd; }
      }
      public float RemainCd {
        get { return result.RemainCd; }
        set { SetRemainCd(value); }
      }
      public Builder SetRemainCd(float value) {
        PrepareBuilder();
        result.hasRemainCd = true;
        result.remainCd_ = value;
        return this;
      }
      public Builder ClearRemainCd() {
        PrepareBuilder();
        result.hasRemainCd = false;
        result.remainCd_ = 0F;
        return this;
      }
    }
    static SkillSyncData() {
      object.ReferenceEquals(global::Protocol.ProtoBattle.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ThingSyncData : pb::GeneratedMessage<ThingSyncData, ThingSyncData.Builder> {
    public ThingSyncData() { }
    private static readonly ThingSyncData defaultInstance = new ThingSyncData().MakeReadOnly();
    private static readonly string[] _thingSyncDataFieldNames = new string[] { "collider", "id", "thing_id", "type" };
    private static readonly uint[] _thingSyncDataFieldTags = new uint[] { 34, 24, 8, 16 };
    public static ThingSyncData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ThingSyncData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ThingSyncData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_ThingSyncData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ThingSyncData, ThingSyncData.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_ThingSyncData__FieldAccessorTable; }
    }
    
    public const int ThingIdFieldNumber = 1;
    private bool hasThingId;
    private ulong thingId_;
    public bool HasThingId {
      get { return hasThingId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ThingId {
      get { return thingId_; }
      set { hasThingId = true;
        thingId_ = value;}
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private global::Protocol.ThingType type_ = global::Protocol.ThingType.None;
    private bool isTypeChanged = true;
    public bool HasType {
      get { return hasType; }
    }
    public global::Protocol.ThingType Type {
      get { return type_; }
      set { hasType = true;
        isTypeChanged = true;
        type_ = value;}
    }
    
    public const int IdFieldNumber = 3;
    private bool hasId;
    private bool isIdChanged = true;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    [global::System.CLSCompliant(false)]
    public uint Id {
      get { return id_; }
      set { hasId = true;
        isIdChanged = true;
        id_ = value;}
    }
    
    public const int ColliderFieldNumber = 4;
    private bool hasCollider;
    private global::Protocol.BoxColliderData collider_;
    public bool HasCollider {
      get { return hasCollider; }
    }
    public global::Protocol.BoxColliderData Collider {
      get { return collider_; }
      set { hasCollider = true;
        collider_ = value;}
    }
    public void MergeCollider(global::Protocol.BoxColliderData value, bool isFull = false) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (HasCollider &&
        collider_ != global::Protocol.BoxColliderData.DefaultInstance) {
        collider_.MergeFrom(value, isFull);
      } else {
        collider_ = value;
      }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasThingId) return false;
        if (HasCollider) {
          if (!Collider.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _thingSyncDataFieldNames;
      if (hasThingId) {
        output.WriteUInt64(1, field_names[2], ThingId);
      }
      if (hasType) {
        output.WriteEnum(2, field_names[3], (int) Type, Type);
      }
      if (hasId) {
        output.WriteUInt32(3, field_names[1], Id);
      }
      if (hasCollider) {
        output.WriteMessage(4, field_names[0], Collider);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasThingId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ThingId);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Type);
      }
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Id);
      }
      if (hasCollider) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Collider);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public ThingSyncData CommitChange() {
      ThingSyncData other = new ThingSyncData();
      bool isChange = false;
      other.ThingId = ThingId;
      if (isTypeChanged) {
        isChange = true;
        other.Type = Type;
        isTypeChanged = false;
      }
      if (isIdChanged) {
        isChange = true;
        other.Id = Id;
        isIdChanged = false;
      }
      
      var Collidercommit = Collider?.CommitChange();
      if(Collidercommit!=null)
      {
          isChange = true;
          other.Collider = Collidercommit;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(ThingSyncData other, bool isFull = false) {
      if (other == global::Protocol.ThingSyncData.DefaultInstance) return;
      if (other.HasThingId) {
        ThingId = other.ThingId;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      
      if (other.HasCollider)
      {
        MergeCollider(other.Collider, isFull);
      }
    }
    
    public static ThingSyncData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ThingSyncData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ThingSyncData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ThingSyncData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ThingSyncData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ThingSyncData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ThingSyncData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ThingSyncData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ThingSyncData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ThingSyncData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ThingSyncData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ThingSyncData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ThingSyncData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ThingSyncData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ThingSyncData result;
      
      private ThingSyncData PrepareBuilder() {
        if (resultIsReadOnly) {
          ThingSyncData original = result;
          result = new ThingSyncData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ThingSyncData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.ThingSyncData.Descriptor; }
      }
      
      public override ThingSyncData DefaultInstanceForType {
        get { return global::Protocol.ThingSyncData.DefaultInstance; }
      }
      
      public override ThingSyncData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ThingSyncData) {
          return MergeFrom((ThingSyncData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ThingSyncData other) {
        if (other == global::Protocol.ThingSyncData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasThingId) {
          ThingId = other.ThingId;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasCollider) {
          MergeCollider(other.Collider);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_thingSyncDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _thingSyncDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasThingId = input.ReadUInt64(ref result.thingId_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 24: {
              result.hasId = input.ReadUInt32(ref result.id_);
              break;
            }
            case 34: {
              global::Protocol.BoxColliderData.Builder subBuilder = global::Protocol.BoxColliderData.CreateBuilder();
              if (result.hasCollider) {
                subBuilder.MergeFrom(Collider);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Collider = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasThingId {
        get { return result.hasThingId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong ThingId {
        get { return result.ThingId; }
        set { SetThingId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetThingId(ulong value) {
        PrepareBuilder();
        result.hasThingId = true;
        result.thingId_ = value;
        return this;
      }
      public Builder ClearThingId() {
        PrepareBuilder();
        result.hasThingId = false;
        result.thingId_ = 0UL;
        return this;
      }
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::Protocol.ThingType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Protocol.ThingType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::Protocol.ThingType.None;
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      [global::System.CLSCompliant(false)]
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasCollider {
       get { return result.hasCollider; }
      }
      public global::Protocol.BoxColliderData Collider {
        get { return result.Collider; }
        set { SetCollider(value); }
      }
      public Builder SetCollider(global::Protocol.BoxColliderData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCollider = true;
        result.collider_ = value;
        return this;
      }
      public Builder SetCollider(global::Protocol.BoxColliderData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCollider = true;
        result.collider_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCollider(global::Protocol.BoxColliderData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.HasCollider &&
            result.collider_ != global::Protocol.BoxColliderData.DefaultInstance) {
            result.collider_ = global::Protocol.BoxColliderData.CreateBuilder(result.collider_).MergeFrom(value).BuildPartial();
        } else {
          result.collider_ = value;
          result.hasCollider = true;
        }
        return this;
      }
      public Builder ClearCollider() {
        PrepareBuilder();
        result.hasCollider = false;
        result.collider_ = null;
        return this;
      }
    }
    static ThingSyncData() {
      object.ReferenceEquals(global::Protocol.ProtoBattle.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class HeroSyncData : pb::GeneratedMessage<HeroSyncData, HeroSyncData.Builder> {
    public HeroSyncData() { }
    private static readonly HeroSyncData defaultInstance = new HeroSyncData().MakeReadOnly();
    private static readonly string[] _heroSyncDataFieldNames = new string[] { "hero_id", "hero_power_type", "model_id", "skin_id" };
    private static readonly uint[] _heroSyncDataFieldTags = new uint[] { 8, 32, 24, 16 };
    public static HeroSyncData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeroSyncData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HeroSyncData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_HeroSyncData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeroSyncData, HeroSyncData.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_HeroSyncData__FieldAccessorTable; }
    }
    
    public const int HeroIdFieldNumber = 1;
    private bool hasHeroId;
    private bool isHeroIdChanged = true;
    private uint heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    [global::System.CLSCompliant(false)]
    public uint HeroId {
      get { return heroId_; }
      set { hasHeroId = true;
        isHeroIdChanged = true;
        heroId_ = value;}
    }
    
    public const int SkinIdFieldNumber = 2;
    private bool hasSkinId;
    private bool isSkinIdChanged = true;
    private uint skinId_;
    public bool HasSkinId {
      get { return hasSkinId; }
    }
    [global::System.CLSCompliant(false)]
    public uint SkinId {
      get { return skinId_; }
      set { hasSkinId = true;
        isSkinIdChanged = true;
        skinId_ = value;}
    }
    
    public const int ModelIdFieldNumber = 3;
    private bool hasModelId;
    private bool isModelIdChanged = true;
    private uint modelId_;
    public bool HasModelId {
      get { return hasModelId; }
    }
    [global::System.CLSCompliant(false)]
    public uint ModelId {
      get { return modelId_; }
      set { hasModelId = true;
        isModelIdChanged = true;
        modelId_ = value;}
    }
    
    public const int HeroPowerTypeFieldNumber = 4;
    private bool hasHeroPowerType;
    private global::Protocol.HeroPowerType heroPowerType_ = global::Protocol.HeroPowerType.NoWeapon;
    private bool isHeroPowerTypeChanged = true;
    public bool HasHeroPowerType {
      get { return hasHeroPowerType; }
    }
    public global::Protocol.HeroPowerType HeroPowerType {
      get { return heroPowerType_; }
      set { hasHeroPowerType = true;
        isHeroPowerTypeChanged = true;
        heroPowerType_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _heroSyncDataFieldNames;
      if (hasHeroId) {
        output.WriteUInt32(1, field_names[0], HeroId);
      }
      if (hasSkinId) {
        output.WriteUInt32(2, field_names[3], SkinId);
      }
      if (hasModelId) {
        output.WriteUInt32(3, field_names[2], ModelId);
      }
      if (hasHeroPowerType) {
        output.WriteEnum(4, field_names[1], (int) HeroPowerType, HeroPowerType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasHeroId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, HeroId);
      }
      if (hasSkinId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, SkinId);
      }
      if (hasModelId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, ModelId);
      }
      if (hasHeroPowerType) {
        size += pb::CodedOutputStream.ComputeEnumSize(4, (int) HeroPowerType);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public HeroSyncData CommitChange() {
      HeroSyncData other = new HeroSyncData();
      bool isChange = false;
      if (isHeroIdChanged) {
        isChange = true;
        other.HeroId = HeroId;
        isHeroIdChanged = false;
      }
      if (isSkinIdChanged) {
        isChange = true;
        other.SkinId = SkinId;
        isSkinIdChanged = false;
      }
      if (isModelIdChanged) {
        isChange = true;
        other.ModelId = ModelId;
        isModelIdChanged = false;
      }
      if (isHeroPowerTypeChanged) {
        isChange = true;
        other.HeroPowerType = HeroPowerType;
        isHeroPowerTypeChanged = false;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(HeroSyncData other, bool isFull = false) {
      if (other == global::Protocol.HeroSyncData.DefaultInstance) return;
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      if (other.HasSkinId) {
        SkinId = other.SkinId;
      }
      if (other.HasModelId) {
        ModelId = other.ModelId;
      }
      if (other.HasHeroPowerType) {
        HeroPowerType = other.HeroPowerType;
      }
    }
    
    public static HeroSyncData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroSyncData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroSyncData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroSyncData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroSyncData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroSyncData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeroSyncData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeroSyncData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeroSyncData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroSyncData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HeroSyncData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeroSyncData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<HeroSyncData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HeroSyncData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HeroSyncData result;
      
      private HeroSyncData PrepareBuilder() {
        if (resultIsReadOnly) {
          HeroSyncData original = result;
          result = new HeroSyncData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HeroSyncData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.HeroSyncData.Descriptor; }
      }
      
      public override HeroSyncData DefaultInstanceForType {
        get { return global::Protocol.HeroSyncData.DefaultInstance; }
      }
      
      public override HeroSyncData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeroSyncData) {
          return MergeFrom((HeroSyncData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeroSyncData other) {
        if (other == global::Protocol.HeroSyncData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeroId) {
          HeroId = other.HeroId;
        }
        if (other.HasSkinId) {
          SkinId = other.SkinId;
        }
        if (other.HasModelId) {
          ModelId = other.ModelId;
        }
        if (other.HasHeroPowerType) {
          HeroPowerType = other.HeroPowerType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_heroSyncDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _heroSyncDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHeroId = input.ReadUInt32(ref result.heroId_);
              break;
            }
            case 16: {
              result.hasSkinId = input.ReadUInt32(ref result.skinId_);
              break;
            }
            case 24: {
              result.hasModelId = input.ReadUInt32(ref result.modelId_);
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.heroPowerType_, out unknown)) {
                result.hasHeroPowerType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeroId {
        get { return result.hasHeroId; }
      }
      [global::System.CLSCompliant(false)]
      public uint HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHeroId(uint value) {
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = 0;
        return this;
      }
      
      public bool HasSkinId {
        get { return result.hasSkinId; }
      }
      [global::System.CLSCompliant(false)]
      public uint SkinId {
        get { return result.SkinId; }
        set { SetSkinId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSkinId(uint value) {
        PrepareBuilder();
        result.hasSkinId = true;
        result.skinId_ = value;
        return this;
      }
      public Builder ClearSkinId() {
        PrepareBuilder();
        result.hasSkinId = false;
        result.skinId_ = 0;
        return this;
      }
      
      public bool HasModelId {
        get { return result.hasModelId; }
      }
      [global::System.CLSCompliant(false)]
      public uint ModelId {
        get { return result.ModelId; }
        set { SetModelId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetModelId(uint value) {
        PrepareBuilder();
        result.hasModelId = true;
        result.modelId_ = value;
        return this;
      }
      public Builder ClearModelId() {
        PrepareBuilder();
        result.hasModelId = false;
        result.modelId_ = 0;
        return this;
      }
      
      public bool HasHeroPowerType {
       get { return result.hasHeroPowerType; }
      }
      public global::Protocol.HeroPowerType HeroPowerType {
        get { return result.HeroPowerType; }
        set { SetHeroPowerType(value); }
      }
      public Builder SetHeroPowerType(global::Protocol.HeroPowerType value) {
        PrepareBuilder();
        result.hasHeroPowerType = true;
        result.heroPowerType_ = value;
        return this;
      }
      public Builder ClearHeroPowerType() {
        PrepareBuilder();
        result.hasHeroPowerType = false;
        result.heroPowerType_ = global::Protocol.HeroPowerType.NoWeapon;
        return this;
      }
    }
    static HeroSyncData() {
      object.ReferenceEquals(global::Protocol.ProtoBattle.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GMCommandReq : pb::GeneratedMessage<GMCommandReq, GMCommandReq.Builder> {
    public GMCommandReq() { }
    private static readonly GMCommandReq defaultInstance = new GMCommandReq().MakeReadOnly();
    private static readonly string[] _gMCommandReqFieldNames = new string[] { "commands" };
    private static readonly uint[] _gMCommandReqFieldTags = new uint[] { 10 };
    public static GMCommandReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GMCommandReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GMCommandReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_GMCommandReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GMCommandReq, GMCommandReq.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoBattle.internal__static_Protocol_GMCommandReq__FieldAccessorTable; }
    }
    
    public const int CommandsFieldNumber = 1;
    private pbc::PopsicleList<string> commands_ = new pbc::PopsicleList<string>();
    private bool isCommandsChanged = true;
    public scg::IList<string> Commands {
      get { return pbc::Lists.AsReadOnly(commands_); }
    }
    public int CommandsCount {
      get { return commands_.Count; }
    }
    public string GetCommands(int index) {
      return commands_[index];
    }
    public void SetCommands(int index, string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (index < 0 || index >= commands_.Count) return;
      commands_[index] = value;
      isCommandsChanged = true;
    }
    public void AddCommands(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      commands_.Add(value);
      isCommandsChanged = true;
    }
    public void AddRangeCommands(scg::IEnumerable<string> values) {
      commands_.Add(values);
      isCommandsChanged = true;
    }
    public void RemoveCommands(string value) {
      if (!commands_.Contains(value)) return;
      commands_.Remove(value);
      isCommandsChanged = true;
    }
    public void RemoveAtCommands(int index) {
      if (index < 0 || index >= commands_.Count) return;
      commands_.RemoveAt(index);
      isCommandsChanged = true;
    }
    public void ClearCommands() {
      if (commands_.Count <= 0) return;
      commands_.Clear();
      isCommandsChanged = true;
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _gMCommandReqFieldNames;
      if (commands_.Count > 0) {
        output.WriteStringArray(1, field_names[0], commands_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      {
        int dataSize = 0;
        foreach (string element in Commands) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * commands_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public GMCommandReq CommitChange() {
      GMCommandReq other = new GMCommandReq();
      bool isChange = false;
        isChange = true;
        other.commands_.Add(commands_);
      return isChange?other:null;
    }
    
    public void MergeFrom(GMCommandReq other, bool isFull = false) {
      if (other == global::Protocol.GMCommandReq.DefaultInstance) return;
      if (other.commands_.Count != 0) {
        commands_.Clear();
        commands_.Add(other.commands_);
      }
    }
    
    public static GMCommandReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GMCommandReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GMCommandReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GMCommandReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GMCommandReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GMCommandReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GMCommandReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GMCommandReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GMCommandReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GMCommandReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GMCommandReq MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GMCommandReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GMCommandReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GMCommandReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GMCommandReq result;
      
      private GMCommandReq PrepareBuilder() {
        if (resultIsReadOnly) {
          GMCommandReq original = result;
          result = new GMCommandReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GMCommandReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.GMCommandReq.Descriptor; }
      }
      
      public override GMCommandReq DefaultInstanceForType {
        get { return global::Protocol.GMCommandReq.DefaultInstance; }
      }
      
      public override GMCommandReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GMCommandReq) {
          return MergeFrom((GMCommandReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GMCommandReq other) {
        if (other == global::Protocol.GMCommandReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.commands_.Count != 0) {
          result.commands_.Add(other.commands_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gMCommandReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gMCommandReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadStringArray(tag, field_name, result.commands_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<string> Commands {
        get { return PrepareBuilder().commands_; }
      }
      public int CommandsCount {
        get { return result.CommandsCount; }
      }
      public string GetCommands(int index) {
        return result.GetCommands(index);
      }
      public Builder SetCommands(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.commands_[index] = value;
        return this;
      }
      public Builder AddCommands(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.commands_.Add(value);
        return this;
      }
      public Builder AddRangeCommands(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.commands_.Add(values);
        return this;
      }
      public Builder ClearCommands() {
        PrepareBuilder();
        result.commands_.Clear();
        return this;
      }
    }
    static GMCommandReq() {
      object.ReferenceEquals(global::Protocol.ProtoBattle.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
