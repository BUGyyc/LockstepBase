// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto_battle.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protocol {

  /// <summary>Holder for reflection information generated from proto_battle.proto</summary>
  public static partial class ProtoBattleReflection {

    #region Descriptor
    /// <summary>File descriptor for proto_battle.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtoBattleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJwcm90b19iYXR0bGUucHJvdG8SCFByb3RvY29sGhJwcm90b19jb21tb24u",
            "cHJvdG8aEnByb3RvX2NvbmZpZy5wcm90byJjCgdQYkdDTXNnEhIKBXVfdmFs",
            "GAEgASgNSACIAQESEgoFaV92YWwYAiABKAVIAYgBARISCgVmX3ZhbBgDIAEo",
            "AkgCiAEBQggKBl91X3ZhbEIICgZfaV92YWxCCAoGX2ZfdmFsIl8KA0FCQxIS",
            "CgV1X3ZhbBgBIAEoDUgAiAEBEhIKBWlfdmFsGAIgASgFSAGIAQESEgoFZl92",
            "YWwYAyABKAJIAogBAUIICgZfdV92YWxCCAoGX2lfdmFsQggKBl9mX3ZhbCLy",
            "AQoSQ3JlYXRlRW50aXR5Tm90aWZ5EkgKD2VudGl0eV9kYXRhX2RpYxgBIAMo",
            "CzIvLlByb3RvY29sLkNyZWF0ZUVudGl0eU5vdGlmeS5FbnRpdHlEYXRhRGlj",
            "RW50cnkSMgoLYmF0dGxlX2RhdGEYAiABKAsyGC5Qcm90b2NvbC5CYXR0bGVT",
            "eW5jRGF0YUgAiAEBGk4KEkVudGl0eURhdGFEaWNFbnRyeRILCgNrZXkYASAB",
            "KA0SJwoFdmFsdWUYAiABKAsyGC5Qcm90b2NvbC5FbnRpdHlTeW5jRGF0YToC",
            "OAFCDgoMX2JhdHRsZV9kYXRhIq4BChJEZWxldGVFbnRpdHlOb3RpZnkSSAoP",
            "ZW50aXR5X2RhdGFfZGljGAEgAygLMi8uUHJvdG9jb2wuRGVsZXRlRW50aXR5",
            "Tm90aWZ5LkVudGl0eURhdGFEaWNFbnRyeRpOChJFbnRpdHlEYXRhRGljRW50",
            "cnkSCwoDa2V5GAEgASgNEicKBXZhbHVlGAIgASgLMhguUHJvdG9jb2wuRW50",
            "aXR5U3luY0RhdGE6AjgBIssCCg1BY3Rpb25Nb3ZlTXNnEhYKCWVudGl0eV9p",
            "ZBgBIAEoDUgAiAEBEhcKCm1vdmVfc3RhdGUYAiABKA1IAYgBARIXCgptb3Zl",
            "X2FuZ2xlGAMgASgFSAKIAQESFQoIdmlld19yb3cYBCABKAVIA4gBARIXCgp2",
            "aWV3X3BpdGNoGAUgASgFSASIAQESGAoLaWdub3JlX2xvY2sYBiABKAhIBYgB",
            "ARITCgZtb3Rpb24YByABKA1IBogBARIbCg5sb2NrX3RhcmdldF9pZBgIIAEo",
            "DUgHiAEBQgwKCl9lbnRpdHlfaWRCDQoLX21vdmVfc3RhdGVCDQoLX21vdmVf",
            "YW5nbGVCCwoJX3ZpZXdfcm93Qg0KC192aWV3X3BpdGNoQg4KDF9pZ25vcmVf",
            "bG9ja0IJCgdfbW90aW9uQhEKD19sb2NrX3RhcmdldF9pZCJ3ChRBY3Rpb25T",
            "a2lsbFJlc3VsdE1zZxIWCgllbnRpdHlfaWQYASABKA1IAIgBARIWCglza2ls",
            "bF91aWQYAiABKARIAYgBARITCgtlbnRpdHlfbGlzdBgDIAMoDUIMCgpfZW50",
            "aXR5X2lkQgwKCl9za2lsbF91aWQisAQKFUFjdGlvbkV4ZWN1dGVTa2lsbE1z",
            "ZxIWCgllbnRpdHlfaWQYASABKA1IAIgBARIVCghza2lsbF9pZBgCIAEoDUgB",
            "iAEBEhYKCXNraWxsX3VpZBgDIAEoBEgCiAEBEigKCXNraWxsX3BvcxgEIAEo",
            "CzIQLlByb3RvY29sLkZsb2F0M0gDiAEBEhgKC3NraWxsX3JhbmdlGAUgASgC",
            "SASIAQESHwoScmVsZWFzZV9za2lsbF90eXBlGAYgASgNSAWIAQESGgoNbG9u",
            "Z19rZXlfdGltZRgHIAEoAkgGiAEBEh0KFXRhcmdldF9lbnRpdHlfaWRfbGlz",
            "dBgIIAMoDRItCg5za2lsbF9yb3RhdGlvbhgJIAEoCzIQLlByb3RvY29sLkZs",
            "b2F0M0gHiAEBEhoKDXRpbWVsaW5lX3BhdGgYCiABKAlICIgBARIWCglrZXlf",
            "ZXZlbnQYCyABKAlICYgBARIZCgxmcm9tX3Byb3BfaWQYDCABKA1ICogBAUIM",
            "CgpfZW50aXR5X2lkQgsKCV9za2lsbF9pZEIMCgpfc2tpbGxfdWlkQgwKCl9z",
            "a2lsbF9wb3NCDgoMX3NraWxsX3JhbmdlQhUKE19yZWxlYXNlX3NraWxsX3R5",
            "cGVCEAoOX2xvbmdfa2V5X3RpbWVCEQoPX3NraWxsX3JvdGF0aW9uQhAKDl90",
            "aW1lbGluZV9wYXRoQgwKCl9rZXlfZXZlbnRCDwoNX2Zyb21fcHJvcF9pZCJe",
            "ChJBY3Rpb25TdG9wU2tpbGxNc2cSFgoJZW50aXR5X2lkGAEgASgNSACIAQES",
            "FQoIc2tpbGxfaWQYAiABKA1IAYgBAUIMCgpfZW50aXR5X2lkQgsKCV9za2ls",
            "bF9pZCJdChFBY3Rpb25BZGRTa2lsbFJlcRIWCgllbnRpdHlfaWQYASABKA1I",
            "AIgBARIVCghza2lsbF9pZBgCIAEoDUgBiAEBQgwKCl9lbnRpdHlfaWRCCwoJ",
            "X3NraWxsX2lkIjcKEUFjdGlvbkFkZFNraWxsUnNwEhUKCHJldF9jb2RlGAEg",
            "ASgFSACIAQFCCwoJX3JldF9jb2RlImAKFEFjdGlvbkRlbGV0ZVNraWxsUmVx",
            "EhYKCWVudGl0eV9pZBgBIAEoDUgAiAEBEhUKCHNraWxsX2lkGAIgASgNSAGI",
            "AQFCDAoKX2VudGl0eV9pZEILCglfc2tpbGxfaWQiOgoUQWN0aW9uRGVsZXRl",
            "U2tpbGxSc3ASFQoIcmV0X2NvZGUYASABKAVIAIgBAUILCglfcmV0X2NvZGUi",
            "dwoNRW50aXR5RGVhZE50ZhIWCgllbnRpdHlfaWQYASABKA1IAIgBARIRCgRk",
            "ZWFkGAIgASgISAGIAQESFgoJdGFyZ2V0X2lkGAMgASgNSAKIAQFCDAoKX2Vu",
            "dGl0eV9pZEIHCgVfZGVhZEIMCgpfdGFyZ2V0X2lkIj4KEkNoYW5nZVRpbWVT",
            "Y2FsZU50ZhIYCgtzY2FsZV92YWx1ZRgBIAEoAkgAiAEBQg4KDF9zY2FsZV92",
            "YWx1ZSLGAQoMUGlja1RoaW5nTXNnEhUKCHRoaW5nX2lkGAEgASgNSACIAQES",
            "EgoFdG9faWQYAiABKA1IAYgBARIXCgp0b19zbG90X2lkGAMgASgNSAKIAQES",
            "EQoEdGltZRgEIAEoAkgDiAEBEjAKFHByb3BfZGF0YV9tZXJnZV9saXN0GAog",
            "AygLMhIuUHJvdG9jb2wuUHJvcERhdGFCCwoJX3RoaW5nX2lkQggKBl90b19p",
            "ZEINCgtfdG9fc2xvdF9pZEIHCgVfdGltZSJQCg5EZXN0b3J5TmVzdE1zZxIT",
            "CgZib3NzSWQYASABKA1IAIgBARITCgZuZXN0SWQYAiABKA1IAYgBAUIJCgdf",
            "Ym9zc0lkQgkKB19uZXN0SWQijgIKDlNlbGxQcm9kdWN0TXNnEhoKDW5wY19l",
            "bnRpdHlfaWQYASABKA1IAIgBARIbCg5zZWxsX2VudGl0eV9pZBgCIAEoDUgB",
            "iAEBEhkKDHNpbmdsZV9wcmljZRgDIAEoBUgCiAEBEhgKC3Byb3BfY2ZnX2lk",
            "GAQgASgNSAOIAQESFwoKcHJvcF9jb3VudBgFIAEoDUgEiAEBEhQKB3Nsb3Rf",
            "aWQYBiABKA1IBYgBAUIQCg5fbnBjX2VudGl0eV9pZEIRCg9fc2VsbF9lbnRp",
            "dHlfaWRCDwoNX3NpbmdsZV9wcmljZUIOCgxfcHJvcF9jZmdfaWRCDQoLX3By",
            "b3BfY291bnRCCgoIX3Nsb3RfaWQitQEKDUJ1eVByb2R1Y3RNc2cSGgoNbnBj",
            "X2VudGl0eV9pZBgBIAEoDUgAiAEBEhsKDnJlY3ZfZW50aXR5X2lkGAIgASgN",
            "SAGIAQESEgoFaW5kZXgYAyABKAVIAogBARIYCgtwcm9wX2NmZ19pZBgEIAEo",
            "DUgDiAEBQhAKDl9ucGNfZW50aXR5X2lkQhEKD19yZWN2X2VudGl0eV9pZEII",
            "CgZfaW5kZXhCDgoMX3Byb3BfY2ZnX2lkInoKDFVzZUxhZGRlck1zZxIWCgls",
            "YWRkZXJfaWQYASABKA1IAIgBARIUCgd1c2VyX2lkGAIgASgNSAGIAQESFQoI",
            "aXNfZW50ZXIYAyABKAhIAogBAUIMCgpfbGFkZGVyX2lkQgoKCF91c2VyX2lk",
            "QgsKCV9pc19lbnRlciJTCgtVc2VQb2ludE1zZxIUCgd1c2VyX2lkGAEgASgN",
            "SACIAQESFQoIcG9pbnRfaWQYAiABKA1IAYgBAUIKCghfdXNlcl9pZEILCglf",
            "cG9pbnRfaWQikQIKC0Ryb3BQcm9wUmVxEhUKCHRoaW5nX2lkGAEgASgESACI",
            "AQESFAoHc2xvdF9pZBgCIAEoDUgBiAEBEioKDnByb3BfZGF0YV9saXN0GAMg",
            "AygLMhIuUHJvdG9jb2wuUHJvcERhdGESJwoIcG9zaXRpb24YBCABKAsyEC5Q",
            "cm90b2NvbC5GbG9hdDNIAogBARInCghyb3RhdGlvbhgFIAEoCzIQLlByb3Rv",
            "Y29sLkZsb2F0M0gDiAEBEhYKCWVudGl0eV9pZBgGIAEoDUgEiAEBQgsKCV90",
            "aGluZ19pZEIKCghfc2xvdF9pZEILCglfcG9zaXRpb25CCwoJX3JvdGF0aW9u",
            "QgwKCl9lbnRpdHlfaWQikQIKC0Ryb3BQcm9wUnNwEhUKCHRoaW5nX2lkGAEg",
            "ASgESACIAQESFAoHc2xvdF9pZBgCIAEoDUgBiAEBEioKDnByb3BfZGF0YV9s",
            "aXN0GAMgAygLMhIuUHJvdG9jb2wuUHJvcERhdGESJwoIcG9zaXRpb24YBCAB",
            "KAsyEC5Qcm90b2NvbC5GbG9hdDNIAogBARInCghyb3RhdGlvbhgFIAEoCzIQ",
            "LlByb3RvY29sLkZsb2F0M0gDiAEBEhYKCWVudGl0eV9pZBgGIAEoDUgEiAEB",
            "QgsKCV90aGluZ19pZEIKCghfc2xvdF9pZEILCglfcG9zaXRpb25CCwoJX3Jv",
            "dGF0aW9uQgwKCl9lbnRpdHlfaWQihwEKC1N3YXBTbG90TXNnEhYKCWVudGl0",
            "eV9pZBgBIAEoDUgAiAEBEhkKDHNsb3RfaWRfZnJvbRgCIAEoDUgBiAEBEhcK",
            "CnNsb3RfaWRfdG8YAyABKA1IAogBAUIMCgpfZW50aXR5X2lkQg8KDV9zbG90",
            "X2lkX2Zyb21CDQoLX3Nsb3RfaWRfdG8iOQoRQnJlYWtBZGRUb1Nsb3RNc2cS",
            "FgoJZW50aXR5X2lkGAEgASgNSACIAQFCDAoKX2VudGl0eV9pZCJyCgpVc2VQ",
            "cm9wTXNnEhYKCWVudGl0eV9pZBgBIAEoDUgAiAEBEhQKB3Nsb3RfaWQYAiAB",
            "KA1IAYgBARISCgVjb3VudBgDIAEoDUgCiAEBQgwKCl9lbnRpdHlfaWRCCgoI",
            "X3Nsb3RfaWRCCAoGX2NvdW50IpgBCg1BY3RpdmVUYXNrTXNnEhYKCWVudGl0",
            "eV9pZBgBIAEoDUgAiAEBEhQKB3Rhc2tfaWQYAiABKA1IAYgBARI/Chx0YXNr",
            "X2RldGFpbF9wYXJhbV9tZXJnZV9saXN0GAMgAygLMhkuUHJvdG9jb2wuVGFz",
            "a0RldGFpbFBhcmFtQgwKCl9lbnRpdHlfaWRCCgoIX3Rhc2tfaWQihAEKDFRo",
            "cm93QmFsbE1zZxIWCgllbnRpdHlfaWQYASABKA1IAIgBARITCgZmc21faWQY",
            "AiABKARIAYgBARIbCg5iYWxsX2VudGl0eV9pZBgDIAEoDUgCiAEBQgwKCl9l",
            "bnRpdHlfaWRCCQoHX2ZzbV9pZEIRCg9fYmFsbF9lbnRpdHlfaWQigQEKD1Rh",
            "c2tDb21wbGV0ZU1zZxIWCgllbnRpdHlfaWQYASABKA1IAIgBARIUCgd0YXNr",
            "X2lkGAIgASgNSAGIAQESFwoKdGFza19zdGF0ZRgDIAEoDUgCiAEBQgwKCl9l",
            "bnRpdHlfaWRCCgoIX3Rhc2tfaWRCDQoLX3Rhc2tfc3RhdGUiNQoNU2hvd0V4",
            "cG9zZU1zZxIWCgllbnRpdHlfaWQYASABKA1IAIgBAUIMCgpfZW50aXR5X2lk",
            "ImcKD1RyYW5zZmVyTmVzdE1zZxIWCgllbnRpdHlfaWQYASABKA1IAIgBARIb",
            "Cg5uZXN0X2VudGl0eV9pZBgCIAEoDUgBiAEBQgwKCl9lbnRpdHlfaWRCEQoP",
            "X25lc3RfZW50aXR5X2lkIj0KFVVwZGF0ZUNoYXJhY3RlckRpck1zZxIWCgll",
            "bnRpdHlfaWQYASABKA1IAIgBAUIMCgpfZW50aXR5X2lkIkcKEUNyZWF0ZUlu",
            "c2FuaXR5TXNnEh0KEG1hc3Rlcl9lbnRpdHlfaWQYASABKA1IAIgBAUITChFf",
            "bWFzdGVyX2VudGl0eV9pZCJeCg5DbHVlQ29sbGVjdE1zZxIWCgllbnRpdHlf",
            "aWQYASABKA1IAIgBARIXCgpjbHVlX2NvdW50GAIgASgNSAGIAQFCDAoKX2Vu",
            "dGl0eV9pZEINCgtfY2x1ZV9jb3VudCKFAQoXUGxheWVyR2V0Q2x1ZUFuZEV4",
            "aXRNc2cSFgoJZW50aXR5X2lkGAEgASgNSACIAQESFwoKY2x1ZV9jb3VudBgC",
            "IAEoDUgBiAEBEhIKBXN0YXRlGAMgASgNSAKIAQFCDAoKX2VudGl0eV9pZEIN",
            "CgtfY2x1ZV9jb3VudEIICgZfc3RhdGUiygEKDUhpdFN1Y2Nlc3NNc2cSHQoQ",
            "b3JpZ2luX2VudGl0eV9pZBgBIAEoDUgAiAEBEksKE2F0dGFja2VkX2VudGl0",
            "eV9kaWMYAiADKAsyLi5Qcm90b2NvbC5IaXRTdWNjZXNzTXNnLkF0dGFja2Vk",
            "RW50aXR5RGljRW50cnkaOAoWQXR0YWNrZWRFbnRpdHlEaWNFbnRyeRILCgNr",
            "ZXkYASABKA0SDQoFdmFsdWUYAiABKA06AjgBQhMKEV9vcmlnaW5fZW50aXR5",
            "X2lkIq0CCg1HYW1lUmVzdWx0TXNnEhAKA3VpZBgBIAEoCUgAiAEBEhYKCXBs",
            "YXllcl9pZBgCIAEoDUgBiAEBEhkKDHJlc3VsdF9zdGF0ZRgDIAEoDUgCiAEB",
            "EioKDnByb3BfZGF0YV9saXN0GAQgAygLMhIuUHJvdG9jb2wuUHJvcERhdGES",
            "NAoRdmlydHVhbF9wcm9wX2xpc3QYBSADKAsyGS5Qcm90b2NvbC5WaXJ0dWFs",
            "UHJvcERhdGESFwoKY2x1ZV9jb3VudBgGIAEoDUgDiAEBEhcKCmtpbGxfY291",
            "bnQYByABKA1IBIgBAUIGCgRfdWlkQgwKCl9wbGF5ZXJfaWRCDwoNX3Jlc3Vs",
            "dF9zdGF0ZUINCgtfY2x1ZV9jb3VudEINCgtfa2lsbF9jb3VudCJ8ChBUcmFu",
            "c2Zvcm1TeW5jTXNnEhAKA2VJRBgBIAEoDUgAiAEBEiQKB3Bvc3Rpb24YAiAB",
            "KAsyDi5Qcm90b2NvbC5JbnQzSAGIAQESEgoFYW5nbGUYAyABKA1IAogBAUIG",
            "CgRfZUlEQgoKCF9wb3N0aW9uQggKBl9hbmdsZSJkChRBY3Rpb25Cb25maXJl",
            "QWRkV29vZBIWCglvcmlnaW5faWQYASABKA1IAIgBARIXCgpib25maXJlX2lk",
            "GAIgASgNSAGIAQFCDAoKX29yaWdpbl9pZEINCgtfYm9uZmlyZV9pZCJjChNB",
            "Y3Rpb25Cb25maXJlSWduaXRlEhYKCW9yaWdpbl9pZBgBIAEoDUgAiAEBEhcK",
            "CmJvbmZpcmVfaWQYAiABKA1IAYgBAUIMCgpfb3JpZ2luX2lkQg0KC19ib25m",
            "aXJlX2lkIlsKFUJvbmZpcmVCdXJuUmV3YXJkUHJvcBIYCgtwcm9wX2NmZ19p",
            "ZBgBIAEoDUgAiAEBEhAKA251bRgCIAEoDUgBiAEBQg4KDF9wcm9wX2NmZ19p",
            "ZEIGCgRfbnVtImcKFUFjdGlvbkFudGlkb3RlU2NhdHRlchIWCglvcmlnaW5f",
            "aWQYASABKA1IAIgBARIYCgthbnRpZG90ZV9pZBgCIAEoDUgBiAEBQgwKCl9v",
            "cmlnaW5faWRCDgoMX2FudGlkb3RlX2lkIpYBChRBY3Rpb25QdXBwZXRVbnBp",
            "bm5lZBIWCgllbnRpdHlfaWQYASABKA1IAIgBARIWCglzdWJfc3RhdGUYAiAB",
            "KA1IAYgBARIlCghwb3NpdGlvbhgDIAEoCzIOLlByb3RvY29sLkludDNIAogB",
            "AUIMCgpfZW50aXR5X2lkQgwKCl9zdWJfc3RhdGVCCwoJX3Bvc2l0aW9uIpkB",
            "ChdBY3Rpb25QdXBwZXRVbnBpbm5lZE50ZhIWCgllbnRpdHlfaWQYASABKA1I",
            "AIgBARIWCglzdWJfc3RhdGUYAiABKA1IAYgBARIlCghwb3NpdGlvbhgDIAEo",
            "CzIOLlByb3RvY29sLkludDNIAogBAUIMCgpfZW50aXR5X2lkQgwKCl9zdWJf",
            "c3RhdGVCCwoJX3Bvc2l0aW9uInUKF0NoYW5nZUVudGl0eVBvc2l0aW9uTXNn",
            "EhYKCWVudGl0eV9pZBgBIAEoDUgAiAEBEicKCHBvc2l0aW9uGAIgASgLMhAu",
            "UHJvdG9jb2wuRmxvYXQzSAGIAQFCDAoKX2VudGl0eV9pZEILCglfcG9zaXRp",
            "b24imgIKEFRpbWVsaW5lSW5wdXRNc2cSFgoJZW50aXR5X2lkGAEgASgNSACI",
            "AQESFgoJanVtcF90aW1lGAIgASgCSAGIAQESGgoNdGltZWxpbmVfbmFtZRgD",
            "IAEoCUgCiAEBEigKCXNraWxsX3BvcxgEIAEoCzIQLlByb3RvY29sLkZsb2F0",
            "M0gDiAEBEi0KDnNraWxsX3JvdGF0aW9uGAUgASgLMhAuUHJvdG9jb2wuRmxv",
            "YXQzSASIAQESEgoKdGFyZ2V0X2lkcxgGIAMoDUIMCgpfZW50aXR5X2lkQgwK",
            "Cl9qdW1wX3RpbWVCEAoOX3RpbWVsaW5lX25hbWVCDAoKX3NraWxsX3Bvc0IR",
            "Cg9fc2tpbGxfcm90YXRpb24iYgoORml4U3RlcENvc3RNc2cSFAoHY29zdF9N",
            "UBgBIAEoAkgAiAEBEhsKDmNvc3RfZW50aXR5X2lkGAIgASgNSAGIAQFCCgoI",
            "X2Nvc3RfTVBCEQoPX2Nvc3RfZW50aXR5X2lkInoKFEVudGl0eVN0YXRlQ2hh",
            "bmdlTXNnEhYKCWVudGl0eV9pZBgBIAEoDUgAiAEBEhIKBXN0YXRlGAIgASgN",
            "SAGIAQESEwoGZHVyaW5nGAMgASgCSAKIAQFCDAoKX2VudGl0eV9pZEIICgZf",
            "c3RhdGVCCQoHX2R1cmluZyKHAQoLSW5wdXRLZXlNc2cSFgoJZW50aXR5X2lk",
            "GAEgASgNSACIAQESEAoDZXZ0GAIgASgJSAGIAQESEQoEdGltZRgDIAEoAkgC",
            "iAEBEhIKBWlzX2FpGAQgASgISAOIAQFCDAoKX2VudGl0eV9pZEIGCgRfZXZ0",
            "QgcKBV90aW1lQggKBl9pc19haSJjChdTaG93U2tpbGxJbnRlcmFjdGlvbk1z",
            "ZxIWCgllbnRpdHlfaWQYASABKA1IAIgBARIVCghza2lsbF9pZBgCIAEoDUgB",
            "iAEBQgwKCl9lbnRpdHlfaWRCCwoJX3NraWxsX2lkIlwKDEVycm9yVGlwc01z",
            "ZxIWCgllbnRpdHlfaWQYASABKA1IAIgBARIXCgplcnJvcl90aXBzGAIgASgJ",
            "SAGIAQFCDAoKX2VudGl0eV9pZEINCgtfZXJyb3JfdGlwcyJuCgxDaGFuZ2VU",
            "YWdNc2cSFgoJZW50aXR5X2lkGAEgASgNSACIAQESEwoGdGFnX2lkGAIgASgN",
            "SAGIAQESEAoDdmFsGAMgASgNSAKIAQFCDAoKX2VudGl0eV9pZEIJCgdfdGFn",
            "X2lkQgYKBF92YWwingEKDENoYW5nZUFuaU1zZxIWCgllbnRpdHlfaWQYASAB",
            "KA1IAIgBARIUCgdhbmltX2lkGAIgASgNSAGIAQESFAoHaXNfbG9vcBgDIAEo",
            "CEgCiAEBEhYKCWlzX3JldHVybhgEIAEoCEgDiAEBQgwKCl9lbnRpdHlfaWRC",
            "CgoIX2FuaW1faWRCCgoIX2lzX2xvb3BCDAoKX2lzX3JldHVybiK1AgoNUGxh",
            "eUVmZmVjdE1zZxIYCgtlZmZlY3RfbmFtZRgBIAEoCUgAiAEBEiQKBXBvaW50",
            "GAIgASgLMhAuUHJvdG9jb2wuRmxvYXQzSAGIAQESJgoHZm9yd2FyZBgDIAEo",
            "CzIQLlByb3RvY29sLkZsb2F0M0gCiAEBEhEKBHRpbWUYBCABKAJIA4gBARIW",
            "CgllbnRpdHlfaWQYBSABKA1IBIgBARIWCgliaW5kX3R5cGUYBiABKA1IBYgB",
            "ARIbCg5iaW5kX3Jvb3RfdHlwZRgHIAEoDUgGiAEBQg4KDF9lZmZlY3RfbmFt",
            "ZUIICgZfcG9pbnRCCgoIX2ZvcndhcmRCBwoFX3RpbWVCDAoKX2VudGl0eV9p",
            "ZEIMCgpfYmluZF90eXBlQhEKD19iaW5kX3Jvb3RfdHlwZSJDChFBY3Rpb25N",
            "b3ZlTGlzdE1zZxIuCg1tb3ZlX21zZ19saXN0GAEgAygLMhcuUHJvdG9jb2wu",
            "QWN0aW9uTW92ZU1zZyJACg9JbnB1dEtleUxpc3RNc2cSLQoOaW5wdXRfa2V5",
            "X2xpc3QYASADKAsyFS5Qcm90b2NvbC5JbnB1dEtleU1zZyKsAQoSTG9hZEdh",
            "bWVCeVN0YXRlTXNnEhwKD3N0YXRlX2ZpbGVfbmFtZRgBIAEoCUgAiAEBEhgK",
            "C2ZyYW1lX2luZGV4GAIgASgNSAGIAQESKwoKc3RhdGVfZGF0YRgDIAEoCzIS",
            "LlByb3RvY29sLlN0YXRlTXNnSAKIAQFCEgoQX3N0YXRlX2ZpbGVfbmFtZUIO",
            "CgxfZnJhbWVfaW5kZXhCDQoLX3N0YXRlX2RhdGEipQEKBVZBTXNnEioKBnZh",
            "X2RpYxgBIAMoCzIaLlByb3RvY29sLlZBTXNnLlZhRGljRW50cnkSHAoPaXNf",
            "Y2xpZW50X2RlYnVnGAIgASgISACIAQEaPgoKVmFEaWNFbnRyeRILCgNrZXkY",
            "ASABKA0SHwoFdmFsdWUYAiABKAsyEC5Qcm90b2NvbC5WQUl0ZW06AjgBQhIK",
            "EF9pc19jbGllbnRfZGVidWciRwoGVkFJdGVtEhYKCWVudGl0eV9pZBgBIAEo",
            "DUgAiAEBEhcKD2FjdGl2ZV9rZXlfbGlzdBgCIAMoDUIMCgpfZW50aXR5X2lk",
            "IlYKFkFJUm90YXRlVGh1bmRlclNob3RNc2cSPAoRdGh1bmRlcl9zaG90X2xp",
            "c3QYASADKAsyIS5Qcm90b2NvbC5BSVJvdGF0ZVRodW5kZXJTaG90SXRlbSJh",
            "ChdBSVJvdGF0ZVRodW5kZXJTaG90SXRlbRIWCgllbnRpdHlfaWQYASABKA1I",
            "AIgBARIUCgdhbmdsZV95GAIgASgCSAGIAQFCDAoKX2VudGl0eV9pZEIKCghf",
            "YW5nbGVfeSJXChdBSVJvdGF0ZVB1dFdhbGxBbmdsZU1zZxI8ChByb3RhdGVf",
            "d2FsbF9saXN0GAEgAygLMiIuUHJvdG9jb2wuQUlSb3RhdGVQdXRXYWxsQW5n",
            "bGVJdGVtImIKGEFJUm90YXRlUHV0V2FsbEFuZ2xlSXRlbRIWCgllbnRpdHlf",
            "aWQYASABKA1IAIgBARIUCgdhbmdsZV95GAIgASgNSAGIAQFCDAoKX2VudGl0",
            "eV9pZEIKCghfYW5nbGVfeSJHCg9BSVJvdGF0ZVNob3RNc2cSNAoQcm90YXRl",
            "X3Nob3RfbGlzdBgBIAMoCzIaLlByb3RvY29sLkFJUm90YXRlU2hvdEl0ZW0i",
            "fAoQQUlSb3RhdGVTaG90SXRlbRIWCgllbnRpdHlfaWQYASABKA1IAIgBARIU",
            "CgdhbmdsZV94GAIgASgCSAGIAQESFAoHYW5nbGVfeRgDIAEoAkgCiAEBQgwK",
            "Cl9lbnRpdHlfaWRCCgoIX2FuZ2xlX3hCCgoIX2FuZ2xlX3kipQEKEkxvY2Fs",
            "Q2FjaGVTdGF0ZU1zZxJGCg5zdGF0ZV9kYXRhX2RpYxgBIAMoCzIuLlByb3Rv",
            "Y29sLkxvY2FsQ2FjaGVTdGF0ZU1zZy5TdGF0ZURhdGFEaWNFbnRyeRpHChFT",
            "dGF0ZURhdGFEaWNFbnRyeRILCgNrZXkYASABKA0SIQoFdmFsdWUYAiABKAsy",
            "Ei5Qcm90b2NvbC5TdGF0ZU1zZzoCOAEingMKCFN0YXRlTXNnEhgKC3NlcnZl",
            "cl90aW1lGAEgASgCSACIAQESPgoPZW50aXR5X2RhdGFfZGljGAIgAygLMiUu",
            "UHJvdG9jb2wuU3RhdGVNc2cuRW50aXR5RGF0YURpY0VudHJ5EjcKEGJhdHRs",
            "ZV9zeW5jX2RhdGEYAyABKAsyGC5Qcm90b2NvbC5CYXR0bGVTeW5jRGF0YUgB",
            "iAEBEj4KD3NoYWRvd19kYXRhX2RpYxgEIAMoCzIlLlByb3RvY29sLlN0YXRl",
            "TXNnLlNoYWRvd0RhdGFEaWNFbnRyeRpOChJFbnRpdHlEYXRhRGljRW50cnkS",
            "CwoDa2V5GAEgASgNEicKBXZhbHVlGAIgASgLMhguUHJvdG9jb2wuRW50aXR5",
            "U3luY0RhdGE6AjgBGkoKElNoYWRvd0RhdGFEaWNFbnRyeRILCgNrZXkYASAB",
            "KA0SIwoFdmFsdWUYAiABKAsyFC5Qcm90b2NvbC5TaGFkb3dEYXRhOgI4AUIO",
            "Cgxfc2VydmVyX3RpbWVCEwoRX2JhdHRsZV9zeW5jX2RhdGEikQEKClNoYWRv",
            "d0RhdGESNwoKc2hhZG93X2RpYxgBIAMoCzIjLlByb3RvY29sLlNoYWRvd0Rh",
            "dGEuU2hhZG93RGljRW50cnkaSgoOU2hhZG93RGljRW50cnkSCwoDa2V5GAEg",
            "ASgNEicKBXZhbHVlGAIgASgLMhguUHJvdG9jb2wuU2hhZG93RGF0YUl0ZW06",
            "AjgBIo4BCg5TaGFkb3dEYXRhSXRlbRIiCgNwb3MYASABKAsyEC5Qcm90b2Nv",
            "bC5GbG9hdDNIAIgBARInCghyb3RhdGlvbhgCIAEoCzIQLlByb3RvY29sLkZs",
            "b2F0M0gBiAEBEhEKBHRpbWUYAyABKAJIAogBAUIGCgRfcG9zQgsKCV9yb3Rh",
            "dGlvbkIHCgVfdGltZSL+JwoORW50aXR5U3luY0RhdGESDwoCaWQYASABKA1I",
            "AIgBARInCgR0eXBlGAIgASgOMhQuUHJvdG9jb2wuRW50aXR5VHlwZUgBiAEB",
            "EiUKCHBvc2l0aW9uGAMgASgLMg4uUHJvdG9jb2wuSW50M0gCiAEBEiUKCHJv",
            "dGF0aW9uGAQgASgLMg4uUHJvdG9jb2wuSW50M0gDiAEBEhEKBGNhbXAYBSAB",
            "KA1IBIgBARIWCglkZXN0cm95ZWQYByABKAhIBYgBARIVCghtb2RlbF9pZBgI",
            "IAEoDUgGiAEBEj4KD3N0YXRlX2F0dHJfZGF0YRgLIAEoCzIgLlByb3RvY29s",
            "LlN0YXRlQXR0cmlidXRlU3luY0RhdGFIB4gBARIuCglsaWZlX2RhdGEYDCAB",
            "KAsyFi5Qcm90b2NvbC5MaWZlU3luY0RhdGFICIgBARJBChNjaGFyYWN0ZXJf",
            "Y3RybF9kYXRhGA0gASgLMh8uUHJvdG9jb2wuQ2hhcmFjdGVyQ3RybFN5bmNE",
            "YXRhSAmIAQESRQoVcHJvcF9jb2xsZWN0aW9uc19kYXRhGA4gASgLMiEuUHJv",
            "dG9jb2wuUHJvcENvbGxlY3Rpb25zU3luY0RhdGFICogBARI5Cg9za2lsbF9j",
            "dHJsX2RhdGEYDyABKAsyGy5Qcm90b2NvbC5Ta2lsbEN0cmxTeW5jRGF0YUgL",
            "iAEBEjcKDmJ1ZmZfY3RybF9kYXRhGBAgASgLMhouUHJvdG9jb2wuQnVmZkN0",
            "cmxTeW5jRGF0YUgMiAEBEjcKDmhpdF9jaGVja19kYXRhGBEgASgLMhouUHJv",
            "dG9jb2wuSGl0Q2hlY2tTeW5jRGF0YUgNiAEBEiwKCG5hdl9kYXRhGBIgASgL",
            "MhUuUHJvdG9jb2wuTmF2U3luY0RhdGFIDogBARIsCgh0YWdfZGF0YRgTIAEo",
            "CzIVLlByb3RvY29sLlRhZ1N5bmNEYXRhSA+IAQESLgoJZ29hcF9kYXRhGBQg",
            "ASgLMhYuUHJvdG9jb2wuR29hcFN5bmNEYXRhSBCIAQESNgoJYXJjaF9kYXRh",
            "GBUgASgLMh4uUHJvdG9jb2wuQXJjaGl0ZWN0dXJlU3luY0RhdGFIEYgBARIu",
            "CglhcmVhX2RhdGEYHiABKAsyFi5Qcm90b2NvbC5BcmVhU3luY0RhdGFIEogB",
            "ARI9ChFwYXNzZXJfYnJhaW5fZGF0YRgfIAEoCzIdLlByb3RvY29sLlBhc3Nl",
            "ckJyYWluU3luY0RhdGFIE4gBARIwCgpndWFyZF9kYXRhGCAgASgLMhcuUHJv",
            "dG9jb2wuR3VhcmRTeW5jRGF0YUgUiAEBEjUKDWZseV9pdGVtX2RhdGEYISAB",
            "KAsyGS5Qcm90b2NvbC5GbHlJdGVtU3luY0RhdGFIFYgBARIyCgtsYWRkZXJf",
            "ZGF0YRgiIAEoCzIYLlByb3RvY29sLkxhZGRlclN5bmNEYXRhSBaIAQESMAoK",
            "dGhpbmdfZGF0YRgjIAEoCzIXLlByb3RvY29sLlRoaW5nU3luY0RhdGFIF4gB",
            "ARIuCgloZXJvX2RhdGEYJCABKAsyFi5Qcm90b2NvbC5IZXJvU3luY0RhdGFI",
            "GIgBARIyCgt3ZWFwb25fZGF0YRglIAEoCzIYLlByb3RvY29sLldlYXBvblN5",
            "bmNEYXRhSBmIAQESLAoIaG90X2RhdGEYJiABKAsyFS5Qcm90b2NvbC5Ib3RT",
            "eW5jRGF0YUgaiAEBEi4KCWFucWlfZGF0YRgnIAEoCzIWLlByb3RvY29sLkFu",
            "cWlTeW5jRGF0YUgbiAEBEjQKDHBlZGRsZXJfZGF0YRgoIAEoCzIZLlByb3Rv",
            "Y29sLlBlZGRsZXJTeW5jRGF0YUgciAEBEjQKDHdhcm5pbmdfZGF0YRgqIAEo",
            "CzIZLlByb3RvY29sLldhcm5pbmdTeW5jRGF0YUgdiAEBEjAKCnNtb2tlX2Rh",
            "dGEYKyABKAsyFy5Qcm90b2NvbC5TbW9rZVN5bmNEYXRhSB6IAQESOQoPanVt",
            "cF9wb2ludF9kYXRhGCwgASgLMhsuUHJvdG9jb2wuSnVtcFBvaW50U3luY0Rh",
            "dGFIH4gBARI9ChFsYWRkZXJfY2hlY2tfZGF0YRgtIAEoCzIdLlByb3RvY29s",
            "LkxhZGRlckNoZWNrU3luY0RhdGFIIIgBARIuCglib2F0X2RhdGEYLiABKAsy",
            "Fi5Qcm90b2NvbC5Cb2F0U3luY0RhdGFIIYgBARIuCglzaG9wX2RhdGEYLyAB",
            "KAsyFi5Qcm90b2NvbC5TaG9wU3luY0RhdGFIIogBARIuCglib3NzX2RhdGEY",
            "MSABKAsyFi5Qcm90b2NvbC5Cb3NzU3luY0RhdGFII4gBARIuCgluZXN0X2Rh",
            "dGEYMiABKAsyFi5Qcm90b2NvbC5OZXN0U3luY0RhdGFIJIgBARI5Cg9oaWRl",
            "X3N0YXRlX2RhdGEYMyABKAsyGy5Qcm90b2NvbC5IaWRlU3RhdGVTeW5jRGF0",
            "YUgliAEBEi4KCWRyb3BfZGF0YRg0IAEoCzIWLlByb3RvY29sLkRyb3BTeW5j",
            "RGF0YUgmiAEBEkUKFWFudGlkb3RlX3NjYXR0ZXJfZGF0YRg2IAEoCzIhLlBy",
            "b3RvY29sLkFudGlkb3RlU2NhdHRlclN5bmNEYXRhSCeIAQESNAoMbW9uc3Rl",
            "cl9kYXRhGDcgASgLMhkuUHJvdG9jb2wuTW9uc3RlclN5bmNEYXRhSCiIAQES",
            "NgoNcGh5c2ljYWxfZGF0YRg5IAEoCzIaLlByb3RvY29sLlBoeXNjaWFsU3lu",
            "Y0RhdGFIKYgBARI4CgxmaXJlX2RpYW1vbmQYOiABKAsyHS5Qcm90b2NvbC5G",
            "aXJlRGlhbW9uZFN5bmNEYXRhSCqIAQESNgoNaW5zYW5pdHlfZGF0YRg7IAEo",
            "CzIaLlByb3RvY29sLkluc2FuaXR5U3luY0RhdGFIK4gBARIuCgliYWxsX2Rh",
            "dGEYPCABKAsyFi5Qcm90b2NvbC5CYWxsU3luY0RhdGFILIgBARIyCgtmb2xs",
            "b3dfZGF0YRg9IAEoCzIYLlByb3RvY29sLkZvbGxvd1N5bmNEYXRhSC2IAQES",
            "NgoNc3RyZW5ndGhfZGF0YRg+IAEoCzIaLlByb3RvY29sLlN0cmVuZ3RoU3lu",
            "Y0RhdGFILogBARI4Cg5pbnZpc2libGVfZGF0YRhAIAEoCzIbLlByb3RvY29s",
            "LkludmlzaWJsZVN5bmNEYXRhSC+IAQESOQoPbWFnaWNfd2FsbF9kYXRhGEEg",
            "ASgLMhsuUHJvdG9jb2wuTWFnaWNXYWxsU3luY0RhdGFIMIgBARI4Cg5wYXJh",
            "bHlzaXNfZGF0YRhCIAEoCzIbLlByb3RvY29sLlBhcmFseXNpc1N5bmNEYXRh",
            "SDGIAQESPAoPc2VhbF9wb2ludF9kYXRhGEMgASgLMh4uUHJvdG9jb2wuU2Vh",
            "bGluZ1BvaW50U3luY0RhdGFIMogBARI6Cg5zZWFsX2xpbmVfZGF0YRhEIAEo",
            "CzIdLlByb3RvY29sLlNlYWxpbmdMaW5lU3luY0RhdGFIM4gBARI9ChF0aHVu",
            "ZGVyX25haWxfZGF0YRhFIAEoCzIdLlByb3RvY29sLlRodW5kZXJOYWlsU3lu",
            "Y0RhdGFINIgBARI5Cg9ob29rX3BvaW50X2RhdGEYRiABKAsyGy5Qcm90b2Nv",
            "bC5Ib29rUG9pbnRTeW5jRGF0YUg1iAEBEjsKEGdvbGRlbl90aXJlX2RhdGEY",
            "RyABKAsyHC5Qcm90b2NvbC5Hb2xkZW5UaXJlU3luY0RhdGFINogBARI7ChBn",
            "b2xkZW5fYmVsbF9kYXRhGEggASgLMhwuUHJvdG9jb2wuR29sZGVuQmVsbFN5",
            "bmNEYXRhSDeIAQESNgoNdGltZWxpbmVfZGF0YRhJIAEoCzIaLlByb3RvY29s",
            "LlRpbWVsaW5lU3luY0RhdGFIOIgBARI/ChJjdXN0b21fZW50aXR5X2RhdGEY",
            "SiABKAsyHi5Qcm90b2NvbC5DdXN0b21FbnRpdHlTeW5jRGF0YUg5iAEBEjcK",
            "DmhpZGVfYXJlYV9kYXRhGEsgASgLMhouUHJvdG9jb2wuSGlkZUFyZWFTeW5j",
            "RGF0YUg6iAEBEjQKDHJlY292ZXJfZGF0YRhMIAEoCzIZLlByb3RvY29sLlJl",
            "Y292ZXJTeW5jRGF0YUg7iAEBEjMKDmdhemVfc3luZV9kYXRhGE0gASgLMhYu",
            "UHJvdG9jb2wuR2F6ZVN5bmNEYXRhSDyIAQESHQoQdG90YWxfYXR0YWNrX3Zh",
            "bBhOIAEoAkg9iAEBEkYKEGF0dGFja19zdGF0c19kaWMYTyADKAsyLC5Qcm90",
            "b2NvbC5FbnRpdHlTeW5jRGF0YS5BdHRhY2tTdGF0c0RpY0VudHJ5Eh4KEXRv",
            "dGFsX3NraWxsX2NvdW50GFAgASgNSD6IAQESJgoZdG90YWxfc2tpbGxfc3Vj",
            "Y2Vzc19jb3VudBhRIAEoDUg/iAEBEkQKD3NraWxsX3N0YXRzX2RpYxhSIAMo",
            "CzIrLlByb3RvY29sLkVudGl0eVN5bmNEYXRhLlNraWxsU3RhdHNEaWNFbnRy",
            "eRIgChNub3JtYWxfYXR0YWNrX2NvdW50GFMgASgNSECIAQESKAobbm9ybWFs",
            "X2F0dGFja19zdWNjZXNzX2NvdW50GFQgASgNSEGIAQESUwoXbm9ybWFsX2F0",
            "dGFja19zdGF0c19kaWMYVSADKAsyMi5Qcm90b2NvbC5FbnRpdHlTeW5jRGF0",
            "YS5Ob3JtYWxBdHRhY2tTdGF0c0RpY0VudHJ5EiYKGW5vcm1hbF9hdHRhY2tf",
            "YnJlYWtfY291bnQYViABKA1IQogBARI3Cghob2xkX2RpYxhXIAMoCzIlLlBy",
            "b3RvY29sLkVudGl0eVN5bmNEYXRhLkhvbGREaWNFbnRyeRo1ChNBdHRhY2tT",
            "dGF0c0RpY0VudHJ5EgsKA2tleRgBIAEoDRINCgV2YWx1ZRgCIAEoAjoCOAEa",
            "NAoSU2tpbGxTdGF0c0RpY0VudHJ5EgsKA2tleRgBIAEoDRINCgV2YWx1ZRgC",
            "IAEoDToCOAEaOwoZTm9ybWFsQXR0YWNrU3RhdHNEaWNFbnRyeRILCgNrZXkY",
            "ASABKA0SDQoFdmFsdWUYAiABKA06AjgBGi4KDEhvbGREaWNFbnRyeRILCgNr",
            "ZXkYASABKA0SDQoFdmFsdWUYAiABKAI6AjgBQgUKA19pZEIHCgVfdHlwZUIL",
            "CglfcG9zaXRpb25CCwoJX3JvdGF0aW9uQgcKBV9jYW1wQgwKCl9kZXN0cm95",
            "ZWRCCwoJX21vZGVsX2lkQhIKEF9zdGF0ZV9hdHRyX2RhdGFCDAoKX2xpZmVf",
            "ZGF0YUIWChRfY2hhcmFjdGVyX2N0cmxfZGF0YUIYChZfcHJvcF9jb2xsZWN0",
            "aW9uc19kYXRhQhIKEF9za2lsbF9jdHJsX2RhdGFCEQoPX2J1ZmZfY3RybF9k",
            "YXRhQhEKD19oaXRfY2hlY2tfZGF0YUILCglfbmF2X2RhdGFCCwoJX3RhZ19k",
            "YXRhQgwKCl9nb2FwX2RhdGFCDAoKX2FyY2hfZGF0YUIMCgpfYXJlYV9kYXRh",
            "QhQKEl9wYXNzZXJfYnJhaW5fZGF0YUINCgtfZ3VhcmRfZGF0YUIQCg5fZmx5",
            "X2l0ZW1fZGF0YUIOCgxfbGFkZGVyX2RhdGFCDQoLX3RoaW5nX2RhdGFCDAoK",
            "X2hlcm9fZGF0YUIOCgxfd2VhcG9uX2RhdGFCCwoJX2hvdF9kYXRhQgwKCl9h",
            "bnFpX2RhdGFCDwoNX3BlZGRsZXJfZGF0YUIPCg1fd2FybmluZ19kYXRhQg0K",
            "C19zbW9rZV9kYXRhQhIKEF9qdW1wX3BvaW50X2RhdGFCFAoSX2xhZGRlcl9j",
            "aGVja19kYXRhQgwKCl9ib2F0X2RhdGFCDAoKX3Nob3BfZGF0YUIMCgpfYm9z",
            "c19kYXRhQgwKCl9uZXN0X2RhdGFCEgoQX2hpZGVfc3RhdGVfZGF0YUIMCgpf",
            "ZHJvcF9kYXRhQhgKFl9hbnRpZG90ZV9zY2F0dGVyX2RhdGFCDwoNX21vbnN0",
            "ZXJfZGF0YUIQCg5fcGh5c2ljYWxfZGF0YUIPCg1fZmlyZV9kaWFtb25kQhAK",
            "Dl9pbnNhbml0eV9kYXRhQgwKCl9iYWxsX2RhdGFCDgoMX2ZvbGxvd19kYXRh",
            "QhAKDl9zdHJlbmd0aF9kYXRhQhEKD19pbnZpc2libGVfZGF0YUISChBfbWFn",
            "aWNfd2FsbF9kYXRhQhEKD19wYXJhbHlzaXNfZGF0YUISChBfc2VhbF9wb2lu",
            "dF9kYXRhQhEKD19zZWFsX2xpbmVfZGF0YUIUChJfdGh1bmRlcl9uYWlsX2Rh",
            "dGFCEgoQX2hvb2tfcG9pbnRfZGF0YUITChFfZ29sZGVuX3RpcmVfZGF0YUIT",
            "ChFfZ29sZGVuX2JlbGxfZGF0YUIQCg5fdGltZWxpbmVfZGF0YUIVChNfY3Vz",
            "dG9tX2VudGl0eV9kYXRhQhEKD19oaWRlX2FyZWFfZGF0YUIPCg1fcmVjb3Zl",
            "cl9kYXRhQhEKD19nYXplX3N5bmVfZGF0YUITChFfdG90YWxfYXR0YWNrX3Zh",
            "bEIUChJfdG90YWxfc2tpbGxfY291bnRCHAoaX3RvdGFsX3NraWxsX3N1Y2Nl",
            "c3NfY291bnRCFgoUX25vcm1hbF9hdHRhY2tfY291bnRCHgocX25vcm1hbF9h",
            "dHRhY2tfc3VjY2Vzc19jb3VudEIcChpfbm9ybWFsX2F0dGFja19icmVha19j",
            "b3VudCJrCg9SZWNvdmVyU3luY0RhdGESGQoMcmVjb3Zlcl90aW1lGAEgASgF",
            "SACIAQESGgoNcmVjb3Zlcl90aW1lcxgCIAEoBUgBiAEBQg8KDV9yZWNvdmVy",
            "X3RpbWVCEAoOX3JlY292ZXJfdGltZXMivQUKEEhpZGVBcmVhU3luY0RhdGES",
            "DwoCaWQYASABKA1IAIgBARIWCglpbnZpc2libGUYAiABKAhIAYgBARIcCg9j",
            "YW5fc2VlX2luX2FyZWEYBiABKAhIAogBARInChp2aXNpYmxlX3ZhbF9yZWNv",
            "dmVyeV9zcGVlZBgHIAEoAkgDiAEBEiAKE3N0YXlfaW52aXNpYmxlX3RpbWUY",
            "CCABKAJIBIgBARIuCg9jZW50ZXJfcG9zaXRpb24YCSABKAsyEC5Qcm90b2Nv",
            "bC5GbG9hdDNIBYgBARIsCg1jb2xsaWRlcl9zaXplGAogASgLMhAuUHJvdG9j",
            "b2wuRmxvYXQzSAaIAQESMwoOaGlkZV9hcmVhX3R5cGUYDCABKA4yFi5Qcm90",
            "b2NvbC5IaWRlQXJlYVR5cGVIB4gBARIaCg1tb2RlbF9vY2NsdWRlGA0gASgI",
            "SAiIAQESSwoSb25fYXJlYV9lbnRpdHlfZGljGA4gAygLMi8uUHJvdG9jb2wu",
            "SGlkZUFyZWFTeW5jRGF0YS5PbkFyZWFFbnRpdHlEaWNFbnRyeRIpCgptb2Rl",
            "bF9zaXplGA8gASgLMhAuUHJvdG9jb2wuRmxvYXQzSAmIAQEaNgoUT25BcmVh",
            "RW50aXR5RGljRW50cnkSCwoDa2V5GAEgASgNEg0KBXZhbHVlGAIgASgIOgI4",
            "AUIFCgNfaWRCDAoKX2ludmlzaWJsZUISChBfY2FuX3NlZV9pbl9hcmVhQh0K",
            "G192aXNpYmxlX3ZhbF9yZWNvdmVyeV9zcGVlZEIWChRfc3RheV9pbnZpc2li",
            "bGVfdGltZUISChBfY2VudGVyX3Bvc2l0aW9uQhAKDl9jb2xsaWRlcl9zaXpl",
            "QhEKD19oaWRlX2FyZWFfdHlwZUIQCg5fbW9kZWxfb2NjbHVkZUINCgtfbW9k",
            "ZWxfc2l6ZSJIChJHb2xkZW5UaXJlU3luY0RhdGESHQoQb3JpZ2luX2VudGl0",
            "eV9pZBgBIAEoDUgAiAEBQhMKEV9vcmlnaW5fZW50aXR5X2lkIpoCChJHb2xk",
            "ZW5CZWxsU3luY0RhdGESHQoQdGFyZ2V0X2VudGl0eV9pZBgBIAEoDUgAiAEB",
            "EhwKD2lucHV0X3R5cGVfY29kZRgCIAEoBUgBiAEBEhMKBmxlZnRIcBgDIAEo",
            "AkgCiAEBEhQKB3JpZ2h0SHAYBCABKAJIA4gBARIdChBvcmlnaW5fZW50aXR5",
            "X2lkGAUgASgNSASIAQESGAoLZWZmZWN0X25hbWUYBiABKAlIBYgBAUITChFf",
            "dGFyZ2V0X2VudGl0eV9pZEISChBfaW5wdXRfdHlwZV9jb2RlQgkKB19sZWZ0",
            "SHBCCgoIX3JpZ2h0SHBCEwoRX29yaWdpbl9lbnRpdHlfaWRCDgoMX2VmZmVj",
            "dF9uYW1lIvQDChNUaHVuZGVyTmFpbFN5bmNEYXRhEhoKDWNvbXBsZXRlX21v",
            "dmUYASABKAhIAIgBARIgChNjb21wbGV0ZV9wb2ludF90aW1lGAIgASgCSAGI",
            "AQESFwoKbWluX3JhZGl1cxgDIAEoAkgCiAEBEhcKCm1heF9yYWRpdXMYBCAB",
            "KAJIA4gBARIWCglsaWZlX3RpbWUYBSABKAJIBIgBARIUCgdib29taW5nGAYg",
            "ASgISAWIAQESGgoNY29tcGxldGVfYm9vbRgHIAEoCEgGiAEBEhgKC2N1cnJf",
            "cmFkaXVzGAggASgCSAeIAQESTQoRYm9vbV9lZmZlY3RfZ3JvdXAYCSADKAsy",
            "Mi5Qcm90b2NvbC5UaHVuZGVyTmFpbFN5bmNEYXRhLkJvb21FZmZlY3RHcm91",
            "cEVudHJ5GjYKFEJvb21FZmZlY3RHcm91cEVudHJ5EgsKA2tleRgBIAEoDRIN",
            "CgV2YWx1ZRgCIAEoCToCOAFCEAoOX2NvbXBsZXRlX21vdmVCFgoUX2NvbXBs",
            "ZXRlX3BvaW50X3RpbWVCDQoLX21pbl9yYWRpdXNCDQoLX21heF9yYWRpdXNC",
            "DAoKX2xpZmVfdGltZUIKCghfYm9vbWluZ0IQCg5fY29tcGxldGVfYm9vbUIO",
            "CgxfY3Vycl9yYWRpdXMiwQEKEUhvb2tQb2ludFN5bmNEYXRhEhkKDGxpbWl0",
            "X3JhZGl1cxgBIAEoAkgAiAEBEhsKDmZyb21fZW50aXR5X2lkGAIgASgNSAGI",
            "AQESGgoNZWZmZWN0X3JhZGl1cxgDIAEoAkgCiAEBEhUKCGNhbl9ob29rGAQg",
            "ASgISAOIAQFCDwoNX2xpbWl0X3JhZGl1c0IRCg9fZnJvbV9lbnRpdHlfaWRC",
            "EAoOX2VmZmVjdF9yYWRpdXNCCwoJX2Nhbl9ob29rIu8CChNTZWFsaW5nTGlu",
            "ZVN5bmNEYXRhEhMKBmxlbmd0aBgBIAEoAkgAiAEBEhgKC2NyZWF0ZV90aW1l",
            "GAIgASgCSAGIAQESFAoHZGlzYWJsZRgDIAEoCEgCiAEBEhIKBXNwZWVkGAQg",
            "ASgCSAOIAQESFQoIb3duZXJfaWQYBSABKA1IBIgBARITCgZoZWlnaHQYBiAB",
            "KAJIBYgBARItCg50YXJnZXRfcG9zdGlvbhgHIAEoCzIQLlByb3RvY29sLkZs",
            "b2F0M0gGiAEBEhYKCWxlZnRfc2lkZRgIIAEoCEgHiAEBEhUKCGhpdF90aW1l",
            "GAkgASgCSAiIAQFCCQoHX2xlbmd0aEIOCgxfY3JlYXRlX3RpbWVCCgoIX2Rp",
            "c2FibGVCCAoGX3NwZWVkQgsKCV9vd25lcl9pZEIJCgdfaGVpZ2h0QhEKD190",
            "YXJnZXRfcG9zdGlvbkIMCgpfbGVmdF9zaWRlQgsKCV9oaXRfdGltZSI6ChRT",
            "ZWFsaW5nUG9pbnRTeW5jRGF0YRIVCghvd25lcl9pZBgBIAEoDUgAiAEBQgsK",
            "CV9vd25lcl9pZCJxChFQYXJhbHlzaXNTeW5jRGF0YRIZCgxpc19wYXJhbHlz",
            "aXMYASABKAhIAIgBARIcCg9wYXJhbHlzaXNfdmFsdWUYAiABKAJIAYgBAUIP",
            "Cg1faXNfcGFyYWx5c2lzQhIKEF9wYXJhbHlzaXNfdmFsdWUiowIKEU1hZ2lj",
            "V2FsbFN5bmNEYXRhEjAKCGNvbGxpZGVyGAEgASgLMhkuUHJvdG9jb2wuQm94",
            "Q29sbGlkZXJEYXRhSACIAQESFQoIZW5kX3RpbWUYAiABKAJIAYgBARIbCg5m",
            "aW5hbF90YXJnZXRfeRgDIAEoAkgCiAEBEjUKDXJlYWxfY29sbGlkZXIYBCAB",
            "KAsyGS5Qcm90b2NvbC5Cb3hDb2xsaWRlckRhdGFIA4gBARIdChBvcmlnaW5f",
            "ZW50aXR5X2lkGAUgASgNSASIAQFCCwoJX2NvbGxpZGVyQgsKCV9lbmRfdGlt",
            "ZUIRCg9fZmluYWxfdGFyZ2V0X3lCEAoOX3JlYWxfY29sbGlkZXJCEwoRX29y",
            "aWdpbl9lbnRpdHlfaWQijwIKEUludmlzaWJsZVN5bmNEYXRhEhkKDGlzX2lu",
            "dmlzaWJsZRgBIAEoCEgAiAEBEhsKDmxhc3RfaW52aXNpYmxlGAIgASgISAGI",
            "AQESHAoPb25faGlkZV9hcmVhX2lkGAMgASgNSAKIAQESGQoMb25faGlkZV9h",
            "cmVhGAQgASgISAOIAQESJAoXb25faGlkZV9hcmVhX2JyZWFrX3RpbWUYBSAB",
            "KAJIBIgBAUIPCg1faXNfaW52aXNpYmxlQhEKD19sYXN0X2ludmlzaWJsZUIS",
            "ChBfb25faGlkZV9hcmVhX2lkQg8KDV9vbl9oaWRlX2FyZWFCGgoYX29uX2hp",
            "ZGVfYXJlYV9icmVha190aW1lIjgKEFN0cmVuZ3RoU3luY0RhdGESFgoJYWRk",
            "X3ZhbHVlGAEgASgCSACIAQFCDAoKX2FkZF92YWx1ZSL+AwoTRmlyZURpYW1v",
            "bmRTeW5jRGF0YRISCgVwb3dlchgBIAEoAkgAiAEBEiwKBHR5cGUYAiABKA4y",
            "GS5Qcm90b2NvbC5GaXJlRGlhbW9uZFR5cGVIAYgBARIbCg5mcm9tX2VudGl0",
            "eV9pZBgDIAEoDUgCiAEBEhYKCW1heF9wb3dlchgEIAEoAkgDiAEBEhgKC2Jh",
            "c2VfZGFtYWdlGAYgASgCSASIAQESGAoLYm9tYl9kYW1hZ2UYByABKAJIBYgB",
            "ARIWCglhaW1fc3BlZWQYCCABKAJIBogBARIZCgxub3JtYWxfc3BlZWQYCSAB",
            "KAJIB4gBARIeChFkZWNyZWFzZV9tcF9zcGVlZBgKIAEoAkgIiAEBEhoKDWVm",
            "ZmVjdF9yYWRpdXMYCyABKAJICYgBARIdChBmb2xsb3dfZW50aXR5X2lkGAwg",
            "ASgNSAqIAQFCCAoGX3Bvd2VyQgcKBV90eXBlQhEKD19mcm9tX2VudGl0eV9p",
            "ZEIMCgpfbWF4X3Bvd2VyQg4KDF9iYXNlX2RhbWFnZUIOCgxfYm9tYl9kYW1h",
            "Z2VCDAoKX2FpbV9zcGVlZEIPCg1fbm9ybWFsX3NwZWVkQhQKEl9kZWNyZWFz",
            "ZV9tcF9zcGVlZEIQCg5fZWZmZWN0X3JhZGl1c0ITChFfZm9sbG93X2VudGl0",
            "eV9pZCKJAgoMQm9hdFN5bmNEYXRhEicKBXN0YXRlGAEgASgOMhMuUHJvdG9j",
            "b2wuQm9hdFN0YXRlSACIAQESEwoGYWN0aW9uGAIgASgFSAGIAQESEwoGbnBj",
            "X2lkGAMgASgNSAKIAQESFwoKd2F5X21hcF9pZBgEIAEoDUgDiAEBEhsKDndh",
            "eV9wb2ludF90eXBlGAUgASgNSASIAQESGwoObnBjX21vdmVfc3BlZWQYBiAB",
            "KAJIBYgBAUIICgZfc3RhdGVCCQoHX2FjdGlvbkIJCgdfbnBjX2lkQg0KC193",
            "YXlfbWFwX2lkQhEKD193YXlfcG9pbnRfdHlwZUIRCg9fbnBjX21vdmVfc3Bl",
            "ZWQi4AIKDFNob3BTeW5jRGF0YRIYCgtzaG9wX2NmZ19pZBgBIAEoDUgAiAEB",
            "EhYKCXNob3BfbmFtZRgCIAEoCUgBiAEBEhYKCXNob3BfZGVzYxgDIAEoCUgC",
            "iAEBEhMKBm5wY19pZBgEIAEoDUgDiAEBEhkKDHRvdGFsX2luY29tZRgFIAEo",
            "BUgEiAEBEj4KDXNhbGVfaXRlbV9kaWMYBiADKAsyJy5Qcm90b2NvbC5TaG9w",
            "U3luY0RhdGEuU2FsZUl0ZW1EaWNFbnRyeRpOChBTYWxlSXRlbURpY0VudHJ5",
            "EgsKA2tleRgBIAEoBBIpCgV2YWx1ZRgCIAEoCzIaLlByb3RvY29sLlNhbGVQ",
            "cm9wSXRlbURhdGE6AjgBQg4KDF9zaG9wX2NmZ19pZEIMCgpfc2hvcF9uYW1l",
            "QgwKCl9zaG9wX2Rlc2NCCQoHX25wY19pZEIPCg1fdG90YWxfaW5jb21lIq4C",
            "CgxEcm9wU3luY0RhdGESDwoCaWQYASABKA1IAIgBARIUCgdhcmVhX2lkGAIg",
            "ASgNSAGIAQESGgoNZHJvcF9ncm91cF9pZBgDIAEoDUgCiAEBEj4KDXByb3Bf",
            "ZGF0YV9kaWMYBCADKAsyJy5Qcm90b2NvbC5Ecm9wU3luY0RhdGEuUHJvcERh",
            "dGFEaWNFbnRyeRIbCg5mcm9tX2VudGl0eV9pZBgFIAEoDUgDiAEBGkYKEFBy",
            "b3BEYXRhRGljRW50cnkSCwoDa2V5GAEgASgEEiEKBXZhbHVlGAIgASgLMhIu",
            "UHJvdG9jb2wuUHJvcERhdGE6AjgBQgUKA19pZEIKCghfYXJlYV9pZEIQCg5f",
            "ZHJvcF9ncm91cF9pZEIRCg9fZnJvbV9lbnRpdHlfaWQiUgoMQm9zc1N5bmNE",
            "YXRhEhQKB2Jvc3NfaWQYASABKA1IAIgBARIUCgdza2luX2lkGAIgASgNSAGI",
            "AQFCCgoIX2Jvc3NfaWRCCgoIX3NraW5faWQihAIKEFNhbGVQcm9wSXRlbURh",
            "dGESDwoCaWQYASABKARIAIgBARISCgVpbmRleBgCIAEoBUgBiAEBEhgKC3By",
            "b3BfY2ZnX2lkGAMgASgNSAKIAQESFgoJc3RvY2tfbnVtGAQgASgFSAOIAQES",
            "FgoJdG90YWxfbnVtGAUgASgFSASIAQESFwoKdW5pdF9wcmljZRgGIAEoBUgF",
            "iAEBEhIKBW93bmVyGAcgASgJSAaIAQFCBQoDX2lkQggKBl9pbmRleEIOCgxf",
            "cHJvcF9jZmdfaWRCDAoKX3N0b2NrX251bUIMCgpfdG90YWxfbnVtQg0KC191",
            "bml0X3ByaWNlQggKBl9vd25lciKIAgoXQW50aWRvdGVTY2F0dGVyU3luY0Rh",
            "dGESKgoFc3RhdGUYASABKA4yFi5Qcm90b2NvbC5TY2F0dGVyU3RhdGVIAIgB",
            "ARIYCgtzY2F0dGVyX251bRgCIAEoAkgBiAEBEhgKC3NjYXR0ZXJfbWF4GAMg",
            "ASgCSAKIAQESMAoIY29sbGlkZXIYBSABKAsyGS5Qcm90b2NvbC5Cb3hDb2xs",
            "aWRlckRhdGFIA4gBARIWCglpZ25pdGVfaWQYBiABKA1IBIgBAUIICgZfc3Rh",
            "dGVCDgoMX3NjYXR0ZXJfbnVtQg4KDF9zY2F0dGVyX21heEILCglfY29sbGlk",
            "ZXJCDAoKX2lnbml0ZV9pZCI5ChFBY3Rpb25Cb2F0TW92ZU1zZxIWCgllbnRp",
            "dHlfaWQYASABKA1IAIgBAUIMCgpfZW50aXR5X2lkItICCgtUYWdTeW5jRGF0",
            "YRI/Cg50ZW1wX3ZhbHVlX2RpYxgBIAMoCzInLlByb3RvY29sLlRhZ1N5bmNE",
            "YXRhLlRlbXBWYWx1ZURpY0VudHJ5EjIKB3RhZ19kaWMYAiADKAsyIS5Qcm90",
            "b2NvbC5UYWdTeW5jRGF0YS5UYWdEaWNFbnRyeRI4Cgp0YWxlbnRfZGljGAMg",
            "AygLMiQuUHJvdG9jb2wuVGFnU3luY0RhdGEuVGFsZW50RGljRW50cnkaMwoR",
            "VGVtcFZhbHVlRGljRW50cnkSCwoDa2V5GAEgASgNEg0KBXZhbHVlGAIgASgF",
            "OgI4ARotCgtUYWdEaWNFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiAB",
            "KAU6AjgBGjAKDlRhbGVudERpY0VudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1",
            "ZRgCIAEoBToCOAEi+wEKFlN0YXRlQXR0cmlidXRlU3luY0RhdGESFgoJc3Vi",
            "X3N0YXRlGAEgASgNSACIAQESEgoFaW5kZXgYAiABKAVIAYgBARIaCg1kZWZh",
            "dWx0X3N0YXRlGAMgASgNSAKIAQESPwoIYXR0cl9kaWMYBCADKAsyLS5Qcm90",
            "b2NvbC5TdGF0ZUF0dHJpYnV0ZVN5bmNEYXRhLkF0dHJEaWNFbnRyeRouCgxB",
            "dHRyRGljRW50cnkSCwoDa2V5GAEgASgNEg0KBXZhbHVlGAIgASgFOgI4AUIM",
            "Cgpfc3ViX3N0YXRlQggKBl9pbmRleEIQCg5fZGVmYXVsdF9zdGF0ZSLwAQoM",
            "TGlmZVN5bmNEYXRhEhEKBGRlYWQYASABKAhIAIgBARISCgV2YWx1ZRgCIAEo",
            "AkgBiAEBEhcKCmJhc2VfdmFsdWUYAyABKAJIAogBARIWCgltYXhfdmFsdWUY",
            "BCABKAJIA4gBARIdChBsYXN0X2NoYW5nZV90aW1lGAUgASgCSASIAQESFgoJ",
            "a2lsbGVyX2lkGAYgASgNSAWIAQFCBwoFX2RlYWRCCAoGX3ZhbHVlQg0KC19i",
            "YXNlX3ZhbHVlQgwKCl9tYXhfdmFsdWVCEwoRX2xhc3RfY2hhbmdlX3RpbWVC",
            "DAoKX2tpbGxlcl9pZCK7BQoVQ2hhcmFjdGVyQ3RybFN5bmNEYXRhEhcKCm1v",
            "dmVfc3RhdGUYASABKA1IAIgBARIXCgptb3ZlX2FuZ2xlGAIgASgCSAGIAQES",
            "FQoIdmlld19yb3cYAyABKAJIAogBARIXCgp2aWV3X3BpdGNoGAQgASgCSAOI",
            "AQESGQoMYWN0aW9uX3NwZWVkGAUgASgCSASIAQESGQoMZGlzYWJsZV9tb3Zl",
            "GAYgASgISAWIAQESHQoQZGlzYWJsZV9yb3RhdGlvbhgHIAEoCEgGiAEBEhwK",
            "D21vdmVfY29udHJvbGxlchgIIAEoCUgHiAEBEhUKCGlzX3N0YXJ0GAkgASgI",
            "SAiIAQESEgoFd2lkdGgYCiABKAJICYgBARITCgZoZWlnaHQYCyABKAJICogB",
            "ARIcCg9kaXNhYmxlX2hpdF9ib3gYDCABKAhIC4gBARImChljYW5jZWxfdHdl",
            "ZW5fY2FtZXJhX2FuZ2xlGA0gASgISAyIAQESPgoIdmlld19kaWMYDiADKAsy",
            "LC5Qcm90b2NvbC5DaGFyYWN0ZXJDdHJsU3luY0RhdGEuVmlld0RpY0VudHJ5",
            "Gi4KDFZpZXdEaWNFbnRyeRILCgNrZXkYASABKA0SDQoFdmFsdWUYAiABKA06",
            "AjgBQg0KC19tb3ZlX3N0YXRlQg0KC19tb3ZlX2FuZ2xlQgsKCV92aWV3X3Jv",
            "d0INCgtfdmlld19waXRjaEIPCg1fYWN0aW9uX3NwZWVkQg8KDV9kaXNhYmxl",
            "X21vdmVCEwoRX2Rpc2FibGVfcm90YXRpb25CEgoQX21vdmVfY29udHJvbGxl",
            "ckILCglfaXNfc3RhcnRCCAoGX3dpZHRoQgkKB19oZWlnaHRCEgoQX2Rpc2Fi",
            "bGVfaGl0X2JveEIcChpfY2FuY2VsX3R3ZWVuX2NhbWVyYV9hbmdsZSLoAwoQ",
            "VGltZWxpbmVTeW5jRGF0YRIWCglza2lsbF91aWQYASABKARIAIgBARIWCglq",
            "dW1wX3RpbWUYAiABKAJIAYgBARIaCg10aW1lbGluZV9uYW1lGAMgASgJSAKI",
            "AQESKAoJc2tpbGxfcG9zGAQgASgLMhAuUHJvdG9jb2wuRmxvYXQzSAOIAQES",
            "PQoKdGFyZ2V0X2lkcxgFIAMoCzIpLlByb3RvY29sLlRpbWVsaW5lU3luY0Rh",
            "dGEuVGFyZ2V0SWRzRW50cnkSPQoKcmVzdWx0X2lkcxgGIAMoCzIpLlByb3Rv",
            "Y29sLlRpbWVsaW5lU3luY0RhdGEuUmVzdWx0SWRzRW50cnkSLQoOc2tpbGxf",
            "cm90YXRpb24YByABKAsyEC5Qcm90b2NvbC5GbG9hdDNIBIgBARowCg5UYXJn",
            "ZXRJZHNFbnRyeRILCgNrZXkYASABKA0SDQoFdmFsdWUYAiABKA06AjgBGjAK",
            "DlJlc3VsdElkc0VudHJ5EgsKA2tleRgBIAEoDRINCgV2YWx1ZRgCIAEoDToC",
            "OAFCDAoKX3NraWxsX3VpZEIMCgpfanVtcF90aW1lQhAKDl90aW1lbGluZV9u",
            "YW1lQgwKCl9za2lsbF9wb3NCEQoPX3NraWxsX3JvdGF0aW9uIpUFChdQcm9w",
            "Q29sbGVjdGlvbnNTeW5jRGF0YRJNCg93ZWFwb25fc2xvdF9kaWMYBSADKAsy",
            "NC5Qcm90b2NvbC5Qcm9wQ29sbGVjdGlvbnNTeW5jRGF0YS5XZWFwb25TbG90",
            "RGljRW50cnkSSQoNYW5xaV9zbG90X2RpYxgGIAMoCzIyLlByb3RvY29sLlBy",
            "b3BDb2xsZWN0aW9uc1N5bmNEYXRhLkFucWlTbG90RGljRW50cnkSTwoQZ3Jv",
            "Y2VyeV9zbG90X2RpYxgHIAMoCzI1LlByb3RvY29sLlByb3BDb2xsZWN0aW9u",
            "c1N5bmNEYXRhLkdyb2NlcnlTbG90RGljRW50cnkSVwoUcHJvcF9jb2xsZWN0",
            "aW9uc19kaWMYCSADKAsyOS5Qcm90b2NvbC5Qcm9wQ29sbGVjdGlvbnNTeW5j",
            "RGF0YS5Qcm9wQ29sbGVjdGlvbnNEaWNFbnRyeRpMChJXZWFwb25TbG90RGlj",
            "RW50cnkSCwoDa2V5GAEgASgNEiUKBXZhbHVlGAIgASgLMhYuUHJvdG9jb2wu",
            "UHJvcFNsb3REYXRhOgI4ARpKChBBbnFpU2xvdERpY0VudHJ5EgsKA2tleRgB",
            "IAEoDRIlCgV2YWx1ZRgCIAEoCzIWLlByb3RvY29sLlByb3BTbG90RGF0YToC",
            "OAEaTQoTR3JvY2VyeVNsb3REaWNFbnRyeRILCgNrZXkYASABKA0SJQoFdmFs",
            "dWUYAiABKAsyFi5Qcm90b2NvbC5Qcm9wU2xvdERhdGE6AjgBGk0KF1Byb3BD",
            "b2xsZWN0aW9uc0RpY0VudHJ5EgsKA2tleRgBIAEoBBIhCgV2YWx1ZRgCIAEo",
            "CzISLlByb3RvY29sLlByb3BEYXRhOgI4ASLMAQoRU2tpbGxDdHJsU3luY0Rh",
            "dGESGgoNbGFzdF9za2lsbF9pZBgBIAEoDUgAiAEBEj4KCnNraWxsc19kaWMY",
            "AiADKAsyKi5Qcm90b2NvbC5Ta2lsbEN0cmxTeW5jRGF0YS5Ta2lsbHNEaWNF",
            "bnRyeRpJCg5Ta2lsbHNEaWNFbnRyeRILCgNrZXkYASABKA0SJgoFdmFsdWUY",
            "AiABKAsyFy5Qcm90b2NvbC5Ta2lsbEl0ZW1EYXRhOgI4AUIQCg5fbGFzdF9z",
            "a2lsbF9pZCJSCg5XZWFwb25TeW5jRGF0YRIkChdzd2l0Y2hfd2VhcG9uX3Jl",
            "bWFpbl9jZBgBIAEoAkgAiAEBQhoKGF9zd2l0Y2hfd2VhcG9uX3JlbWFpbl9j",
            "ZCJMCgxBbnFpU3luY0RhdGESIgoVc3dpdGNoX2FucWlfcmVtYWluX2NkGAEg",
            "ASgCSACIAQFCGAoWX3N3aXRjaF9hbnFpX3JlbWFpbl9jZCKWAQoMVGFza1N5",
            "bmNEYXRhEj4KDXRhc2tfaXRlbV9kaWMYASADKAsyJy5Qcm90b2NvbC5UYXNr",
            "U3luY0RhdGEuVGFza0l0ZW1EaWNFbnRyeRpGChBUYXNrSXRlbURpY0VudHJ5",
            "EgsKA2tleRgBIAEoDRIhCgV2YWx1ZRgCIAEoCzISLlByb3RvY29sLlRhc2tJ",
            "dGVtOgI4ASLuBAoQSW5zYW5pdHlTeW5jRGF0YRIcCg9jYXRjaF9lbnRpdHlf",
            "aWQYASABKA1IAIgBARIdChBtYXN0ZXJfZW50aXR5X2lkGAIgASgNSAGIAQES",
            "FAoHaGVyb19pZBgDIAEoDUgCiAEBEhQKB3NraW5faWQYBCABKA1IA4gBARIb",
            "Cg5pc19zaGllbGRfd2VhaxgGIAEoCEgEiAEBEiEKFHRodW5kZXJfYXR0YWNr",
            "X2NvdW50GAcgASgNSAWIAQESIgoVbGFzdF9hZGRfdGh1bmRlcl90aW1lGAgg",
            "ASgCSAaIAQESQAoMdmFfc3RhdGVfZGljGAogAygLMiouUHJvdG9jb2wuSW5z",
            "YW5pdHlTeW5jRGF0YS5WYVN0YXRlRGljRW50cnkSEgoFaXNfYWkYCyABKAhI",
            "B4gBARJACgxkZWJ1Z192YV9kaWMYDCADKAsyKi5Qcm90b2NvbC5JbnNhbml0",
            "eVN5bmNEYXRhLkRlYnVnVmFEaWNFbnRyeRoxCg9WYVN0YXRlRGljRW50cnkS",
            "CwoDa2V5GAEgASgNEg0KBXZhbHVlGAIgASgFOgI4ARoxCg9EZWJ1Z1ZhRGlj",
            "RW50cnkSCwoDa2V5GAEgASgNEg0KBXZhbHVlGAIgASgFOgI4AUISChBfY2F0",
            "Y2hfZW50aXR5X2lkQhMKEV9tYXN0ZXJfZW50aXR5X2lkQgoKCF9oZXJvX2lk",
            "QgoKCF9za2luX2lkQhEKD19pc19zaGllbGRfd2Vha0IXChVfdGh1bmRlcl9h",
            "dHRhY2tfY291bnRCGAoWX2xhc3RfYWRkX3RodW5kZXJfdGltZUIICgZfaXNf",
            "YWki6wEKCFRhc2tJdGVtEg8KAmlkGAEgASgNSACIAQESFwoKdGFza19zdGF0",
            "ZRgCIAEoDUgBiAEBEkkKFXRhc2tfZGV0YWlsX3BhcmFtX2RpYxgDIAMoCzIq",
            "LlByb3RvY29sLlRhc2tJdGVtLlRhc2tEZXRhaWxQYXJhbURpY0VudHJ5GlQK",
            "F1Rhc2tEZXRhaWxQYXJhbURpY0VudHJ5EgsKA2tleRgBIAEoDRIoCgV2YWx1",
            "ZRgCIAEoCzIZLlByb3RvY29sLlRhc2tEZXRhaWxQYXJhbToCOAFCBQoDX2lk",
            "Qg0KC190YXNrX3N0YXRlIkMKD1Rhc2tEZXRhaWxQYXJhbRIPCgJpZBgBIAEo",
            "DUgAiAEBEhAKA251bRgDIAEoDUgBiAEBQgUKA19pZEIGCgRfbnVtIvgBCgxQ",
            "cm9wU2xvdERhdGESDwoCaWQYASABKA1IAIgBARIqCglwcm9wX3R5cGUYAiAB",
            "KA4yEi5Qcm90b2NvbC5Qcm9wVHlwZUgBiAEBEhgKC3Byb3BfY2ZnX2lkGAMg",
            "ASgNSAKIAQESOgoLcHJvcF9pZF9kaWMYBCADKAsyJS5Qcm90b2NvbC5Qcm9w",
            "U2xvdERhdGEuUHJvcElkRGljRW50cnkaMAoOUHJvcElkRGljRW50cnkSCwoD",
            "a2V5GAEgASgEEg0KBXZhbHVlGAIgASgFOgI4AUIFCgNfaWRCDAoKX3Byb3Bf",
            "dHlwZUIOCgxfcHJvcF9jZmdfaWQikQEKEEJ1ZmZDdHJsU3luY0RhdGESOQoI",
            "YnVmZl9kaWMYASADKAsyJy5Qcm90b2NvbC5CdWZmQ3RybFN5bmNEYXRhLkJ1",
            "ZmZEaWNFbnRyeRpCCgxCdWZmRGljRW50cnkSCwoDa2V5GAEgASgNEiEKBXZh",
            "bHVlGAIgASgLMhIuUHJvdG9jb2wuQnVmZkl0ZW06AjgBIv4BCghCdWZmSXRl",
            "bRIPCgJpZBgBIAEoDUgAiAEBEhUKCGFkZF90aW1lGAIgASgCSAGIAQESFwoK",
            "YnVmZl9jb3VudBgDIAEoDUgCiAEBEhcKCnNvdXJjZV9lSWQYBCABKA1IA4gB",
            "ARIfChJidWZmX3RyaWdnZXJfY291bnQYBSABKA1IBIgBARIbCg5wYXJlbnRf",
            "YnVmZl9pZBgGIAEoDUgFiAEBQgUKA19pZEILCglfYWRkX3RpbWVCDQoLX2J1",
            "ZmZfY291bnRCDQoLX3NvdXJjZV9lSWRCFQoTX2J1ZmZfdHJpZ2dlcl9jb3Vu",
            "dEIRCg9fcGFyZW50X2J1ZmZfaWQi2AEKDkZvbGxvd1N5bmNEYXRhEhYKCWZv",
            "bGxvd2luZxgBIAEoCEgAiAEBEh0KEGZvbGxvd19lbnRpdHlfaWQYAiABKA1I",
            "AYgBARIuCg9vZmZzZXRfcG9zaXRpb24YAyABKAsyEC5Qcm90b2NvbC5GbG9h",
            "dDNIAogBARIYCgtzdG9wX2ZvbGxvdxgEIAEoCEgDiAEBQgwKCl9mb2xsb3dp",
            "bmdCEwoRX2ZvbGxvd19lbnRpdHlfaWRCEgoQX29mZnNldF9wb3NpdGlvbkIO",
            "Cgxfc3RvcF9mb2xsb3ciNQoNU2tpbGxJdGVtRGF0YRIWCglyZW1haW5fY2QY",
            "ASABKAJIAIgBAUIMCgpfcmVtYWluX2NkIm8KC0hpdEluZm9EYXRhEiQKBXBv",
            "aW50GAEgASgLMhAuUHJvdG9jb2wuRmxvYXQzSACIAQESJQoGbm9ybWFsGAIg",
            "ASgLMhAuUHJvdG9jb2wuRmxvYXQzSAGIAQFCCAoGX3BvaW50QgkKB19ub3Jt",
            "YWwivQYKEEhpdENoZWNrU3luY0RhdGESRAoOaGl0X2VudGl0eV9kaWMYASAD",
            "KAsyLC5Qcm90b2NvbC5IaXRDaGVja1N5bmNEYXRhLkhpdEVudGl0eURpY0Vu",
            "dHJ5EjsKCWhpdF9pbmZvcxgCIAMoCzIoLlByb3RvY29sLkhpdENoZWNrU3lu",
            "Y0RhdGEuSGl0SW5mb3NFbnRyeRIaCg1pc19oaXRfZW50aXR5GAMgASgISACI",
            "AQESHwoSaXNfaGl0X2Vudmlyb25tZW50GAQgASgISAGIAQESIwoEc2l6ZRgF",
            "IAEoCzIQLlByb3RvY29sLkZsb2F0M0gCiAEBEhoKDXVzZWRfYm94X2Nhc3QY",
            "BiABKAhIA4gBARJLChJtdWxfaGl0X2VudGl0eV9kaWMYByADKAsyLy5Qcm90",
            "b2NvbC5IaXRDaGVja1N5bmNEYXRhLk11bEhpdEVudGl0eURpY0VudHJ5EkMK",
            "DWlnbm9yZV9lbnRpdHkYCCADKAsyLC5Qcm90b2NvbC5IaXRDaGVja1N5bmNE",
            "YXRhLklnbm9yZUVudGl0eUVudHJ5EiAKE2NyZWF0ZWRfZW50aXR5X3R5cGUY",
            "CSABKA1IBIgBARIbCg5jb2xsaWRlcl9vcmRlchgKIAEoDUgFiAEBGjMKEUhp",
            "dEVudGl0eURpY0VudHJ5EgsKA2tleRgBIAEoDRINCgV2YWx1ZRgCIAEoDToC",
            "OAEaRgoNSGl0SW5mb3NFbnRyeRILCgNrZXkYASABKAUSJAoFdmFsdWUYAiAB",
            "KAsyFS5Qcm90b2NvbC5IaXRJbmZvRGF0YToCOAEaNgoUTXVsSGl0RW50aXR5",
            "RGljRW50cnkSCwoDa2V5GAEgASgNEg0KBXZhbHVlGAIgASgNOgI4ARozChFJ",
            "Z25vcmVFbnRpdHlFbnRyeRILCgNrZXkYASABKA0SDQoFdmFsdWUYAiABKAI6",
            "AjgBQhAKDl9pc19oaXRfZW50aXR5QhUKE19pc19oaXRfZW52aXJvbm1lbnRC",
            "BwoFX3NpemVCEAoOX3VzZWRfYm94X2Nhc3RCFgoUX2NyZWF0ZWRfZW50aXR5",
            "X3R5cGVCEQoPX2NvbGxpZGVyX29yZGVyInUKC05hdlN5bmNEYXRhEhcKCndh",
            "eV9tYXBfaWQYASABKA1IAIgBARIsCg1uZXh0X3Bvc2l0aW9uGAIgASgLMhAu",
            "UHJvdG9jb2wuRmxvYXQzSAGIAQFCDQoLX3dheV9tYXBfaWRCEAoOX25leHRf",
            "cG9zaXRpb24i+QIKDEdvYXBTeW5jRGF0YRIbCg5wbGF5X2FuaW1hdGlvbhgB",
            "IAEoDUgAiAEBEi4KD2Rlc3Rpbl9wb3NpdGlvbhgCIAEoCzIQLlByb3RvY29s",
            "LkZsb2F0M0gBiAEBEhwKD2dvYXBfYXNzZXRfcGF0aBgDIAEoCUgCiAEBEh0K",
            "EGFyY2hpdGVjdHVyZV9ucGMYBCABKAhIA4gBARIhChRhcmNoaXRlY3R1cmVf",
            "YmluZF9pZBgFIAEoDUgEiAEBEj0KEWNsdXN0ZXJfY2hhdF9kYXRhGAYgASgL",
            "Mh0uUHJvdG9jb2wuQ2x1c3RlckNoYXRTeW5jRGF0YUgFiAEBQhEKD19wbGF5",
            "X2FuaW1hdGlvbkISChBfZGVzdGluX3Bvc2l0aW9uQhIKEF9nb2FwX2Fzc2V0",
            "X3BhdGhCEwoRX2FyY2hpdGVjdHVyZV9ucGNCFwoVX2FyY2hpdGVjdHVyZV9i",
            "aW5kX2lkQhQKEl9jbHVzdGVyX2NoYXRfZGF0YSKNAQoTQ2x1c3RlckNoYXRT",
            "eW5jRGF0YRIXCgpjbHVzdGVyX2lkGAEgASgNSACIAQESGwoOYXNzaWduX2Ns",
            "dXN0ZXIYAiABKAhIAYgBARITCgZsaXN0ZW4YAyABKAhIAogBAUINCgtfY2x1",
            "c3Rlcl9pZEIRCg9fYXNzaWduX2NsdXN0ZXJCCQoHX2xpc3RlbiJ8CgxHYXpl",
            "U3luY0RhdGESGwoOb3Blbl9nYXplX2Z1bmMYASABKAhIAIgBARISCgVhbmds",
            "ZRgCIAEoAkgBiAEBEhMKBnJhZGl1cxgDIAEoAkgCiAEBQhEKD19vcGVuX2dh",
            "emVfZnVuY0IICgZfYW5nbGVCCQoHX3JhZGl1cyLNAQoUQXJjaGl0ZWN0dXJl",
            "U3luY0RhdGESFgoJYXJjaGl0X2lkGAEgASgNSACIAQESPQoIbGluZV9kaWMY",
            "AiADKAsyKy5Qcm90b2NvbC5BcmNoaXRlY3R1cmVTeW5jRGF0YS5MaW5lRGlj",
            "RW50cnkaUAoMTGluZURpY0VudHJ5EgsKA2tleRgBIAEoDRIvCgV2YWx1ZRgC",
            "IAEoCzIgLlByb3RvY29sLkFyY2hpdGVjdHVyZUxpbmVVcEluZm86AjgBQgwK",
            "Cl9hcmNoaXRfaWQi5gEKFkFyY2hpdGVjdHVyZUxpbmVVcEluZm8SFQoIbGlu",
            "ZV9pZHgYASABKA1IAIgBARInCghwb3NpdGlvbhgCIAEoCzIQLlByb3RvY29s",
            "LkZsb2F0M0gBiAEBEicKCHJvdGF0aW9uGAMgASgLMhAuUHJvdG9jb2wuRmxv",
            "YXQzSAKIAQESEQoEdXNlZBgEIAEoCEgDiAEBEhQKB2VudGVyZWQYBSABKAhI",
            "BIgBAUILCglfbGluZV9pZHhCCwoJX3Bvc2l0aW9uQgsKCV9yb3RhdGlvbkIH",
            "CgVfdXNlZEIKCghfZW50ZXJlZCJdCgtIb3RTeW5jRGF0YRIVCghwb2ludF9p",
            "ZBgBIAEoBUgAiAEBEhkKDHBpY2tpbmdfdGltZRgCIAEoAkgBiAEBQgsKCV9w",
            "b2ludF9pZEIPCg1fcGlja2luZ190aW1lIoIECgxBcmVhU3luY0RhdGESLwoV",
            "c2lkZV9wb2ludF9tZXJnZV9saXN0GAEgAygLMhAuUHJvdG9jb2wuRmxvYXQz",
            "EhMKBnJhZGl1cxgCIAEoAkgAiAEBEhsKDmhpZGVfc2lkZV9saW5lGAMgASgI",
            "SAGIAQESNQoOYXJlYUFjdGlvblR5cGUYBCABKA4yGC5Qcm90b2NvbC5BcmVh",
            "QWN0aW9uVHlwZUgCiAEBEg8KAmlkGAUgASgNSAOIAQESQAoOYXJlYV9zdGFu",
            "ZF9kaWMYBiADKAsyKC5Qcm90b2NvbC5BcmVhU3luY0RhdGEuQXJlYVN0YW5k",
            "RGljRW50cnkSGgoNbWF4X25wY19jb3VudBgHIAEoDUgEiAEBEhYKCWZyZXF1",
            "ZW5jeRgIIAEoAkgFiAEBEhkKDHBvd2VyX3JhZGl1cxgJIAEoAkgGiAEBGk0K",
            "EUFyZWFTdGFuZERpY0VudHJ5EgsKA2tleRgBIAEoDRInCgV2YWx1ZRgCIAEo",
            "CzIYLlByb3RvY29sLkFyZWFTdGFuZFBvaW50OgI4AUIJCgdfcmFkaXVzQhEK",
            "D19oaWRlX3NpZGVfbGluZUIRCg9fYXJlYUFjdGlvblR5cGVCBQoDX2lkQhAK",
            "Dl9tYXhfbnBjX2NvdW50QgwKCl9mcmVxdWVuY3lCDwoNX3Bvd2VyX3JhZGl1",
            "cyKqAwoTUGFzc2VyQnJhaW5TeW5jRGF0YRIpCgVzdGF0ZRgBIAEoDjIVLlBy",
            "b3RvY29sLlBhc3NlclN0YXRlSACIAQESEwoGYWN0aW9uGAIgASgFSAGIAQES",
            "EwoGbnBjX2lkGAMgASgNSAKIAQESFQoIYnRfc3RhdGUYBCABKA1IA4gBARIq",
            "CgdzdWJUeXBlGAUgASgOMhQuUHJvdG9jb2wuTnBjU3ViVHlwZUgEiAEBEhkK",
            "DHVzZV9idF9hZ2VudBgGIAEoCEgFiAEBEhcKCnN0YW5kX3RpbWUYByABKAJI",
            "BogBARIfChJwcmVfbWluX3N0YW5kX3RpbWUYCCABKAJIB4gBARIfChJwcmVf",
            "bWF4X3N0YW5kX3RpbWUYCSABKAJICIgBAUIICgZfc3RhdGVCCQoHX2FjdGlv",
            "bkIJCgdfbnBjX2lkQgsKCV9idF9zdGF0ZUIKCghfc3ViVHlwZUIPCg1fdXNl",
            "X2J0X2FnZW50Qg0KC19zdGFuZF90aW1lQhUKE19wcmVfbWluX3N0YW5kX3Rp",
            "bWVCFQoTX3ByZV9tYXhfc3RhbmRfdGltZSK1AgoNR3VhcmRTeW5jRGF0YRIo",
            "CgVzdGF0ZRgBIAEoDjIULlByb3RvY29sLkd1YXJkU3RhdGVIAIgBARITCgZh",
            "Y3Rpb24YAiABKAVIAYgBARITCgZucGNfaWQYAyABKA1IAogBARIaCg1ndWFy",
            "ZF9hcmVhX2lkGAQgASgNSAOIAQESFQoIYnRfc3RhdGUYBSABKA1IBIgBARIq",
            "CgdzdWJUeXBlGAYgASgOMhQuUHJvdG9jb2wuTnBjU3ViVHlwZUgFiAEBEhcK",
            "CnN0YW5kX3RpbWUYByABKAJIBogBAUIICgZfc3RhdGVCCQoHX2FjdGlvbkIJ",
            "CgdfbnBjX2lkQhAKDl9ndWFyZF9hcmVhX2lkQgsKCV9idF9zdGF0ZUIKCghf",
            "c3ViVHlwZUINCgtfc3RhbmRfdGltZSKNAgoPUGVkZGxlclN5bmNEYXRhEioK",
            "BXN0YXRlGAEgASgOMhYuUHJvdG9jb2wuUGVkZGxlclN0YXRlSACIAQESEwoG",
            "YWN0aW9uGAIgASgFSAGIAQESEwoGbnBjX2lkGAMgASgNSAKIAQESGAoLZm9j",
            "dXNBcmVhSWQYBCABKA1IA4gBARIVCghidF9zdGF0ZRgFIAEoDUgEiAEBEioK",
            "B3N1YlR5cGUYBiABKA4yFC5Qcm90b2NvbC5OcGNTdWJUeXBlSAWIAQFCCAoG",
            "X3N0YXRlQgkKB19hY3Rpb25CCQoHX25wY19pZEIOCgxfZm9jdXNBcmVhSWRC",
            "CwoJX2J0X3N0YXRlQgoKCF9zdWJUeXBlIqsHCg9GbHlJdGVtU3luY0RhdGES",
            "QAoMZWZmZWN0X2dyb3VwGAEgAygLMiouUHJvdG9jb2wuRmx5SXRlbVN5bmNE",
            "YXRhLkVmZmVjdEdyb3VwRW50cnkSLgoPYXR0YWNrX2JveF9zaXplGAIgASgL",
            "MhAuUHJvdG9jb2wuRmxvYXQzSACIAQESEwoGZHVyaW5nGAQgASgCSAGIAQES",
            "GwoOZGVzdG9yeV9vbl9oaXQYBSABKAhIAogBARIXCg9hdHRhY2tfdGFnX2xp",
            "c3QYBiADKA0SLgoQZW50aXR5X3R5cGVfbGlzdBgHIAMoDjIULlByb3RvY29s",
            "LkVudGl0eVR5cGUSFQoIb3duZXJfaWQYCCABKA1IA4gBARIdChBpc19pbmZp",
            "bml0eV90aW1lGAkgASgISASIAQESGAoLaGl0X2Zvcl9hbGwYCiABKAhIBYgB",
            "ARIqCgR0eXBlGAsgASgOMhcuUHJvdG9jb2wuRmx5RW50aXR5VHlwZUgGiAEB",
            "EkcKEGVudl9lZmZlY3RfZ3JvdXAYDCADKAsyLS5Qcm90b2NvbC5GbHlJdGVt",
            "U3luY0RhdGEuRW52RWZmZWN0R3JvdXBFbnRyeRIiChVkZXN0b3J5X29uX2hp",
            "dF9lbnRpdHkYDSABKAhIB4gBARIfChJkZXN0b3J5X29uX2hpdF9lbnYYDiAB",
            "KAhICIgBARImChlkZXN0b3J5X29uX2hpdF90YWdfZW50aXR5GA8gASgISAmI",
            "AQESFwoKaGl0X215c2VsZhgQIAEoCEgKiAEBEhkKDGhpdF9hbGxfY2FtcBgR",
            "IAEoCEgLiAEBGjIKEEVmZmVjdEdyb3VwRW50cnkSCwoDa2V5GAEgASgNEg0K",
            "BXZhbHVlGAIgASgJOgI4ARo1ChNFbnZFZmZlY3RHcm91cEVudHJ5EgsKA2tl",
            "eRgBIAEoDRINCgV2YWx1ZRgCIAEoCToCOAFCEgoQX2F0dGFja19ib3hfc2l6",
            "ZUIJCgdfZHVyaW5nQhEKD19kZXN0b3J5X29uX2hpdEILCglfb3duZXJfaWRC",
            "EwoRX2lzX2luZmluaXR5X3RpbWVCDgoMX2hpdF9mb3JfYWxsQgcKBV90eXBl",
            "QhgKFl9kZXN0b3J5X29uX2hpdF9lbnRpdHlCFQoTX2Rlc3Rvcnlfb25faGl0",
            "X2VudkIcChpfZGVzdG9yeV9vbl9oaXRfdGFnX2VudGl0eUINCgtfaGl0X215",
            "c2VsZkIPCg1faGl0X2FsbF9jYW1wIrgBChRDdXN0b21FbnRpdHlTeW5jRGF0",
            "YRITCgZkdXJpbmcYAiABKAJIAIgBARIVCghvd25lcl9pZBgDIAEoDUgBiAEB",
            "EhYKCWRhbWFnZV9pZBgEIAEoDUgCiAEBEi0KBHR5cGUYBSABKA4yGi5Qcm90",
            "b2NvbC5DdXN0b21FbnRpdHlUeXBlSAOIAQFCCQoHX2R1cmluZ0ILCglfb3du",
            "ZXJfaWRCDAoKX2RhbWFnZV9pZEIHCgVfdHlwZSKqAQoMTmVzdFN5bmNEYXRh",
            "EhYKCXNvdXJjZV9pZBgBIAEoDUgAiAEBEhgKC25lc3RfY2ZnX2lkGAMgASgN",
            "SAGIAQESFAoHbmVzdF9ocBgEIAEoAkgCiAEBEhgKC25lc3RfbWF4X2hwGAUg",
            "ASgCSAOIAQFCDAoKX3NvdXJjZV9pZEIOCgxfbmVzdF9jZmdfaWRCCgoIX25l",
            "c3RfaHBCDgoMX25lc3RfbWF4X2hwIqACCg5MYWRkZXJTeW5jRGF0YRIWCgls",
            "YWRkZXJfaWQYASABKA1IAIgBARInCg1zdGFydF9wb3N0aW9uGAIgAygLMhAu",
            "UHJvdG9jb2wuRmxvYXQ0EiUKC2VuZF9wb3N0aW9uGAMgAygLMhAuUHJvdG9j",
            "b2wuRmxvYXQ0EhMKBmR1cmluZxgEIAEoAkgBiAEBEjAKCGNvbGxpZGVyGAUg",
            "ASgLMhkuUHJvdG9jb2wuQm94Q29sbGlkZXJEYXRhSAKIAQESLQoHc3ViVHlw",
            "ZRgGIAEoDjIXLlByb3RvY29sLkxhZGRlclN1YlR5cGVIA4gBAUIMCgpfbGFk",
            "ZGVyX2lkQgkKB19kdXJpbmdCCwoJX2NvbGxpZGVyQgoKCF9zdWJUeXBlIqoB",
            "ChNMYWRkZXJDaGVja1N5bmNEYXRhEhYKCXVzZV90aW1lcxgBIAEoBUgAiAEB",
            "EhEKCW5lZWRfcHJvcBgCIAMoDRIYCgtob3RfYXJlYV9pZBgDIAEoDUgBiAEB",
            "EhwKD2hvdF9hcmVhX25wY19pZBgEIAEoDUgCiAEBQgwKCl91c2VfdGltZXNC",
            "DgoMX2hvdF9hcmVhX2lkQhIKEF9ob3RfYXJlYV9ucGNfaWQingYKDVRoaW5n",
            "U3luY0RhdGESFQoIdGhpbmdfaWQYASABKARIAIgBARIPCgJpZBgCIAEoDUgB",
            "iAEBEjAKCGNvbGxpZGVyGAMgASgLMhkuUHJvdG9jb2wuQm94Q29sbGlkZXJE",
            "YXRhSAKIAQESPwoNcHJvcF9kYXRhX2RpYxgEIAMoCzIoLlByb3RvY29sLlRo",
            "aW5nU3luY0RhdGEuUHJvcERhdGFEaWNFbnRyeRJFChB2aXJ0dWFsX3Byb3Bf",
            "ZGljGAUgAygLMisuUHJvdG9jb2wuVGhpbmdTeW5jRGF0YS5WaXJ0dWFsUHJv",
            "cERpY0VudHJ5EhIKBWNvdW50GAYgASgNSAOIAQESFgoJZHJvcF90aW1lGAcg",
            "ASgCSASIAQESHAoPYm9ybl9zdGFydF90aW1lGAggASgCSAWIAQESFQoIb3du",
            "ZXJfaWQYCSABKA1IBogBARIuCg9vZmZzZXRfcG9zaXRpb24YCiABKAsyEC5Q",
            "cm90b2NvbC5GbG9hdDNIB4gBARItCghzdWJfdHlwZRgLIAEoDjIWLlByb3Rv",
            "Y29sLlRoaW5nU3ViVHlwZUgIiAEBEh0KEGZvbGxvd190YXJnZXRfaWQYDCAB",
            "KA1ICYgBARIVCghzdGF0ZV9pZBgNIAEoDUgKiAEBGkYKEFByb3BEYXRhRGlj",
            "RW50cnkSCwoDa2V5GAEgASgEEiEKBXZhbHVlGAIgASgLMhIuUHJvdG9jb2wu",
            "UHJvcERhdGE6AjgBGlAKE1ZpcnR1YWxQcm9wRGljRW50cnkSCwoDa2V5GAEg",
            "ASgEEigKBXZhbHVlGAIgASgLMhkuUHJvdG9jb2wuVmlydHVhbFByb3BEYXRh",
            "OgI4AUILCglfdGhpbmdfaWRCBQoDX2lkQgsKCV9jb2xsaWRlckIICgZfY291",
            "bnRCDAoKX2Ryb3BfdGltZUISChBfYm9ybl9zdGFydF90aW1lQgsKCV9vd25l",
            "cl9pZEISChBfb2Zmc2V0X3Bvc2l0aW9uQgsKCV9zdWJfdHlwZUITChFfZm9s",
            "bG93X3RhcmdldF9pZEILCglfc3RhdGVfaWQi6AUKDEhlcm9TeW5jRGF0YRIU",
            "CgdoZXJvX2lkGAEgASgNSACIAQESFAoHc2tpbl9pZBgCIAEoDUgBiAEBEhQK",
            "B3Nob3VodWEYBCABKAhIAogBARIdChBzaG91aHVhX2VuZF90aW1lGAUgASgC",
            "SAOIAQESGQoMYXR0YWNrX2NvbWJvGAYgASgNSASIAQESFwoKaXNfcGhhbnRv",
            "bRgHIAEoCEgFiAEBEhYKCW1hc3Rlcl9pZBgIIAEoDUgGiAEBEhYKCWd1bGlu",
            "Z19pZBgJIAEoDUgHiAEBEhYKCWhlcm9MZXZlbBgKIAEoDUgIiAEBEhQKB2hl",
            "cm9FeHAYCyABKA1ICYgBARIXCgpzaG9vdF90aW1lGAwgASgCSAqIAQESPAoM",
            "dmFfc3RhdGVfZGljGA0gAygLMiYuUHJvdG9jb2wuSGVyb1N5bmNEYXRhLlZh",
            "U3RhdGVEaWNFbnRyeRIbCg5zaG90X3RhcmdldF9pZBgPIAEoDUgLiAEBEhIK",
            "BWlzX2FpGBAgASgISAyIAQESPAoMZGVidWdfdmFfZGljGBEgAygLMiYuUHJv",
            "dG9jb2wuSGVyb1N5bmNEYXRhLkRlYnVnVmFEaWNFbnRyeRoxCg9WYVN0YXRl",
            "RGljRW50cnkSCwoDa2V5GAEgASgNEg0KBXZhbHVlGAIgASgFOgI4ARoxCg9E",
            "ZWJ1Z1ZhRGljRW50cnkSCwoDa2V5GAEgASgNEg0KBXZhbHVlGAIgASgFOgI4",
            "AUIKCghfaGVyb19pZEIKCghfc2tpbl9pZEIKCghfc2hvdWh1YUITChFfc2hv",
            "dWh1YV9lbmRfdGltZUIPCg1fYXR0YWNrX2NvbWJvQg0KC19pc19waGFudG9t",
            "QgwKCl9tYXN0ZXJfaWRCDAoKX2d1bGluZ19pZEIMCgpfaGVyb0xldmVsQgoK",
            "CF9oZXJvRXhwQg0KC19zaG9vdF90aW1lQhEKD19zaG90X3RhcmdldF9pZEII",
            "CgZfaXNfYWkiOQoPV2FybmluZ1N5bmNEYXRhEhcKCm5vdGljZV9lSWQYASAB",
            "KA1IAIgBAUINCgtfbm90aWNlX2VJZCJOCgxCYWxsU3luY0RhdGESFAoHcHJv",
            "cF9pZBgCIAEoDUgAiAEBEhIKBXBvd2VyGAMgASgCSAGIAQFCCgoIX3Byb3Bf",
            "aWRCCAoGX3Bvd2VyIuEBCg1TbW9rZVN5bmNEYXRhEhcKCnNvdXJjZV9lSWQY",
            "ASABKA1IAIgBARIYCgt2b2ljZV9yYW5nZRgCIAEoAkgBiAEBEhgKC2FmZmVj",
            "dF90aW1lGAMgASgCSAKIAQESGQoMYWZmZWN0X3JhbmdlGAQgASgCSAOIAQES",
            "GAoLZWZmZWN0X25hbWUYBSABKAlIBIgBAUINCgtfc291cmNlX2VJZEIOCgxf",
            "dm9pY2VfcmFuZ2VCDgoMX2FmZmVjdF90aW1lQg8KDV9hZmZlY3RfcmFuZ2VC",
            "DgoMX2VmZmVjdF9uYW1lIm0KEUp1bXBQb2ludFN5bmNEYXRhEhIKBXdpZHRo",
            "GAEgASgCSACIAQESEwoGaGVpZ2h0GAIgASgCSAGIAQESEQoEdHlwZRgDIAEo",
            "BUgCiAEBQggKBl93aWR0aEIJCgdfaGVpZ2h0QgcKBV90eXBlImcKEUhpZGVT",
            "dGF0ZVN5bmNEYXRhEhQKB2lzX2hpZGUYASABKAhIAIgBARIcCg9oaWRlX3N0",
            "YXJ0X3RpbWUYAiABKAJIAYgBAUIKCghfaXNfaGlkZUISChBfaGlkZV9zdGFy",
            "dF90aW1lIsEBCg9Nb25zdGVyU3luY0RhdGESEwoGbnBjX2lkGAEgASgNSACI",
            "AQESFQoIYnRfc3RhdGUYAiABKA1IAYgBARIrCgxvcmlnaW5fcG9pbnQYAyAB",
            "KAsyEC5Qcm90b2NvbC5GbG9hdDNIAogBARIaCg1hdHRhY2tfcmFkaXVzGAQg",
            "ASgCSAOIAQFCCQoHX25wY19pZEILCglfYnRfc3RhdGVCDwoNX29yaWdpbl9w",
            "b2ludEIQCg5fYXR0YWNrX3JhZGl1cyKcBAoQUGh5c2NpYWxTeW5jRGF0YRIU",
            "CgdkaXNhYmxlGAEgASgISACIAQESFgoJaXNfZ3JvdW5kGAIgASgISAGIAQES",
            "EQoEbWFzcxgDIAEoAkgCiAEBEiQKBXNwZWVkGAQgASgLMhAuUHJvdG9jb2wu",
            "RmxvYXQzSAOIAQESIwoWbG9zZV9tb21lbnR1bVhaX29uX2hpdBgFIAEoDUgE",
            "iAEBEiIKFWxvc2VfbW9tZW50dW1ZX29uX2hpdBgGIAEoDUgFiAEBEiAKE2Zv",
            "cndhcmRfZm9sbG93X21vdmUYByABKAhIBogBARIZCgxhY2NlbGVyYXRpb24Y",
            "CCABKAJIB4gBARIfChJtaW5fZ3Jhdml0eV9mYWN0b3IYCSABKA1ICIgBARIV",
            "Cghncm91cF9pZBgKIAEoDUgJiAEBEh4KEWRpc2FibGVfY29sbGlzaW9uGAsg",
            "ASgISAqIAQFCCgoIX2Rpc2FibGVCDAoKX2lzX2dyb3VuZEIHCgVfbWFzc0II",
            "CgZfc3BlZWRCGQoXX2xvc2VfbW9tZW50dW1YWl9vbl9oaXRCGAoWX2xvc2Vf",
            "bW9tZW50dW1ZX29uX2hpdEIWChRfZm9yd2FyZF9mb2xsb3dfbW92ZUIPCg1f",
            "YWNjZWxlcmF0aW9uQhUKE19taW5fZ3Jhdml0eV9mYWN0b3JCCwoJX2dyb3Vw",
            "X2lkQhQKEl9kaXNhYmxlX2NvbGxpc2lvbiJ6Cg5CYXR0bGVTeW5jRGF0YRIZ",
            "CgxiYXR0bGVfc3RhdGUYASABKA1IAIgBARIwCgd0d29WdHdvGAogASgLMhou",
            "UHJvdG9jb2wuVHdvVnNUd29TeW5jRGF0YUgBiAEBQg8KDV9iYXR0bGVfc3Rh",
            "dGVCCgoIX3R3b1Z0d28ijAQKEFR3b1ZzVHdvU3luY0RhdGESGAoLcm91bmRf",
            "Y291bnQYASABKAVIAIgBARIVCghlbmRfdGltZRgCIAEoAkgBiAEBEj0KCnRl",
            "YW1fZGF0YXMYAyADKAsyKS5Qcm90b2NvbC5Ud29Wc1R3b1N5bmNEYXRhLlRl",
            "YW1EYXRhc0VudHJ5ElEKFXdpbl9wb2ludF9yZWJvcm5fdGltZRgEIAMoCzIy",
            "LlByb3RvY29sLlR3b1ZzVHdvU3luY0RhdGEuV2luUG9pbnRSZWJvcm5UaW1l",
            "RW50cnkSOQoId2luX3RlYW0YBSADKAsyJy5Qcm90b2NvbC5Ud29Wc1R3b1N5",
            "bmNEYXRhLldpblRlYW1FbnRyeRIWCglraWxsZXJfaWQYBiABKA1IAogBARpM",
            "Cg5UZWFtRGF0YXNFbnRyeRILCgNrZXkYASABKA0SKQoFdmFsdWUYAiABKAsy",
            "Gi5Qcm90b2NvbC5Ud29Wc1R3b1RlYW1EYXRhOgI4ARo5ChdXaW5Qb2ludFJl",
            "Ym9yblRpbWVFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAI6AjgB",
            "Gi4KDFdpblRlYW1FbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKA06",
            "AjgBQg4KDF9yb3VuZF9jb3VudEILCglfZW5kX3RpbWVCDAoKX2tpbGxlcl9p",
            "ZCKJAQoQVHdvVnNUd29UZWFtRGF0YRJBCgxyb3VuZF9zY29yZXMYASADKAsy",
            "Ky5Qcm90b2NvbC5Ud29Wc1R3b1RlYW1EYXRhLlJvdW5kU2NvcmVzRW50cnka",
            "MgoQUm91bmRTY29yZXNFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiAB",
            "KAU6AjgBIkIKDEdNQ29tbWFuZFJlcRIQCghjb21tYW5kcxgBIAMoCRIUCgdz",
            "ZW5kX2lkGAIgASgNSACIAQFCCgoIX3NlbmRfaWQigwQKEUF0dGFja0JveERl",
            "YnVnTXNnEikKCmF0dGFja19wb3MYASABKAsyEC5Qcm90b2NvbC5GbG9hdDNI",
            "AIgBARIpCgphdHRhY2tfcm90GAIgASgLMhAuUHJvdG9jb2wuRmxvYXQzSAGI",
            "AQESLAoNYXR0YWNrX2NlbnRlchgDIAEoCzIQLlByb3RvY29sLkZsb2F0M0gC",
            "iAEBEioKC2F0dGFja19zaXplGAQgASgLMhAuUHJvdG9jb2wuRmxvYXQzSAOI",
            "AQESJgoHaGl0X3BvcxgFIAEoCzIQLlByb3RvY29sLkZsb2F0M0gEiAEBEiYK",
            "B2hpdF9yb3QYBiABKAsyEC5Qcm90b2NvbC5GbG9hdDNIBYgBARIpCgpoaXRf",
            "Y2VudGVyGAcgASgLMhAuUHJvdG9jb2wuRmxvYXQzSAaIAQESJwoIaGl0X3Np",
            "emUYCCABKAsyEC5Qcm90b2NvbC5GbG9hdDNIB4gBARIXCgpoaXRfcmFkaXVz",
            "GAkgASgCSAiIAQFCDQoLX2F0dGFja19wb3NCDQoLX2F0dGFja19yb3RCEAoO",
            "X2F0dGFja19jZW50ZXJCDgoMX2F0dGFja19zaXplQgoKCF9oaXRfcG9zQgoK",
            "CF9oaXRfcm90Qg0KC19oaXRfY2VudGVyQgsKCV9oaXRfc2l6ZUINCgtfaGl0",
            "X3JhZGl1cyLqAQoOVGFrZUJveFByb3BNc2cSFQoIdGhpbmdfaWQYASABKA1I",
            "AIgBARIUCgdwcm9wX2lkGAIgASgESAGIAQESEgoFdG9faWQYAyABKA1IAogB",
            "ARIXCgp0b19zbG90X2lkGAQgASgNSAOIAQESEQoEdGltZRgFIAEoAkgEiAEB",
            "EjAKFHByb3BfZGF0YV9tZXJnZV9saXN0GAogAygLMhIuUHJvdG9jb2wuUHJv",
            "cERhdGFCCwoJX3RoaW5nX2lkQgoKCF9wcm9wX2lkQggKBl90b19pZEINCgtf",
            "dG9fc2xvdF9pZEIHCgVfdGltZSJPCgtDbG9zZUJveE1zZxIVCgh0aGluZ19p",
            "ZBgBIAEoDUgAiAEBEhIKBXRvX2lkGAIgASgNSAGIAQFCCwoJX3RoaW5nX2lk",
            "QggKBl90b19pZCJbCg1QaWNrVGFsZW50TXNnEhYKCWVudGl0eV9pZBgBIAEo",
            "DUgAiAEBEhYKCXRhbGVudF9pZBgCIAEoDUgBiAEBQgwKCl9lbnRpdHlfaWRC",
            "DAoKX3RhbGVudF9pZGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Protocol.ProtoCommonReflection.Descriptor, global::Protocol.ProtoConfigReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.PbGCMsg), global::Protocol.PbGCMsg.Parser, new[]{ "UVal", "IVal", "FVal" }, new[]{ "UVal", "IVal", "FVal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ABC), global::Protocol.ABC.Parser, new[]{ "UVal", "IVal", "FVal" }, new[]{ "UVal", "IVal", "FVal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.CreateEntityNotify), global::Protocol.CreateEntityNotify.Parser, new[]{ "EntityDataDic", "BattleData" }, new[]{ "BattleData" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.DeleteEntityNotify), global::Protocol.DeleteEntityNotify.Parser, new[]{ "EntityDataDic" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ActionMoveMsg), global::Protocol.ActionMoveMsg.Parser, new[]{ "EntityId", "MoveState", "MoveAngle", "ViewRow", "ViewPitch", "IgnoreLock", "Motion", "LockTargetId" }, new[]{ "EntityId", "MoveState", "MoveAngle", "ViewRow", "ViewPitch", "IgnoreLock", "Motion", "LockTargetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ActionSkillResultMsg), global::Protocol.ActionSkillResultMsg.Parser, new[]{ "EntityId", "SkillUid", "EntityList" }, new[]{ "EntityId", "SkillUid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ActionExecuteSkillMsg), global::Protocol.ActionExecuteSkillMsg.Parser, new[]{ "EntityId", "SkillId", "SkillUid", "SkillPos", "SkillRange", "ReleaseSkillType", "LongKeyTime", "TargetEntityIdList", "SkillRotation", "TimelinePath", "KeyEvent", "FromPropId" }, new[]{ "EntityId", "SkillId", "SkillUid", "SkillPos", "SkillRange", "ReleaseSkillType", "LongKeyTime", "SkillRotation", "TimelinePath", "KeyEvent", "FromPropId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ActionStopSkillMsg), global::Protocol.ActionStopSkillMsg.Parser, new[]{ "EntityId", "SkillId" }, new[]{ "EntityId", "SkillId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ActionAddSkillReq), global::Protocol.ActionAddSkillReq.Parser, new[]{ "EntityId", "SkillId" }, new[]{ "EntityId", "SkillId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ActionAddSkillRsp), global::Protocol.ActionAddSkillRsp.Parser, new[]{ "RetCode" }, new[]{ "RetCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ActionDeleteSkillReq), global::Protocol.ActionDeleteSkillReq.Parser, new[]{ "EntityId", "SkillId" }, new[]{ "EntityId", "SkillId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ActionDeleteSkillRsp), global::Protocol.ActionDeleteSkillRsp.Parser, new[]{ "RetCode" }, new[]{ "RetCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.EntityDeadNtf), global::Protocol.EntityDeadNtf.Parser, new[]{ "EntityId", "Dead", "TargetId" }, new[]{ "EntityId", "Dead", "TargetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ChangeTimeScaleNtf), global::Protocol.ChangeTimeScaleNtf.Parser, new[]{ "ScaleValue" }, new[]{ "ScaleValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.PickThingMsg), global::Protocol.PickThingMsg.Parser, new[]{ "ThingId", "ToId", "ToSlotId", "Time", "PropDataMergeList" }, new[]{ "ThingId", "ToId", "ToSlotId", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.DestoryNestMsg), global::Protocol.DestoryNestMsg.Parser, new[]{ "BossId", "NestId" }, new[]{ "BossId", "NestId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SellProductMsg), global::Protocol.SellProductMsg.Parser, new[]{ "NpcEntityId", "SellEntityId", "SinglePrice", "PropCfgId", "PropCount", "SlotId" }, new[]{ "NpcEntityId", "SellEntityId", "SinglePrice", "PropCfgId", "PropCount", "SlotId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BuyProductMsg), global::Protocol.BuyProductMsg.Parser, new[]{ "NpcEntityId", "RecvEntityId", "Index", "PropCfgId" }, new[]{ "NpcEntityId", "RecvEntityId", "Index", "PropCfgId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.UseLadderMsg), global::Protocol.UseLadderMsg.Parser, new[]{ "LadderId", "UserId", "IsEnter" }, new[]{ "LadderId", "UserId", "IsEnter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.UsePointMsg), global::Protocol.UsePointMsg.Parser, new[]{ "UserId", "PointId" }, new[]{ "UserId", "PointId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.DropPropReq), global::Protocol.DropPropReq.Parser, new[]{ "ThingId", "SlotId", "PropDataList", "Position", "Rotation", "EntityId" }, new[]{ "ThingId", "SlotId", "Position", "Rotation", "EntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.DropPropRsp), global::Protocol.DropPropRsp.Parser, new[]{ "ThingId", "SlotId", "PropDataList", "Position", "Rotation", "EntityId" }, new[]{ "ThingId", "SlotId", "Position", "Rotation", "EntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SwapSlotMsg), global::Protocol.SwapSlotMsg.Parser, new[]{ "EntityId", "SlotIdFrom", "SlotIdTo" }, new[]{ "EntityId", "SlotIdFrom", "SlotIdTo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BreakAddToSlotMsg), global::Protocol.BreakAddToSlotMsg.Parser, new[]{ "EntityId" }, new[]{ "EntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.UsePropMsg), global::Protocol.UsePropMsg.Parser, new[]{ "EntityId", "SlotId", "Count" }, new[]{ "EntityId", "SlotId", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ActiveTaskMsg), global::Protocol.ActiveTaskMsg.Parser, new[]{ "EntityId", "TaskId", "TaskDetailParamMergeList" }, new[]{ "EntityId", "TaskId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ThrowBallMsg), global::Protocol.ThrowBallMsg.Parser, new[]{ "EntityId", "FsmId", "BallEntityId" }, new[]{ "EntityId", "FsmId", "BallEntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TaskCompleteMsg), global::Protocol.TaskCompleteMsg.Parser, new[]{ "EntityId", "TaskId", "TaskState" }, new[]{ "EntityId", "TaskId", "TaskState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ShowExposeMsg), global::Protocol.ShowExposeMsg.Parser, new[]{ "EntityId" }, new[]{ "EntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TransferNestMsg), global::Protocol.TransferNestMsg.Parser, new[]{ "EntityId", "NestEntityId" }, new[]{ "EntityId", "NestEntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.UpdateCharacterDirMsg), global::Protocol.UpdateCharacterDirMsg.Parser, new[]{ "EntityId" }, new[]{ "EntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.CreateInsanityMsg), global::Protocol.CreateInsanityMsg.Parser, new[]{ "MasterEntityId" }, new[]{ "MasterEntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ClueCollectMsg), global::Protocol.ClueCollectMsg.Parser, new[]{ "EntityId", "ClueCount" }, new[]{ "EntityId", "ClueCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.PlayerGetClueAndExitMsg), global::Protocol.PlayerGetClueAndExitMsg.Parser, new[]{ "EntityId", "ClueCount", "State" }, new[]{ "EntityId", "ClueCount", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.HitSuccessMsg), global::Protocol.HitSuccessMsg.Parser, new[]{ "OriginEntityId", "AttackedEntityDic" }, new[]{ "OriginEntityId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.GameResultMsg), global::Protocol.GameResultMsg.Parser, new[]{ "Uid", "PlayerId", "ResultState", "PropDataList", "VirtualPropList", "ClueCount", "KillCount" }, new[]{ "Uid", "PlayerId", "ResultState", "ClueCount", "KillCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TransformSyncMsg), global::Protocol.TransformSyncMsg.Parser, new[]{ "EID", "Postion", "Angle" }, new[]{ "EID", "Postion", "Angle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ActionBonfireAddWood), global::Protocol.ActionBonfireAddWood.Parser, new[]{ "OriginId", "BonfireId" }, new[]{ "OriginId", "BonfireId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ActionBonfireIgnite), global::Protocol.ActionBonfireIgnite.Parser, new[]{ "OriginId", "BonfireId" }, new[]{ "OriginId", "BonfireId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BonfireBurnRewardProp), global::Protocol.BonfireBurnRewardProp.Parser, new[]{ "PropCfgId", "Num" }, new[]{ "PropCfgId", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ActionAntidoteScatter), global::Protocol.ActionAntidoteScatter.Parser, new[]{ "OriginId", "AntidoteId" }, new[]{ "OriginId", "AntidoteId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ActionPuppetUnpinned), global::Protocol.ActionPuppetUnpinned.Parser, new[]{ "EntityId", "SubState", "Position" }, new[]{ "EntityId", "SubState", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ActionPuppetUnpinnedNtf), global::Protocol.ActionPuppetUnpinnedNtf.Parser, new[]{ "EntityId", "SubState", "Position" }, new[]{ "EntityId", "SubState", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ChangeEntityPositionMsg), global::Protocol.ChangeEntityPositionMsg.Parser, new[]{ "EntityId", "Position" }, new[]{ "EntityId", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TimelineInputMsg), global::Protocol.TimelineInputMsg.Parser, new[]{ "EntityId", "JumpTime", "TimelineName", "SkillPos", "SkillRotation", "TargetIds" }, new[]{ "EntityId", "JumpTime", "TimelineName", "SkillPos", "SkillRotation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.FixStepCostMsg), global::Protocol.FixStepCostMsg.Parser, new[]{ "CostMP", "CostEntityId" }, new[]{ "CostMP", "CostEntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.EntityStateChangeMsg), global::Protocol.EntityStateChangeMsg.Parser, new[]{ "EntityId", "State", "During" }, new[]{ "EntityId", "State", "During" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.InputKeyMsg), global::Protocol.InputKeyMsg.Parser, new[]{ "EntityId", "Evt", "Time", "IsAi" }, new[]{ "EntityId", "Evt", "Time", "IsAi" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ShowSkillInteractionMsg), global::Protocol.ShowSkillInteractionMsg.Parser, new[]{ "EntityId", "SkillId" }, new[]{ "EntityId", "SkillId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ErrorTipsMsg), global::Protocol.ErrorTipsMsg.Parser, new[]{ "EntityId", "ErrorTips" }, new[]{ "EntityId", "ErrorTips" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ChangeTagMsg), global::Protocol.ChangeTagMsg.Parser, new[]{ "EntityId", "TagId", "Val" }, new[]{ "EntityId", "TagId", "Val" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ChangeAniMsg), global::Protocol.ChangeAniMsg.Parser, new[]{ "EntityId", "AnimId", "IsLoop", "IsReturn" }, new[]{ "EntityId", "AnimId", "IsLoop", "IsReturn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.PlayEffectMsg), global::Protocol.PlayEffectMsg.Parser, new[]{ "EffectName", "Point", "Forward", "Time", "EntityId", "BindType", "BindRootType" }, new[]{ "EffectName", "Point", "Forward", "Time", "EntityId", "BindType", "BindRootType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ActionMoveListMsg), global::Protocol.ActionMoveListMsg.Parser, new[]{ "MoveMsgList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.InputKeyListMsg), global::Protocol.InputKeyListMsg.Parser, new[]{ "InputKeyList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.LoadGameByStateMsg), global::Protocol.LoadGameByStateMsg.Parser, new[]{ "StateFileName", "FrameIndex", "StateData" }, new[]{ "StateFileName", "FrameIndex", "StateData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.VAMsg), global::Protocol.VAMsg.Parser, new[]{ "VaDic", "IsClientDebug" }, new[]{ "IsClientDebug" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.VAItem), global::Protocol.VAItem.Parser, new[]{ "EntityId", "ActiveKeyList" }, new[]{ "EntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.AIRotateThunderShotMsg), global::Protocol.AIRotateThunderShotMsg.Parser, new[]{ "ThunderShotList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.AIRotateThunderShotItem), global::Protocol.AIRotateThunderShotItem.Parser, new[]{ "EntityId", "AngleY" }, new[]{ "EntityId", "AngleY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.AIRotatePutWallAngleMsg), global::Protocol.AIRotatePutWallAngleMsg.Parser, new[]{ "RotateWallList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.AIRotatePutWallAngleItem), global::Protocol.AIRotatePutWallAngleItem.Parser, new[]{ "EntityId", "AngleY" }, new[]{ "EntityId", "AngleY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.AIRotateShotMsg), global::Protocol.AIRotateShotMsg.Parser, new[]{ "RotateShotList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.AIRotateShotItem), global::Protocol.AIRotateShotItem.Parser, new[]{ "EntityId", "AngleX", "AngleY" }, new[]{ "EntityId", "AngleX", "AngleY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.LocalCacheStateMsg), global::Protocol.LocalCacheStateMsg.Parser, new[]{ "StateDataDic" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.StateMsg), global::Protocol.StateMsg.Parser, new[]{ "ServerTime", "EntityDataDic", "BattleSyncData", "ShadowDataDic" }, new[]{ "ServerTime", "BattleSyncData" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ShadowData), global::Protocol.ShadowData.Parser, new[]{ "ShadowDic" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ShadowDataItem), global::Protocol.ShadowDataItem.Parser, new[]{ "Pos", "Rotation", "Time" }, new[]{ "Pos", "Rotation", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.EntitySyncData), global::Protocol.EntitySyncData.Parser, new[]{ "Id", "Type", "Position", "Rotation", "Camp", "Destroyed", "ModelId", "StateAttrData", "LifeData", "CharacterCtrlData", "PropCollectionsData", "SkillCtrlData", "BuffCtrlData", "HitCheckData", "NavData", "TagData", "GoapData", "ArchData", "AreaData", "PasserBrainData", "GuardData", "FlyItemData", "LadderData", "ThingData", "HeroData", "WeaponData", "HotData", "AnqiData", "PeddlerData", "WarningData", "SmokeData", "JumpPointData", "LadderCheckData", "BoatData", "ShopData", "BossData", "NestData", "HideStateData", "DropData", "AntidoteScatterData", "MonsterData", "PhysicalData", "FireDiamond", "InsanityData", "BallData", "FollowData", "StrengthData", "InvisibleData", "MagicWallData", "ParalysisData", "SealPointData", "SealLineData", "ThunderNailData", "HookPointData", "GoldenTireData", "GoldenBellData", "TimelineData", "CustomEntityData", "HideAreaData", "RecoverData", "GazeSyneData", "TotalAttackVal", "AttackStatsDic", "TotalSkillCount", "TotalSkillSuccessCount", "SkillStatsDic", "NormalAttackCount", "NormalAttackSuccessCount", "NormalAttackStatsDic", "NormalAttackBreakCount", "HoldDic" }, new[]{ "Id", "Type", "Position", "Rotation", "Camp", "Destroyed", "ModelId", "StateAttrData", "LifeData", "CharacterCtrlData", "PropCollectionsData", "SkillCtrlData", "BuffCtrlData", "HitCheckData", "NavData", "TagData", "GoapData", "ArchData", "AreaData", "PasserBrainData", "GuardData", "FlyItemData", "LadderData", "ThingData", "HeroData", "WeaponData", "HotData", "AnqiData", "PeddlerData", "WarningData", "SmokeData", "JumpPointData", "LadderCheckData", "BoatData", "ShopData", "BossData", "NestData", "HideStateData", "DropData", "AntidoteScatterData", "MonsterData", "PhysicalData", "FireDiamond", "InsanityData", "BallData", "FollowData", "StrengthData", "InvisibleData", "MagicWallData", "ParalysisData", "SealPointData", "SealLineData", "ThunderNailData", "HookPointData", "GoldenTireData", "GoldenBellData", "TimelineData", "CustomEntityData", "HideAreaData", "RecoverData", "GazeSyneData", "TotalAttackVal", "TotalSkillCount", "TotalSkillSuccessCount", "NormalAttackCount", "NormalAttackSuccessCount", "NormalAttackBreakCount" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.RecoverSyncData), global::Protocol.RecoverSyncData.Parser, new[]{ "RecoverTime", "RecoverTimes" }, new[]{ "RecoverTime", "RecoverTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.HideAreaSyncData), global::Protocol.HideAreaSyncData.Parser, new[]{ "Id", "Invisible", "CanSeeInArea", "VisibleValRecoverySpeed", "StayInvisibleTime", "CenterPosition", "ColliderSize", "HideAreaType", "ModelOcclude", "OnAreaEntityDic", "ModelSize" }, new[]{ "Id", "Invisible", "CanSeeInArea", "VisibleValRecoverySpeed", "StayInvisibleTime", "CenterPosition", "ColliderSize", "HideAreaType", "ModelOcclude", "ModelSize" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.GoldenTireSyncData), global::Protocol.GoldenTireSyncData.Parser, new[]{ "OriginEntityId" }, new[]{ "OriginEntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.GoldenBellSyncData), global::Protocol.GoldenBellSyncData.Parser, new[]{ "TargetEntityId", "InputTypeCode", "LeftHp", "RightHp", "OriginEntityId", "EffectName" }, new[]{ "TargetEntityId", "InputTypeCode", "LeftHp", "RightHp", "OriginEntityId", "EffectName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ThunderNailSyncData), global::Protocol.ThunderNailSyncData.Parser, new[]{ "CompleteMove", "CompletePointTime", "MinRadius", "MaxRadius", "LifeTime", "Booming", "CompleteBoom", "CurrRadius", "BoomEffectGroup" }, new[]{ "CompleteMove", "CompletePointTime", "MinRadius", "MaxRadius", "LifeTime", "Booming", "CompleteBoom", "CurrRadius" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.HookPointSyncData), global::Protocol.HookPointSyncData.Parser, new[]{ "LimitRadius", "FromEntityId", "EffectRadius", "CanHook" }, new[]{ "LimitRadius", "FromEntityId", "EffectRadius", "CanHook" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SealingLineSyncData), global::Protocol.SealingLineSyncData.Parser, new[]{ "Length", "CreateTime", "Disable", "Speed", "OwnerId", "Height", "TargetPostion", "LeftSide", "HitTime" }, new[]{ "Length", "CreateTime", "Disable", "Speed", "OwnerId", "Height", "TargetPostion", "LeftSide", "HitTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SealingPointSyncData), global::Protocol.SealingPointSyncData.Parser, new[]{ "OwnerId" }, new[]{ "OwnerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ParalysisSyncData), global::Protocol.ParalysisSyncData.Parser, new[]{ "IsParalysis", "ParalysisValue" }, new[]{ "IsParalysis", "ParalysisValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.MagicWallSyncData), global::Protocol.MagicWallSyncData.Parser, new[]{ "Collider", "EndTime", "FinalTargetY", "RealCollider", "OriginEntityId" }, new[]{ "Collider", "EndTime", "FinalTargetY", "RealCollider", "OriginEntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.InvisibleSyncData), global::Protocol.InvisibleSyncData.Parser, new[]{ "IsInvisible", "LastInvisible", "OnHideAreaId", "OnHideArea", "OnHideAreaBreakTime" }, new[]{ "IsInvisible", "LastInvisible", "OnHideAreaId", "OnHideArea", "OnHideAreaBreakTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.StrengthSyncData), global::Protocol.StrengthSyncData.Parser, new[]{ "AddValue" }, new[]{ "AddValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.FireDiamondSyncData), global::Protocol.FireDiamondSyncData.Parser, new[]{ "Power", "Type", "FromEntityId", "MaxPower", "BaseDamage", "BombDamage", "AimSpeed", "NormalSpeed", "DecreaseMpSpeed", "EffectRadius", "FollowEntityId" }, new[]{ "Power", "Type", "FromEntityId", "MaxPower", "BaseDamage", "BombDamage", "AimSpeed", "NormalSpeed", "DecreaseMpSpeed", "EffectRadius", "FollowEntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BoatSyncData), global::Protocol.BoatSyncData.Parser, new[]{ "State", "Action", "NpcId", "WayMapId", "WayPointType", "NpcMoveSpeed" }, new[]{ "State", "Action", "NpcId", "WayMapId", "WayPointType", "NpcMoveSpeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ShopSyncData), global::Protocol.ShopSyncData.Parser, new[]{ "ShopCfgId", "ShopName", "ShopDesc", "NpcId", "TotalIncome", "SaleItemDic" }, new[]{ "ShopCfgId", "ShopName", "ShopDesc", "NpcId", "TotalIncome" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.DropSyncData), global::Protocol.DropSyncData.Parser, new[]{ "Id", "AreaId", "DropGroupId", "PropDataDic", "FromEntityId" }, new[]{ "Id", "AreaId", "DropGroupId", "FromEntityId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BossSyncData), global::Protocol.BossSyncData.Parser, new[]{ "BossId", "SkinId" }, new[]{ "BossId", "SkinId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SalePropItemData), global::Protocol.SalePropItemData.Parser, new[]{ "Id", "Index", "PropCfgId", "StockNum", "TotalNum", "UnitPrice", "Owner" }, new[]{ "Id", "Index", "PropCfgId", "StockNum", "TotalNum", "UnitPrice", "Owner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.AntidoteScatterSyncData), global::Protocol.AntidoteScatterSyncData.Parser, new[]{ "State", "ScatterNum", "ScatterMax", "Collider", "IgniteId" }, new[]{ "State", "ScatterNum", "ScatterMax", "Collider", "IgniteId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ActionBoatMoveMsg), global::Protocol.ActionBoatMoveMsg.Parser, new[]{ "EntityId" }, new[]{ "EntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TagSyncData), global::Protocol.TagSyncData.Parser, new[]{ "TempValueDic", "TagDic", "TalentDic" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.StateAttributeSyncData), global::Protocol.StateAttributeSyncData.Parser, new[]{ "SubState", "Index", "DefaultState", "AttrDic" }, new[]{ "SubState", "Index", "DefaultState" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.LifeSyncData), global::Protocol.LifeSyncData.Parser, new[]{ "Dead", "Value", "BaseValue", "MaxValue", "LastChangeTime", "KillerId" }, new[]{ "Dead", "Value", "BaseValue", "MaxValue", "LastChangeTime", "KillerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.CharacterCtrlSyncData), global::Protocol.CharacterCtrlSyncData.Parser, new[]{ "MoveState", "MoveAngle", "ViewRow", "ViewPitch", "ActionSpeed", "DisableMove", "DisableRotation", "MoveController", "IsStart", "Width", "Height", "DisableHitBox", "CancelTweenCameraAngle", "ViewDic" }, new[]{ "MoveState", "MoveAngle", "ViewRow", "ViewPitch", "ActionSpeed", "DisableMove", "DisableRotation", "MoveController", "IsStart", "Width", "Height", "DisableHitBox", "CancelTweenCameraAngle" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TimelineSyncData), global::Protocol.TimelineSyncData.Parser, new[]{ "SkillUid", "JumpTime", "TimelineName", "SkillPos", "TargetIds", "ResultIds", "SkillRotation" }, new[]{ "SkillUid", "JumpTime", "TimelineName", "SkillPos", "SkillRotation" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.PropCollectionsSyncData), global::Protocol.PropCollectionsSyncData.Parser, new[]{ "WeaponSlotDic", "AnqiSlotDic", "GrocerySlotDic", "PropCollectionsDic" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SkillCtrlSyncData), global::Protocol.SkillCtrlSyncData.Parser, new[]{ "LastSkillId", "SkillsDic" }, new[]{ "LastSkillId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.WeaponSyncData), global::Protocol.WeaponSyncData.Parser, new[]{ "SwitchWeaponRemainCd" }, new[]{ "SwitchWeaponRemainCd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.AnqiSyncData), global::Protocol.AnqiSyncData.Parser, new[]{ "SwitchAnqiRemainCd" }, new[]{ "SwitchAnqiRemainCd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TaskSyncData), global::Protocol.TaskSyncData.Parser, new[]{ "TaskItemDic" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.InsanitySyncData), global::Protocol.InsanitySyncData.Parser, new[]{ "CatchEntityId", "MasterEntityId", "HeroId", "SkinId", "IsShieldWeak", "ThunderAttackCount", "LastAddThunderTime", "VaStateDic", "IsAi", "DebugVaDic" }, new[]{ "CatchEntityId", "MasterEntityId", "HeroId", "SkinId", "IsShieldWeak", "ThunderAttackCount", "LastAddThunderTime", "IsAi" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TaskItem), global::Protocol.TaskItem.Parser, new[]{ "Id", "TaskState", "TaskDetailParamDic" }, new[]{ "Id", "TaskState" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TaskDetailParam), global::Protocol.TaskDetailParam.Parser, new[]{ "Id", "Num" }, new[]{ "Id", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.PropSlotData), global::Protocol.PropSlotData.Parser, new[]{ "Id", "PropType", "PropCfgId", "PropIdDic" }, new[]{ "Id", "PropType", "PropCfgId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BuffCtrlSyncData), global::Protocol.BuffCtrlSyncData.Parser, new[]{ "BuffDic" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BuffItem), global::Protocol.BuffItem.Parser, new[]{ "Id", "AddTime", "BuffCount", "SourceEId", "BuffTriggerCount", "ParentBuffId" }, new[]{ "Id", "AddTime", "BuffCount", "SourceEId", "BuffTriggerCount", "ParentBuffId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.FollowSyncData), global::Protocol.FollowSyncData.Parser, new[]{ "Following", "FollowEntityId", "OffsetPosition", "StopFollow" }, new[]{ "Following", "FollowEntityId", "OffsetPosition", "StopFollow" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SkillItemData), global::Protocol.SkillItemData.Parser, new[]{ "RemainCd" }, new[]{ "RemainCd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.HitInfoData), global::Protocol.HitInfoData.Parser, new[]{ "Point", "Normal" }, new[]{ "Point", "Normal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.HitCheckSyncData), global::Protocol.HitCheckSyncData.Parser, new[]{ "HitEntityDic", "HitInfos", "IsHitEntity", "IsHitEnvironment", "Size", "UsedBoxCast", "MulHitEntityDic", "IgnoreEntity", "CreatedEntityType", "ColliderOrder" }, new[]{ "IsHitEntity", "IsHitEnvironment", "Size", "UsedBoxCast", "CreatedEntityType", "ColliderOrder" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.NavSyncData), global::Protocol.NavSyncData.Parser, new[]{ "WayMapId", "NextPosition" }, new[]{ "WayMapId", "NextPosition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.GoapSyncData), global::Protocol.GoapSyncData.Parser, new[]{ "PlayAnimation", "DestinPosition", "GoapAssetPath", "ArchitectureNpc", "ArchitectureBindId", "ClusterChatData" }, new[]{ "PlayAnimation", "DestinPosition", "GoapAssetPath", "ArchitectureNpc", "ArchitectureBindId", "ClusterChatData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ClusterChatSyncData), global::Protocol.ClusterChatSyncData.Parser, new[]{ "ClusterId", "AssignCluster", "Listen" }, new[]{ "ClusterId", "AssignCluster", "Listen" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.GazeSyncData), global::Protocol.GazeSyncData.Parser, new[]{ "OpenGazeFunc", "Angle", "Radius" }, new[]{ "OpenGazeFunc", "Angle", "Radius" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ArchitectureSyncData), global::Protocol.ArchitectureSyncData.Parser, new[]{ "ArchitId", "LineDic" }, new[]{ "ArchitId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ArchitectureLineUpInfo), global::Protocol.ArchitectureLineUpInfo.Parser, new[]{ "LineIdx", "Position", "Rotation", "Used", "Entered" }, new[]{ "LineIdx", "Position", "Rotation", "Used", "Entered" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.HotSyncData), global::Protocol.HotSyncData.Parser, new[]{ "PointId", "PickingTime" }, new[]{ "PointId", "PickingTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.AreaSyncData), global::Protocol.AreaSyncData.Parser, new[]{ "SidePointMergeList", "Radius", "HideSideLine", "AreaActionType", "Id", "AreaStandDic", "MaxNpcCount", "Frequency", "PowerRadius" }, new[]{ "Radius", "HideSideLine", "AreaActionType", "Id", "MaxNpcCount", "Frequency", "PowerRadius" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.PasserBrainSyncData), global::Protocol.PasserBrainSyncData.Parser, new[]{ "State", "Action", "NpcId", "BtState", "SubType", "UseBtAgent", "StandTime", "PreMinStandTime", "PreMaxStandTime" }, new[]{ "State", "Action", "NpcId", "BtState", "SubType", "UseBtAgent", "StandTime", "PreMinStandTime", "PreMaxStandTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.GuardSyncData), global::Protocol.GuardSyncData.Parser, new[]{ "State", "Action", "NpcId", "GuardAreaId", "BtState", "SubType", "StandTime" }, new[]{ "State", "Action", "NpcId", "GuardAreaId", "BtState", "SubType", "StandTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.PeddlerSyncData), global::Protocol.PeddlerSyncData.Parser, new[]{ "State", "Action", "NpcId", "FocusAreaId", "BtState", "SubType" }, new[]{ "State", "Action", "NpcId", "FocusAreaId", "BtState", "SubType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.FlyItemSyncData), global::Protocol.FlyItemSyncData.Parser, new[]{ "EffectGroup", "AttackBoxSize", "During", "DestoryOnHit", "AttackTagList", "EntityTypeList", "OwnerId", "IsInfinityTime", "HitForAll", "Type", "EnvEffectGroup", "DestoryOnHitEntity", "DestoryOnHitEnv", "DestoryOnHitTagEntity", "HitMyself", "HitAllCamp" }, new[]{ "AttackBoxSize", "During", "DestoryOnHit", "OwnerId", "IsInfinityTime", "HitForAll", "Type", "DestoryOnHitEntity", "DestoryOnHitEnv", "DestoryOnHitTagEntity", "HitMyself", "HitAllCamp" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.CustomEntitySyncData), global::Protocol.CustomEntitySyncData.Parser, new[]{ "During", "OwnerId", "DamageId", "Type" }, new[]{ "During", "OwnerId", "DamageId", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.NestSyncData), global::Protocol.NestSyncData.Parser, new[]{ "SourceId", "NestCfgId", "NestHp", "NestMaxHp" }, new[]{ "SourceId", "NestCfgId", "NestHp", "NestMaxHp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.LadderSyncData), global::Protocol.LadderSyncData.Parser, new[]{ "LadderId", "StartPostion", "EndPostion", "During", "Collider", "SubType" }, new[]{ "LadderId", "During", "Collider", "SubType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.LadderCheckSyncData), global::Protocol.LadderCheckSyncData.Parser, new[]{ "UseTimes", "NeedProp", "HotAreaId", "HotAreaNpcId" }, new[]{ "UseTimes", "HotAreaId", "HotAreaNpcId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ThingSyncData), global::Protocol.ThingSyncData.Parser, new[]{ "ThingId", "Id", "Collider", "PropDataDic", "VirtualPropDic", "Count", "DropTime", "BornStartTime", "OwnerId", "OffsetPosition", "SubType", "FollowTargetId", "StateId" }, new[]{ "ThingId", "Id", "Collider", "Count", "DropTime", "BornStartTime", "OwnerId", "OffsetPosition", "SubType", "FollowTargetId", "StateId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.HeroSyncData), global::Protocol.HeroSyncData.Parser, new[]{ "HeroId", "SkinId", "Shouhua", "ShouhuaEndTime", "AttackCombo", "IsPhantom", "MasterId", "GulingId", "HeroLevel", "HeroExp", "ShootTime", "VaStateDic", "ShotTargetId", "IsAi", "DebugVaDic" }, new[]{ "HeroId", "SkinId", "Shouhua", "ShouhuaEndTime", "AttackCombo", "IsPhantom", "MasterId", "GulingId", "HeroLevel", "HeroExp", "ShootTime", "ShotTargetId", "IsAi" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.WarningSyncData), global::Protocol.WarningSyncData.Parser, new[]{ "NoticeEId" }, new[]{ "NoticeEId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BallSyncData), global::Protocol.BallSyncData.Parser, new[]{ "PropId", "Power" }, new[]{ "PropId", "Power" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SmokeSyncData), global::Protocol.SmokeSyncData.Parser, new[]{ "SourceEId", "VoiceRange", "AffectTime", "AffectRange", "EffectName" }, new[]{ "SourceEId", "VoiceRange", "AffectTime", "AffectRange", "EffectName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.JumpPointSyncData), global::Protocol.JumpPointSyncData.Parser, new[]{ "Width", "Height", "Type" }, new[]{ "Width", "Height", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.HideStateSyncData), global::Protocol.HideStateSyncData.Parser, new[]{ "IsHide", "HideStartTime" }, new[]{ "IsHide", "HideStartTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.MonsterSyncData), global::Protocol.MonsterSyncData.Parser, new[]{ "NpcId", "BtState", "OriginPoint", "AttackRadius" }, new[]{ "NpcId", "BtState", "OriginPoint", "AttackRadius" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.PhyscialSyncData), global::Protocol.PhyscialSyncData.Parser, new[]{ "Disable", "IsGround", "Mass", "Speed", "LoseMomentumXZOnHit", "LoseMomentumYOnHit", "ForwardFollowMove", "Acceleration", "MinGravityFactor", "GroupId", "DisableCollision" }, new[]{ "Disable", "IsGround", "Mass", "Speed", "LoseMomentumXZOnHit", "LoseMomentumYOnHit", "ForwardFollowMove", "Acceleration", "MinGravityFactor", "GroupId", "DisableCollision" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BattleSyncData), global::Protocol.BattleSyncData.Parser, new[]{ "BattleState", "TwoVtwo" }, new[]{ "BattleState", "TwoVtwo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TwoVsTwoSyncData), global::Protocol.TwoVsTwoSyncData.Parser, new[]{ "RoundCount", "EndTime", "TeamDatas", "WinPointRebornTime", "WinTeam", "KillerId" }, new[]{ "RoundCount", "EndTime", "KillerId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TwoVsTwoTeamData), global::Protocol.TwoVsTwoTeamData.Parser, new[]{ "RoundScores" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.GMCommandReq), global::Protocol.GMCommandReq.Parser, new[]{ "Commands", "SendId" }, new[]{ "SendId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.AttackBoxDebugMsg), global::Protocol.AttackBoxDebugMsg.Parser, new[]{ "AttackPos", "AttackRot", "AttackCenter", "AttackSize", "HitPos", "HitRot", "HitCenter", "HitSize", "HitRadius" }, new[]{ "AttackPos", "AttackRot", "AttackCenter", "AttackSize", "HitPos", "HitRot", "HitCenter", "HitSize", "HitRadius" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TakeBoxPropMsg), global::Protocol.TakeBoxPropMsg.Parser, new[]{ "ThingId", "PropId", "ToId", "ToSlotId", "Time", "PropDataMergeList" }, new[]{ "ThingId", "PropId", "ToId", "ToSlotId", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.CloseBoxMsg), global::Protocol.CloseBoxMsg.Parser, new[]{ "ThingId", "ToId" }, new[]{ "ThingId", "ToId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.PickTalentMsg), global::Protocol.PickTalentMsg.Parser, new[]{ "EntityId", "TalentId" }, new[]{ "EntityId", "TalentId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PbGCMsg : pb::IMessage<PbGCMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PbGCMsg> _parser = new pb::MessageParser<PbGCMsg>(() => new PbGCMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PbGCMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PbGCMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PbGCMsg(PbGCMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      uVal_ = other.uVal_;
      iVal_ = other.iVal_;
      fVal_ = other.fVal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PbGCMsg Clone() {
      return new PbGCMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "u_val" field.</summary>
    public const int UValFieldNumber = 1;
    private uint uVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UVal {
      get { if ((_hasBits0 & 1) != 0) { return uVal_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        uVal_ = value;
      }
    }
    /// <summary>Gets whether the "u_val" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUVal {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "u_val" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUValDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "u_val" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUVal() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "i_val" field.</summary>
    public const int IValFieldNumber = 2;
    private int iVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IVal {
      get { if ((_hasBits0 & 2) != 0) { return iVal_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        iVal_ = value;
      }
    }
    /// <summary>Gets whether the "i_val" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIVal {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "i_val" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIValDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "i_val" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIVal() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "f_val" field.</summary>
    public const int FValFieldNumber = 3;
    private float fVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FVal {
      get { if ((_hasBits0 & 4) != 0) { return fVal_; } else { return 0F; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        fVal_ = value;
      }
    }
    /// <summary>Gets whether the "f_val" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFVal {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "f_val" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFValDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "f_val" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFVal() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PbGCMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PbGCMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UVal != other.UVal) return false;
      if (IVal != other.IVal) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FVal, other.FVal)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUVal) hash ^= UVal.GetHashCode();
      if (HasIVal) hash ^= IVal.GetHashCode();
      if (HasFVal) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FVal);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasUVal)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUValDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(UVal);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIVal)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIValDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(IVal);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFVal)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFValDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(FVal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasUVal)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUValDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(UVal);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIVal)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIValDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(IVal);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFVal)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFValDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(FVal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasUVal)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsUValDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UVal);
      }
      if ((scope == pb.WriteScope.FULL && HasIVal)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIValDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IVal);
      }
      if ((scope == pb.WriteScope.FULL && HasFVal)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsFValDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PbGCMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasUVal) {
        UVal = other.UVal;
      }
      if (other.HasIVal) {
        IVal = other.IVal;
      }
      if (other.HasFVal) {
        FVal = other.FVal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UVal = input.ReadUInt32();
            break;
          }
          case 16: {
            IVal = input.ReadInt32();
            break;
          }
          case 29: {
            FVal = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UVal = input.ReadUInt32();
            break;
          }
          case 16: {
            IVal = input.ReadInt32();
            break;
          }
          case 29: {
            FVal = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ABC : pb::IMessage<ABC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ABC> _parser = new pb::MessageParser<ABC>(() => new ABC());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ABC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABC(ABC other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      uVal_ = other.uVal_;
      iVal_ = other.iVal_;
      fVal_ = other.fVal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABC Clone() {
      return new ABC(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "u_val" field.</summary>
    public const int UValFieldNumber = 1;
    private uint uVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UVal {
      get { if ((_hasBits0 & 1) != 0) { return uVal_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        uVal_ = value;
      }
    }
    /// <summary>Gets whether the "u_val" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUVal {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "u_val" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUValDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "u_val" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUVal() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "i_val" field.</summary>
    public const int IValFieldNumber = 2;
    private int iVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IVal {
      get { if ((_hasBits0 & 2) != 0) { return iVal_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        iVal_ = value;
      }
    }
    /// <summary>Gets whether the "i_val" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIVal {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "i_val" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIValDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "i_val" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIVal() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "f_val" field.</summary>
    public const int FValFieldNumber = 3;
    private float fVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FVal {
      get { if ((_hasBits0 & 4) != 0) { return fVal_; } else { return 0F; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        fVal_ = value;
      }
    }
    /// <summary>Gets whether the "f_val" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFVal {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "f_val" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFValDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "f_val" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFVal() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ABC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ABC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UVal != other.UVal) return false;
      if (IVal != other.IVal) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FVal, other.FVal)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUVal) hash ^= UVal.GetHashCode();
      if (HasIVal) hash ^= IVal.GetHashCode();
      if (HasFVal) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FVal);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasUVal)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUValDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(UVal);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIVal)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIValDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(IVal);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFVal)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFValDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(FVal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasUVal)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUValDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(UVal);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIVal)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIValDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(IVal);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFVal)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFValDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(FVal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasUVal)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsUValDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UVal);
      }
      if ((scope == pb.WriteScope.FULL && HasIVal)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIValDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IVal);
      }
      if ((scope == pb.WriteScope.FULL && HasFVal)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsFValDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ABC other) {
      if (other == null) {
        return;
      }
      if (other.HasUVal) {
        UVal = other.UVal;
      }
      if (other.HasIVal) {
        IVal = other.IVal;
      }
      if (other.HasFVal) {
        FVal = other.FVal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UVal = input.ReadUInt32();
            break;
          }
          case 16: {
            IVal = input.ReadInt32();
            break;
          }
          case 29: {
            FVal = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UVal = input.ReadUInt32();
            break;
          }
          case 16: {
            IVal = input.ReadInt32();
            break;
          }
          case 29: {
            FVal = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// --------------------entity---------------------------------
  /// </summary>
  public sealed partial class CreateEntityNotify : pb::IMessage<CreateEntityNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateEntityNotify> _parser = new pb::MessageParser<CreateEntityNotify>(() => new CreateEntityNotify());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateEntityNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateEntityNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateEntityNotify(CreateEntityNotify other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      entityDataDic_ = other.entityDataDic_.Clone();
      battleData_ = other.HasBattleData ? other.battleData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateEntityNotify Clone() {
      return new CreateEntityNotify(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_data_dic" field.</summary>
    public const int EntityDataDicFieldNumber = 1;
    private static readonly pbc::MapField<uint, global::Protocol.EntitySyncData>.Codec _map_entityDataDic_codec
        = new pbc::MapField<uint, global::Protocol.EntitySyncData>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Protocol.EntitySyncData.Parser), 10);
    private readonly pbc::MapField<uint, global::Protocol.EntitySyncData> entityDataDic_ = new pbc::MapField<uint, global::Protocol.EntitySyncData>();
    /// <summary>
    ///已经在场的entitydata
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Protocol.EntitySyncData> EntityDataDic {
      get { return entityDataDic_; }
    }
    /// <summary>Gets whether the "entity_data_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityDataDicDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "battle_data" field.</summary>
    public const int BattleDataFieldNumber = 2;
    private global::Protocol.BattleSyncData battleData_;
    /// <summary>
    ///战局信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.BattleSyncData BattleData {
      get { return battleData_; }
      set {
        battleData_ = value;
      }
    }
    /// <summary>Gets whether the battle_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBattleData {
      get { return battleData_ != null; }
    }
    /// <summary>Clears the value of the battle_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBattleData() {
      battleData_ = null;
    }
    /// <summary>Gets whether the "battle_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBattleDataDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateEntityNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateEntityNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EntityDataDic.Equals(other.EntityDataDic)) return false;
      if (!object.Equals(BattleData, other.BattleData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EntityDataDic.GetHashCode();
      if (HasBattleData) hash ^= BattleData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityDataDicDirty)) {
        entityDataDic_.WriteTo(output, _map_entityDataDic_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBattleData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBattleDataDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(BattleData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityDataDicDirty)) {
        entityDataDic_.WriteTo(ref output, _map_entityDataDic_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBattleData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBattleDataDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(BattleData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if (EntityDataDic != null) {
        int msgSize = entityDataDic_.CalculateSize(_map_entityDataDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 1;
        } else {
          _dirtyBits0 &= ~1;
        }
      }
      if (HasBattleData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(BattleData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 2;
        } else {
          _dirtyBits0 &= ~2;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateEntityNotify other) {
      if (other == null) {
        return;
      }
      foreach (var key in other.entityDataDic_.DeleteList) {
        entityDataDic_.Remove(key);
      }
      foreach (var pair in other.entityDataDic_) {
        global::Protocol.EntitySyncData value;
        if(entityDataDic_.TryGetValue(pair.Key, out value)) {
          value.MergeFrom(pair.Value);
        }else{
          entityDataDic_.Add(pair.Key, pair.Value);
        }
      }
      if (other.HasBattleData) {
        if (!HasBattleData) {
          BattleData = new global::Protocol.BattleSyncData();
        }
        BattleData.MergeFrom(other.BattleData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entityDataDic_.AddEntriesFrom(input, _map_entityDataDic_codec);
            break;
          }
          case 18: {
            if (!HasBattleData) {
              BattleData = new global::Protocol.BattleSyncData();
            }
            input.ReadMessage(BattleData);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            entityDataDic_.AddEntriesFrom(ref input, _map_entityDataDic_codec);
            break;
          }
          case 18: {
            if (!HasBattleData) {
              BattleData = new global::Protocol.BattleSyncData();
            }
            input.ReadMessage(BattleData);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DeleteEntityNotify : pb::IMessage<DeleteEntityNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeleteEntityNotify> _parser = new pb::MessageParser<DeleteEntityNotify>(() => new DeleteEntityNotify());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteEntityNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteEntityNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteEntityNotify(DeleteEntityNotify other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      entityDataDic_ = other.entityDataDic_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteEntityNotify Clone() {
      return new DeleteEntityNotify(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_data_dic" field.</summary>
    public const int EntityDataDicFieldNumber = 1;
    private static readonly pbc::MapField<uint, global::Protocol.EntitySyncData>.Codec _map_entityDataDic_codec
        = new pbc::MapField<uint, global::Protocol.EntitySyncData>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Protocol.EntitySyncData.Parser), 10);
    private readonly pbc::MapField<uint, global::Protocol.EntitySyncData> entityDataDic_ = new pbc::MapField<uint, global::Protocol.EntitySyncData>();
    /// <summary>
    ///删除entity，同时同步最后的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Protocol.EntitySyncData> EntityDataDic {
      get { return entityDataDic_; }
    }
    /// <summary>Gets whether the "entity_data_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityDataDicDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteEntityNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteEntityNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EntityDataDic.Equals(other.EntityDataDic)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EntityDataDic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityDataDicDirty)) {
        entityDataDic_.WriteTo(output, _map_entityDataDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityDataDicDirty)) {
        entityDataDic_.WriteTo(ref output, _map_entityDataDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if (EntityDataDic != null) {
        int msgSize = entityDataDic_.CalculateSize(_map_entityDataDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 1;
        } else {
          _dirtyBits0 &= ~1;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteEntityNotify other) {
      if (other == null) {
        return;
      }
      foreach (var key in other.entityDataDic_.DeleteList) {
        entityDataDic_.Remove(key);
      }
      foreach (var pair in other.entityDataDic_) {
        global::Protocol.EntitySyncData value;
        if(entityDataDic_.TryGetValue(pair.Key, out value)) {
          value.MergeFrom(pair.Value);
        }else{
          entityDataDic_.Add(pair.Key, pair.Value);
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entityDataDic_.AddEntriesFrom(input, _map_entityDataDic_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            entityDataDic_.AddEntriesFrom(ref input, _map_entityDataDic_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// --------------------action---------------------------------
  ///移动消息		
  /// </summary>
  public sealed partial class ActionMoveMsg : pb::IMessage<ActionMoveMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActionMoveMsg> _parser = new pb::MessageParser<ActionMoveMsg>(() => new ActionMoveMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionMoveMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionMoveMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionMoveMsg(ActionMoveMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      moveState_ = other.moveState_;
      moveAngle_ = other.moveAngle_;
      viewRow_ = other.viewRow_;
      viewPitch_ = other.viewPitch_;
      ignoreLock_ = other.ignoreLock_;
      motion_ = other.motion_;
      lockTargetId_ = other.lockTargetId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionMoveMsg Clone() {
      return new ActionMoveMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "move_state" field.</summary>
    public const int MoveStateFieldNumber = 2;
    private uint moveState_;
    /// <summary>
    ///移动状态（0停止，1走路，2跑步，3疾跑）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MoveState {
      get { if ((_hasBits0 & 2) != 0) { return moveState_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        moveState_ = value;
      }
    }
    /// <summary>Gets whether the "move_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMoveState {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "move_state" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMoveStateDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "move_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMoveState() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "move_angle" field.</summary>
    public const int MoveAngleFieldNumber = 3;
    private int moveAngle_;
    /// <summary>
    ///移动角度，也决定着entity的pitch
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveAngle {
      get { if ((_hasBits0 & 4) != 0) { return moveAngle_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        moveAngle_ = value;
      }
    }
    /// <summary>Gets whether the "move_angle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMoveAngle {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "move_angle" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMoveAngleDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "move_angle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMoveAngle() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "view_row" field.</summary>
    public const int ViewRowFieldNumber = 4;
    private int viewRow_;
    /// <summary>
    ///观察位的row
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ViewRow {
      get { if ((_hasBits0 & 8) != 0) { return viewRow_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        viewRow_ = value;
      }
    }
    /// <summary>Gets whether the "view_row" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasViewRow {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "view_row" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsViewRowDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "view_row" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearViewRow() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "view_pitch" field.</summary>
    public const int ViewPitchFieldNumber = 5;
    private int viewPitch_;
    /// <summary>
    ///观察位的pitch
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ViewPitch {
      get { if ((_hasBits0 & 16) != 0) { return viewPitch_; } else { return 0; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 16;
        viewPitch_ = value;
      }
    }
    /// <summary>Gets whether the "view_pitch" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasViewPitch {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "view_pitch" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsViewPitchDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "view_pitch" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearViewPitch() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "ignore_lock" field.</summary>
    public const int IgnoreLockFieldNumber = 6;
    private bool ignoreLock_;
    /// <summary>
    ///忽略锁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreLock {
      get { if ((_hasBits0 & 32) != 0) { return ignoreLock_; } else { return false; } }
      set {
        _hasBits0 |= 32;
        _dirtyBits0 |= 32;
        ignoreLock_ = value;
      }
    }
    /// <summary>Gets whether the "ignore_lock" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIgnoreLock {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Gets whether the "ignore_lock" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIgnoreLockDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "ignore_lock" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIgnoreLock() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "motion" field.</summary>
    public const int MotionFieldNumber = 7;
    private uint motion_;
    /// <summary>
    ///动画
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Motion {
      get { if ((_hasBits0 & 64) != 0) { return motion_; } else { return 0; } }
      set {
        _hasBits0 |= 64;
        _dirtyBits0 |= 64;
        motion_ = value;
      }
    }
    /// <summary>Gets whether the "motion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMotion {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Gets whether the "motion" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMotionDirty {
      get { return (_dirtyBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "motion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMotion() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "lock_target_id" field.</summary>
    public const int LockTargetIdFieldNumber = 8;
    private uint lockTargetId_;
    /// <summary>
    ///锁定目标entityId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LockTargetId {
      get { if ((_hasBits0 & 128) != 0) { return lockTargetId_; } else { return 0; } }
      set {
        _hasBits0 |= 128;
        _dirtyBits0 |= 128;
        lockTargetId_ = value;
      }
    }
    /// <summary>Gets whether the "lock_target_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLockTargetId {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Gets whether the "lock_target_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLockTargetIdDirty {
      get { return (_dirtyBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "lock_target_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLockTargetId() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionMoveMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionMoveMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (MoveState != other.MoveState) return false;
      if (MoveAngle != other.MoveAngle) return false;
      if (ViewRow != other.ViewRow) return false;
      if (ViewPitch != other.ViewPitch) return false;
      if (IgnoreLock != other.IgnoreLock) return false;
      if (Motion != other.Motion) return false;
      if (LockTargetId != other.LockTargetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasMoveState) hash ^= MoveState.GetHashCode();
      if (HasMoveAngle) hash ^= MoveAngle.GetHashCode();
      if (HasViewRow) hash ^= ViewRow.GetHashCode();
      if (HasViewPitch) hash ^= ViewPitch.GetHashCode();
      if (HasIgnoreLock) hash ^= IgnoreLock.GetHashCode();
      if (HasMotion) hash ^= Motion.GetHashCode();
      if (HasLockTargetId) hash ^= LockTargetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMoveState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMoveStateDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(MoveState);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMoveAngle)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMoveAngleDirty)) {
        output.WriteRawTag(24);
        output.WriteInt32(MoveAngle);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasViewRow)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsViewRowDirty)) {
        output.WriteRawTag(32);
        output.WriteInt32(ViewRow);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasViewPitch)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsViewPitchDirty)) {
        output.WriteRawTag(40);
        output.WriteInt32(ViewPitch);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIgnoreLock)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIgnoreLockDirty)) {
        output.WriteRawTag(48);
        output.WriteBool(IgnoreLock);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMotion)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMotionDirty)) {
        output.WriteRawTag(56);
        output.WriteUInt32(Motion);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLockTargetId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLockTargetIdDirty)) {
        output.WriteRawTag(64);
        output.WriteUInt32(LockTargetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMoveState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMoveStateDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(MoveState);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMoveAngle)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMoveAngleDirty)) {
        output.WriteRawTag(24);
        output.WriteInt32(MoveAngle);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasViewRow)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsViewRowDirty)) {
        output.WriteRawTag(32);
        output.WriteInt32(ViewRow);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasViewPitch)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsViewPitchDirty)) {
        output.WriteRawTag(40);
        output.WriteInt32(ViewPitch);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIgnoreLock)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIgnoreLockDirty)) {
        output.WriteRawTag(48);
        output.WriteBool(IgnoreLock);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMotion)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMotionDirty)) {
        output.WriteRawTag(56);
        output.WriteUInt32(Motion);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLockTargetId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLockTargetIdDirty)) {
        output.WriteRawTag(64);
        output.WriteUInt32(LockTargetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasMoveState)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsMoveStateDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoveState);
      }
      if ((scope == pb.WriteScope.FULL && HasMoveAngle)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsMoveAngleDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveAngle);
      }
      if ((scope == pb.WriteScope.FULL && HasViewRow)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsViewRowDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ViewRow);
      }
      if ((scope == pb.WriteScope.FULL && HasViewPitch)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsViewPitchDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ViewPitch);
      }
      if ((scope == pb.WriteScope.FULL && HasIgnoreLock)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIgnoreLockDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasMotion)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsMotionDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Motion);
      }
      if ((scope == pb.WriteScope.FULL && HasLockTargetId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsLockTargetIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LockTargetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionMoveMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasMoveState) {
        MoveState = other.MoveState;
      }
      if (other.HasMoveAngle) {
        MoveAngle = other.MoveAngle;
      }
      if (other.HasViewRow) {
        ViewRow = other.ViewRow;
      }
      if (other.HasViewPitch) {
        ViewPitch = other.ViewPitch;
      }
      if (other.HasIgnoreLock) {
        IgnoreLock = other.IgnoreLock;
      }
      if (other.HasMotion) {
        Motion = other.Motion;
      }
      if (other.HasLockTargetId) {
        LockTargetId = other.LockTargetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            MoveState = input.ReadUInt32();
            break;
          }
          case 24: {
            MoveAngle = input.ReadInt32();
            break;
          }
          case 32: {
            ViewRow = input.ReadInt32();
            break;
          }
          case 40: {
            ViewPitch = input.ReadInt32();
            break;
          }
          case 48: {
            IgnoreLock = input.ReadBool();
            break;
          }
          case 56: {
            Motion = input.ReadUInt32();
            break;
          }
          case 64: {
            LockTargetId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            MoveState = input.ReadUInt32();
            break;
          }
          case 24: {
            MoveAngle = input.ReadInt32();
            break;
          }
          case 32: {
            ViewRow = input.ReadInt32();
            break;
          }
          case 40: {
            ViewPitch = input.ReadInt32();
            break;
          }
          case 48: {
            IgnoreLock = input.ReadBool();
            break;
          }
          case 56: {
            Motion = input.ReadUInt32();
            break;
          }
          case 64: {
            LockTargetId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///同步技能判定结果
  /// </summary>
  public sealed partial class ActionSkillResultMsg : pb::IMessage<ActionSkillResultMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActionSkillResultMsg> _parser = new pb::MessageParser<ActionSkillResultMsg>(() => new ActionSkillResultMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionSkillResultMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionSkillResultMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionSkillResultMsg(ActionSkillResultMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      skillUid_ = other.skillUid_;
      entityList_ = other.entityList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionSkillResultMsg Clone() {
      return new ActionSkillResultMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "skill_uid" field.</summary>
    public const int SkillUidFieldNumber = 2;
    private ulong skillUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SkillUid {
      get { if ((_hasBits0 & 2) != 0) { return skillUid_; } else { return 0UL; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        skillUid_ = value;
      }
    }
    /// <summary>Gets whether the "skill_uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSkillUid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "skill_uid" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkillUidDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "skill_uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSkillUid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "entity_list" field.</summary>
    public const int EntityListFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_entityList_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> entityList_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> EntityList {
      get { return entityList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionSkillResultMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionSkillResultMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (SkillUid != other.SkillUid) return false;
      if(!entityList_.Equals(other.entityList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasSkillUid) hash ^= SkillUid.GetHashCode();
      hash ^= entityList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillUid)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillUidDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt64(SkillUid);
      }
      entityList_.WriteTo(output, _repeated_entityList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillUid)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillUidDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt64(SkillUid);
      }
      entityList_.WriteTo(ref output, _repeated_entityList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasSkillUid)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSkillUidDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SkillUid);
      }
      size += entityList_.CalculateSize(_repeated_entityList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionSkillResultMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasSkillUid) {
        SkillUid = other.SkillUid;
      }
      entityList_.Add(other.entityList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillUid = input.ReadUInt64();
            break;
          }
          case 26:
          case 24: {
            entityList_.AddEntriesFrom(input, _repeated_entityList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillUid = input.ReadUInt64();
            break;
          }
          case 26:
          case 24: {
            entityList_.AddEntriesFrom(ref input, _repeated_entityList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///触发技能		
  /// </summary>
  public sealed partial class ActionExecuteSkillMsg : pb::IMessage<ActionExecuteSkillMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActionExecuteSkillMsg> _parser = new pb::MessageParser<ActionExecuteSkillMsg>(() => new ActionExecuteSkillMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionExecuteSkillMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionExecuteSkillMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionExecuteSkillMsg(ActionExecuteSkillMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      skillId_ = other.skillId_;
      skillUid_ = other.skillUid_;
      skillPos_ = other.HasSkillPos ? other.skillPos_.Clone() : null;
      skillRange_ = other.skillRange_;
      releaseSkillType_ = other.releaseSkillType_;
      longKeyTime_ = other.longKeyTime_;
      targetEntityIdList_ = other.targetEntityIdList_.Clone();
      skillRotation_ = other.HasSkillRotation ? other.skillRotation_.Clone() : null;
      timelinePath_ = other.timelinePath_;
      keyEvent_ = other.keyEvent_;
      fromPropId_ = other.fromPropId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionExecuteSkillMsg Clone() {
      return new ActionExecuteSkillMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { if ((_hasBits0 & 2) != 0) { return skillId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        skillId_ = value;
      }
    }
    /// <summary>Gets whether the "skill_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSkillId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "skill_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkillIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "skill_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSkillId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "skill_uid" field.</summary>
    public const int SkillUidFieldNumber = 3;
    private ulong skillUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SkillUid {
      get { if ((_hasBits0 & 4) != 0) { return skillUid_; } else { return 0UL; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        skillUid_ = value;
      }
    }
    /// <summary>Gets whether the "skill_uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSkillUid {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "skill_uid" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkillUidDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "skill_uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSkillUid() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "skill_pos" field.</summary>
    public const int SkillPosFieldNumber = 4;
    private global::Protocol.Float3 skillPos_;
    /// <summary>
    ///技能释放点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 SkillPos {
      get { return skillPos_; }
      set {
        skillPos_ = value;
      }
    }
    /// <summary>Gets whether the skill_pos field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSkillPos {
      get { return skillPos_ != null; }
    }
    /// <summary>Clears the value of the skill_pos field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSkillPos() {
      skillPos_ = null;
    }
    /// <summary>Gets whether the "skill_pos" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkillPosDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }

    /// <summary>Field number for the "skill_range" field.</summary>
    public const int SkillRangeFieldNumber = 5;
    private float skillRange_;
    /// <summary>
    ///以技能释放点为中心的作用半径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SkillRange {
      get { if ((_hasBits0 & 8) != 0) { return skillRange_; } else { return 0F; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 16;
        skillRange_ = value;
      }
    }
    /// <summary>Gets whether the "skill_range" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSkillRange {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "skill_range" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkillRangeDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "skill_range" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSkillRange() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "release_skill_type" field.</summary>
    public const int ReleaseSkillTypeFieldNumber = 6;
    private uint releaseSkillType_;
    /// <summary>
    ///1.普通 2.快捷 3.智能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReleaseSkillType {
      get { if ((_hasBits0 & 16) != 0) { return releaseSkillType_; } else { return 0; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 32;
        releaseSkillType_ = value;
      }
    }
    /// <summary>Gets whether the "release_skill_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReleaseSkillType {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "release_skill_type" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReleaseSkillTypeDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "release_skill_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReleaseSkillType() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "long_key_time" field.</summary>
    public const int LongKeyTimeFieldNumber = 7;
    private float longKeyTime_;
    /// <summary>
    ///长按时长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LongKeyTime {
      get { if ((_hasBits0 & 32) != 0) { return longKeyTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 32;
        _dirtyBits0 |= 64;
        longKeyTime_ = value;
      }
    }
    /// <summary>Gets whether the "long_key_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLongKeyTime {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Gets whether the "long_key_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLongKeyTimeDirty {
      get { return (_dirtyBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "long_key_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLongKeyTime() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "target_entity_id_list" field.</summary>
    public const int TargetEntityIdListFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_targetEntityIdList_codec
        = pb::FieldCodec.ForUInt32(66);
    private readonly pbc::RepeatedField<uint> targetEntityIdList_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TargetEntityIdList {
      get { return targetEntityIdList_; }
    }

    /// <summary>Field number for the "skill_rotation" field.</summary>
    public const int SkillRotationFieldNumber = 9;
    private global::Protocol.Float3 skillRotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 SkillRotation {
      get { return skillRotation_; }
      set {
        skillRotation_ = value;
      }
    }
    /// <summary>Gets whether the skill_rotation field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSkillRotation {
      get { return skillRotation_ != null; }
    }
    /// <summary>Clears the value of the skill_rotation field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSkillRotation() {
      skillRotation_ = null;
    }
    /// <summary>Gets whether the "skill_rotation" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkillRotationDirty {
      get { return (_dirtyBits0 & 256) != 0; }
    }

    /// <summary>Field number for the "timeline_path" field.</summary>
    public const int TimelinePathFieldNumber = 10;
    private string timelinePath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TimelinePath {
      get { return timelinePath_ ?? ""; }
      set {
        timelinePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "timeline_path" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimelinePath {
      get { return timelinePath_ != null; }
    }
    /// <summary>Gets whether the "timeline_path" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTimelinePathDirty {
      get { return (_dirtyBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "timeline_path" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimelinePath() {
      timelinePath_ = null;
    }

    /// <summary>Field number for the "key_event" field.</summary>
    public const int KeyEventFieldNumber = 11;
    private string keyEvent_;
    /// <summary>
    ///按键信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyEvent {
      get { return keyEvent_ ?? ""; }
      set {
        keyEvent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "key_event" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKeyEvent {
      get { return keyEvent_ != null; }
    }
    /// <summary>Gets whether the "key_event" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsKeyEventDirty {
      get { return (_dirtyBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "key_event" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKeyEvent() {
      keyEvent_ = null;
    }

    /// <summary>Field number for the "from_prop_id" field.</summary>
    public const int FromPropIdFieldNumber = 12;
    private uint fromPropId_;
    /// <summary>
    ///部分技能来源于道具，这里填 道具ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FromPropId {
      get { if ((_hasBits0 & 64) != 0) { return fromPropId_; } else { return 0; } }
      set {
        _hasBits0 |= 64;
        _dirtyBits0 |= 2048;
        fromPropId_ = value;
      }
    }
    /// <summary>Gets whether the "from_prop_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFromPropId {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Gets whether the "from_prop_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFromPropIdDirty {
      get { return (_dirtyBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "from_prop_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFromPropId() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionExecuteSkillMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionExecuteSkillMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (SkillId != other.SkillId) return false;
      if (SkillUid != other.SkillUid) return false;
      if (!object.Equals(SkillPos, other.SkillPos)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkillRange, other.SkillRange)) return false;
      if (ReleaseSkillType != other.ReleaseSkillType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LongKeyTime, other.LongKeyTime)) return false;
      if(!targetEntityIdList_.Equals(other.targetEntityIdList_)) return false;
      if (!object.Equals(SkillRotation, other.SkillRotation)) return false;
      if (TimelinePath != other.TimelinePath) return false;
      if (KeyEvent != other.KeyEvent) return false;
      if (FromPropId != other.FromPropId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasSkillId) hash ^= SkillId.GetHashCode();
      if (HasSkillUid) hash ^= SkillUid.GetHashCode();
      if (HasSkillPos) hash ^= SkillPos.GetHashCode();
      if (HasSkillRange) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkillRange);
      if (HasReleaseSkillType) hash ^= ReleaseSkillType.GetHashCode();
      if (HasLongKeyTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LongKeyTime);
      hash ^= targetEntityIdList_.GetHashCode();
      if (HasSkillRotation) hash ^= SkillRotation.GetHashCode();
      if (HasTimelinePath) hash ^= TimelinePath.GetHashCode();
      if (HasKeyEvent) hash ^= KeyEvent.GetHashCode();
      if (HasFromPropId) hash ^= FromPropId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillUid)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillUidDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt64(SkillUid);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillPos)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillPosDirty)) {
        output.WriteRawTag(34);
        output.WriteMessage(SkillPos);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillRange)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillRangeDirty)) {
        output.WriteRawTag(45);
        output.WriteFloat(SkillRange);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasReleaseSkillType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsReleaseSkillTypeDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(ReleaseSkillType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLongKeyTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLongKeyTimeDirty)) {
        output.WriteRawTag(61);
        output.WriteFloat(LongKeyTime);
      }
      targetEntityIdList_.WriteTo(output, _repeated_targetEntityIdList_codec);
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillRotation)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillRotationDirty)) {
        output.WriteRawTag(74);
        output.WriteMessage(SkillRotation);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTimelinePath)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTimelinePathDirty)) {
        output.WriteRawTag(82);
        output.WriteString(TimelinePath);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasKeyEvent)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsKeyEventDirty)) {
        output.WriteRawTag(90);
        output.WriteString(KeyEvent);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFromPropId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFromPropIdDirty)) {
        output.WriteRawTag(96);
        output.WriteUInt32(FromPropId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillUid)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillUidDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt64(SkillUid);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillPos)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillPosDirty)) {
        output.WriteRawTag(34);
        output.WriteMessage(SkillPos);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillRange)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillRangeDirty)) {
        output.WriteRawTag(45);
        output.WriteFloat(SkillRange);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasReleaseSkillType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsReleaseSkillTypeDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(ReleaseSkillType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLongKeyTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLongKeyTimeDirty)) {
        output.WriteRawTag(61);
        output.WriteFloat(LongKeyTime);
      }
      targetEntityIdList_.WriteTo(ref output, _repeated_targetEntityIdList_codec);
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillRotation)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillRotationDirty)) {
        output.WriteRawTag(74);
        output.WriteMessage(SkillRotation);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTimelinePath)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTimelinePathDirty)) {
        output.WriteRawTag(82);
        output.WriteString(TimelinePath);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasKeyEvent)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsKeyEventDirty)) {
        output.WriteRawTag(90);
        output.WriteString(KeyEvent);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFromPropId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFromPropIdDirty)) {
        output.WriteRawTag(96);
        output.WriteUInt32(FromPropId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasSkillId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSkillIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if ((scope == pb.WriteScope.FULL && HasSkillUid)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSkillUidDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SkillUid);
      }
      if (HasSkillPos) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(SkillPos, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 8;
        } else {
          _dirtyBits0 &= ~8;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasSkillRange)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSkillRangeDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasReleaseSkillType)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsReleaseSkillTypeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReleaseSkillType);
      }
      if ((scope == pb.WriteScope.FULL && HasLongKeyTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsLongKeyTimeDirty)) {
        size += 1 + 4;
      }
      size += targetEntityIdList_.CalculateSize(_repeated_targetEntityIdList_codec);
      if (HasSkillRotation) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(SkillRotation, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 256;
        } else {
          _dirtyBits0 &= ~256;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasTimelinePath)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTimelinePathDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TimelinePath);
      }
      if ((scope == pb.WriteScope.FULL && HasKeyEvent)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsKeyEventDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyEvent);
      }
      if ((scope == pb.WriteScope.FULL && HasFromPropId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsFromPropIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FromPropId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionExecuteSkillMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasSkillId) {
        SkillId = other.SkillId;
      }
      if (other.HasSkillUid) {
        SkillUid = other.SkillUid;
      }
      if (other.HasSkillPos) {
        if (!HasSkillPos) {
          SkillPos = new global::Protocol.Float3();
        }
        SkillPos.MergeFrom(other.SkillPos);
      }
      if (other.HasSkillRange) {
        SkillRange = other.SkillRange;
      }
      if (other.HasReleaseSkillType) {
        ReleaseSkillType = other.ReleaseSkillType;
      }
      if (other.HasLongKeyTime) {
        LongKeyTime = other.LongKeyTime;
      }
      targetEntityIdList_.Add(other.targetEntityIdList_);
      if (other.HasSkillRotation) {
        if (!HasSkillRotation) {
          SkillRotation = new global::Protocol.Float3();
        }
        SkillRotation.MergeFrom(other.SkillRotation);
      }
      if (other.HasTimelinePath) {
        TimelinePath = other.TimelinePath;
      }
      if (other.HasKeyEvent) {
        KeyEvent = other.KeyEvent;
      }
      if (other.HasFromPropId) {
        FromPropId = other.FromPropId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadUInt32();
            break;
          }
          case 24: {
            SkillUid = input.ReadUInt64();
            break;
          }
          case 34: {
            if (!HasSkillPos) {
              SkillPos = new global::Protocol.Float3();
            }
            input.ReadMessage(SkillPos);
            break;
          }
          case 45: {
            SkillRange = input.ReadFloat();
            break;
          }
          case 48: {
            ReleaseSkillType = input.ReadUInt32();
            break;
          }
          case 61: {
            LongKeyTime = input.ReadFloat();
            break;
          }
          case 66:
          case 64: {
            targetEntityIdList_.AddEntriesFrom(input, _repeated_targetEntityIdList_codec);
            break;
          }
          case 74: {
            if (!HasSkillRotation) {
              SkillRotation = new global::Protocol.Float3();
            }
            input.ReadMessage(SkillRotation);
            break;
          }
          case 82: {
            TimelinePath = input.ReadString();
            break;
          }
          case 90: {
            KeyEvent = input.ReadString();
            break;
          }
          case 96: {
            FromPropId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadUInt32();
            break;
          }
          case 24: {
            SkillUid = input.ReadUInt64();
            break;
          }
          case 34: {
            if (!HasSkillPos) {
              SkillPos = new global::Protocol.Float3();
            }
            input.ReadMessage(SkillPos);
            break;
          }
          case 45: {
            SkillRange = input.ReadFloat();
            break;
          }
          case 48: {
            ReleaseSkillType = input.ReadUInt32();
            break;
          }
          case 61: {
            LongKeyTime = input.ReadFloat();
            break;
          }
          case 66:
          case 64: {
            targetEntityIdList_.AddEntriesFrom(ref input, _repeated_targetEntityIdList_codec);
            break;
          }
          case 74: {
            if (!HasSkillRotation) {
              SkillRotation = new global::Protocol.Float3();
            }
            input.ReadMessage(SkillRotation);
            break;
          }
          case 82: {
            TimelinePath = input.ReadString();
            break;
          }
          case 90: {
            KeyEvent = input.ReadString();
            break;
          }
          case 96: {
            FromPropId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///停止技能		
  /// </summary>
  public sealed partial class ActionStopSkillMsg : pb::IMessage<ActionStopSkillMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActionStopSkillMsg> _parser = new pb::MessageParser<ActionStopSkillMsg>(() => new ActionStopSkillMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionStopSkillMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionStopSkillMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionStopSkillMsg(ActionStopSkillMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      skillId_ = other.skillId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionStopSkillMsg Clone() {
      return new ActionStopSkillMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { if ((_hasBits0 & 2) != 0) { return skillId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        skillId_ = value;
      }
    }
    /// <summary>Gets whether the "skill_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSkillId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "skill_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkillIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "skill_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSkillId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionStopSkillMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionStopSkillMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (SkillId != other.SkillId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasSkillId) hash ^= SkillId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasSkillId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSkillIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionStopSkillMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasSkillId) {
        SkillId = other.SkillId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///添加技能		
  /// </summary>
  public sealed partial class ActionAddSkillReq : pb::IMessage<ActionAddSkillReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActionAddSkillReq> _parser = new pb::MessageParser<ActionAddSkillReq>(() => new ActionAddSkillReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionAddSkillReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionAddSkillReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionAddSkillReq(ActionAddSkillReq other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      skillId_ = other.skillId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionAddSkillReq Clone() {
      return new ActionAddSkillReq(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { if ((_hasBits0 & 2) != 0) { return skillId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        skillId_ = value;
      }
    }
    /// <summary>Gets whether the "skill_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSkillId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "skill_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkillIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "skill_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSkillId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionAddSkillReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionAddSkillReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (SkillId != other.SkillId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasSkillId) hash ^= SkillId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasSkillId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSkillIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionAddSkillReq other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasSkillId) {
        SkillId = other.SkillId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ActionAddSkillRsp : pb::IMessage<ActionAddSkillRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActionAddSkillRsp> _parser = new pb::MessageParser<ActionAddSkillRsp>(() => new ActionAddSkillRsp());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionAddSkillRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionAddSkillRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionAddSkillRsp(ActionAddSkillRsp other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      retCode_ = other.retCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionAddSkillRsp Clone() {
      return new ActionAddSkillRsp(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "ret_code" field.</summary>
    public const int RetCodeFieldNumber = 1;
    private int retCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RetCode {
      get { if ((_hasBits0 & 1) != 0) { return retCode_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        retCode_ = value;
      }
    }
    /// <summary>Gets whether the "ret_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRetCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "ret_code" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRetCodeDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ret_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRetCode() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionAddSkillRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionAddSkillRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RetCode != other.RetCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRetCode) hash ^= RetCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasRetCode)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRetCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteInt32(RetCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasRetCode)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRetCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteInt32(RetCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasRetCode)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsRetCodeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionAddSkillRsp other) {
      if (other == null) {
        return;
      }
      if (other.HasRetCode) {
        RetCode = other.RetCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RetCode = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RetCode = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///删除技能		
  /// </summary>
  public sealed partial class ActionDeleteSkillReq : pb::IMessage<ActionDeleteSkillReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActionDeleteSkillReq> _parser = new pb::MessageParser<ActionDeleteSkillReq>(() => new ActionDeleteSkillReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionDeleteSkillReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionDeleteSkillReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionDeleteSkillReq(ActionDeleteSkillReq other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      skillId_ = other.skillId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionDeleteSkillReq Clone() {
      return new ActionDeleteSkillReq(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { if ((_hasBits0 & 2) != 0) { return skillId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        skillId_ = value;
      }
    }
    /// <summary>Gets whether the "skill_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSkillId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "skill_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkillIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "skill_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSkillId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionDeleteSkillReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionDeleteSkillReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (SkillId != other.SkillId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasSkillId) hash ^= SkillId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasSkillId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSkillIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionDeleteSkillReq other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasSkillId) {
        SkillId = other.SkillId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ActionDeleteSkillRsp : pb::IMessage<ActionDeleteSkillRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActionDeleteSkillRsp> _parser = new pb::MessageParser<ActionDeleteSkillRsp>(() => new ActionDeleteSkillRsp());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionDeleteSkillRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionDeleteSkillRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionDeleteSkillRsp(ActionDeleteSkillRsp other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      retCode_ = other.retCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionDeleteSkillRsp Clone() {
      return new ActionDeleteSkillRsp(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "ret_code" field.</summary>
    public const int RetCodeFieldNumber = 1;
    private int retCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RetCode {
      get { if ((_hasBits0 & 1) != 0) { return retCode_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        retCode_ = value;
      }
    }
    /// <summary>Gets whether the "ret_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRetCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "ret_code" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRetCodeDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ret_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRetCode() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionDeleteSkillRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionDeleteSkillRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RetCode != other.RetCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRetCode) hash ^= RetCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasRetCode)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRetCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteInt32(RetCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasRetCode)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRetCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteInt32(RetCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasRetCode)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsRetCodeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionDeleteSkillRsp other) {
      if (other == null) {
        return;
      }
      if (other.HasRetCode) {
        RetCode = other.RetCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RetCode = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RetCode = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EntityDeadNtf : pb::IMessage<EntityDeadNtf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EntityDeadNtf> _parser = new pb::MessageParser<EntityDeadNtf>(() => new EntityDeadNtf());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityDeadNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityDeadNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityDeadNtf(EntityDeadNtf other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      dead_ = other.dead_;
      targetId_ = other.targetId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityDeadNtf Clone() {
      return new EntityDeadNtf(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "dead" field.</summary>
    public const int DeadFieldNumber = 2;
    private bool dead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Dead {
      get { if ((_hasBits0 & 2) != 0) { return dead_; } else { return false; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        dead_ = value;
      }
    }
    /// <summary>Gets whether the "dead" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDead {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "dead" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDeadDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "dead" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDead() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 3;
    private uint targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetId {
      get { if ((_hasBits0 & 4) != 0) { return targetId_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        targetId_ = value;
      }
    }
    /// <summary>Gets whether the "target_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "target_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTargetIdDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "target_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityDeadNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityDeadNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (Dead != other.Dead) return false;
      if (TargetId != other.TargetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasDead) hash ^= Dead.GetHashCode();
      if (HasTargetId) hash ^= TargetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDead)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDeadDirty)) {
        output.WriteRawTag(16);
        output.WriteBool(Dead);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTargetId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTargetIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(TargetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDead)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDeadDirty)) {
        output.WriteRawTag(16);
        output.WriteBool(Dead);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTargetId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTargetIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(TargetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasDead)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsDeadDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasTargetId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTargetIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityDeadNtf other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasDead) {
        Dead = other.Dead;
      }
      if (other.HasTargetId) {
        TargetId = other.TargetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            Dead = input.ReadBool();
            break;
          }
          case 24: {
            TargetId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            Dead = input.ReadBool();
            break;
          }
          case 24: {
            TargetId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChangeTimeScaleNtf : pb::IMessage<ChangeTimeScaleNtf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChangeTimeScaleNtf> _parser = new pb::MessageParser<ChangeTimeScaleNtf>(() => new ChangeTimeScaleNtf());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeTimeScaleNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeTimeScaleNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeTimeScaleNtf(ChangeTimeScaleNtf other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      scaleValue_ = other.scaleValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeTimeScaleNtf Clone() {
      return new ChangeTimeScaleNtf(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "scale_value" field.</summary>
    public const int ScaleValueFieldNumber = 1;
    private float scaleValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScaleValue {
      get { if ((_hasBits0 & 1) != 0) { return scaleValue_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        scaleValue_ = value;
      }
    }
    /// <summary>Gets whether the "scale_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaleValue {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "scale_value" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsScaleValueDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "scale_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaleValue() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeTimeScaleNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeTimeScaleNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScaleValue, other.ScaleValue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasScaleValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScaleValue);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasScaleValue)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsScaleValueDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(ScaleValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasScaleValue)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsScaleValueDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(ScaleValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasScaleValue)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsScaleValueDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeTimeScaleNtf other) {
      if (other == null) {
        return;
      }
      if (other.HasScaleValue) {
        ScaleValue = other.ScaleValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            ScaleValue = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            ScaleValue = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PickThingMsg : pb::IMessage<PickThingMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PickThingMsg> _parser = new pb::MessageParser<PickThingMsg>(() => new PickThingMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PickThingMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickThingMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickThingMsg(PickThingMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      thingId_ = other.thingId_;
      toId_ = other.toId_;
      toSlotId_ = other.toSlotId_;
      time_ = other.time_;
      propDataMergeList_ = other.propDataMergeList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickThingMsg Clone() {
      return new PickThingMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "thing_id" field.</summary>
    public const int ThingIdFieldNumber = 1;
    private uint thingId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ThingId {
      get { if ((_hasBits0 & 1) != 0) { return thingId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        thingId_ = value;
      }
    }
    /// <summary>Gets whether the "thing_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasThingId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "thing_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsThingIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "thing_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearThingId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "to_id" field.</summary>
    public const int ToIdFieldNumber = 2;
    private uint toId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ToId {
      get { if ((_hasBits0 & 2) != 0) { return toId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        toId_ = value;
      }
    }
    /// <summary>Gets whether the "to_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasToId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "to_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsToIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "to_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearToId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "to_slot_id" field.</summary>
    public const int ToSlotIdFieldNumber = 3;
    private uint toSlotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ToSlotId {
      get { if ((_hasBits0 & 4) != 0) { return toSlotId_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        toSlotId_ = value;
      }
    }
    /// <summary>Gets whether the "to_slot_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasToSlotId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "to_slot_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsToSlotIdDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "to_slot_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearToSlotId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private float time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { if ((_hasBits0 & 8) != 0) { return time_; } else { return 0F; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        time_ = value;
      }
    }
    /// <summary>Gets whether the "time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTimeDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "prop_data_merge_list" field.</summary>
    public const int PropDataMergeListFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Protocol.PropData> _repeated_propDataMergeList_codec
        = pb::FieldCodec.ForMessage(82, global::Protocol.PropData.Parser);
    private readonly pbc::RepeatedField<global::Protocol.PropData> propDataMergeList_ = new pbc::RepeatedField<global::Protocol.PropData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.PropData> PropDataMergeList {
      get { return propDataMergeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PickThingMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PickThingMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ThingId != other.ThingId) return false;
      if (ToId != other.ToId) return false;
      if (ToSlotId != other.ToSlotId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Time, other.Time)) return false;
      if(!propDataMergeList_.Equals(other.propDataMergeList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasThingId) hash ^= ThingId.GetHashCode();
      if (HasToId) hash ^= ToId.GetHashCode();
      if (HasToSlotId) hash ^= ToSlotId.GetHashCode();
      if (HasTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Time);
      hash ^= propDataMergeList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasThingId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsThingIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(ThingId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasToId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsToIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(ToId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasToSlotId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsToSlotIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(ToSlotId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTimeDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(Time);
      }
      propDataMergeList_.WriteTo(output, _repeated_propDataMergeList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasThingId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsThingIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(ThingId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasToId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsToIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(ToId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasToSlotId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsToSlotIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(ToSlotId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTimeDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(Time);
      }
      propDataMergeList_.WriteTo(ref output, _repeated_propDataMergeList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasThingId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsThingIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ThingId);
      }
      if ((scope == pb.WriteScope.FULL && HasToId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsToIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToId);
      }
      if ((scope == pb.WriteScope.FULL && HasToSlotId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsToSlotIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToSlotId);
      }
      if ((scope == pb.WriteScope.FULL && HasTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTimeDirty)) {
        size += 1 + 4;
      }
      size += propDataMergeList_.CalculateSize(_repeated_propDataMergeList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PickThingMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasThingId) {
        ThingId = other.ThingId;
      }
      if (other.HasToId) {
        ToId = other.ToId;
      }
      if (other.HasToSlotId) {
        ToSlotId = other.ToSlotId;
      }
      if (other.HasTime) {
        Time = other.Time;
      }
      propDataMergeList_.Add(other.propDataMergeList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ThingId = input.ReadUInt32();
            break;
          }
          case 16: {
            ToId = input.ReadUInt32();
            break;
          }
          case 24: {
            ToSlotId = input.ReadUInt32();
            break;
          }
          case 37: {
            Time = input.ReadFloat();
            break;
          }
          case 82: {
            propDataMergeList_.AddEntriesFrom(input, _repeated_propDataMergeList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ThingId = input.ReadUInt32();
            break;
          }
          case 16: {
            ToId = input.ReadUInt32();
            break;
          }
          case 24: {
            ToSlotId = input.ReadUInt32();
            break;
          }
          case 37: {
            Time = input.ReadFloat();
            break;
          }
          case 82: {
            propDataMergeList_.AddEntriesFrom(ref input, _repeated_propDataMergeList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DestoryNestMsg : pb::IMessage<DestoryNestMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DestoryNestMsg> _parser = new pb::MessageParser<DestoryNestMsg>(() => new DestoryNestMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DestoryNestMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestoryNestMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestoryNestMsg(DestoryNestMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      bossId_ = other.bossId_;
      nestId_ = other.nestId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestoryNestMsg Clone() {
      return new DestoryNestMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "bossId" field.</summary>
    public const int BossIdFieldNumber = 1;
    private uint bossId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BossId {
      get { if ((_hasBits0 & 1) != 0) { return bossId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        bossId_ = value;
      }
    }
    /// <summary>Gets whether the "bossId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBossId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "bossId" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBossIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "bossId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBossId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "nestId" field.</summary>
    public const int NestIdFieldNumber = 2;
    private uint nestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NestId {
      get { if ((_hasBits0 & 2) != 0) { return nestId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        nestId_ = value;
      }
    }
    /// <summary>Gets whether the "nestId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNestId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "nestId" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNestIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "nestId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNestId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DestoryNestMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DestoryNestMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BossId != other.BossId) return false;
      if (NestId != other.NestId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBossId) hash ^= BossId.GetHashCode();
      if (HasNestId) hash ^= NestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasBossId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBossIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(BossId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNestId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNestIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(NestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasBossId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBossIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(BossId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNestId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNestIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(NestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasBossId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsBossIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BossId);
      }
      if ((scope == pb.WriteScope.FULL && HasNestId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNestIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DestoryNestMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasBossId) {
        BossId = other.BossId;
      }
      if (other.HasNestId) {
        NestId = other.NestId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BossId = input.ReadUInt32();
            break;
          }
          case 16: {
            NestId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BossId = input.ReadUInt32();
            break;
          }
          case 16: {
            NestId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SellProductMsg : pb::IMessage<SellProductMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SellProductMsg> _parser = new pb::MessageParser<SellProductMsg>(() => new SellProductMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellProductMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellProductMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellProductMsg(SellProductMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      npcEntityId_ = other.npcEntityId_;
      sellEntityId_ = other.sellEntityId_;
      singlePrice_ = other.singlePrice_;
      propCfgId_ = other.propCfgId_;
      propCount_ = other.propCount_;
      slotId_ = other.slotId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellProductMsg Clone() {
      return new SellProductMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "npc_entity_id" field.</summary>
    public const int NpcEntityIdFieldNumber = 1;
    private uint npcEntityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NpcEntityId {
      get { if ((_hasBits0 & 1) != 0) { return npcEntityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        npcEntityId_ = value;
      }
    }
    /// <summary>Gets whether the "npc_entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNpcEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "npc_entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNpcEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "npc_entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNpcEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "sell_entity_id" field.</summary>
    public const int SellEntityIdFieldNumber = 2;
    private uint sellEntityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SellEntityId {
      get { if ((_hasBits0 & 2) != 0) { return sellEntityId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        sellEntityId_ = value;
      }
    }
    /// <summary>Gets whether the "sell_entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSellEntityId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "sell_entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSellEntityIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "sell_entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSellEntityId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "single_price" field.</summary>
    public const int SinglePriceFieldNumber = 3;
    private int singlePrice_;
    /// <summary>
    ///todo
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SinglePrice {
      get { if ((_hasBits0 & 4) != 0) { return singlePrice_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        singlePrice_ = value;
      }
    }
    /// <summary>Gets whether the "single_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSinglePrice {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "single_price" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSinglePriceDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "single_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSinglePrice() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "prop_cfg_id" field.</summary>
    public const int PropCfgIdFieldNumber = 4;
    private uint propCfgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PropCfgId {
      get { if ((_hasBits0 & 8) != 0) { return propCfgId_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        propCfgId_ = value;
      }
    }
    /// <summary>Gets whether the "prop_cfg_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPropCfgId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "prop_cfg_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPropCfgIdDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "prop_cfg_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPropCfgId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "prop_count" field.</summary>
    public const int PropCountFieldNumber = 5;
    private uint propCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PropCount {
      get { if ((_hasBits0 & 16) != 0) { return propCount_; } else { return 0; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 16;
        propCount_ = value;
      }
    }
    /// <summary>Gets whether the "prop_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPropCount {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "prop_count" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPropCountDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "prop_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPropCount() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "slot_id" field.</summary>
    public const int SlotIdFieldNumber = 6;
    private uint slotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SlotId {
      get { if ((_hasBits0 & 32) != 0) { return slotId_; } else { return 0; } }
      set {
        _hasBits0 |= 32;
        _dirtyBits0 |= 32;
        slotId_ = value;
      }
    }
    /// <summary>Gets whether the "slot_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSlotId {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Gets whether the "slot_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSlotIdDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "slot_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSlotId() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellProductMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellProductMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NpcEntityId != other.NpcEntityId) return false;
      if (SellEntityId != other.SellEntityId) return false;
      if (SinglePrice != other.SinglePrice) return false;
      if (PropCfgId != other.PropCfgId) return false;
      if (PropCount != other.PropCount) return false;
      if (SlotId != other.SlotId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNpcEntityId) hash ^= NpcEntityId.GetHashCode();
      if (HasSellEntityId) hash ^= SellEntityId.GetHashCode();
      if (HasSinglePrice) hash ^= SinglePrice.GetHashCode();
      if (HasPropCfgId) hash ^= PropCfgId.GetHashCode();
      if (HasPropCount) hash ^= PropCount.GetHashCode();
      if (HasSlotId) hash ^= SlotId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasNpcEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNpcEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(NpcEntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSellEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSellEntityIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SellEntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSinglePrice)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSinglePriceDirty)) {
        output.WriteRawTag(24);
        output.WriteInt32(SinglePrice);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPropCfgId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropCfgIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(PropCfgId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPropCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropCountDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(PropCount);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSlotId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSlotIdDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(SlotId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasNpcEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNpcEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(NpcEntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSellEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSellEntityIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SellEntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSinglePrice)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSinglePriceDirty)) {
        output.WriteRawTag(24);
        output.WriteInt32(SinglePrice);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPropCfgId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropCfgIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(PropCfgId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPropCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropCountDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(PropCount);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSlotId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSlotIdDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(SlotId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasNpcEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNpcEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcEntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasSellEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSellEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SellEntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasSinglePrice)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSinglePriceDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SinglePrice);
      }
      if ((scope == pb.WriteScope.FULL && HasPropCfgId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsPropCfgIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PropCfgId);
      }
      if ((scope == pb.WriteScope.FULL && HasPropCount)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsPropCountDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PropCount);
      }
      if ((scope == pb.WriteScope.FULL && HasSlotId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSlotIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SlotId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellProductMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasNpcEntityId) {
        NpcEntityId = other.NpcEntityId;
      }
      if (other.HasSellEntityId) {
        SellEntityId = other.SellEntityId;
      }
      if (other.HasSinglePrice) {
        SinglePrice = other.SinglePrice;
      }
      if (other.HasPropCfgId) {
        PropCfgId = other.PropCfgId;
      }
      if (other.HasPropCount) {
        PropCount = other.PropCount;
      }
      if (other.HasSlotId) {
        SlotId = other.SlotId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NpcEntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            SellEntityId = input.ReadUInt32();
            break;
          }
          case 24: {
            SinglePrice = input.ReadInt32();
            break;
          }
          case 32: {
            PropCfgId = input.ReadUInt32();
            break;
          }
          case 40: {
            PropCount = input.ReadUInt32();
            break;
          }
          case 48: {
            SlotId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NpcEntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            SellEntityId = input.ReadUInt32();
            break;
          }
          case 24: {
            SinglePrice = input.ReadInt32();
            break;
          }
          case 32: {
            PropCfgId = input.ReadUInt32();
            break;
          }
          case 40: {
            PropCount = input.ReadUInt32();
            break;
          }
          case 48: {
            SlotId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BuyProductMsg : pb::IMessage<BuyProductMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BuyProductMsg> _parser = new pb::MessageParser<BuyProductMsg>(() => new BuyProductMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuyProductMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyProductMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyProductMsg(BuyProductMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      npcEntityId_ = other.npcEntityId_;
      recvEntityId_ = other.recvEntityId_;
      index_ = other.index_;
      propCfgId_ = other.propCfgId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyProductMsg Clone() {
      return new BuyProductMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "npc_entity_id" field.</summary>
    public const int NpcEntityIdFieldNumber = 1;
    private uint npcEntityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NpcEntityId {
      get { if ((_hasBits0 & 1) != 0) { return npcEntityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        npcEntityId_ = value;
      }
    }
    /// <summary>Gets whether the "npc_entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNpcEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "npc_entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNpcEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "npc_entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNpcEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "recv_entity_id" field.</summary>
    public const int RecvEntityIdFieldNumber = 2;
    private uint recvEntityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecvEntityId {
      get { if ((_hasBits0 & 2) != 0) { return recvEntityId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        recvEntityId_ = value;
      }
    }
    /// <summary>Gets whether the "recv_entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRecvEntityId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "recv_entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRecvEntityIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "recv_entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRecvEntityId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { if ((_hasBits0 & 4) != 0) { return index_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        index_ = value;
      }
    }
    /// <summary>Gets whether the "index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIndex {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "index" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIndexDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIndex() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "prop_cfg_id" field.</summary>
    public const int PropCfgIdFieldNumber = 4;
    private uint propCfgId_;
    /// <summary>
    ///增加校验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PropCfgId {
      get { if ((_hasBits0 & 8) != 0) { return propCfgId_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        propCfgId_ = value;
      }
    }
    /// <summary>Gets whether the "prop_cfg_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPropCfgId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "prop_cfg_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPropCfgIdDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "prop_cfg_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPropCfgId() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuyProductMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuyProductMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NpcEntityId != other.NpcEntityId) return false;
      if (RecvEntityId != other.RecvEntityId) return false;
      if (Index != other.Index) return false;
      if (PropCfgId != other.PropCfgId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNpcEntityId) hash ^= NpcEntityId.GetHashCode();
      if (HasRecvEntityId) hash ^= RecvEntityId.GetHashCode();
      if (HasIndex) hash ^= Index.GetHashCode();
      if (HasPropCfgId) hash ^= PropCfgId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasNpcEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNpcEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(NpcEntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasRecvEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRecvEntityIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(RecvEntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIndex)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIndexDirty)) {
        output.WriteRawTag(24);
        output.WriteInt32(Index);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPropCfgId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropCfgIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(PropCfgId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasNpcEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNpcEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(NpcEntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasRecvEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRecvEntityIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(RecvEntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIndex)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIndexDirty)) {
        output.WriteRawTag(24);
        output.WriteInt32(Index);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPropCfgId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropCfgIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(PropCfgId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasNpcEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNpcEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcEntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasRecvEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsRecvEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecvEntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasIndex)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIndexDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if ((scope == pb.WriteScope.FULL && HasPropCfgId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsPropCfgIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PropCfgId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuyProductMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasNpcEntityId) {
        NpcEntityId = other.NpcEntityId;
      }
      if (other.HasRecvEntityId) {
        RecvEntityId = other.RecvEntityId;
      }
      if (other.HasIndex) {
        Index = other.Index;
      }
      if (other.HasPropCfgId) {
        PropCfgId = other.PropCfgId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NpcEntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            RecvEntityId = input.ReadUInt32();
            break;
          }
          case 24: {
            Index = input.ReadInt32();
            break;
          }
          case 32: {
            PropCfgId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NpcEntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            RecvEntityId = input.ReadUInt32();
            break;
          }
          case 24: {
            Index = input.ReadInt32();
            break;
          }
          case 32: {
            PropCfgId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///使用连接点
  /// </summary>
  public sealed partial class UseLadderMsg : pb::IMessage<UseLadderMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UseLadderMsg> _parser = new pb::MessageParser<UseLadderMsg>(() => new UseLadderMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UseLadderMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseLadderMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseLadderMsg(UseLadderMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      ladderId_ = other.ladderId_;
      userId_ = other.userId_;
      isEnter_ = other.isEnter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseLadderMsg Clone() {
      return new UseLadderMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "ladder_id" field.</summary>
    public const int LadderIdFieldNumber = 1;
    private uint ladderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LadderId {
      get { if ((_hasBits0 & 1) != 0) { return ladderId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        ladderId_ = value;
      }
    }
    /// <summary>Gets whether the "ladder_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLadderId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "ladder_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLadderIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ladder_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLadderId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private uint userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { if ((_hasBits0 & 2) != 0) { return userId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        userId_ = value;
      }
    }
    /// <summary>Gets whether the "user_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUserId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "user_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUserIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "user_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUserId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "is_enter" field.</summary>
    public const int IsEnterFieldNumber = 3;
    private bool isEnter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEnter {
      get { if ((_hasBits0 & 4) != 0) { return isEnter_; } else { return false; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        isEnter_ = value;
      }
    }
    /// <summary>Gets whether the "is_enter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsEnter {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "is_enter" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIsEnterDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "is_enter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsEnter() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UseLadderMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UseLadderMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LadderId != other.LadderId) return false;
      if (UserId != other.UserId) return false;
      if (IsEnter != other.IsEnter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLadderId) hash ^= LadderId.GetHashCode();
      if (HasUserId) hash ^= UserId.GetHashCode();
      if (HasIsEnter) hash ^= IsEnter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasLadderId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLadderIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(LadderId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasUserId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUserIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(UserId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsEnter)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsEnterDirty)) {
        output.WriteRawTag(24);
        output.WriteBool(IsEnter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasLadderId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLadderIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(LadderId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasUserId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUserIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(UserId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsEnter)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsEnterDirty)) {
        output.WriteRawTag(24);
        output.WriteBool(IsEnter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasLadderId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsLadderIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LadderId);
      }
      if ((scope == pb.WriteScope.FULL && HasUserId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsUserIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if ((scope == pb.WriteScope.FULL && HasIsEnter)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIsEnterDirty)) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UseLadderMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasLadderId) {
        LadderId = other.LadderId;
      }
      if (other.HasUserId) {
        UserId = other.UserId;
      }
      if (other.HasIsEnter) {
        IsEnter = other.IsEnter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LadderId = input.ReadUInt32();
            break;
          }
          case 16: {
            UserId = input.ReadUInt32();
            break;
          }
          case 24: {
            IsEnter = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LadderId = input.ReadUInt32();
            break;
          }
          case 16: {
            UserId = input.ReadUInt32();
            break;
          }
          case 24: {
            IsEnter = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///使用工具点协议，建议服用该协议
  /// </summary>
  public sealed partial class UsePointMsg : pb::IMessage<UsePointMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UsePointMsg> _parser = new pb::MessageParser<UsePointMsg>(() => new UsePointMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UsePointMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsePointMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsePointMsg(UsePointMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      userId_ = other.userId_;
      pointId_ = other.pointId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsePointMsg Clone() {
      return new UsePointMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private uint userId_;
    /// <summary>
    ///使用者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { if ((_hasBits0 & 1) != 0) { return userId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        userId_ = value;
      }
    }
    /// <summary>Gets whether the "user_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUserId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "user_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUserIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "user_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUserId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "point_id" field.</summary>
    public const int PointIdFieldNumber = 2;
    private uint pointId_;
    /// <summary>
    ///工具点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PointId {
      get { if ((_hasBits0 & 2) != 0) { return pointId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        pointId_ = value;
      }
    }
    /// <summary>Gets whether the "point_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPointId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "point_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPointIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "point_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPointId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UsePointMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UsePointMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (PointId != other.PointId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUserId) hash ^= UserId.GetHashCode();
      if (HasPointId) hash ^= PointId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasUserId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUserIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPointId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPointIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(PointId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasUserId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUserIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPointId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPointIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(PointId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasUserId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsUserIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if ((scope == pb.WriteScope.FULL && HasPointId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsPointIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PointId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UsePointMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasUserId) {
        UserId = other.UserId;
      }
      if (other.HasPointId) {
        PointId = other.PointId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
          case 16: {
            PointId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
          case 16: {
            PointId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///丢弃物品req
  /// </summary>
  public sealed partial class DropPropReq : pb::IMessage<DropPropReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DropPropReq> _parser = new pb::MessageParser<DropPropReq>(() => new DropPropReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DropPropReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropPropReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropPropReq(DropPropReq other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      thingId_ = other.thingId_;
      slotId_ = other.slotId_;
      propDataList_ = other.propDataList_.Clone();
      position_ = other.HasPosition ? other.position_.Clone() : null;
      rotation_ = other.HasRotation ? other.rotation_.Clone() : null;
      entityId_ = other.entityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropPropReq Clone() {
      return new DropPropReq(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "thing_id" field.</summary>
    public const int ThingIdFieldNumber = 1;
    private ulong thingId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ThingId {
      get { if ((_hasBits0 & 1) != 0) { return thingId_; } else { return 0UL; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        thingId_ = value;
      }
    }
    /// <summary>Gets whether the "thing_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasThingId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "thing_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsThingIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "thing_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearThingId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "slot_id" field.</summary>
    public const int SlotIdFieldNumber = 2;
    private uint slotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SlotId {
      get { if ((_hasBits0 & 2) != 0) { return slotId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        slotId_ = value;
      }
    }
    /// <summary>Gets whether the "slot_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSlotId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "slot_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSlotIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "slot_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSlotId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "prop_data_list" field.</summary>
    public const int PropDataListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.PropData> _repeated_propDataList_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.PropData.Parser);
    private readonly pbc::RepeatedField<global::Protocol.PropData> propDataList_ = new pbc::RepeatedField<global::Protocol.PropData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.PropData> PropDataList {
      get { return propDataList_; }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 4;
    private global::Protocol.Float3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }
    /// <summary>Gets whether the position field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPosition {
      get { return position_ != null; }
    }
    /// <summary>Clears the value of the position field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPosition() {
      position_ = null;
    }
    /// <summary>Gets whether the "position" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPositionDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 5;
    private global::Protocol.Float3 rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }
    /// <summary>Gets whether the rotation field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRotation {
      get { return rotation_ != null; }
    }
    /// <summary>Clears the value of the rotation field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRotation() {
      rotation_ = null;
    }
    /// <summary>Gets whether the "rotation" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRotationDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 6;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 4) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 32;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DropPropReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DropPropReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ThingId != other.ThingId) return false;
      if (SlotId != other.SlotId) return false;
      if(!propDataList_.Equals(other.propDataList_)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (EntityId != other.EntityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasThingId) hash ^= ThingId.GetHashCode();
      if (HasSlotId) hash ^= SlotId.GetHashCode();
      hash ^= propDataList_.GetHashCode();
      if (HasPosition) hash ^= Position.GetHashCode();
      if (HasRotation) hash ^= Rotation.GetHashCode();
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasThingId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsThingIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(ThingId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSlotId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSlotIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SlotId);
      }
      propDataList_.WriteTo(output, _repeated_propDataList_codec);
      if ((output.writeScope == pb.WriteScope.FULL && HasPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPositionDirty)) {
        output.WriteRawTag(34);
        output.WriteMessage(Position);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasRotation)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRotationDirty)) {
        output.WriteRawTag(42);
        output.WriteMessage(Rotation);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(EntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasThingId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsThingIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(ThingId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSlotId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSlotIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SlotId);
      }
      propDataList_.WriteTo(ref output, _repeated_propDataList_codec);
      if ((output.writeScope == pb.WriteScope.FULL && HasPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPositionDirty)) {
        output.WriteRawTag(34);
        output.WriteMessage(Position);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasRotation)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRotationDirty)) {
        output.WriteRawTag(42);
        output.WriteMessage(Rotation);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(EntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasThingId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsThingIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ThingId);
      }
      if ((scope == pb.WriteScope.FULL && HasSlotId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSlotIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SlotId);
      }
      size += propDataList_.CalculateSize(_repeated_propDataList_codec);
      if (HasPosition) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Position, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 8;
        } else {
          _dirtyBits0 &= ~8;
        }
      }
      if (HasRotation) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Rotation, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 16;
        } else {
          _dirtyBits0 &= ~16;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DropPropReq other) {
      if (other == null) {
        return;
      }
      if (other.HasThingId) {
        ThingId = other.ThingId;
      }
      if (other.HasSlotId) {
        SlotId = other.SlotId;
      }
      propDataList_.Add(other.propDataList_);
      if (other.HasPosition) {
        if (!HasPosition) {
          Position = new global::Protocol.Float3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.HasRotation) {
        if (!HasRotation) {
          Rotation = new global::Protocol.Float3();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ThingId = input.ReadUInt64();
            break;
          }
          case 16: {
            SlotId = input.ReadUInt32();
            break;
          }
          case 26: {
            propDataList_.AddEntriesFrom(input, _repeated_propDataList_codec);
            break;
          }
          case 34: {
            if (!HasPosition) {
              Position = new global::Protocol.Float3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 42: {
            if (!HasRotation) {
              Rotation = new global::Protocol.Float3();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 48: {
            EntityId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ThingId = input.ReadUInt64();
            break;
          }
          case 16: {
            SlotId = input.ReadUInt32();
            break;
          }
          case 26: {
            propDataList_.AddEntriesFrom(ref input, _repeated_propDataList_codec);
            break;
          }
          case 34: {
            if (!HasPosition) {
              Position = new global::Protocol.Float3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 42: {
            if (!HasRotation) {
              Rotation = new global::Protocol.Float3();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 48: {
            EntityId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///丢弃物品rsp
  /// </summary>
  public sealed partial class DropPropRsp : pb::IMessage<DropPropRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DropPropRsp> _parser = new pb::MessageParser<DropPropRsp>(() => new DropPropRsp());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DropPropRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropPropRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropPropRsp(DropPropRsp other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      thingId_ = other.thingId_;
      slotId_ = other.slotId_;
      propDataList_ = other.propDataList_.Clone();
      position_ = other.HasPosition ? other.position_.Clone() : null;
      rotation_ = other.HasRotation ? other.rotation_.Clone() : null;
      entityId_ = other.entityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropPropRsp Clone() {
      return new DropPropRsp(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "thing_id" field.</summary>
    public const int ThingIdFieldNumber = 1;
    private ulong thingId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ThingId {
      get { if ((_hasBits0 & 1) != 0) { return thingId_; } else { return 0UL; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        thingId_ = value;
      }
    }
    /// <summary>Gets whether the "thing_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasThingId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "thing_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsThingIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "thing_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearThingId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "slot_id" field.</summary>
    public const int SlotIdFieldNumber = 2;
    private uint slotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SlotId {
      get { if ((_hasBits0 & 2) != 0) { return slotId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        slotId_ = value;
      }
    }
    /// <summary>Gets whether the "slot_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSlotId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "slot_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSlotIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "slot_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSlotId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "prop_data_list" field.</summary>
    public const int PropDataListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.PropData> _repeated_propDataList_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.PropData.Parser);
    private readonly pbc::RepeatedField<global::Protocol.PropData> propDataList_ = new pbc::RepeatedField<global::Protocol.PropData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.PropData> PropDataList {
      get { return propDataList_; }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 4;
    private global::Protocol.Float3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }
    /// <summary>Gets whether the position field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPosition {
      get { return position_ != null; }
    }
    /// <summary>Clears the value of the position field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPosition() {
      position_ = null;
    }
    /// <summary>Gets whether the "position" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPositionDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 5;
    private global::Protocol.Float3 rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }
    /// <summary>Gets whether the rotation field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRotation {
      get { return rotation_ != null; }
    }
    /// <summary>Clears the value of the rotation field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRotation() {
      rotation_ = null;
    }
    /// <summary>Gets whether the "rotation" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRotationDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 6;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 4) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 32;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DropPropRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DropPropRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ThingId != other.ThingId) return false;
      if (SlotId != other.SlotId) return false;
      if(!propDataList_.Equals(other.propDataList_)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (EntityId != other.EntityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasThingId) hash ^= ThingId.GetHashCode();
      if (HasSlotId) hash ^= SlotId.GetHashCode();
      hash ^= propDataList_.GetHashCode();
      if (HasPosition) hash ^= Position.GetHashCode();
      if (HasRotation) hash ^= Rotation.GetHashCode();
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasThingId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsThingIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(ThingId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSlotId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSlotIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SlotId);
      }
      propDataList_.WriteTo(output, _repeated_propDataList_codec);
      if ((output.writeScope == pb.WriteScope.FULL && HasPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPositionDirty)) {
        output.WriteRawTag(34);
        output.WriteMessage(Position);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasRotation)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRotationDirty)) {
        output.WriteRawTag(42);
        output.WriteMessage(Rotation);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(EntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasThingId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsThingIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(ThingId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSlotId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSlotIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SlotId);
      }
      propDataList_.WriteTo(ref output, _repeated_propDataList_codec);
      if ((output.writeScope == pb.WriteScope.FULL && HasPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPositionDirty)) {
        output.WriteRawTag(34);
        output.WriteMessage(Position);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasRotation)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRotationDirty)) {
        output.WriteRawTag(42);
        output.WriteMessage(Rotation);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(EntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasThingId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsThingIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ThingId);
      }
      if ((scope == pb.WriteScope.FULL && HasSlotId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSlotIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SlotId);
      }
      size += propDataList_.CalculateSize(_repeated_propDataList_codec);
      if (HasPosition) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Position, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 8;
        } else {
          _dirtyBits0 &= ~8;
        }
      }
      if (HasRotation) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Rotation, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 16;
        } else {
          _dirtyBits0 &= ~16;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DropPropRsp other) {
      if (other == null) {
        return;
      }
      if (other.HasThingId) {
        ThingId = other.ThingId;
      }
      if (other.HasSlotId) {
        SlotId = other.SlotId;
      }
      propDataList_.Add(other.propDataList_);
      if (other.HasPosition) {
        if (!HasPosition) {
          Position = new global::Protocol.Float3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.HasRotation) {
        if (!HasRotation) {
          Rotation = new global::Protocol.Float3();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ThingId = input.ReadUInt64();
            break;
          }
          case 16: {
            SlotId = input.ReadUInt32();
            break;
          }
          case 26: {
            propDataList_.AddEntriesFrom(input, _repeated_propDataList_codec);
            break;
          }
          case 34: {
            if (!HasPosition) {
              Position = new global::Protocol.Float3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 42: {
            if (!HasRotation) {
              Rotation = new global::Protocol.Float3();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 48: {
            EntityId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ThingId = input.ReadUInt64();
            break;
          }
          case 16: {
            SlotId = input.ReadUInt32();
            break;
          }
          case 26: {
            propDataList_.AddEntriesFrom(ref input, _repeated_propDataList_codec);
            break;
          }
          case 34: {
            if (!HasPosition) {
              Position = new global::Protocol.Float3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 42: {
            if (!HasRotation) {
              Rotation = new global::Protocol.Float3();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 48: {
            EntityId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///添加到槽位(杂物/暗器)
  /// </summary>
  public sealed partial class SwapSlotMsg : pb::IMessage<SwapSlotMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SwapSlotMsg> _parser = new pb::MessageParser<SwapSlotMsg>(() => new SwapSlotMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwapSlotMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapSlotMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapSlotMsg(SwapSlotMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      slotIdFrom_ = other.slotIdFrom_;
      slotIdTo_ = other.slotIdTo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapSlotMsg Clone() {
      return new SwapSlotMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "slot_id_from" field.</summary>
    public const int SlotIdFromFieldNumber = 2;
    private uint slotIdFrom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SlotIdFrom {
      get { if ((_hasBits0 & 2) != 0) { return slotIdFrom_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        slotIdFrom_ = value;
      }
    }
    /// <summary>Gets whether the "slot_id_from" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSlotIdFrom {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "slot_id_from" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSlotIdFromDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "slot_id_from" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSlotIdFrom() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "slot_id_to" field.</summary>
    public const int SlotIdToFieldNumber = 3;
    private uint slotIdTo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SlotIdTo {
      get { if ((_hasBits0 & 4) != 0) { return slotIdTo_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        slotIdTo_ = value;
      }
    }
    /// <summary>Gets whether the "slot_id_to" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSlotIdTo {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "slot_id_to" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSlotIdToDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "slot_id_to" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSlotIdTo() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwapSlotMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwapSlotMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (SlotIdFrom != other.SlotIdFrom) return false;
      if (SlotIdTo != other.SlotIdTo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasSlotIdFrom) hash ^= SlotIdFrom.GetHashCode();
      if (HasSlotIdTo) hash ^= SlotIdTo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSlotIdFrom)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSlotIdFromDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SlotIdFrom);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSlotIdTo)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSlotIdToDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(SlotIdTo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSlotIdFrom)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSlotIdFromDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SlotIdFrom);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSlotIdTo)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSlotIdToDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(SlotIdTo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasSlotIdFrom)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSlotIdFromDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SlotIdFrom);
      }
      if ((scope == pb.WriteScope.FULL && HasSlotIdTo)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSlotIdToDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SlotIdTo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwapSlotMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasSlotIdFrom) {
        SlotIdFrom = other.SlotIdFrom;
      }
      if (other.HasSlotIdTo) {
        SlotIdTo = other.SlotIdTo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            SlotIdFrom = input.ReadUInt32();
            break;
          }
          case 24: {
            SlotIdTo = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            SlotIdFrom = input.ReadUInt32();
            break;
          }
          case 24: {
            SlotIdTo = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///打断添加到槽位(杂物/暗器)
  /// </summary>
  public sealed partial class BreakAddToSlotMsg : pb::IMessage<BreakAddToSlotMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BreakAddToSlotMsg> _parser = new pb::MessageParser<BreakAddToSlotMsg>(() => new BreakAddToSlotMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BreakAddToSlotMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreakAddToSlotMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreakAddToSlotMsg(BreakAddToSlotMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreakAddToSlotMsg Clone() {
      return new BreakAddToSlotMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BreakAddToSlotMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BreakAddToSlotMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BreakAddToSlotMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///使用物品(杂物/暗器)
  /// </summary>
  public sealed partial class UsePropMsg : pb::IMessage<UsePropMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UsePropMsg> _parser = new pb::MessageParser<UsePropMsg>(() => new UsePropMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UsePropMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsePropMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsePropMsg(UsePropMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      slotId_ = other.slotId_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsePropMsg Clone() {
      return new UsePropMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "slot_id" field.</summary>
    public const int SlotIdFieldNumber = 2;
    private uint slotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SlotId {
      get { if ((_hasBits0 & 2) != 0) { return slotId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        slotId_ = value;
      }
    }
    /// <summary>Gets whether the "slot_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSlotId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "slot_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSlotIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "slot_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSlotId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private uint count_;
    /// <summary>
    ///使用数量(默认为1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { if ((_hasBits0 & 4) != 0) { return count_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        count_ = value;
      }
    }
    /// <summary>Gets whether the "count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCount {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "count" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCountDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCount() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UsePropMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UsePropMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (SlotId != other.SlotId) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasSlotId) hash ^= SlotId.GetHashCode();
      if (HasCount) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSlotId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSlotIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SlotId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCountDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSlotId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSlotIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SlotId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCountDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasSlotId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSlotIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SlotId);
      }
      if ((scope == pb.WriteScope.FULL && HasCount)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCountDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UsePropMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasSlotId) {
        SlotId = other.SlotId;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            SlotId = input.ReadUInt32();
            break;
          }
          case 24: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            SlotId = input.ReadUInt32();
            break;
          }
          case 24: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ActiveTaskMsg : pb::IMessage<ActiveTaskMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActiveTaskMsg> _parser = new pb::MessageParser<ActiveTaskMsg>(() => new ActiveTaskMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActiveTaskMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveTaskMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveTaskMsg(ActiveTaskMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      taskId_ = other.taskId_;
      taskDetailParamMergeList_ = other.taskDetailParamMergeList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveTaskMsg Clone() {
      return new ActiveTaskMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private uint taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { if ((_hasBits0 & 2) != 0) { return taskId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        taskId_ = value;
      }
    }
    /// <summary>Gets whether the "task_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTaskId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "task_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTaskIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "task_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTaskId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "task_detail_param_merge_list" field.</summary>
    public const int TaskDetailParamMergeListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.TaskDetailParam> _repeated_taskDetailParamMergeList_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.TaskDetailParam.Parser);
    private readonly pbc::RepeatedField<global::Protocol.TaskDetailParam> taskDetailParamMergeList_ = new pbc::RepeatedField<global::Protocol.TaskDetailParam>();
    /// <summary>
    ///具体任务所需id,num条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.TaskDetailParam> TaskDetailParamMergeList {
      get { return taskDetailParamMergeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActiveTaskMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActiveTaskMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (TaskId != other.TaskId) return false;
      if(!taskDetailParamMergeList_.Equals(other.taskDetailParamMergeList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasTaskId) hash ^= TaskId.GetHashCode();
      hash ^= taskDetailParamMergeList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTaskId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTaskIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(TaskId);
      }
      taskDetailParamMergeList_.WriteTo(output, _repeated_taskDetailParamMergeList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTaskId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTaskIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(TaskId);
      }
      taskDetailParamMergeList_.WriteTo(ref output, _repeated_taskDetailParamMergeList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasTaskId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTaskIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      size += taskDetailParamMergeList_.CalculateSize(_repeated_taskDetailParamMergeList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActiveTaskMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasTaskId) {
        TaskId = other.TaskId;
      }
      taskDetailParamMergeList_.Add(other.taskDetailParamMergeList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 26: {
            taskDetailParamMergeList_.AddEntriesFrom(input, _repeated_taskDetailParamMergeList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 26: {
            taskDetailParamMergeList_.AddEntriesFrom(ref input, _repeated_taskDetailParamMergeList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ThrowBallMsg : pb::IMessage<ThrowBallMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ThrowBallMsg> _parser = new pb::MessageParser<ThrowBallMsg>(() => new ThrowBallMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ThrowBallMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrowBallMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrowBallMsg(ThrowBallMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      fsmId_ = other.fsmId_;
      ballEntityId_ = other.ballEntityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrowBallMsg Clone() {
      return new ThrowBallMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "fsm_id" field.</summary>
    public const int FsmIdFieldNumber = 2;
    private ulong fsmId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FsmId {
      get { if ((_hasBits0 & 2) != 0) { return fsmId_; } else { return 0UL; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        fsmId_ = value;
      }
    }
    /// <summary>Gets whether the "fsm_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFsmId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "fsm_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFsmIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "fsm_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFsmId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "ball_entity_id" field.</summary>
    public const int BallEntityIdFieldNumber = 3;
    private uint ballEntityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BallEntityId {
      get { if ((_hasBits0 & 4) != 0) { return ballEntityId_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        ballEntityId_ = value;
      }
    }
    /// <summary>Gets whether the "ball_entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBallEntityId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "ball_entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBallEntityIdDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "ball_entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBallEntityId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ThrowBallMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ThrowBallMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (FsmId != other.FsmId) return false;
      if (BallEntityId != other.BallEntityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasFsmId) hash ^= FsmId.GetHashCode();
      if (HasBallEntityId) hash ^= BallEntityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFsmId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFsmIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt64(FsmId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBallEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBallEntityIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(BallEntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFsmId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFsmIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt64(FsmId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBallEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBallEntityIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(BallEntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasFsmId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsFsmIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FsmId);
      }
      if ((scope == pb.WriteScope.FULL && HasBallEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsBallEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BallEntityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ThrowBallMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasFsmId) {
        FsmId = other.FsmId;
      }
      if (other.HasBallEntityId) {
        BallEntityId = other.BallEntityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            FsmId = input.ReadUInt64();
            break;
          }
          case 24: {
            BallEntityId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            FsmId = input.ReadUInt64();
            break;
          }
          case 24: {
            BallEntityId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TaskCompleteMsg : pb::IMessage<TaskCompleteMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TaskCompleteMsg> _parser = new pb::MessageParser<TaskCompleteMsg>(() => new TaskCompleteMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskCompleteMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskCompleteMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskCompleteMsg(TaskCompleteMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      taskId_ = other.taskId_;
      taskState_ = other.taskState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskCompleteMsg Clone() {
      return new TaskCompleteMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private uint taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { if ((_hasBits0 & 2) != 0) { return taskId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        taskId_ = value;
      }
    }
    /// <summary>Gets whether the "task_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTaskId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "task_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTaskIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "task_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTaskId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "task_state" field.</summary>
    public const int TaskStateFieldNumber = 3;
    private uint taskState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskState {
      get { if ((_hasBits0 & 4) != 0) { return taskState_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        taskState_ = value;
      }
    }
    /// <summary>Gets whether the "task_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTaskState {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "task_state" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTaskStateDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "task_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTaskState() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskCompleteMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskCompleteMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (TaskId != other.TaskId) return false;
      if (TaskState != other.TaskState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasTaskId) hash ^= TaskId.GetHashCode();
      if (HasTaskState) hash ^= TaskState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTaskId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTaskIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(TaskId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTaskState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTaskStateDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(TaskState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTaskId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTaskIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(TaskId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTaskState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTaskStateDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(TaskState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasTaskId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTaskIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if ((scope == pb.WriteScope.FULL && HasTaskState)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTaskStateDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskCompleteMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasTaskId) {
        TaskId = other.TaskId;
      }
      if (other.HasTaskState) {
        TaskState = other.TaskState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 24: {
            TaskState = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 24: {
            TaskState = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ShowExposeMsg : pb::IMessage<ShowExposeMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ShowExposeMsg> _parser = new pb::MessageParser<ShowExposeMsg>(() => new ShowExposeMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShowExposeMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowExposeMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowExposeMsg(ShowExposeMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowExposeMsg Clone() {
      return new ShowExposeMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShowExposeMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShowExposeMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShowExposeMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TransferNestMsg : pb::IMessage<TransferNestMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TransferNestMsg> _parser = new pb::MessageParser<TransferNestMsg>(() => new TransferNestMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransferNestMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferNestMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferNestMsg(TransferNestMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      nestEntityId_ = other.nestEntityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferNestMsg Clone() {
      return new TransferNestMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "nest_entity_id" field.</summary>
    public const int NestEntityIdFieldNumber = 2;
    private uint nestEntityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NestEntityId {
      get { if ((_hasBits0 & 2) != 0) { return nestEntityId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        nestEntityId_ = value;
      }
    }
    /// <summary>Gets whether the "nest_entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNestEntityId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "nest_entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNestEntityIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "nest_entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNestEntityId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransferNestMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransferNestMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (NestEntityId != other.NestEntityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasNestEntityId) hash ^= NestEntityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNestEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNestEntityIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(NestEntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNestEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNestEntityIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(NestEntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasNestEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNestEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NestEntityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransferNestMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasNestEntityId) {
        NestEntityId = other.NestEntityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            NestEntityId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            NestEntityId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UpdateCharacterDirMsg : pb::IMessage<UpdateCharacterDirMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdateCharacterDirMsg> _parser = new pb::MessageParser<UpdateCharacterDirMsg>(() => new UpdateCharacterDirMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateCharacterDirMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCharacterDirMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCharacterDirMsg(UpdateCharacterDirMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCharacterDirMsg Clone() {
      return new UpdateCharacterDirMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateCharacterDirMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateCharacterDirMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateCharacterDirMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///创建蛊灵
  /// </summary>
  public sealed partial class CreateInsanityMsg : pb::IMessage<CreateInsanityMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateInsanityMsg> _parser = new pb::MessageParser<CreateInsanityMsg>(() => new CreateInsanityMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateInsanityMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInsanityMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInsanityMsg(CreateInsanityMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      masterEntityId_ = other.masterEntityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInsanityMsg Clone() {
      return new CreateInsanityMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "master_entity_id" field.</summary>
    public const int MasterEntityIdFieldNumber = 1;
    private uint masterEntityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MasterEntityId {
      get { if ((_hasBits0 & 1) != 0) { return masterEntityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        masterEntityId_ = value;
      }
    }
    /// <summary>Gets whether the "master_entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMasterEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "master_entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMasterEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "master_entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMasterEntityId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateInsanityMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateInsanityMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MasterEntityId != other.MasterEntityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMasterEntityId) hash ^= MasterEntityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasMasterEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMasterEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(MasterEntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasMasterEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMasterEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(MasterEntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasMasterEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsMasterEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MasterEntityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateInsanityMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasMasterEntityId) {
        MasterEntityId = other.MasterEntityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MasterEntityId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MasterEntityId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///收集线索
  /// </summary>
  public sealed partial class ClueCollectMsg : pb::IMessage<ClueCollectMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClueCollectMsg> _parser = new pb::MessageParser<ClueCollectMsg>(() => new ClueCollectMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClueCollectMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClueCollectMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClueCollectMsg(ClueCollectMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      clueCount_ = other.clueCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClueCollectMsg Clone() {
      return new ClueCollectMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "clue_count" field.</summary>
    public const int ClueCountFieldNumber = 2;
    private uint clueCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClueCount {
      get { if ((_hasBits0 & 2) != 0) { return clueCount_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        clueCount_ = value;
      }
    }
    /// <summary>Gets whether the "clue_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClueCount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "clue_count" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsClueCountDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "clue_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClueCount() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClueCollectMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClueCollectMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (ClueCount != other.ClueCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasClueCount) hash ^= ClueCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasClueCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsClueCountDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(ClueCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasClueCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsClueCountDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(ClueCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasClueCount)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsClueCountDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClueCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClueCollectMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasClueCount) {
        ClueCount = other.ClueCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            ClueCount = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            ClueCount = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家携带至宝撤离
  /// </summary>
  public sealed partial class PlayerGetClueAndExitMsg : pb::IMessage<PlayerGetClueAndExitMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerGetClueAndExitMsg> _parser = new pb::MessageParser<PlayerGetClueAndExitMsg>(() => new PlayerGetClueAndExitMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerGetClueAndExitMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerGetClueAndExitMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerGetClueAndExitMsg(PlayerGetClueAndExitMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      clueCount_ = other.clueCount_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerGetClueAndExitMsg Clone() {
      return new PlayerGetClueAndExitMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "clue_count" field.</summary>
    public const int ClueCountFieldNumber = 2;
    private uint clueCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClueCount {
      get { if ((_hasBits0 & 2) != 0) { return clueCount_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        clueCount_ = value;
      }
    }
    /// <summary>Gets whether the "clue_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClueCount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "clue_count" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsClueCountDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "clue_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClueCount() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private uint state_;
    /// <summary>
    ///1 进行撤离。 0 被打断
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { if ((_hasBits0 & 4) != 0) { return state_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "state" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStateDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerGetClueAndExitMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerGetClueAndExitMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (ClueCount != other.ClueCount) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasClueCount) hash ^= ClueCount.GetHashCode();
      if (HasState) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasClueCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsClueCountDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(ClueCount);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStateDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasClueCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsClueCountDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(ClueCount);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStateDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasClueCount)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsClueCountDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClueCount);
      }
      if ((scope == pb.WriteScope.FULL && HasState)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsStateDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerGetClueAndExitMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasClueCount) {
        ClueCount = other.ClueCount;
      }
      if (other.HasState) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            ClueCount = input.ReadUInt32();
            break;
          }
          case 24: {
            State = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            ClueCount = input.ReadUInt32();
            break;
          }
          case 24: {
            State = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HitSuccessMsg : pb::IMessage<HitSuccessMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HitSuccessMsg> _parser = new pb::MessageParser<HitSuccessMsg>(() => new HitSuccessMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HitSuccessMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitSuccessMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitSuccessMsg(HitSuccessMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      originEntityId_ = other.originEntityId_;
      attackedEntityDic_ = other.attackedEntityDic_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitSuccessMsg Clone() {
      return new HitSuccessMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "origin_entity_id" field.</summary>
    public const int OriginEntityIdFieldNumber = 1;
    private uint originEntityId_;
    /// <summary>
    ///发动攻击的entity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OriginEntityId {
      get { if ((_hasBits0 & 1) != 0) { return originEntityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        originEntityId_ = value;
      }
    }
    /// <summary>Gets whether the "origin_entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "origin_entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOriginEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "origin_entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "attacked_entity_dic" field.</summary>
    public const int AttackedEntityDicFieldNumber = 2;
    private static readonly pbc::MapField<uint, uint>.Codec _map_attackedEntityDic_codec
        = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForUInt32(16, 0), 18);
    private readonly pbc::MapField<uint, uint> attackedEntityDic_ = new pbc::MapField<uint, uint>();
    /// <summary>
    ///被攻击盒检测到的Entity 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, uint> AttackedEntityDic {
      get { return attackedEntityDic_; }
    }
    /// <summary>Gets whether the "attacked_entity_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttackedEntityDicDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HitSuccessMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HitSuccessMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OriginEntityId != other.OriginEntityId) return false;
      if (!AttackedEntityDic.Equals(other.AttackedEntityDic)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOriginEntityId) hash ^= OriginEntityId.GetHashCode();
      hash ^= AttackedEntityDic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasOriginEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOriginEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(OriginEntityId);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAttackedEntityDicDirty)) {
        attackedEntityDic_.WriteTo(output, _map_attackedEntityDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasOriginEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOriginEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(OriginEntityId);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAttackedEntityDicDirty)) {
        attackedEntityDic_.WriteTo(ref output, _map_attackedEntityDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasOriginEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsOriginEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OriginEntityId);
      }
      if (AttackedEntityDic != null) {
        int msgSize = attackedEntityDic_.CalculateSize(_map_attackedEntityDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 2;
        } else {
          _dirtyBits0 &= ~2;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HitSuccessMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasOriginEntityId) {
        OriginEntityId = other.OriginEntityId;
      }
      foreach (var key in other.attackedEntityDic_.DeleteList) {
        attackedEntityDic_.Remove(key);
      }
      foreach (var pair in other.attackedEntityDic_) {
        attackedEntityDic_[pair.Key] = pair.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OriginEntityId = input.ReadUInt32();
            break;
          }
          case 18: {
            attackedEntityDic_.AddEntriesFrom(input, _map_attackedEntityDic_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OriginEntityId = input.ReadUInt32();
            break;
          }
          case 18: {
            attackedEntityDic_.AddEntriesFrom(ref input, _map_attackedEntityDic_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///游戏结算
  /// </summary>
  public sealed partial class GameResultMsg : pb::IMessage<GameResultMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameResultMsg> _parser = new pb::MessageParser<GameResultMsg>(() => new GameResultMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameResultMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResultMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResultMsg(GameResultMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      uid_ = other.uid_;
      playerId_ = other.playerId_;
      resultState_ = other.resultState_;
      propDataList_ = other.propDataList_.Clone();
      virtualPropList_ = other.virtualPropList_.Clone();
      clueCount_ = other.clueCount_;
      killCount_ = other.killCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResultMsg Clone() {
      return new GameResultMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_ ?? ""; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUid {
      get { return uid_ != null; }
    }
    /// <summary>Gets whether the "uid" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUidDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUid() {
      uid_ = null;
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private uint playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 2;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "player_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPlayerIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "result_state" field.</summary>
    public const int ResultStateFieldNumber = 3;
    private uint resultState_;
    /// <summary>
    ///是否成功撤离
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResultState {
      get { if ((_hasBits0 & 2) != 0) { return resultState_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 4;
        resultState_ = value;
      }
    }
    /// <summary>Gets whether the "result_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResultState {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "result_state" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsResultStateDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "result_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResultState() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "prop_data_list" field.</summary>
    public const int PropDataListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protocol.PropData> _repeated_propDataList_codec
        = pb::FieldCodec.ForMessage(34, global::Protocol.PropData.Parser);
    private readonly pbc::RepeatedField<global::Protocol.PropData> propDataList_ = new pbc::RepeatedField<global::Protocol.PropData>();
    /// <summary>
    ///背包暗格数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.PropData> PropDataList {
      get { return propDataList_; }
    }

    /// <summary>Field number for the "virtual_prop_list" field.</summary>
    public const int VirtualPropListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Protocol.VirtualPropData> _repeated_virtualPropList_codec
        = pb::FieldCodec.ForMessage(42, global::Protocol.VirtualPropData.Parser);
    private readonly pbc::RepeatedField<global::Protocol.VirtualPropData> virtualPropList_ = new pbc::RepeatedField<global::Protocol.VirtualPropData>();
    /// <summary>
    ///虚拟物品数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.VirtualPropData> VirtualPropList {
      get { return virtualPropList_; }
    }

    /// <summary>Field number for the "clue_count" field.</summary>
    public const int ClueCountFieldNumber = 6;
    private uint clueCount_;
    /// <summary>
    ///线索数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClueCount {
      get { if ((_hasBits0 & 4) != 0) { return clueCount_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 32;
        clueCount_ = value;
      }
    }
    /// <summary>Gets whether the "clue_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClueCount {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "clue_count" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsClueCountDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "clue_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClueCount() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "kill_count" field.</summary>
    public const int KillCountFieldNumber = 7;
    private uint killCount_;
    /// <summary>
    ///击杀数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KillCount {
      get { if ((_hasBits0 & 8) != 0) { return killCount_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 64;
        killCount_ = value;
      }
    }
    /// <summary>Gets whether the "kill_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKillCount {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "kill_count" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsKillCountDirty {
      get { return (_dirtyBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "kill_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKillCount() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameResultMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameResultMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (PlayerId != other.PlayerId) return false;
      if (ResultState != other.ResultState) return false;
      if(!propDataList_.Equals(other.propDataList_)) return false;
      if(!virtualPropList_.Equals(other.virtualPropList_)) return false;
      if (ClueCount != other.ClueCount) return false;
      if (KillCount != other.KillCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasResultState) hash ^= ResultState.GetHashCode();
      hash ^= propDataList_.GetHashCode();
      hash ^= virtualPropList_.GetHashCode();
      if (HasClueCount) hash ^= ClueCount.GetHashCode();
      if (HasKillCount) hash ^= KillCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasUid)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUidDirty)) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPlayerId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPlayerIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlayerId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasResultState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsResultStateDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(ResultState);
      }
      propDataList_.WriteTo(output, _repeated_propDataList_codec);
      virtualPropList_.WriteTo(output, _repeated_virtualPropList_codec);
      if ((output.writeScope == pb.WriteScope.FULL && HasClueCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsClueCountDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(ClueCount);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasKillCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsKillCountDirty)) {
        output.WriteRawTag(56);
        output.WriteUInt32(KillCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasUid)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUidDirty)) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPlayerId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPlayerIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlayerId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasResultState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsResultStateDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(ResultState);
      }
      propDataList_.WriteTo(ref output, _repeated_propDataList_codec);
      virtualPropList_.WriteTo(ref output, _repeated_virtualPropList_codec);
      if ((output.writeScope == pb.WriteScope.FULL && HasClueCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsClueCountDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(ClueCount);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasKillCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsKillCountDirty)) {
        output.WriteRawTag(56);
        output.WriteUInt32(KillCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasUid)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsUidDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if ((scope == pb.WriteScope.FULL && HasPlayerId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsPlayerIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      if ((scope == pb.WriteScope.FULL && HasResultState)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsResultStateDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResultState);
      }
      size += propDataList_.CalculateSize(_repeated_propDataList_codec);
      size += virtualPropList_.CalculateSize(_repeated_virtualPropList_codec);
      if ((scope == pb.WriteScope.FULL && HasClueCount)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsClueCountDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClueCount);
      }
      if ((scope == pb.WriteScope.FULL && HasKillCount)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsKillCountDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KillCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameResultMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasResultState) {
        ResultState = other.ResultState;
      }
      propDataList_.Add(other.propDataList_);
      virtualPropList_.Add(other.virtualPropList_);
      if (other.HasClueCount) {
        ClueCount = other.ClueCount;
      }
      if (other.HasKillCount) {
        KillCount = other.KillCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            PlayerId = input.ReadUInt32();
            break;
          }
          case 24: {
            ResultState = input.ReadUInt32();
            break;
          }
          case 34: {
            propDataList_.AddEntriesFrom(input, _repeated_propDataList_codec);
            break;
          }
          case 42: {
            virtualPropList_.AddEntriesFrom(input, _repeated_virtualPropList_codec);
            break;
          }
          case 48: {
            ClueCount = input.ReadUInt32();
            break;
          }
          case 56: {
            KillCount = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            PlayerId = input.ReadUInt32();
            break;
          }
          case 24: {
            ResultState = input.ReadUInt32();
            break;
          }
          case 34: {
            propDataList_.AddEntriesFrom(ref input, _repeated_propDataList_codec);
            break;
          }
          case 42: {
            virtualPropList_.AddEntriesFrom(ref input, _repeated_virtualPropList_codec);
            break;
          }
          case 48: {
            ClueCount = input.ReadUInt32();
            break;
          }
          case 56: {
            KillCount = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TransformSyncMsg : pb::IMessage<TransformSyncMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TransformSyncMsg> _parser = new pb::MessageParser<TransformSyncMsg>(() => new TransformSyncMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransformSyncMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformSyncMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformSyncMsg(TransformSyncMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      eID_ = other.eID_;
      postion_ = other.HasPostion ? other.postion_.Clone() : null;
      angle_ = other.angle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformSyncMsg Clone() {
      return new TransformSyncMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "eID" field.</summary>
    public const int EIDFieldNumber = 1;
    private uint eID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EID {
      get { if ((_hasBits0 & 1) != 0) { return eID_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        eID_ = value;
      }
    }
    /// <summary>Gets whether the "eID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEID {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "eID" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEIDDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "eID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEID() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "postion" field.</summary>
    public const int PostionFieldNumber = 2;
    private global::Protocol.Int3 postion_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Int3 Postion {
      get { return postion_; }
      set {
        postion_ = value;
      }
    }
    /// <summary>Gets whether the postion field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPostion {
      get { return postion_ != null; }
    }
    /// <summary>Clears the value of the postion field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPostion() {
      postion_ = null;
    }
    /// <summary>Gets whether the "postion" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPostionDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 3;
    private uint angle_;
    /// <summary>
    ///0~360度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Angle {
      get { if ((_hasBits0 & 2) != 0) { return angle_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 4;
        angle_ = value;
      }
    }
    /// <summary>Gets whether the "angle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAngle {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "angle" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAngleDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "angle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAngle() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransformSyncMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransformSyncMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EID != other.EID) return false;
      if (!object.Equals(Postion, other.Postion)) return false;
      if (Angle != other.Angle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEID) hash ^= EID.GetHashCode();
      if (HasPostion) hash ^= Postion.GetHashCode();
      if (HasAngle) hash ^= Angle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEID)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEIDDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EID);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPostion)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPostionDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(Postion);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAngle)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAngleDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(Angle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEID)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEIDDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EID);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPostion)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPostionDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(Postion);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAngle)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAngleDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(Angle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEID)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEIDDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EID);
      }
      if (HasPostion) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Postion, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 2;
        } else {
          _dirtyBits0 &= ~2;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasAngle)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsAngleDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Angle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransformSyncMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEID) {
        EID = other.EID;
      }
      if (other.HasPostion) {
        if (!HasPostion) {
          Postion = new global::Protocol.Int3();
        }
        Postion.MergeFrom(other.Postion);
      }
      if (other.HasAngle) {
        Angle = other.Angle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EID = input.ReadUInt32();
            break;
          }
          case 18: {
            if (!HasPostion) {
              Postion = new global::Protocol.Int3();
            }
            input.ReadMessage(Postion);
            break;
          }
          case 24: {
            Angle = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EID = input.ReadUInt32();
            break;
          }
          case 18: {
            if (!HasPostion) {
              Postion = new global::Protocol.Int3();
            }
            input.ReadMessage(Postion);
            break;
          }
          case 24: {
            Angle = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ActionBonfireAddWood : pb::IMessage<ActionBonfireAddWood>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActionBonfireAddWood> _parser = new pb::MessageParser<ActionBonfireAddWood>(() => new ActionBonfireAddWood());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionBonfireAddWood> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionBonfireAddWood() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionBonfireAddWood(ActionBonfireAddWood other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      originId_ = other.originId_;
      bonfireId_ = other.bonfireId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionBonfireAddWood Clone() {
      return new ActionBonfireAddWood(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "origin_id" field.</summary>
    public const int OriginIdFieldNumber = 1;
    private uint originId_;
    /// <summary>
    /// 发起者ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OriginId {
      get { if ((_hasBits0 & 1) != 0) { return originId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        originId_ = value;
      }
    }
    /// <summary>Gets whether the "origin_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "origin_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOriginIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "origin_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "bonfire_id" field.</summary>
    public const int BonfireIdFieldNumber = 2;
    private uint bonfireId_;
    /// <summary>
    /// 篝火ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BonfireId {
      get { if ((_hasBits0 & 2) != 0) { return bonfireId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        bonfireId_ = value;
      }
    }
    /// <summary>Gets whether the "bonfire_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBonfireId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "bonfire_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBonfireIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "bonfire_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBonfireId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionBonfireAddWood);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionBonfireAddWood other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OriginId != other.OriginId) return false;
      if (BonfireId != other.BonfireId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOriginId) hash ^= OriginId.GetHashCode();
      if (HasBonfireId) hash ^= BonfireId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasOriginId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOriginIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(OriginId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBonfireId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBonfireIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(BonfireId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasOriginId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOriginIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(OriginId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBonfireId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBonfireIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(BonfireId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasOriginId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsOriginIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OriginId);
      }
      if ((scope == pb.WriteScope.FULL && HasBonfireId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsBonfireIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BonfireId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionBonfireAddWood other) {
      if (other == null) {
        return;
      }
      if (other.HasOriginId) {
        OriginId = other.OriginId;
      }
      if (other.HasBonfireId) {
        BonfireId = other.BonfireId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OriginId = input.ReadUInt32();
            break;
          }
          case 16: {
            BonfireId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OriginId = input.ReadUInt32();
            break;
          }
          case 16: {
            BonfireId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ActionBonfireIgnite : pb::IMessage<ActionBonfireIgnite>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActionBonfireIgnite> _parser = new pb::MessageParser<ActionBonfireIgnite>(() => new ActionBonfireIgnite());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionBonfireIgnite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionBonfireIgnite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionBonfireIgnite(ActionBonfireIgnite other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      originId_ = other.originId_;
      bonfireId_ = other.bonfireId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionBonfireIgnite Clone() {
      return new ActionBonfireIgnite(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "origin_id" field.</summary>
    public const int OriginIdFieldNumber = 1;
    private uint originId_;
    /// <summary>
    /// 发起者ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OriginId {
      get { if ((_hasBits0 & 1) != 0) { return originId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        originId_ = value;
      }
    }
    /// <summary>Gets whether the "origin_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "origin_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOriginIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "origin_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "bonfire_id" field.</summary>
    public const int BonfireIdFieldNumber = 2;
    private uint bonfireId_;
    /// <summary>
    /// 篝火ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BonfireId {
      get { if ((_hasBits0 & 2) != 0) { return bonfireId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        bonfireId_ = value;
      }
    }
    /// <summary>Gets whether the "bonfire_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBonfireId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "bonfire_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBonfireIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "bonfire_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBonfireId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionBonfireIgnite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionBonfireIgnite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OriginId != other.OriginId) return false;
      if (BonfireId != other.BonfireId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOriginId) hash ^= OriginId.GetHashCode();
      if (HasBonfireId) hash ^= BonfireId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasOriginId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOriginIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(OriginId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBonfireId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBonfireIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(BonfireId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasOriginId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOriginIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(OriginId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBonfireId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBonfireIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(BonfireId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasOriginId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsOriginIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OriginId);
      }
      if ((scope == pb.WriteScope.FULL && HasBonfireId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsBonfireIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BonfireId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionBonfireIgnite other) {
      if (other == null) {
        return;
      }
      if (other.HasOriginId) {
        OriginId = other.OriginId;
      }
      if (other.HasBonfireId) {
        BonfireId = other.BonfireId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OriginId = input.ReadUInt32();
            break;
          }
          case 16: {
            BonfireId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OriginId = input.ReadUInt32();
            break;
          }
          case 16: {
            BonfireId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BonfireBurnRewardProp : pb::IMessage<BonfireBurnRewardProp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BonfireBurnRewardProp> _parser = new pb::MessageParser<BonfireBurnRewardProp>(() => new BonfireBurnRewardProp());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BonfireBurnRewardProp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BonfireBurnRewardProp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BonfireBurnRewardProp(BonfireBurnRewardProp other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      propCfgId_ = other.propCfgId_;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BonfireBurnRewardProp Clone() {
      return new BonfireBurnRewardProp(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "prop_cfg_id" field.</summary>
    public const int PropCfgIdFieldNumber = 1;
    private uint propCfgId_;
    /// <summary>
    /// 道具ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PropCfgId {
      get { if ((_hasBits0 & 1) != 0) { return propCfgId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        propCfgId_ = value;
      }
    }
    /// <summary>Gets whether the "prop_cfg_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPropCfgId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "prop_cfg_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPropCfgIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "prop_cfg_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPropCfgId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private uint num_;
    /// <summary>
    /// 数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Num {
      get { if ((_hasBits0 & 2) != 0) { return num_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        num_ = value;
      }
    }
    /// <summary>Gets whether the "num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNum {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "num" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNumDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNum() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BonfireBurnRewardProp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BonfireBurnRewardProp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropCfgId != other.PropCfgId) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPropCfgId) hash ^= PropCfgId.GetHashCode();
      if (HasNum) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasPropCfgId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropCfgIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(PropCfgId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNum)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNumDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasPropCfgId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropCfgIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(PropCfgId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNum)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNumDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasPropCfgId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsPropCfgIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PropCfgId);
      }
      if ((scope == pb.WriteScope.FULL && HasNum)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNumDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BonfireBurnRewardProp other) {
      if (other == null) {
        return;
      }
      if (other.HasPropCfgId) {
        PropCfgId = other.PropCfgId;
      }
      if (other.HasNum) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PropCfgId = input.ReadUInt32();
            break;
          }
          case 16: {
            Num = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PropCfgId = input.ReadUInt32();
            break;
          }
          case 16: {
            Num = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ActionAntidoteScatter : pb::IMessage<ActionAntidoteScatter>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActionAntidoteScatter> _parser = new pb::MessageParser<ActionAntidoteScatter>(() => new ActionAntidoteScatter());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionAntidoteScatter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionAntidoteScatter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionAntidoteScatter(ActionAntidoteScatter other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      originId_ = other.originId_;
      antidoteId_ = other.antidoteId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionAntidoteScatter Clone() {
      return new ActionAntidoteScatter(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "origin_id" field.</summary>
    public const int OriginIdFieldNumber = 1;
    private uint originId_;
    /// <summary>
    /// 发起者ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OriginId {
      get { if ((_hasBits0 & 1) != 0) { return originId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        originId_ = value;
      }
    }
    /// <summary>Gets whether the "origin_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "origin_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOriginIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "origin_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "antidote_id" field.</summary>
    public const int AntidoteIdFieldNumber = 2;
    private uint antidoteId_;
    /// <summary>
    /// 篝火ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AntidoteId {
      get { if ((_hasBits0 & 2) != 0) { return antidoteId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        antidoteId_ = value;
      }
    }
    /// <summary>Gets whether the "antidote_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAntidoteId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "antidote_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAntidoteIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "antidote_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAntidoteId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionAntidoteScatter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionAntidoteScatter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OriginId != other.OriginId) return false;
      if (AntidoteId != other.AntidoteId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOriginId) hash ^= OriginId.GetHashCode();
      if (HasAntidoteId) hash ^= AntidoteId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasOriginId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOriginIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(OriginId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAntidoteId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAntidoteIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(AntidoteId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasOriginId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOriginIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(OriginId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAntidoteId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAntidoteIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(AntidoteId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasOriginId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsOriginIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OriginId);
      }
      if ((scope == pb.WriteScope.FULL && HasAntidoteId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsAntidoteIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AntidoteId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionAntidoteScatter other) {
      if (other == null) {
        return;
      }
      if (other.HasOriginId) {
        OriginId = other.OriginId;
      }
      if (other.HasAntidoteId) {
        AntidoteId = other.AntidoteId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OriginId = input.ReadUInt32();
            break;
          }
          case 16: {
            AntidoteId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OriginId = input.ReadUInt32();
            break;
          }
          case 16: {
            AntidoteId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ActionPuppetUnpinned : pb::IMessage<ActionPuppetUnpinned>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActionPuppetUnpinned> _parser = new pb::MessageParser<ActionPuppetUnpinned>(() => new ActionPuppetUnpinned());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionPuppetUnpinned> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionPuppetUnpinned() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionPuppetUnpinned(ActionPuppetUnpinned other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      subState_ = other.subState_;
      position_ = other.HasPosition ? other.position_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionPuppetUnpinned Clone() {
      return new ActionPuppetUnpinned(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "sub_state" field.</summary>
    public const int SubStateFieldNumber = 2;
    private uint subState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubState {
      get { if ((_hasBits0 & 2) != 0) { return subState_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        subState_ = value;
      }
    }
    /// <summary>Gets whether the "sub_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubState {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "sub_state" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSubStateDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "sub_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubState() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::Protocol.Int3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Int3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }
    /// <summary>Gets whether the position field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPosition {
      get { return position_ != null; }
    }
    /// <summary>Clears the value of the position field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPosition() {
      position_ = null;
    }
    /// <summary>Gets whether the "position" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPositionDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionPuppetUnpinned);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionPuppetUnpinned other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (SubState != other.SubState) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasSubState) hash ^= SubState.GetHashCode();
      if (HasPosition) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSubState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSubStateDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SubState);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPositionDirty)) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSubState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSubStateDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SubState);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPositionDirty)) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasSubState)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSubStateDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubState);
      }
      if (HasPosition) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Position, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 4;
        } else {
          _dirtyBits0 &= ~4;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionPuppetUnpinned other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasSubState) {
        SubState = other.SubState;
      }
      if (other.HasPosition) {
        if (!HasPosition) {
          Position = new global::Protocol.Int3();
        }
        Position.MergeFrom(other.Position);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            SubState = input.ReadUInt32();
            break;
          }
          case 26: {
            if (!HasPosition) {
              Position = new global::Protocol.Int3();
            }
            input.ReadMessage(Position);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            SubState = input.ReadUInt32();
            break;
          }
          case 26: {
            if (!HasPosition) {
              Position = new global::Protocol.Int3();
            }
            input.ReadMessage(Position);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ActionPuppetUnpinnedNtf : pb::IMessage<ActionPuppetUnpinnedNtf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActionPuppetUnpinnedNtf> _parser = new pb::MessageParser<ActionPuppetUnpinnedNtf>(() => new ActionPuppetUnpinnedNtf());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionPuppetUnpinnedNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionPuppetUnpinnedNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionPuppetUnpinnedNtf(ActionPuppetUnpinnedNtf other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      subState_ = other.subState_;
      position_ = other.HasPosition ? other.position_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionPuppetUnpinnedNtf Clone() {
      return new ActionPuppetUnpinnedNtf(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "sub_state" field.</summary>
    public const int SubStateFieldNumber = 2;
    private uint subState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubState {
      get { if ((_hasBits0 & 2) != 0) { return subState_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        subState_ = value;
      }
    }
    /// <summary>Gets whether the "sub_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubState {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "sub_state" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSubStateDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "sub_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubState() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::Protocol.Int3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Int3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }
    /// <summary>Gets whether the position field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPosition {
      get { return position_ != null; }
    }
    /// <summary>Clears the value of the position field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPosition() {
      position_ = null;
    }
    /// <summary>Gets whether the "position" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPositionDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionPuppetUnpinnedNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionPuppetUnpinnedNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (SubState != other.SubState) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasSubState) hash ^= SubState.GetHashCode();
      if (HasPosition) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSubState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSubStateDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SubState);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPositionDirty)) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSubState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSubStateDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SubState);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPositionDirty)) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasSubState)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSubStateDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubState);
      }
      if (HasPosition) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Position, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 4;
        } else {
          _dirtyBits0 &= ~4;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionPuppetUnpinnedNtf other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasSubState) {
        SubState = other.SubState;
      }
      if (other.HasPosition) {
        if (!HasPosition) {
          Position = new global::Protocol.Int3();
        }
        Position.MergeFrom(other.Position);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            SubState = input.ReadUInt32();
            break;
          }
          case 26: {
            if (!HasPosition) {
              Position = new global::Protocol.Int3();
            }
            input.ReadMessage(Position);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            SubState = input.ReadUInt32();
            break;
          }
          case 26: {
            if (!HasPosition) {
              Position = new global::Protocol.Int3();
            }
            input.ReadMessage(Position);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChangeEntityPositionMsg : pb::IMessage<ChangeEntityPositionMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChangeEntityPositionMsg> _parser = new pb::MessageParser<ChangeEntityPositionMsg>(() => new ChangeEntityPositionMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeEntityPositionMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeEntityPositionMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeEntityPositionMsg(ChangeEntityPositionMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      position_ = other.HasPosition ? other.position_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeEntityPositionMsg Clone() {
      return new ChangeEntityPositionMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Protocol.Float3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }
    /// <summary>Gets whether the position field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPosition {
      get { return position_ != null; }
    }
    /// <summary>Clears the value of the position field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPosition() {
      position_ = null;
    }
    /// <summary>Gets whether the "position" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPositionDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeEntityPositionMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeEntityPositionMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasPosition) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPositionDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPositionDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if (HasPosition) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Position, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 2;
        } else {
          _dirtyBits0 &= ~2;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeEntityPositionMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasPosition) {
        if (!HasPosition) {
          Position = new global::Protocol.Float3();
        }
        Position.MergeFrom(other.Position);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (!HasPosition) {
              Position = new global::Protocol.Float3();
            }
            input.ReadMessage(Position);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (!HasPosition) {
              Position = new global::Protocol.Float3();
            }
            input.ReadMessage(Position);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TimelineInputMsg : pb::IMessage<TimelineInputMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimelineInputMsg> _parser = new pb::MessageParser<TimelineInputMsg>(() => new TimelineInputMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimelineInputMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimelineInputMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimelineInputMsg(TimelineInputMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      jumpTime_ = other.jumpTime_;
      timelineName_ = other.timelineName_;
      skillPos_ = other.HasSkillPos ? other.skillPos_.Clone() : null;
      skillRotation_ = other.HasSkillRotation ? other.skillRotation_.Clone() : null;
      targetIds_ = other.targetIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimelineInputMsg Clone() {
      return new TimelineInputMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "jump_time" field.</summary>
    public const int JumpTimeFieldNumber = 2;
    private float jumpTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float JumpTime {
      get { if ((_hasBits0 & 2) != 0) { return jumpTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        jumpTime_ = value;
      }
    }
    /// <summary>Gets whether the "jump_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasJumpTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "jump_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsJumpTimeDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "jump_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearJumpTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "timeline_name" field.</summary>
    public const int TimelineNameFieldNumber = 3;
    private string timelineName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TimelineName {
      get { return timelineName_ ?? ""; }
      set {
        timelineName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "timeline_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimelineName {
      get { return timelineName_ != null; }
    }
    /// <summary>Gets whether the "timeline_name" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTimelineNameDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "timeline_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimelineName() {
      timelineName_ = null;
    }

    /// <summary>Field number for the "skill_pos" field.</summary>
    public const int SkillPosFieldNumber = 4;
    private global::Protocol.Float3 skillPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 SkillPos {
      get { return skillPos_; }
      set {
        skillPos_ = value;
      }
    }
    /// <summary>Gets whether the skill_pos field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSkillPos {
      get { return skillPos_ != null; }
    }
    /// <summary>Clears the value of the skill_pos field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSkillPos() {
      skillPos_ = null;
    }
    /// <summary>Gets whether the "skill_pos" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkillPosDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }

    /// <summary>Field number for the "skill_rotation" field.</summary>
    public const int SkillRotationFieldNumber = 5;
    private global::Protocol.Float3 skillRotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 SkillRotation {
      get { return skillRotation_; }
      set {
        skillRotation_ = value;
      }
    }
    /// <summary>Gets whether the skill_rotation field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSkillRotation {
      get { return skillRotation_ != null; }
    }
    /// <summary>Clears the value of the skill_rotation field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSkillRotation() {
      skillRotation_ = null;
    }
    /// <summary>Gets whether the "skill_rotation" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkillRotationDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }

    /// <summary>Field number for the "target_ids" field.</summary>
    public const int TargetIdsFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_targetIds_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> targetIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TargetIds {
      get { return targetIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimelineInputMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimelineInputMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(JumpTime, other.JumpTime)) return false;
      if (TimelineName != other.TimelineName) return false;
      if (!object.Equals(SkillPos, other.SkillPos)) return false;
      if (!object.Equals(SkillRotation, other.SkillRotation)) return false;
      if(!targetIds_.Equals(other.targetIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasJumpTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(JumpTime);
      if (HasTimelineName) hash ^= TimelineName.GetHashCode();
      if (HasSkillPos) hash ^= SkillPos.GetHashCode();
      if (HasSkillRotation) hash ^= SkillRotation.GetHashCode();
      hash ^= targetIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasJumpTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsJumpTimeDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(JumpTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTimelineName)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTimelineNameDirty)) {
        output.WriteRawTag(26);
        output.WriteString(TimelineName);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillPos)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillPosDirty)) {
        output.WriteRawTag(34);
        output.WriteMessage(SkillPos);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillRotation)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillRotationDirty)) {
        output.WriteRawTag(42);
        output.WriteMessage(SkillRotation);
      }
      targetIds_.WriteTo(output, _repeated_targetIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasJumpTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsJumpTimeDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(JumpTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTimelineName)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTimelineNameDirty)) {
        output.WriteRawTag(26);
        output.WriteString(TimelineName);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillPos)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillPosDirty)) {
        output.WriteRawTag(34);
        output.WriteMessage(SkillPos);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillRotation)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillRotationDirty)) {
        output.WriteRawTag(42);
        output.WriteMessage(SkillRotation);
      }
      targetIds_.WriteTo(ref output, _repeated_targetIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasJumpTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsJumpTimeDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasTimelineName)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTimelineNameDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TimelineName);
      }
      if (HasSkillPos) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(SkillPos, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 8;
        } else {
          _dirtyBits0 &= ~8;
        }
      }
      if (HasSkillRotation) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(SkillRotation, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 16;
        } else {
          _dirtyBits0 &= ~16;
        }
      }
      size += targetIds_.CalculateSize(_repeated_targetIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimelineInputMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasJumpTime) {
        JumpTime = other.JumpTime;
      }
      if (other.HasTimelineName) {
        TimelineName = other.TimelineName;
      }
      if (other.HasSkillPos) {
        if (!HasSkillPos) {
          SkillPos = new global::Protocol.Float3();
        }
        SkillPos.MergeFrom(other.SkillPos);
      }
      if (other.HasSkillRotation) {
        if (!HasSkillRotation) {
          SkillRotation = new global::Protocol.Float3();
        }
        SkillRotation.MergeFrom(other.SkillRotation);
      }
      targetIds_.Add(other.targetIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 21: {
            JumpTime = input.ReadFloat();
            break;
          }
          case 26: {
            TimelineName = input.ReadString();
            break;
          }
          case 34: {
            if (!HasSkillPos) {
              SkillPos = new global::Protocol.Float3();
            }
            input.ReadMessage(SkillPos);
            break;
          }
          case 42: {
            if (!HasSkillRotation) {
              SkillRotation = new global::Protocol.Float3();
            }
            input.ReadMessage(SkillRotation);
            break;
          }
          case 50:
          case 48: {
            targetIds_.AddEntriesFrom(input, _repeated_targetIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 21: {
            JumpTime = input.ReadFloat();
            break;
          }
          case 26: {
            TimelineName = input.ReadString();
            break;
          }
          case 34: {
            if (!HasSkillPos) {
              SkillPos = new global::Protocol.Float3();
            }
            input.ReadMessage(SkillPos);
            break;
          }
          case 42: {
            if (!HasSkillRotation) {
              SkillRotation = new global::Protocol.Float3();
            }
            input.ReadMessage(SkillRotation);
            break;
          }
          case 50:
          case 48: {
            targetIds_.AddEntriesFrom(ref input, _repeated_targetIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FixStepCostMsg : pb::IMessage<FixStepCostMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FixStepCostMsg> _parser = new pb::MessageParser<FixStepCostMsg>(() => new FixStepCostMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FixStepCostMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FixStepCostMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FixStepCostMsg(FixStepCostMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      costMP_ = other.costMP_;
      costEntityId_ = other.costEntityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FixStepCostMsg Clone() {
      return new FixStepCostMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "cost_MP" field.</summary>
    public const int CostMPFieldNumber = 1;
    private float costMP_;
    /// <summary>
    ///耗蓝
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CostMP {
      get { if ((_hasBits0 & 1) != 0) { return costMP_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        costMP_ = value;
      }
    }
    /// <summary>Gets whether the "cost_MP" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCostMP {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "cost_MP" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCostMPDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cost_MP" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCostMP() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cost_entity_id" field.</summary>
    public const int CostEntityIdFieldNumber = 2;
    private uint costEntityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CostEntityId {
      get { if ((_hasBits0 & 2) != 0) { return costEntityId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        costEntityId_ = value;
      }
    }
    /// <summary>Gets whether the "cost_entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCostEntityId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "cost_entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCostEntityIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cost_entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCostEntityId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FixStepCostMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FixStepCostMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CostMP, other.CostMP)) return false;
      if (CostEntityId != other.CostEntityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCostMP) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CostMP);
      if (HasCostEntityId) hash ^= CostEntityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasCostMP)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCostMPDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(CostMP);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCostEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCostEntityIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(CostEntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasCostMP)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCostMPDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(CostMP);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCostEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCostEntityIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(CostEntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasCostMP)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCostMPDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasCostEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCostEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CostEntityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FixStepCostMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasCostMP) {
        CostMP = other.CostMP;
      }
      if (other.HasCostEntityId) {
        CostEntityId = other.CostEntityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            CostMP = input.ReadFloat();
            break;
          }
          case 16: {
            CostEntityId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            CostMP = input.ReadFloat();
            break;
          }
          case 16: {
            CostEntityId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EntityStateChangeMsg : pb::IMessage<EntityStateChangeMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EntityStateChangeMsg> _parser = new pb::MessageParser<EntityStateChangeMsg>(() => new EntityStateChangeMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityStateChangeMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityStateChangeMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityStateChangeMsg(EntityStateChangeMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      state_ = other.state_;
      during_ = other.during_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityStateChangeMsg Clone() {
      return new EntityStateChangeMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private uint state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { if ((_hasBits0 & 2) != 0) { return state_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "state" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStateDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "during" field.</summary>
    public const int DuringFieldNumber = 3;
    private float during_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float During {
      get { if ((_hasBits0 & 4) != 0) { return during_; } else { return 0F; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        during_ = value;
      }
    }
    /// <summary>Gets whether the "during" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDuring {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "during" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDuringDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "during" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDuring() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityStateChangeMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityStateChangeMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (State != other.State) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(During, other.During)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasState) hash ^= State.GetHashCode();
      if (HasDuring) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(During);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStateDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(State);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDuring)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDuringDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(During);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStateDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(State);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDuring)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDuringDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(During);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasState)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsStateDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      if ((scope == pb.WriteScope.FULL && HasDuring)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsDuringDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityStateChangeMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasState) {
        State = other.State;
      }
      if (other.HasDuring) {
        During = other.During;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            State = input.ReadUInt32();
            break;
          }
          case 29: {
            During = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            State = input.ReadUInt32();
            break;
          }
          case 29: {
            During = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InputKeyMsg : pb::IMessage<InputKeyMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InputKeyMsg> _parser = new pb::MessageParser<InputKeyMsg>(() => new InputKeyMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InputKeyMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputKeyMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputKeyMsg(InputKeyMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      evt_ = other.evt_;
      time_ = other.time_;
      isAi_ = other.isAi_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputKeyMsg Clone() {
      return new InputKeyMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "evt" field.</summary>
    public const int EvtFieldNumber = 2;
    private string evt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Evt {
      get { return evt_ ?? ""; }
      set {
        evt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "evt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEvt {
      get { return evt_ != null; }
    }
    /// <summary>Gets whether the "evt" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEvtDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "evt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEvt() {
      evt_ = null;
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private float time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { if ((_hasBits0 & 2) != 0) { return time_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 4;
        time_ = value;
      }
    }
    /// <summary>Gets whether the "time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTimeDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "is_ai" field.</summary>
    public const int IsAiFieldNumber = 4;
    private bool isAi_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAi {
      get { if ((_hasBits0 & 4) != 0) { return isAi_; } else { return false; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 8;
        isAi_ = value;
      }
    }
    /// <summary>Gets whether the "is_ai" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsAi {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "is_ai" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIsAiDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "is_ai" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsAi() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InputKeyMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InputKeyMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (Evt != other.Evt) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Time, other.Time)) return false;
      if (IsAi != other.IsAi) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasEvt) hash ^= Evt.GetHashCode();
      if (HasTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Time);
      if (HasIsAi) hash ^= IsAi.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEvt)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEvtDirty)) {
        output.WriteRawTag(18);
        output.WriteString(Evt);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTimeDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(Time);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsAi)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsAiDirty)) {
        output.WriteRawTag(32);
        output.WriteBool(IsAi);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEvt)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEvtDirty)) {
        output.WriteRawTag(18);
        output.WriteString(Evt);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTimeDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(Time);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsAi)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsAiDirty)) {
        output.WriteRawTag(32);
        output.WriteBool(IsAi);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasEvt)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEvtDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Evt);
      }
      if ((scope == pb.WriteScope.FULL && HasTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTimeDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasIsAi)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIsAiDirty)) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InputKeyMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasEvt) {
        Evt = other.Evt;
      }
      if (other.HasTime) {
        Time = other.Time;
      }
      if (other.HasIsAi) {
        IsAi = other.IsAi;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 18: {
            Evt = input.ReadString();
            break;
          }
          case 29: {
            Time = input.ReadFloat();
            break;
          }
          case 32: {
            IsAi = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 18: {
            Evt = input.ReadString();
            break;
          }
          case 29: {
            Time = input.ReadFloat();
            break;
          }
          case 32: {
            IsAi = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ShowSkillInteractionMsg : pb::IMessage<ShowSkillInteractionMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ShowSkillInteractionMsg> _parser = new pb::MessageParser<ShowSkillInteractionMsg>(() => new ShowSkillInteractionMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShowSkillInteractionMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowSkillInteractionMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowSkillInteractionMsg(ShowSkillInteractionMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      skillId_ = other.skillId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowSkillInteractionMsg Clone() {
      return new ShowSkillInteractionMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { if ((_hasBits0 & 2) != 0) { return skillId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        skillId_ = value;
      }
    }
    /// <summary>Gets whether the "skill_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSkillId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "skill_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkillIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "skill_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSkillId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShowSkillInteractionMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShowSkillInteractionMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (SkillId != other.SkillId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasSkillId) hash ^= SkillId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasSkillId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSkillIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShowSkillInteractionMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasSkillId) {
        SkillId = other.SkillId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ErrorTipsMsg : pb::IMessage<ErrorTipsMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ErrorTipsMsg> _parser = new pb::MessageParser<ErrorTipsMsg>(() => new ErrorTipsMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ErrorTipsMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorTipsMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorTipsMsg(ErrorTipsMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      errorTips_ = other.errorTips_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorTipsMsg Clone() {
      return new ErrorTipsMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "error_tips" field.</summary>
    public const int ErrorTipsFieldNumber = 2;
    private string errorTips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorTips {
      get { return errorTips_ ?? ""; }
      set {
        errorTips_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "error_tips" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorTips {
      get { return errorTips_ != null; }
    }
    /// <summary>Gets whether the "error_tips" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsErrorTipsDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "error_tips" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorTips() {
      errorTips_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ErrorTipsMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ErrorTipsMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (ErrorTips != other.ErrorTips) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasErrorTips) hash ^= ErrorTips.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasErrorTips)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsErrorTipsDirty)) {
        output.WriteRawTag(18);
        output.WriteString(ErrorTips);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasErrorTips)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsErrorTipsDirty)) {
        output.WriteRawTag(18);
        output.WriteString(ErrorTips);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasErrorTips)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsErrorTipsDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorTips);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ErrorTipsMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasErrorTips) {
        ErrorTips = other.ErrorTips;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 18: {
            ErrorTips = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 18: {
            ErrorTips = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChangeTagMsg : pb::IMessage<ChangeTagMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChangeTagMsg> _parser = new pb::MessageParser<ChangeTagMsg>(() => new ChangeTagMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeTagMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeTagMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeTagMsg(ChangeTagMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      tagId_ = other.tagId_;
      val_ = other.val_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeTagMsg Clone() {
      return new ChangeTagMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "tag_id" field.</summary>
    public const int TagIdFieldNumber = 2;
    private uint tagId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TagId {
      get { if ((_hasBits0 & 2) != 0) { return tagId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        tagId_ = value;
      }
    }
    /// <summary>Gets whether the "tag_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTagId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "tag_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTagIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "tag_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTagId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "val" field.</summary>
    public const int ValFieldNumber = 3;
    private uint val_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Val {
      get { if ((_hasBits0 & 4) != 0) { return val_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        val_ = value;
      }
    }
    /// <summary>Gets whether the "val" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVal {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "val" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsValDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "val" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVal() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeTagMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeTagMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (TagId != other.TagId) return false;
      if (Val != other.Val) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasTagId) hash ^= TagId.GetHashCode();
      if (HasVal) hash ^= Val.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTagId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTagIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(TagId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasVal)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsValDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(Val);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTagId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTagIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(TagId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasVal)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsValDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(Val);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasTagId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTagIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TagId);
      }
      if ((scope == pb.WriteScope.FULL && HasVal)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsValDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Val);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeTagMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasTagId) {
        TagId = other.TagId;
      }
      if (other.HasVal) {
        Val = other.Val;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            TagId = input.ReadUInt32();
            break;
          }
          case 24: {
            Val = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            TagId = input.ReadUInt32();
            break;
          }
          case 24: {
            Val = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChangeAniMsg : pb::IMessage<ChangeAniMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChangeAniMsg> _parser = new pb::MessageParser<ChangeAniMsg>(() => new ChangeAniMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeAniMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeAniMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeAniMsg(ChangeAniMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      animId_ = other.animId_;
      isLoop_ = other.isLoop_;
      isReturn_ = other.isReturn_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeAniMsg Clone() {
      return new ChangeAniMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "anim_id" field.</summary>
    public const int AnimIdFieldNumber = 2;
    private uint animId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AnimId {
      get { if ((_hasBits0 & 2) != 0) { return animId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        animId_ = value;
      }
    }
    /// <summary>Gets whether the "anim_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAnimId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "anim_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAnimIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "anim_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAnimId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "is_loop" field.</summary>
    public const int IsLoopFieldNumber = 3;
    private bool isLoop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLoop {
      get { if ((_hasBits0 & 4) != 0) { return isLoop_; } else { return false; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        isLoop_ = value;
      }
    }
    /// <summary>Gets whether the "is_loop" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsLoop {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "is_loop" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIsLoopDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "is_loop" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsLoop() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "is_return" field.</summary>
    public const int IsReturnFieldNumber = 4;
    private bool isReturn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReturn {
      get { if ((_hasBits0 & 8) != 0) { return isReturn_; } else { return false; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        isReturn_ = value;
      }
    }
    /// <summary>Gets whether the "is_return" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsReturn {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "is_return" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIsReturnDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "is_return" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsReturn() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeAniMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeAniMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (AnimId != other.AnimId) return false;
      if (IsLoop != other.IsLoop) return false;
      if (IsReturn != other.IsReturn) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasAnimId) hash ^= AnimId.GetHashCode();
      if (HasIsLoop) hash ^= IsLoop.GetHashCode();
      if (HasIsReturn) hash ^= IsReturn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAnimId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAnimIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(AnimId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsLoop)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsLoopDirty)) {
        output.WriteRawTag(24);
        output.WriteBool(IsLoop);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsReturn)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsReturnDirty)) {
        output.WriteRawTag(32);
        output.WriteBool(IsReturn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAnimId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAnimIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(AnimId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsLoop)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsLoopDirty)) {
        output.WriteRawTag(24);
        output.WriteBool(IsLoop);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsReturn)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsReturnDirty)) {
        output.WriteRawTag(32);
        output.WriteBool(IsReturn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasAnimId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsAnimIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AnimId);
      }
      if ((scope == pb.WriteScope.FULL && HasIsLoop)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIsLoopDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasIsReturn)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIsReturnDirty)) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeAniMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasAnimId) {
        AnimId = other.AnimId;
      }
      if (other.HasIsLoop) {
        IsLoop = other.IsLoop;
      }
      if (other.HasIsReturn) {
        IsReturn = other.IsReturn;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            AnimId = input.ReadUInt32();
            break;
          }
          case 24: {
            IsLoop = input.ReadBool();
            break;
          }
          case 32: {
            IsReturn = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            AnimId = input.ReadUInt32();
            break;
          }
          case 24: {
            IsLoop = input.ReadBool();
            break;
          }
          case 32: {
            IsReturn = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayEffectMsg : pb::IMessage<PlayEffectMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayEffectMsg> _parser = new pb::MessageParser<PlayEffectMsg>(() => new PlayEffectMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayEffectMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayEffectMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayEffectMsg(PlayEffectMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      effectName_ = other.effectName_;
      point_ = other.HasPoint ? other.point_.Clone() : null;
      forward_ = other.HasForward ? other.forward_.Clone() : null;
      time_ = other.time_;
      entityId_ = other.entityId_;
      bindType_ = other.bindType_;
      bindRootType_ = other.bindRootType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayEffectMsg Clone() {
      return new PlayEffectMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "effect_name" field.</summary>
    public const int EffectNameFieldNumber = 1;
    private string effectName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EffectName {
      get { return effectName_ ?? ""; }
      set {
        effectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "effect_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEffectName {
      get { return effectName_ != null; }
    }
    /// <summary>Gets whether the "effect_name" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEffectNameDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "effect_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEffectName() {
      effectName_ = null;
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private global::Protocol.Float3 point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }
    /// <summary>Gets whether the point field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPoint {
      get { return point_ != null; }
    }
    /// <summary>Clears the value of the point field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPoint() {
      point_ = null;
    }
    /// <summary>Gets whether the "point" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPointDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    /// <summary>Field number for the "forward" field.</summary>
    public const int ForwardFieldNumber = 3;
    private global::Protocol.Float3 forward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 Forward {
      get { return forward_; }
      set {
        forward_ = value;
      }
    }
    /// <summary>Gets whether the forward field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasForward {
      get { return forward_ != null; }
    }
    /// <summary>Clears the value of the forward field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearForward() {
      forward_ = null;
    }
    /// <summary>Gets whether the "forward" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsForwardDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private float time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { if ((_hasBits0 & 1) != 0) { return time_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 8;
        time_ = value;
      }
    }
    /// <summary>Gets whether the "time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTimeDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 5;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 2) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 16;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "bind_type" field.</summary>
    public const int BindTypeFieldNumber = 6;
    private uint bindType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BindType {
      get { if ((_hasBits0 & 4) != 0) { return bindType_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 32;
        bindType_ = value;
      }
    }
    /// <summary>Gets whether the "bind_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBindType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "bind_type" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBindTypeDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "bind_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBindType() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "bind_root_type" field.</summary>
    public const int BindRootTypeFieldNumber = 7;
    private uint bindRootType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BindRootType {
      get { if ((_hasBits0 & 8) != 0) { return bindRootType_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 64;
        bindRootType_ = value;
      }
    }
    /// <summary>Gets whether the "bind_root_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBindRootType {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "bind_root_type" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBindRootTypeDirty {
      get { return (_dirtyBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "bind_root_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBindRootType() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayEffectMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayEffectMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EffectName != other.EffectName) return false;
      if (!object.Equals(Point, other.Point)) return false;
      if (!object.Equals(Forward, other.Forward)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Time, other.Time)) return false;
      if (EntityId != other.EntityId) return false;
      if (BindType != other.BindType) return false;
      if (BindRootType != other.BindRootType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEffectName) hash ^= EffectName.GetHashCode();
      if (HasPoint) hash ^= Point.GetHashCode();
      if (HasForward) hash ^= Forward.GetHashCode();
      if (HasTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Time);
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasBindType) hash ^= BindType.GetHashCode();
      if (HasBindRootType) hash ^= BindRootType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEffectName)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEffectNameDirty)) {
        output.WriteRawTag(10);
        output.WriteString(EffectName);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPoint)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPointDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(Point);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasForward)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsForwardDirty)) {
        output.WriteRawTag(26);
        output.WriteMessage(Forward);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTimeDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(Time);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBindType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBindTypeDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(BindType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBindRootType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBindRootTypeDirty)) {
        output.WriteRawTag(56);
        output.WriteUInt32(BindRootType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEffectName)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEffectNameDirty)) {
        output.WriteRawTag(10);
        output.WriteString(EffectName);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPoint)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPointDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(Point);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasForward)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsForwardDirty)) {
        output.WriteRawTag(26);
        output.WriteMessage(Forward);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTimeDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(Time);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBindType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBindTypeDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(BindType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBindRootType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBindRootTypeDirty)) {
        output.WriteRawTag(56);
        output.WriteUInt32(BindRootType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEffectName)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEffectNameDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EffectName);
      }
      if (HasPoint) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Point, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 2;
        } else {
          _dirtyBits0 &= ~2;
        }
      }
      if (HasForward) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Forward, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 4;
        } else {
          _dirtyBits0 &= ~4;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTimeDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasBindType)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsBindTypeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BindType);
      }
      if ((scope == pb.WriteScope.FULL && HasBindRootType)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsBindRootTypeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BindRootType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayEffectMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEffectName) {
        EffectName = other.EffectName;
      }
      if (other.HasPoint) {
        if (!HasPoint) {
          Point = new global::Protocol.Float3();
        }
        Point.MergeFrom(other.Point);
      }
      if (other.HasForward) {
        if (!HasForward) {
          Forward = new global::Protocol.Float3();
        }
        Forward.MergeFrom(other.Forward);
      }
      if (other.HasTime) {
        Time = other.Time;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasBindType) {
        BindType = other.BindType;
      }
      if (other.HasBindRootType) {
        BindRootType = other.BindRootType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EffectName = input.ReadString();
            break;
          }
          case 18: {
            if (!HasPoint) {
              Point = new global::Protocol.Float3();
            }
            input.ReadMessage(Point);
            break;
          }
          case 26: {
            if (!HasForward) {
              Forward = new global::Protocol.Float3();
            }
            input.ReadMessage(Forward);
            break;
          }
          case 37: {
            Time = input.ReadFloat();
            break;
          }
          case 40: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 48: {
            BindType = input.ReadUInt32();
            break;
          }
          case 56: {
            BindRootType = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            EffectName = input.ReadString();
            break;
          }
          case 18: {
            if (!HasPoint) {
              Point = new global::Protocol.Float3();
            }
            input.ReadMessage(Point);
            break;
          }
          case 26: {
            if (!HasForward) {
              Forward = new global::Protocol.Float3();
            }
            input.ReadMessage(Forward);
            break;
          }
          case 37: {
            Time = input.ReadFloat();
            break;
          }
          case 40: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 48: {
            BindType = input.ReadUInt32();
            break;
          }
          case 56: {
            BindRootType = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ActionMoveListMsg : pb::IMessage<ActionMoveListMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActionMoveListMsg> _parser = new pb::MessageParser<ActionMoveListMsg>(() => new ActionMoveListMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionMoveListMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionMoveListMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionMoveListMsg(ActionMoveListMsg other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      moveMsgList_ = other.moveMsgList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionMoveListMsg Clone() {
      return new ActionMoveListMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "move_msg_list" field.</summary>
    public const int MoveMsgListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.ActionMoveMsg> _repeated_moveMsgList_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.ActionMoveMsg.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ActionMoveMsg> moveMsgList_ = new pbc::RepeatedField<global::Protocol.ActionMoveMsg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ActionMoveMsg> MoveMsgList {
      get { return moveMsgList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionMoveListMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionMoveListMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!moveMsgList_.Equals(other.moveMsgList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= moveMsgList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      moveMsgList_.WriteTo(output, _repeated_moveMsgList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      moveMsgList_.WriteTo(ref output, _repeated_moveMsgList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      size += moveMsgList_.CalculateSize(_repeated_moveMsgList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionMoveListMsg other) {
      if (other == null) {
        return;
      }
      moveMsgList_.Add(other.moveMsgList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            moveMsgList_.AddEntriesFrom(input, _repeated_moveMsgList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            moveMsgList_.AddEntriesFrom(ref input, _repeated_moveMsgList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InputKeyListMsg : pb::IMessage<InputKeyListMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InputKeyListMsg> _parser = new pb::MessageParser<InputKeyListMsg>(() => new InputKeyListMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InputKeyListMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputKeyListMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputKeyListMsg(InputKeyListMsg other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      inputKeyList_ = other.inputKeyList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputKeyListMsg Clone() {
      return new InputKeyListMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "input_key_list" field.</summary>
    public const int InputKeyListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.InputKeyMsg> _repeated_inputKeyList_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.InputKeyMsg.Parser);
    private readonly pbc::RepeatedField<global::Protocol.InputKeyMsg> inputKeyList_ = new pbc::RepeatedField<global::Protocol.InputKeyMsg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.InputKeyMsg> InputKeyList {
      get { return inputKeyList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InputKeyListMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InputKeyListMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!inputKeyList_.Equals(other.inputKeyList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= inputKeyList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      inputKeyList_.WriteTo(output, _repeated_inputKeyList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      inputKeyList_.WriteTo(ref output, _repeated_inputKeyList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      size += inputKeyList_.CalculateSize(_repeated_inputKeyList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InputKeyListMsg other) {
      if (other == null) {
        return;
      }
      inputKeyList_.Add(other.inputKeyList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            inputKeyList_.AddEntriesFrom(input, _repeated_inputKeyList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            inputKeyList_.AddEntriesFrom(ref input, _repeated_inputKeyList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LoadGameByStateMsg : pb::IMessage<LoadGameByStateMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LoadGameByStateMsg> _parser = new pb::MessageParser<LoadGameByStateMsg>(() => new LoadGameByStateMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadGameByStateMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadGameByStateMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadGameByStateMsg(LoadGameByStateMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      stateFileName_ = other.stateFileName_;
      frameIndex_ = other.frameIndex_;
      stateData_ = other.HasStateData ? other.stateData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadGameByStateMsg Clone() {
      return new LoadGameByStateMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "state_file_name" field.</summary>
    public const int StateFileNameFieldNumber = 1;
    private string stateFileName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StateFileName {
      get { return stateFileName_ ?? ""; }
      set {
        stateFileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "state_file_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStateFileName {
      get { return stateFileName_ != null; }
    }
    /// <summary>Gets whether the "state_file_name" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStateFileNameDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "state_file_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStateFileName() {
      stateFileName_ = null;
    }

    /// <summary>Field number for the "frame_index" field.</summary>
    public const int FrameIndexFieldNumber = 2;
    private uint frameIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameIndex {
      get { if ((_hasBits0 & 1) != 0) { return frameIndex_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 2;
        frameIndex_ = value;
      }
    }
    /// <summary>Gets whether the "frame_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFrameIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "frame_index" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFrameIndexDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "frame_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFrameIndex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "state_data" field.</summary>
    public const int StateDataFieldNumber = 3;
    private global::Protocol.StateMsg stateData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.StateMsg StateData {
      get { return stateData_; }
      set {
        stateData_ = value;
      }
    }
    /// <summary>Gets whether the state_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStateData {
      get { return stateData_ != null; }
    }
    /// <summary>Clears the value of the state_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStateData() {
      stateData_ = null;
    }
    /// <summary>Gets whether the "state_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStateDataDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadGameByStateMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadGameByStateMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StateFileName != other.StateFileName) return false;
      if (FrameIndex != other.FrameIndex) return false;
      if (!object.Equals(StateData, other.StateData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStateFileName) hash ^= StateFileName.GetHashCode();
      if (HasFrameIndex) hash ^= FrameIndex.GetHashCode();
      if (HasStateData) hash ^= StateData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasStateFileName)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStateFileNameDirty)) {
        output.WriteRawTag(10);
        output.WriteString(StateFileName);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFrameIndex)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFrameIndexDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(FrameIndex);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStateData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStateDataDirty)) {
        output.WriteRawTag(26);
        output.WriteMessage(StateData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasStateFileName)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStateFileNameDirty)) {
        output.WriteRawTag(10);
        output.WriteString(StateFileName);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFrameIndex)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFrameIndexDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(FrameIndex);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStateData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStateDataDirty)) {
        output.WriteRawTag(26);
        output.WriteMessage(StateData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasStateFileName)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsStateFileNameDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StateFileName);
      }
      if ((scope == pb.WriteScope.FULL && HasFrameIndex)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsFrameIndexDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameIndex);
      }
      if (HasStateData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(StateData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 4;
        } else {
          _dirtyBits0 &= ~4;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadGameByStateMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasStateFileName) {
        StateFileName = other.StateFileName;
      }
      if (other.HasFrameIndex) {
        FrameIndex = other.FrameIndex;
      }
      if (other.HasStateData) {
        if (!HasStateData) {
          StateData = new global::Protocol.StateMsg();
        }
        StateData.MergeFrom(other.StateData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StateFileName = input.ReadString();
            break;
          }
          case 16: {
            FrameIndex = input.ReadUInt32();
            break;
          }
          case 26: {
            if (!HasStateData) {
              StateData = new global::Protocol.StateMsg();
            }
            input.ReadMessage(StateData);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            StateFileName = input.ReadString();
            break;
          }
          case 16: {
            FrameIndex = input.ReadUInt32();
            break;
          }
          case 26: {
            if (!HasStateData) {
              StateData = new global::Protocol.StateMsg();
            }
            input.ReadMessage(StateData);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class VAMsg : pb::IMessage<VAMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VAMsg> _parser = new pb::MessageParser<VAMsg>(() => new VAMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VAMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VAMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VAMsg(VAMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      vaDic_ = other.vaDic_.Clone();
      isClientDebug_ = other.isClientDebug_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VAMsg Clone() {
      return new VAMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "va_dic" field.</summary>
    public const int VaDicFieldNumber = 1;
    private static readonly pbc::MapField<uint, global::Protocol.VAItem>.Codec _map_vaDic_codec
        = new pbc::MapField<uint, global::Protocol.VAItem>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Protocol.VAItem.Parser), 10);
    private readonly pbc::MapField<uint, global::Protocol.VAItem> vaDic_ = new pbc::MapField<uint, global::Protocol.VAItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Protocol.VAItem> VaDic {
      get { return vaDic_; }
    }
    /// <summary>Gets whether the "va_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVaDicDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "is_client_debug" field.</summary>
    public const int IsClientDebugFieldNumber = 2;
    private bool isClientDebug_;
    /// <summary>
    ///客户端Debug
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsClientDebug {
      get { if ((_hasBits0 & 1) != 0) { return isClientDebug_; } else { return false; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 2;
        isClientDebug_ = value;
      }
    }
    /// <summary>Gets whether the "is_client_debug" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsClientDebug {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "is_client_debug" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIsClientDebugDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "is_client_debug" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsClientDebug() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VAMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VAMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!VaDic.Equals(other.VaDic)) return false;
      if (IsClientDebug != other.IsClientDebug) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= VaDic.GetHashCode();
      if (HasIsClientDebug) hash ^= IsClientDebug.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsVaDicDirty)) {
        vaDic_.WriteTo(output, _map_vaDic_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsClientDebug)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsClientDebugDirty)) {
        output.WriteRawTag(16);
        output.WriteBool(IsClientDebug);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsVaDicDirty)) {
        vaDic_.WriteTo(ref output, _map_vaDic_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsClientDebug)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsClientDebugDirty)) {
        output.WriteRawTag(16);
        output.WriteBool(IsClientDebug);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if (VaDic != null) {
        int msgSize = vaDic_.CalculateSize(_map_vaDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 1;
        } else {
          _dirtyBits0 &= ~1;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasIsClientDebug)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIsClientDebugDirty)) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VAMsg other) {
      if (other == null) {
        return;
      }
      foreach (var key in other.vaDic_.DeleteList) {
        vaDic_.Remove(key);
      }
      foreach (var pair in other.vaDic_) {
        global::Protocol.VAItem value;
        if(vaDic_.TryGetValue(pair.Key, out value)) {
          value.MergeFrom(pair.Value);
        }else{
          vaDic_.Add(pair.Key, pair.Value);
        }
      }
      if (other.HasIsClientDebug) {
        IsClientDebug = other.IsClientDebug;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            vaDic_.AddEntriesFrom(input, _map_vaDic_codec);
            break;
          }
          case 16: {
            IsClientDebug = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            vaDic_.AddEntriesFrom(ref input, _map_vaDic_codec);
            break;
          }
          case 16: {
            IsClientDebug = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class VAItem : pb::IMessage<VAItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VAItem> _parser = new pb::MessageParser<VAItem>(() => new VAItem());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VAItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VAItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VAItem(VAItem other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      activeKeyList_ = other.activeKeyList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VAItem Clone() {
      return new VAItem(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "active_key_list" field.</summary>
    public const int ActiveKeyListFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_activeKeyList_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> activeKeyList_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ActiveKeyList {
      get { return activeKeyList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VAItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VAItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if(!activeKeyList_.Equals(other.activeKeyList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      hash ^= activeKeyList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      activeKeyList_.WriteTo(output, _repeated_activeKeyList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      activeKeyList_.WriteTo(ref output, _repeated_activeKeyList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      size += activeKeyList_.CalculateSize(_repeated_activeKeyList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VAItem other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      activeKeyList_.Add(other.activeKeyList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            activeKeyList_.AddEntriesFrom(input, _repeated_activeKeyList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            activeKeyList_.AddEntriesFrom(ref input, _repeated_activeKeyList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AIRotateThunderShotMsg : pb::IMessage<AIRotateThunderShotMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AIRotateThunderShotMsg> _parser = new pb::MessageParser<AIRotateThunderShotMsg>(() => new AIRotateThunderShotMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIRotateThunderShotMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIRotateThunderShotMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIRotateThunderShotMsg(AIRotateThunderShotMsg other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      thunderShotList_ = other.thunderShotList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIRotateThunderShotMsg Clone() {
      return new AIRotateThunderShotMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "thunder_shot_list" field.</summary>
    public const int ThunderShotListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.AIRotateThunderShotItem> _repeated_thunderShotList_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.AIRotateThunderShotItem.Parser);
    private readonly pbc::RepeatedField<global::Protocol.AIRotateThunderShotItem> thunderShotList_ = new pbc::RepeatedField<global::Protocol.AIRotateThunderShotItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.AIRotateThunderShotItem> ThunderShotList {
      get { return thunderShotList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIRotateThunderShotMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIRotateThunderShotMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!thunderShotList_.Equals(other.thunderShotList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= thunderShotList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      thunderShotList_.WriteTo(output, _repeated_thunderShotList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      thunderShotList_.WriteTo(ref output, _repeated_thunderShotList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      size += thunderShotList_.CalculateSize(_repeated_thunderShotList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIRotateThunderShotMsg other) {
      if (other == null) {
        return;
      }
      thunderShotList_.Add(other.thunderShotList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            thunderShotList_.AddEntriesFrom(input, _repeated_thunderShotList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            thunderShotList_.AddEntriesFrom(ref input, _repeated_thunderShotList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AIRotateThunderShotItem : pb::IMessage<AIRotateThunderShotItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AIRotateThunderShotItem> _parser = new pb::MessageParser<AIRotateThunderShotItem>(() => new AIRotateThunderShotItem());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIRotateThunderShotItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIRotateThunderShotItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIRotateThunderShotItem(AIRotateThunderShotItem other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      angleY_ = other.angleY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIRotateThunderShotItem Clone() {
      return new AIRotateThunderShotItem(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "angle_y" field.</summary>
    public const int AngleYFieldNumber = 2;
    private float angleY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngleY {
      get { if ((_hasBits0 & 2) != 0) { return angleY_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        angleY_ = value;
      }
    }
    /// <summary>Gets whether the "angle_y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAngleY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "angle_y" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAngleYDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "angle_y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAngleY() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIRotateThunderShotItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIRotateThunderShotItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngleY, other.AngleY)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasAngleY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngleY);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAngleY)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAngleYDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(AngleY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAngleY)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAngleYDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(AngleY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasAngleY)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsAngleYDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIRotateThunderShotItem other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasAngleY) {
        AngleY = other.AngleY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 21: {
            AngleY = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 21: {
            AngleY = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AIRotatePutWallAngleMsg : pb::IMessage<AIRotatePutWallAngleMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AIRotatePutWallAngleMsg> _parser = new pb::MessageParser<AIRotatePutWallAngleMsg>(() => new AIRotatePutWallAngleMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIRotatePutWallAngleMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIRotatePutWallAngleMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIRotatePutWallAngleMsg(AIRotatePutWallAngleMsg other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      rotateWallList_ = other.rotateWallList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIRotatePutWallAngleMsg Clone() {
      return new AIRotatePutWallAngleMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "rotate_wall_list" field.</summary>
    public const int RotateWallListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.AIRotatePutWallAngleItem> _repeated_rotateWallList_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.AIRotatePutWallAngleItem.Parser);
    private readonly pbc::RepeatedField<global::Protocol.AIRotatePutWallAngleItem> rotateWallList_ = new pbc::RepeatedField<global::Protocol.AIRotatePutWallAngleItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.AIRotatePutWallAngleItem> RotateWallList {
      get { return rotateWallList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIRotatePutWallAngleMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIRotatePutWallAngleMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rotateWallList_.Equals(other.rotateWallList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rotateWallList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      rotateWallList_.WriteTo(output, _repeated_rotateWallList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      rotateWallList_.WriteTo(ref output, _repeated_rotateWallList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      size += rotateWallList_.CalculateSize(_repeated_rotateWallList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIRotatePutWallAngleMsg other) {
      if (other == null) {
        return;
      }
      rotateWallList_.Add(other.rotateWallList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rotateWallList_.AddEntriesFrom(input, _repeated_rotateWallList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            rotateWallList_.AddEntriesFrom(ref input, _repeated_rotateWallList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AIRotatePutWallAngleItem : pb::IMessage<AIRotatePutWallAngleItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AIRotatePutWallAngleItem> _parser = new pb::MessageParser<AIRotatePutWallAngleItem>(() => new AIRotatePutWallAngleItem());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIRotatePutWallAngleItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIRotatePutWallAngleItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIRotatePutWallAngleItem(AIRotatePutWallAngleItem other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      angleY_ = other.angleY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIRotatePutWallAngleItem Clone() {
      return new AIRotatePutWallAngleItem(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "angle_y" field.</summary>
    public const int AngleYFieldNumber = 2;
    private uint angleY_;
    /// <summary>
    ///旋转
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AngleY {
      get { if ((_hasBits0 & 2) != 0) { return angleY_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        angleY_ = value;
      }
    }
    /// <summary>Gets whether the "angle_y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAngleY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "angle_y" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAngleYDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "angle_y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAngleY() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIRotatePutWallAngleItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIRotatePutWallAngleItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (AngleY != other.AngleY) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasAngleY) hash ^= AngleY.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAngleY)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAngleYDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(AngleY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAngleY)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAngleYDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(AngleY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasAngleY)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsAngleYDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AngleY);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIRotatePutWallAngleItem other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasAngleY) {
        AngleY = other.AngleY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            AngleY = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            AngleY = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AIRotateShotMsg : pb::IMessage<AIRotateShotMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AIRotateShotMsg> _parser = new pb::MessageParser<AIRotateShotMsg>(() => new AIRotateShotMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIRotateShotMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIRotateShotMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIRotateShotMsg(AIRotateShotMsg other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      rotateShotList_ = other.rotateShotList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIRotateShotMsg Clone() {
      return new AIRotateShotMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "rotate_shot_list" field.</summary>
    public const int RotateShotListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.AIRotateShotItem> _repeated_rotateShotList_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.AIRotateShotItem.Parser);
    private readonly pbc::RepeatedField<global::Protocol.AIRotateShotItem> rotateShotList_ = new pbc::RepeatedField<global::Protocol.AIRotateShotItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.AIRotateShotItem> RotateShotList {
      get { return rotateShotList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIRotateShotMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIRotateShotMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rotateShotList_.Equals(other.rotateShotList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rotateShotList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      rotateShotList_.WriteTo(output, _repeated_rotateShotList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      rotateShotList_.WriteTo(ref output, _repeated_rotateShotList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      size += rotateShotList_.CalculateSize(_repeated_rotateShotList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIRotateShotMsg other) {
      if (other == null) {
        return;
      }
      rotateShotList_.Add(other.rotateShotList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rotateShotList_.AddEntriesFrom(input, _repeated_rotateShotList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            rotateShotList_.AddEntriesFrom(ref input, _repeated_rotateShotList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AIRotateShotItem : pb::IMessage<AIRotateShotItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AIRotateShotItem> _parser = new pb::MessageParser<AIRotateShotItem>(() => new AIRotateShotItem());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIRotateShotItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIRotateShotItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIRotateShotItem(AIRotateShotItem other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      angleX_ = other.angleX_;
      angleY_ = other.angleY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AIRotateShotItem Clone() {
      return new AIRotateShotItem(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "angle_x" field.</summary>
    public const int AngleXFieldNumber = 2;
    private float angleX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngleX {
      get { if ((_hasBits0 & 2) != 0) { return angleX_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        angleX_ = value;
      }
    }
    /// <summary>Gets whether the "angle_x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAngleX {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "angle_x" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAngleXDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "angle_x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAngleX() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "angle_y" field.</summary>
    public const int AngleYFieldNumber = 3;
    private float angleY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngleY {
      get { if ((_hasBits0 & 4) != 0) { return angleY_; } else { return 0F; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        angleY_ = value;
      }
    }
    /// <summary>Gets whether the "angle_y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAngleY {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "angle_y" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAngleYDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "angle_y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAngleY() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AIRotateShotItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AIRotateShotItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngleX, other.AngleX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngleY, other.AngleY)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasAngleX) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngleX);
      if (HasAngleY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngleY);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAngleX)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAngleXDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(AngleX);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAngleY)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAngleYDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(AngleY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAngleX)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAngleXDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(AngleX);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAngleY)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAngleYDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(AngleY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasAngleX)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsAngleXDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasAngleY)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsAngleYDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AIRotateShotItem other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasAngleX) {
        AngleX = other.AngleX;
      }
      if (other.HasAngleY) {
        AngleY = other.AngleY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 21: {
            AngleX = input.ReadFloat();
            break;
          }
          case 29: {
            AngleY = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 21: {
            AngleX = input.ReadFloat();
            break;
          }
          case 29: {
            AngleY = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LocalCacheStateMsg : pb::IMessage<LocalCacheStateMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LocalCacheStateMsg> _parser = new pb::MessageParser<LocalCacheStateMsg>(() => new LocalCacheStateMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocalCacheStateMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalCacheStateMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalCacheStateMsg(LocalCacheStateMsg other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      stateDataDic_ = other.stateDataDic_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalCacheStateMsg Clone() {
      return new LocalCacheStateMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "state_data_dic" field.</summary>
    public const int StateDataDicFieldNumber = 1;
    private static readonly pbc::MapField<uint, global::Protocol.StateMsg>.Codec _map_stateDataDic_codec
        = new pbc::MapField<uint, global::Protocol.StateMsg>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Protocol.StateMsg.Parser), 10);
    private readonly pbc::MapField<uint, global::Protocol.StateMsg> stateDataDic_ = new pbc::MapField<uint, global::Protocol.StateMsg>();
    /// <summary>
    ///帧号 对应数据									
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Protocol.StateMsg> StateDataDic {
      get { return stateDataDic_; }
    }
    /// <summary>Gets whether the "state_data_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStateDataDicDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocalCacheStateMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocalCacheStateMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!StateDataDic.Equals(other.StateDataDic)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= StateDataDic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStateDataDicDirty)) {
        stateDataDic_.WriteTo(output, _map_stateDataDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStateDataDicDirty)) {
        stateDataDic_.WriteTo(ref output, _map_stateDataDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if (StateDataDic != null) {
        int msgSize = stateDataDic_.CalculateSize(_map_stateDataDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 1;
        } else {
          _dirtyBits0 &= ~1;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocalCacheStateMsg other) {
      if (other == null) {
        return;
      }
      foreach (var key in other.stateDataDic_.DeleteList) {
        stateDataDic_.Remove(key);
      }
      foreach (var pair in other.stateDataDic_) {
        global::Protocol.StateMsg value;
        if(stateDataDic_.TryGetValue(pair.Key, out value)) {
          value.MergeFrom(pair.Value);
        }else{
          stateDataDic_.Add(pair.Key, pair.Value);
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            stateDataDic_.AddEntriesFrom(input, _map_stateDataDic_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            stateDataDic_.AddEntriesFrom(ref input, _map_stateDataDic_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ------------------------state---------------------------------
  ///游戏最终状态结构体	
  /// </summary>
  public sealed partial class StateMsg : pb::IMessage<StateMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StateMsg> _parser = new pb::MessageParser<StateMsg>(() => new StateMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StateMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateMsg(StateMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      serverTime_ = other.serverTime_;
      entityDataDic_ = other.entityDataDic_.Clone();
      battleSyncData_ = other.HasBattleSyncData ? other.battleSyncData_.Clone() : null;
      shadowDataDic_ = other.shadowDataDic_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateMsg Clone() {
      return new StateMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "server_time" field.</summary>
    public const int ServerTimeFieldNumber = 1;
    private float serverTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ServerTime {
      get { if ((_hasBits0 & 1) != 0) { return serverTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        serverTime_ = value;
      }
    }
    /// <summary>Gets whether the "server_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "server_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsServerTimeDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "server_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "entity_data_dic" field.</summary>
    public const int EntityDataDicFieldNumber = 2;
    private static readonly pbc::MapField<uint, global::Protocol.EntitySyncData>.Codec _map_entityDataDic_codec
        = new pbc::MapField<uint, global::Protocol.EntitySyncData>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Protocol.EntitySyncData.Parser), 18);
    private readonly pbc::MapField<uint, global::Protocol.EntitySyncData> entityDataDic_ = new pbc::MapField<uint, global::Protocol.EntitySyncData>();
    /// <summary>
    ///运行时的entity增量数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Protocol.EntitySyncData> EntityDataDic {
      get { return entityDataDic_; }
    }
    /// <summary>Gets whether the "entity_data_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityDataDicDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    /// <summary>Field number for the "battle_sync_data" field.</summary>
    public const int BattleSyncDataFieldNumber = 3;
    private global::Protocol.BattleSyncData battleSyncData_;
    /// <summary>
    ///局内数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.BattleSyncData BattleSyncData {
      get { return battleSyncData_; }
      set {
        battleSyncData_ = value;
      }
    }
    /// <summary>Gets whether the battle_sync_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBattleSyncData {
      get { return battleSyncData_ != null; }
    }
    /// <summary>Clears the value of the battle_sync_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBattleSyncData() {
      battleSyncData_ = null;
    }
    /// <summary>Gets whether the "battle_sync_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBattleSyncDataDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    /// <summary>Field number for the "shadow_data_dic" field.</summary>
    public const int ShadowDataDicFieldNumber = 4;
    private static readonly pbc::MapField<uint, global::Protocol.ShadowData>.Codec _map_shadowDataDic_codec
        = new pbc::MapField<uint, global::Protocol.ShadowData>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Protocol.ShadowData.Parser), 34);
    private readonly pbc::MapField<uint, global::Protocol.ShadowData> shadowDataDic_ = new pbc::MapField<uint, global::Protocol.ShadowData>();
    /// <summary>
    ///暴露给AI的 隐身显示信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Protocol.ShadowData> ShadowDataDic {
      get { return shadowDataDic_; }
    }
    /// <summary>Gets whether the "shadow_data_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShadowDataDicDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StateMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StateMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ServerTime, other.ServerTime)) return false;
      if (!EntityDataDic.Equals(other.EntityDataDic)) return false;
      if (!object.Equals(BattleSyncData, other.BattleSyncData)) return false;
      if (!ShadowDataDic.Equals(other.ShadowDataDic)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasServerTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ServerTime);
      hash ^= EntityDataDic.GetHashCode();
      if (HasBattleSyncData) hash ^= BattleSyncData.GetHashCode();
      hash ^= ShadowDataDic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasServerTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsServerTimeDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(ServerTime);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityDataDicDirty)) {
        entityDataDic_.WriteTo(output, _map_entityDataDic_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBattleSyncData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBattleSyncDataDirty)) {
        output.WriteRawTag(26);
        output.WriteMessage(BattleSyncData);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsShadowDataDicDirty)) {
        shadowDataDic_.WriteTo(output, _map_shadowDataDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasServerTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsServerTimeDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(ServerTime);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityDataDicDirty)) {
        entityDataDic_.WriteTo(ref output, _map_entityDataDic_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBattleSyncData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBattleSyncDataDirty)) {
        output.WriteRawTag(26);
        output.WriteMessage(BattleSyncData);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsShadowDataDicDirty)) {
        shadowDataDic_.WriteTo(ref output, _map_shadowDataDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasServerTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsServerTimeDirty)) {
        size += 1 + 4;
      }
      if (EntityDataDic != null) {
        int msgSize = entityDataDic_.CalculateSize(_map_entityDataDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 2;
        } else {
          _dirtyBits0 &= ~2;
        }
      }
      if (HasBattleSyncData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(BattleSyncData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 4;
        } else {
          _dirtyBits0 &= ~4;
        }
      }
      if (ShadowDataDic != null) {
        int msgSize = shadowDataDic_.CalculateSize(_map_shadowDataDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 8;
        } else {
          _dirtyBits0 &= ~8;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StateMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasServerTime) {
        ServerTime = other.ServerTime;
      }
      foreach (var key in other.entityDataDic_.DeleteList) {
        entityDataDic_.Remove(key);
      }
      foreach (var pair in other.entityDataDic_) {
        global::Protocol.EntitySyncData value;
        if(entityDataDic_.TryGetValue(pair.Key, out value)) {
          value.MergeFrom(pair.Value);
        }else{
          entityDataDic_.Add(pair.Key, pair.Value);
        }
      }
      if (other.HasBattleSyncData) {
        if (!HasBattleSyncData) {
          BattleSyncData = new global::Protocol.BattleSyncData();
        }
        BattleSyncData.MergeFrom(other.BattleSyncData);
      }
      foreach (var key in other.shadowDataDic_.DeleteList) {
        shadowDataDic_.Remove(key);
      }
      foreach (var pair in other.shadowDataDic_) {
        global::Protocol.ShadowData value;
        if(shadowDataDic_.TryGetValue(pair.Key, out value)) {
          value.MergeFrom(pair.Value);
        }else{
          shadowDataDic_.Add(pair.Key, pair.Value);
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            ServerTime = input.ReadFloat();
            break;
          }
          case 18: {
            entityDataDic_.AddEntriesFrom(input, _map_entityDataDic_codec);
            break;
          }
          case 26: {
            if (!HasBattleSyncData) {
              BattleSyncData = new global::Protocol.BattleSyncData();
            }
            input.ReadMessage(BattleSyncData);
            break;
          }
          case 34: {
            shadowDataDic_.AddEntriesFrom(input, _map_shadowDataDic_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            ServerTime = input.ReadFloat();
            break;
          }
          case 18: {
            entityDataDic_.AddEntriesFrom(ref input, _map_entityDataDic_codec);
            break;
          }
          case 26: {
            if (!HasBattleSyncData) {
              BattleSyncData = new global::Protocol.BattleSyncData();
            }
            input.ReadMessage(BattleSyncData);
            break;
          }
          case 34: {
            shadowDataDic_.AddEntriesFrom(ref input, _map_shadowDataDic_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ShadowData : pb::IMessage<ShadowData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ShadowData> _parser = new pb::MessageParser<ShadowData>(() => new ShadowData());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShadowData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShadowData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShadowData(ShadowData other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      shadowDic_ = other.shadowDic_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShadowData Clone() {
      return new ShadowData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "shadow_dic" field.</summary>
    public const int ShadowDicFieldNumber = 1;
    private static readonly pbc::MapField<uint, global::Protocol.ShadowDataItem>.Codec _map_shadowDic_codec
        = new pbc::MapField<uint, global::Protocol.ShadowDataItem>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Protocol.ShadowDataItem.Parser), 10);
    private readonly pbc::MapField<uint, global::Protocol.ShadowDataItem> shadowDic_ = new pbc::MapField<uint, global::Protocol.ShadowDataItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Protocol.ShadowDataItem> ShadowDic {
      get { return shadowDic_; }
    }
    /// <summary>Gets whether the "shadow_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShadowDicDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShadowData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShadowData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ShadowDic.Equals(other.ShadowDic)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ShadowDic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsShadowDicDirty)) {
        shadowDic_.WriteTo(output, _map_shadowDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsShadowDicDirty)) {
        shadowDic_.WriteTo(ref output, _map_shadowDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if (ShadowDic != null) {
        int msgSize = shadowDic_.CalculateSize(_map_shadowDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 1;
        } else {
          _dirtyBits0 &= ~1;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShadowData other) {
      if (other == null) {
        return;
      }
      foreach (var key in other.shadowDic_.DeleteList) {
        shadowDic_.Remove(key);
      }
      foreach (var pair in other.shadowDic_) {
        global::Protocol.ShadowDataItem value;
        if(shadowDic_.TryGetValue(pair.Key, out value)) {
          value.MergeFrom(pair.Value);
        }else{
          shadowDic_.Add(pair.Key, pair.Value);
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            shadowDic_.AddEntriesFrom(input, _map_shadowDic_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            shadowDic_.AddEntriesFrom(ref input, _map_shadowDic_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ShadowDataItem : pb::IMessage<ShadowDataItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ShadowDataItem> _parser = new pb::MessageParser<ShadowDataItem>(() => new ShadowDataItem());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShadowDataItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShadowDataItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShadowDataItem(ShadowDataItem other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      pos_ = other.HasPos ? other.pos_.Clone() : null;
      rotation_ = other.HasRotation ? other.rotation_.Clone() : null;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShadowDataItem Clone() {
      return new ShadowDataItem(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::Protocol.Float3 pos_;
    /// <summary>
    ///坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }
    /// <summary>Gets whether the pos field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPos {
      get { return pos_ != null; }
    }
    /// <summary>Clears the value of the pos field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPos() {
      pos_ = null;
    }
    /// <summary>Gets whether the "pos" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPosDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 2;
    private global::Protocol.Float3 rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }
    /// <summary>Gets whether the rotation field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRotation {
      get { return rotation_ != null; }
    }
    /// <summary>Clears the value of the rotation field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRotation() {
      rotation_ = null;
    }
    /// <summary>Gets whether the "rotation" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRotationDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private float time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { if ((_hasBits0 & 1) != 0) { return time_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 4;
        time_ = value;
      }
    }
    /// <summary>Gets whether the "time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTimeDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTime() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShadowDataItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShadowDataItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Time, other.Time)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPos) hash ^= Pos.GetHashCode();
      if (HasRotation) hash ^= Rotation.GetHashCode();
      if (HasTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Time);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasPos)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPosDirty)) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasRotation)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRotationDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTimeDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasPos)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPosDirty)) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasRotation)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRotationDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTimeDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if (HasPos) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Pos, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 1;
        } else {
          _dirtyBits0 &= ~1;
        }
      }
      if (HasRotation) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Rotation, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 2;
        } else {
          _dirtyBits0 &= ~2;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTimeDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShadowDataItem other) {
      if (other == null) {
        return;
      }
      if (other.HasPos) {
        if (!HasPos) {
          Pos = new global::Protocol.Float3();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.HasRotation) {
        if (!HasRotation) {
          Rotation = new global::Protocol.Float3();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.HasTime) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasPos) {
              Pos = new global::Protocol.Float3();
            }
            input.ReadMessage(Pos);
            break;
          }
          case 18: {
            if (!HasRotation) {
              Rotation = new global::Protocol.Float3();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 29: {
            Time = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (!HasPos) {
              Pos = new global::Protocol.Float3();
            }
            input.ReadMessage(Pos);
            break;
          }
          case 18: {
            if (!HasRotation) {
              Rotation = new global::Protocol.Float3();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 29: {
            Time = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EntitySyncData : pb::IMessage<EntitySyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EntitySyncData> _parser = new pb::MessageParser<EntitySyncData>(() => new EntitySyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    private int _dirtyBits1 = 0;
    private int _dirtyBits2 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntitySyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntitySyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntitySyncData(EntitySyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      _dirtyBits1 = other._dirtyBits1;
      _dirtyBits2 = other._dirtyBits2;
      id_ = other.id_;
      type_ = other.type_;
      position_ = other.HasPosition ? other.position_.Clone() : null;
      rotation_ = other.HasRotation ? other.rotation_.Clone() : null;
      camp_ = other.camp_;
      destroyed_ = other.destroyed_;
      modelId_ = other.modelId_;
      stateAttrData_ = other.HasStateAttrData ? other.stateAttrData_.Clone() : null;
      lifeData_ = other.HasLifeData ? other.lifeData_.Clone() : null;
      characterCtrlData_ = other.HasCharacterCtrlData ? other.characterCtrlData_.Clone() : null;
      propCollectionsData_ = other.HasPropCollectionsData ? other.propCollectionsData_.Clone() : null;
      skillCtrlData_ = other.HasSkillCtrlData ? other.skillCtrlData_.Clone() : null;
      buffCtrlData_ = other.HasBuffCtrlData ? other.buffCtrlData_.Clone() : null;
      hitCheckData_ = other.HasHitCheckData ? other.hitCheckData_.Clone() : null;
      navData_ = other.HasNavData ? other.navData_.Clone() : null;
      tagData_ = other.HasTagData ? other.tagData_.Clone() : null;
      goapData_ = other.HasGoapData ? other.goapData_.Clone() : null;
      archData_ = other.HasArchData ? other.archData_.Clone() : null;
      areaData_ = other.HasAreaData ? other.areaData_.Clone() : null;
      passerBrainData_ = other.HasPasserBrainData ? other.passerBrainData_.Clone() : null;
      guardData_ = other.HasGuardData ? other.guardData_.Clone() : null;
      flyItemData_ = other.HasFlyItemData ? other.flyItemData_.Clone() : null;
      ladderData_ = other.HasLadderData ? other.ladderData_.Clone() : null;
      thingData_ = other.HasThingData ? other.thingData_.Clone() : null;
      heroData_ = other.HasHeroData ? other.heroData_.Clone() : null;
      weaponData_ = other.HasWeaponData ? other.weaponData_.Clone() : null;
      hotData_ = other.HasHotData ? other.hotData_.Clone() : null;
      anqiData_ = other.HasAnqiData ? other.anqiData_.Clone() : null;
      peddlerData_ = other.HasPeddlerData ? other.peddlerData_.Clone() : null;
      warningData_ = other.HasWarningData ? other.warningData_.Clone() : null;
      smokeData_ = other.HasSmokeData ? other.smokeData_.Clone() : null;
      jumpPointData_ = other.HasJumpPointData ? other.jumpPointData_.Clone() : null;
      ladderCheckData_ = other.HasLadderCheckData ? other.ladderCheckData_.Clone() : null;
      boatData_ = other.HasBoatData ? other.boatData_.Clone() : null;
      shopData_ = other.HasShopData ? other.shopData_.Clone() : null;
      bossData_ = other.HasBossData ? other.bossData_.Clone() : null;
      nestData_ = other.HasNestData ? other.nestData_.Clone() : null;
      hideStateData_ = other.HasHideStateData ? other.hideStateData_.Clone() : null;
      dropData_ = other.HasDropData ? other.dropData_.Clone() : null;
      antidoteScatterData_ = other.HasAntidoteScatterData ? other.antidoteScatterData_.Clone() : null;
      monsterData_ = other.HasMonsterData ? other.monsterData_.Clone() : null;
      physicalData_ = other.HasPhysicalData ? other.physicalData_.Clone() : null;
      fireDiamond_ = other.HasFireDiamond ? other.fireDiamond_.Clone() : null;
      insanityData_ = other.HasInsanityData ? other.insanityData_.Clone() : null;
      ballData_ = other.HasBallData ? other.ballData_.Clone() : null;
      followData_ = other.HasFollowData ? other.followData_.Clone() : null;
      strengthData_ = other.HasStrengthData ? other.strengthData_.Clone() : null;
      invisibleData_ = other.HasInvisibleData ? other.invisibleData_.Clone() : null;
      magicWallData_ = other.HasMagicWallData ? other.magicWallData_.Clone() : null;
      paralysisData_ = other.HasParalysisData ? other.paralysisData_.Clone() : null;
      sealPointData_ = other.HasSealPointData ? other.sealPointData_.Clone() : null;
      sealLineData_ = other.HasSealLineData ? other.sealLineData_.Clone() : null;
      thunderNailData_ = other.HasThunderNailData ? other.thunderNailData_.Clone() : null;
      hookPointData_ = other.HasHookPointData ? other.hookPointData_.Clone() : null;
      goldenTireData_ = other.HasGoldenTireData ? other.goldenTireData_.Clone() : null;
      goldenBellData_ = other.HasGoldenBellData ? other.goldenBellData_.Clone() : null;
      timelineData_ = other.HasTimelineData ? other.timelineData_.Clone() : null;
      customEntityData_ = other.HasCustomEntityData ? other.customEntityData_.Clone() : null;
      hideAreaData_ = other.HasHideAreaData ? other.hideAreaData_.Clone() : null;
      recoverData_ = other.HasRecoverData ? other.recoverData_.Clone() : null;
      gazeSyneData_ = other.HasGazeSyneData ? other.gazeSyneData_.Clone() : null;
      totalAttackVal_ = other.totalAttackVal_;
      attackStatsDic_ = other.attackStatsDic_.Clone();
      totalSkillCount_ = other.totalSkillCount_;
      totalSkillSuccessCount_ = other.totalSkillSuccessCount_;
      skillStatsDic_ = other.skillStatsDic_.Clone();
      normalAttackCount_ = other.normalAttackCount_;
      normalAttackSuccessCount_ = other.normalAttackSuccessCount_;
      normalAttackStatsDic_ = other.normalAttackStatsDic_.Clone();
      normalAttackBreakCount_ = other.normalAttackBreakCount_;
      holdDic_ = other.holdDic_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntitySyncData Clone() {
      return new EntitySyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
      _dirtyBits1 = 0;
      _dirtyBits2 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      if (_dirtyBits1 != 0) return true;
      if (_dirtyBits2 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Protocol.EntityType type_;
    /// <summary>
    ///类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.EntityType Type {
      get { if ((_hasBits0 & 2) != 0) { return type_; } else { return global::Protocol.EntityType.Empty; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "type" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTypeDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::Protocol.Int3 position_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Int3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }
    /// <summary>Gets whether the position field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPosition {
      get { return position_ != null; }
    }
    /// <summary>Clears the value of the position field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPosition() {
      position_ = null;
    }
    /// <summary>Gets whether the "position" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPositionDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 4;
    private global::Protocol.Int3 rotation_;
    /// <summary>
    ///旋转
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Int3 Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }
    /// <summary>Gets whether the rotation field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRotation {
      get { return rotation_ != null; }
    }
    /// <summary>Clears the value of the rotation field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRotation() {
      rotation_ = null;
    }
    /// <summary>Gets whether the "rotation" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRotationDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }

    /// <summary>Field number for the "camp" field.</summary>
    public const int CampFieldNumber = 5;
    private uint camp_;
    /// <summary>
    ///阵营
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Camp {
      get { if ((_hasBits0 & 4) != 0) { return camp_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 16;
        camp_ = value;
      }
    }
    /// <summary>Gets whether the "camp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCamp {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "camp" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCampDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "camp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCamp() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "destroyed" field.</summary>
    public const int DestroyedFieldNumber = 7;
    private bool destroyed_;
    /// <summary>
    ///已经被销毁了
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Destroyed {
      get { if ((_hasBits0 & 8) != 0) { return destroyed_; } else { return false; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 32;
        destroyed_ = value;
      }
    }
    /// <summary>Gets whether the "destroyed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestroyed {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "destroyed" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDestroyedDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "destroyed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestroyed() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "model_id" field.</summary>
    public const int ModelIdFieldNumber = 8;
    private uint modelId_;
    /// <summary>
    ///模型ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ModelId {
      get { if ((_hasBits0 & 16) != 0) { return modelId_; } else { return 0; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 64;
        modelId_ = value;
      }
    }
    /// <summary>Gets whether the "model_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasModelId {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "model_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsModelIdDirty {
      get { return (_dirtyBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "model_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearModelId() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "state_attr_data" field.</summary>
    public const int StateAttrDataFieldNumber = 11;
    private global::Protocol.StateAttributeSyncData stateAttrData_;
    /// <summary>
    ///状态属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.StateAttributeSyncData StateAttrData {
      get { return stateAttrData_; }
      set {
        stateAttrData_ = value;
      }
    }
    /// <summary>Gets whether the state_attr_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStateAttrData {
      get { return stateAttrData_ != null; }
    }
    /// <summary>Clears the value of the state_attr_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStateAttrData() {
      stateAttrData_ = null;
    }
    /// <summary>Gets whether the "state_attr_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStateAttrDataDirty {
      get { return (_dirtyBits0 & 128) != 0; }
    }

    /// <summary>Field number for the "life_data" field.</summary>
    public const int LifeDataFieldNumber = 12;
    private global::Protocol.LifeSyncData lifeData_;
    /// <summary>
    ///生命
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.LifeSyncData LifeData {
      get { return lifeData_; }
      set {
        lifeData_ = value;
      }
    }
    /// <summary>Gets whether the life_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLifeData {
      get { return lifeData_ != null; }
    }
    /// <summary>Clears the value of the life_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLifeData() {
      lifeData_ = null;
    }
    /// <summary>Gets whether the "life_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLifeDataDirty {
      get { return (_dirtyBits0 & 256) != 0; }
    }

    /// <summary>Field number for the "character_ctrl_data" field.</summary>
    public const int CharacterCtrlDataFieldNumber = 13;
    private global::Protocol.CharacterCtrlSyncData characterCtrlData_;
    /// <summary>
    ///角色控制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.CharacterCtrlSyncData CharacterCtrlData {
      get { return characterCtrlData_; }
      set {
        characterCtrlData_ = value;
      }
    }
    /// <summary>Gets whether the character_ctrl_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCharacterCtrlData {
      get { return characterCtrlData_ != null; }
    }
    /// <summary>Clears the value of the character_ctrl_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCharacterCtrlData() {
      characterCtrlData_ = null;
    }
    /// <summary>Gets whether the "character_ctrl_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCharacterCtrlDataDirty {
      get { return (_dirtyBits0 & 512) != 0; }
    }

    /// <summary>Field number for the "prop_collections_data" field.</summary>
    public const int PropCollectionsDataFieldNumber = 14;
    private global::Protocol.PropCollectionsSyncData propCollectionsData_;
    /// <summary>
    ///物品集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.PropCollectionsSyncData PropCollectionsData {
      get { return propCollectionsData_; }
      set {
        propCollectionsData_ = value;
      }
    }
    /// <summary>Gets whether the prop_collections_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPropCollectionsData {
      get { return propCollectionsData_ != null; }
    }
    /// <summary>Clears the value of the prop_collections_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPropCollectionsData() {
      propCollectionsData_ = null;
    }
    /// <summary>Gets whether the "prop_collections_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPropCollectionsDataDirty {
      get { return (_dirtyBits0 & 1024) != 0; }
    }

    /// <summary>Field number for the "skill_ctrl_data" field.</summary>
    public const int SkillCtrlDataFieldNumber = 15;
    private global::Protocol.SkillCtrlSyncData skillCtrlData_;
    /// <summary>
    ///技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.SkillCtrlSyncData SkillCtrlData {
      get { return skillCtrlData_; }
      set {
        skillCtrlData_ = value;
      }
    }
    /// <summary>Gets whether the skill_ctrl_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSkillCtrlData {
      get { return skillCtrlData_ != null; }
    }
    /// <summary>Clears the value of the skill_ctrl_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSkillCtrlData() {
      skillCtrlData_ = null;
    }
    /// <summary>Gets whether the "skill_ctrl_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkillCtrlDataDirty {
      get { return (_dirtyBits0 & 2048) != 0; }
    }

    /// <summary>Field number for the "buff_ctrl_data" field.</summary>
    public const int BuffCtrlDataFieldNumber = 16;
    private global::Protocol.BuffCtrlSyncData buffCtrlData_;
    /// <summary>
    ///Buff
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.BuffCtrlSyncData BuffCtrlData {
      get { return buffCtrlData_; }
      set {
        buffCtrlData_ = value;
      }
    }
    /// <summary>Gets whether the buff_ctrl_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBuffCtrlData {
      get { return buffCtrlData_ != null; }
    }
    /// <summary>Clears the value of the buff_ctrl_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBuffCtrlData() {
      buffCtrlData_ = null;
    }
    /// <summary>Gets whether the "buff_ctrl_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBuffCtrlDataDirty {
      get { return (_dirtyBits0 & 4096) != 0; }
    }

    /// <summary>Field number for the "hit_check_data" field.</summary>
    public const int HitCheckDataFieldNumber = 17;
    private global::Protocol.HitCheckSyncData hitCheckData_;
    /// <summary>
    ///碰撞信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.HitCheckSyncData HitCheckData {
      get { return hitCheckData_; }
      set {
        hitCheckData_ = value;
      }
    }
    /// <summary>Gets whether the hit_check_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHitCheckData {
      get { return hitCheckData_ != null; }
    }
    /// <summary>Clears the value of the hit_check_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHitCheckData() {
      hitCheckData_ = null;
    }
    /// <summary>Gets whether the "hit_check_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHitCheckDataDirty {
      get { return (_dirtyBits0 & 8192) != 0; }
    }

    /// <summary>Field number for the "nav_data" field.</summary>
    public const int NavDataFieldNumber = 18;
    private global::Protocol.NavSyncData navData_;
    /// <summary>
    ///导航
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.NavSyncData NavData {
      get { return navData_; }
      set {
        navData_ = value;
      }
    }
    /// <summary>Gets whether the nav_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNavData {
      get { return navData_ != null; }
    }
    /// <summary>Clears the value of the nav_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNavData() {
      navData_ = null;
    }
    /// <summary>Gets whether the "nav_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNavDataDirty {
      get { return (_dirtyBits0 & 16384) != 0; }
    }

    /// <summary>Field number for the "tag_data" field.</summary>
    public const int TagDataFieldNumber = 19;
    private global::Protocol.TagSyncData tagData_;
    /// <summary>
    ///Tag组件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.TagSyncData TagData {
      get { return tagData_; }
      set {
        tagData_ = value;
      }
    }
    /// <summary>Gets whether the tag_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTagData {
      get { return tagData_ != null; }
    }
    /// <summary>Clears the value of the tag_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTagData() {
      tagData_ = null;
    }
    /// <summary>Gets whether the "tag_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTagDataDirty {
      get { return (_dirtyBits0 & 32768) != 0; }
    }

    /// <summary>Field number for the "goap_data" field.</summary>
    public const int GoapDataFieldNumber = 20;
    private global::Protocol.GoapSyncData goapData_;
    /// <summary>
    ///Goap组件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.GoapSyncData GoapData {
      get { return goapData_; }
      set {
        goapData_ = value;
      }
    }
    /// <summary>Gets whether the goap_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGoapData {
      get { return goapData_ != null; }
    }
    /// <summary>Clears the value of the goap_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGoapData() {
      goapData_ = null;
    }
    /// <summary>Gets whether the "goap_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGoapDataDirty {
      get { return (_dirtyBits0 & 65536) != 0; }
    }

    /// <summary>Field number for the "arch_data" field.</summary>
    public const int ArchDataFieldNumber = 21;
    private global::Protocol.ArchitectureSyncData archData_;
    /// <summary>
    ///建筑组件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ArchitectureSyncData ArchData {
      get { return archData_; }
      set {
        archData_ = value;
      }
    }
    /// <summary>Gets whether the arch_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasArchData {
      get { return archData_ != null; }
    }
    /// <summary>Clears the value of the arch_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearArchData() {
      archData_ = null;
    }
    /// <summary>Gets whether the "arch_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsArchDataDirty {
      get { return (_dirtyBits0 & 131072) != 0; }
    }

    /// <summary>Field number for the "area_data" field.</summary>
    public const int AreaDataFieldNumber = 30;
    private global::Protocol.AreaSyncData areaData_;
    /// <summary>
    ///安全区
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AreaSyncData AreaData {
      get { return areaData_; }
      set {
        areaData_ = value;
      }
    }
    /// <summary>Gets whether the area_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAreaData {
      get { return areaData_ != null; }
    }
    /// <summary>Clears the value of the area_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAreaData() {
      areaData_ = null;
    }
    /// <summary>Gets whether the "area_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAreaDataDirty {
      get { return (_dirtyBits0 & 262144) != 0; }
    }

    /// <summary>Field number for the "passer_brain_data" field.</summary>
    public const int PasserBrainDataFieldNumber = 31;
    private global::Protocol.PasserBrainSyncData passerBrainData_;
    /// <summary>
    ///路人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.PasserBrainSyncData PasserBrainData {
      get { return passerBrainData_; }
      set {
        passerBrainData_ = value;
      }
    }
    /// <summary>Gets whether the passer_brain_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPasserBrainData {
      get { return passerBrainData_ != null; }
    }
    /// <summary>Clears the value of the passer_brain_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPasserBrainData() {
      passerBrainData_ = null;
    }
    /// <summary>Gets whether the "passer_brain_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPasserBrainDataDirty {
      get { return (_dirtyBits0 & 524288) != 0; }
    }

    /// <summary>Field number for the "guard_data" field.</summary>
    public const int GuardDataFieldNumber = 32;
    private global::Protocol.GuardSyncData guardData_;
    /// <summary>
    ///警卫
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.GuardSyncData GuardData {
      get { return guardData_; }
      set {
        guardData_ = value;
      }
    }
    /// <summary>Gets whether the guard_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuardData {
      get { return guardData_ != null; }
    }
    /// <summary>Clears the value of the guard_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuardData() {
      guardData_ = null;
    }
    /// <summary>Gets whether the "guard_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGuardDataDirty {
      get { return (_dirtyBits0 & 1048576) != 0; }
    }

    /// <summary>Field number for the "fly_item_data" field.</summary>
    public const int FlyItemDataFieldNumber = 33;
    private global::Protocol.FlyItemSyncData flyItemData_;
    /// <summary>
    ///飞行道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.FlyItemSyncData FlyItemData {
      get { return flyItemData_; }
      set {
        flyItemData_ = value;
      }
    }
    /// <summary>Gets whether the fly_item_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFlyItemData {
      get { return flyItemData_ != null; }
    }
    /// <summary>Clears the value of the fly_item_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFlyItemData() {
      flyItemData_ = null;
    }
    /// <summary>Gets whether the "fly_item_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFlyItemDataDirty {
      get { return (_dirtyBits0 & 2097152) != 0; }
    }

    /// <summary>Field number for the "ladder_data" field.</summary>
    public const int LadderDataFieldNumber = 34;
    private global::Protocol.LadderSyncData ladderData_;
    /// <summary>
    ///连接点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.LadderSyncData LadderData {
      get { return ladderData_; }
      set {
        ladderData_ = value;
      }
    }
    /// <summary>Gets whether the ladder_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLadderData {
      get { return ladderData_ != null; }
    }
    /// <summary>Clears the value of the ladder_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLadderData() {
      ladderData_ = null;
    }
    /// <summary>Gets whether the "ladder_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLadderDataDirty {
      get { return (_dirtyBits0 & 4194304) != 0; }
    }

    /// <summary>Field number for the "thing_data" field.</summary>
    public const int ThingDataFieldNumber = 35;
    private global::Protocol.ThingSyncData thingData_;
    /// <summary>
    ///物件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ThingSyncData ThingData {
      get { return thingData_; }
      set {
        thingData_ = value;
      }
    }
    /// <summary>Gets whether the thing_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasThingData {
      get { return thingData_ != null; }
    }
    /// <summary>Clears the value of the thing_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearThingData() {
      thingData_ = null;
    }
    /// <summary>Gets whether the "thing_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsThingDataDirty {
      get { return (_dirtyBits0 & 8388608) != 0; }
    }

    /// <summary>Field number for the "hero_data" field.</summary>
    public const int HeroDataFieldNumber = 36;
    private global::Protocol.HeroSyncData heroData_;
    /// <summary>
    ///英雄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.HeroSyncData HeroData {
      get { return heroData_; }
      set {
        heroData_ = value;
      }
    }
    /// <summary>Gets whether the hero_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroData {
      get { return heroData_ != null; }
    }
    /// <summary>Clears the value of the hero_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroData() {
      heroData_ = null;
    }
    /// <summary>Gets whether the "hero_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHeroDataDirty {
      get { return (_dirtyBits0 & 16777216) != 0; }
    }

    /// <summary>Field number for the "weapon_data" field.</summary>
    public const int WeaponDataFieldNumber = 37;
    private global::Protocol.WeaponSyncData weaponData_;
    /// <summary>
    ///武器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.WeaponSyncData WeaponData {
      get { return weaponData_; }
      set {
        weaponData_ = value;
      }
    }
    /// <summary>Gets whether the weapon_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWeaponData {
      get { return weaponData_ != null; }
    }
    /// <summary>Clears the value of the weapon_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWeaponData() {
      weaponData_ = null;
    }
    /// <summary>Gets whether the "weapon_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWeaponDataDirty {
      get { return (_dirtyBits0 & 33554432) != 0; }
    }

    /// <summary>Field number for the "hot_data" field.</summary>
    public const int HotDataFieldNumber = 38;
    private global::Protocol.HotSyncData hotData_;
    /// <summary>
    ///热点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.HotSyncData HotData {
      get { return hotData_; }
      set {
        hotData_ = value;
      }
    }
    /// <summary>Gets whether the hot_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHotData {
      get { return hotData_ != null; }
    }
    /// <summary>Clears the value of the hot_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHotData() {
      hotData_ = null;
    }
    /// <summary>Gets whether the "hot_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHotDataDirty {
      get { return (_dirtyBits0 & 67108864) != 0; }
    }

    /// <summary>Field number for the "anqi_data" field.</summary>
    public const int AnqiDataFieldNumber = 39;
    private global::Protocol.AnqiSyncData anqiData_;
    /// <summary>
    ///暗器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AnqiSyncData AnqiData {
      get { return anqiData_; }
      set {
        anqiData_ = value;
      }
    }
    /// <summary>Gets whether the anqi_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAnqiData {
      get { return anqiData_ != null; }
    }
    /// <summary>Clears the value of the anqi_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAnqiData() {
      anqiData_ = null;
    }
    /// <summary>Gets whether the "anqi_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAnqiDataDirty {
      get { return (_dirtyBits0 & 134217728) != 0; }
    }

    /// <summary>Field number for the "peddler_data" field.</summary>
    public const int PeddlerDataFieldNumber = 40;
    private global::Protocol.PeddlerSyncData peddlerData_;
    /// <summary>
    ///摊贩
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.PeddlerSyncData PeddlerData {
      get { return peddlerData_; }
      set {
        peddlerData_ = value;
      }
    }
    /// <summary>Gets whether the peddler_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPeddlerData {
      get { return peddlerData_ != null; }
    }
    /// <summary>Clears the value of the peddler_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPeddlerData() {
      peddlerData_ = null;
    }
    /// <summary>Gets whether the "peddler_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPeddlerDataDirty {
      get { return (_dirtyBits0 & 268435456) != 0; }
    }

    /// <summary>Field number for the "warning_data" field.</summary>
    public const int WarningDataFieldNumber = 42;
    private global::Protocol.WarningSyncData warningData_;
    /// <summary>
    ///警觉信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.WarningSyncData WarningData {
      get { return warningData_; }
      set {
        warningData_ = value;
      }
    }
    /// <summary>Gets whether the warning_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWarningData {
      get { return warningData_ != null; }
    }
    /// <summary>Clears the value of the warning_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWarningData() {
      warningData_ = null;
    }
    /// <summary>Gets whether the "warning_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWarningDataDirty {
      get { return (_dirtyBits0 & 536870912) != 0; }
    }

    /// <summary>Field number for the "smoke_data" field.</summary>
    public const int SmokeDataFieldNumber = 43;
    private global::Protocol.SmokeSyncData smokeData_;
    /// <summary>
    ///烟雾弹
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.SmokeSyncData SmokeData {
      get { return smokeData_; }
      set {
        smokeData_ = value;
      }
    }
    /// <summary>Gets whether the smoke_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSmokeData {
      get { return smokeData_ != null; }
    }
    /// <summary>Clears the value of the smoke_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSmokeData() {
      smokeData_ = null;
    }
    /// <summary>Gets whether the "smoke_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSmokeDataDirty {
      get { return (_dirtyBits0 & 1073741824) != 0; }
    }

    /// <summary>Field number for the "jump_point_data" field.</summary>
    public const int JumpPointDataFieldNumber = 44;
    private global::Protocol.JumpPointSyncData jumpPointData_;
    /// <summary>
    ///跳跃点组件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.JumpPointSyncData JumpPointData {
      get { return jumpPointData_; }
      set {
        jumpPointData_ = value;
      }
    }
    /// <summary>Gets whether the jump_point_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasJumpPointData {
      get { return jumpPointData_ != null; }
    }
    /// <summary>Clears the value of the jump_point_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearJumpPointData() {
      jumpPointData_ = null;
    }
    /// <summary>Gets whether the "jump_point_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsJumpPointDataDirty {
      get { return (_dirtyBits0 & -2147483648) != 0; }
    }

    /// <summary>Field number for the "ladder_check_data" field.</summary>
    public const int LadderCheckDataFieldNumber = 45;
    private global::Protocol.LadderCheckSyncData ladderCheckData_;
    /// <summary>
    ///连接点Check
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.LadderCheckSyncData LadderCheckData {
      get { return ladderCheckData_; }
      set {
        ladderCheckData_ = value;
      }
    }
    /// <summary>Gets whether the ladder_check_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLadderCheckData {
      get { return ladderCheckData_ != null; }
    }
    /// <summary>Clears the value of the ladder_check_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLadderCheckData() {
      ladderCheckData_ = null;
    }
    /// <summary>Gets whether the "ladder_check_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLadderCheckDataDirty {
      get { return (_dirtyBits1 & 1) != 0; }
    }

    /// <summary>Field number for the "boat_data" field.</summary>
    public const int BoatDataFieldNumber = 46;
    private global::Protocol.BoatSyncData boatData_;
    /// <summary>
    ///简单移动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.BoatSyncData BoatData {
      get { return boatData_; }
      set {
        boatData_ = value;
      }
    }
    /// <summary>Gets whether the boat_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBoatData {
      get { return boatData_ != null; }
    }
    /// <summary>Clears the value of the boat_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBoatData() {
      boatData_ = null;
    }
    /// <summary>Gets whether the "boat_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBoatDataDirty {
      get { return (_dirtyBits1 & 2) != 0; }
    }

    /// <summary>Field number for the "shop_data" field.</summary>
    public const int ShopDataFieldNumber = 47;
    private global::Protocol.ShopSyncData shopData_;
    /// <summary>
    ///商店
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ShopSyncData ShopData {
      get { return shopData_; }
      set {
        shopData_ = value;
      }
    }
    /// <summary>Gets whether the shop_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShopData {
      get { return shopData_ != null; }
    }
    /// <summary>Clears the value of the shop_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShopData() {
      shopData_ = null;
    }
    /// <summary>Gets whether the "shop_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShopDataDirty {
      get { return (_dirtyBits1 & 4) != 0; }
    }

    /// <summary>Field number for the "boss_data" field.</summary>
    public const int BossDataFieldNumber = 49;
    private global::Protocol.BossSyncData bossData_;
    /// <summary>
    ///optional BonfireSyncData bonfire_data					= 48;//篝火
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.BossSyncData BossData {
      get { return bossData_; }
      set {
        bossData_ = value;
      }
    }
    /// <summary>Gets whether the boss_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBossData {
      get { return bossData_ != null; }
    }
    /// <summary>Clears the value of the boss_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBossData() {
      bossData_ = null;
    }
    /// <summary>Gets whether the "boss_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBossDataDirty {
      get { return (_dirtyBits1 & 8) != 0; }
    }

    /// <summary>Field number for the "nest_data" field.</summary>
    public const int NestDataFieldNumber = 50;
    private global::Protocol.NestSyncData nestData_;
    /// <summary>
    ///巢穴
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.NestSyncData NestData {
      get { return nestData_; }
      set {
        nestData_ = value;
      }
    }
    /// <summary>Gets whether the nest_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNestData {
      get { return nestData_ != null; }
    }
    /// <summary>Clears the value of the nest_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNestData() {
      nestData_ = null;
    }
    /// <summary>Gets whether the "nest_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNestDataDirty {
      get { return (_dirtyBits1 & 16) != 0; }
    }

    /// <summary>Field number for the "hide_state_data" field.</summary>
    public const int HideStateDataFieldNumber = 51;
    private global::Protocol.HideStateSyncData hideStateData_;
    /// <summary>
    ///隐身状态数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.HideStateSyncData HideStateData {
      get { return hideStateData_; }
      set {
        hideStateData_ = value;
      }
    }
    /// <summary>Gets whether the hide_state_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHideStateData {
      get { return hideStateData_ != null; }
    }
    /// <summary>Clears the value of the hide_state_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHideStateData() {
      hideStateData_ = null;
    }
    /// <summary>Gets whether the "hide_state_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHideStateDataDirty {
      get { return (_dirtyBits1 & 32) != 0; }
    }

    /// <summary>Field number for the "drop_data" field.</summary>
    public const int DropDataFieldNumber = 52;
    private global::Protocol.DropSyncData dropData_;
    /// <summary>
    ///掉落物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.DropSyncData DropData {
      get { return dropData_; }
      set {
        dropData_ = value;
      }
    }
    /// <summary>Gets whether the drop_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDropData {
      get { return dropData_ != null; }
    }
    /// <summary>Clears the value of the drop_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDropData() {
      dropData_ = null;
    }
    /// <summary>Gets whether the "drop_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDropDataDirty {
      get { return (_dirtyBits1 & 64) != 0; }
    }

    /// <summary>Field number for the "antidote_scatter_data" field.</summary>
    public const int AntidoteScatterDataFieldNumber = 54;
    private global::Protocol.AntidoteScatterSyncData antidoteScatterData_;
    /// <summary>
    ///解药派发地
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AntidoteScatterSyncData AntidoteScatterData {
      get { return antidoteScatterData_; }
      set {
        antidoteScatterData_ = value;
      }
    }
    /// <summary>Gets whether the antidote_scatter_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAntidoteScatterData {
      get { return antidoteScatterData_ != null; }
    }
    /// <summary>Clears the value of the antidote_scatter_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAntidoteScatterData() {
      antidoteScatterData_ = null;
    }
    /// <summary>Gets whether the "antidote_scatter_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAntidoteScatterDataDirty {
      get { return (_dirtyBits1 & 128) != 0; }
    }

    /// <summary>Field number for the "monster_data" field.</summary>
    public const int MonsterDataFieldNumber = 55;
    private global::Protocol.MonsterSyncData monsterData_;
    /// <summary>
    ///怪物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.MonsterSyncData MonsterData {
      get { return monsterData_; }
      set {
        monsterData_ = value;
      }
    }
    /// <summary>Gets whether the monster_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMonsterData {
      get { return monsterData_ != null; }
    }
    /// <summary>Clears the value of the monster_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMonsterData() {
      monsterData_ = null;
    }
    /// <summary>Gets whether the "monster_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMonsterDataDirty {
      get { return (_dirtyBits1 & 256) != 0; }
    }

    /// <summary>Field number for the "physical_data" field.</summary>
    public const int PhysicalDataFieldNumber = 57;
    private global::Protocol.PhyscialSyncData physicalData_;
    /// <summary>
    ///物理（移动）模块
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.PhyscialSyncData PhysicalData {
      get { return physicalData_; }
      set {
        physicalData_ = value;
      }
    }
    /// <summary>Gets whether the physical_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPhysicalData {
      get { return physicalData_ != null; }
    }
    /// <summary>Clears the value of the physical_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPhysicalData() {
      physicalData_ = null;
    }
    /// <summary>Gets whether the "physical_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPhysicalDataDirty {
      get { return (_dirtyBits1 & 512) != 0; }
    }

    /// <summary>Field number for the "fire_diamond" field.</summary>
    public const int FireDiamondFieldNumber = 58;
    private global::Protocol.FireDiamondSyncData fireDiamond_;
    /// <summary>
    ///炎玉
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.FireDiamondSyncData FireDiamond {
      get { return fireDiamond_; }
      set {
        fireDiamond_ = value;
      }
    }
    /// <summary>Gets whether the fire_diamond field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFireDiamond {
      get { return fireDiamond_ != null; }
    }
    /// <summary>Clears the value of the fire_diamond field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFireDiamond() {
      fireDiamond_ = null;
    }
    /// <summary>Gets whether the "fire_diamond" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFireDiamondDirty {
      get { return (_dirtyBits1 & 1024) != 0; }
    }

    /// <summary>Field number for the "insanity_data" field.</summary>
    public const int InsanityDataFieldNumber = 59;
    private global::Protocol.InsanitySyncData insanityData_;
    /// <summary>
    /// 蛊灵
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.InsanitySyncData InsanityData {
      get { return insanityData_; }
      set {
        insanityData_ = value;
      }
    }
    /// <summary>Gets whether the insanity_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInsanityData {
      get { return insanityData_ != null; }
    }
    /// <summary>Clears the value of the insanity_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInsanityData() {
      insanityData_ = null;
    }
    /// <summary>Gets whether the "insanity_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInsanityDataDirty {
      get { return (_dirtyBits1 & 2048) != 0; }
    }

    /// <summary>Field number for the "ball_data" field.</summary>
    public const int BallDataFieldNumber = 60;
    private global::Protocol.BallSyncData ballData_;
    /// <summary>
    /// 球
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.BallSyncData BallData {
      get { return ballData_; }
      set {
        ballData_ = value;
      }
    }
    /// <summary>Gets whether the ball_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBallData {
      get { return ballData_ != null; }
    }
    /// <summary>Clears the value of the ball_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBallData() {
      ballData_ = null;
    }
    /// <summary>Gets whether the "ball_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBallDataDirty {
      get { return (_dirtyBits1 & 4096) != 0; }
    }

    /// <summary>Field number for the "follow_data" field.</summary>
    public const int FollowDataFieldNumber = 61;
    private global::Protocol.FollowSyncData followData_;
    /// <summary>
    ///跟随数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.FollowSyncData FollowData {
      get { return followData_; }
      set {
        followData_ = value;
      }
    }
    /// <summary>Gets whether the follow_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFollowData {
      get { return followData_ != null; }
    }
    /// <summary>Clears the value of the follow_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFollowData() {
      followData_ = null;
    }
    /// <summary>Gets whether the "follow_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFollowDataDirty {
      get { return (_dirtyBits1 & 8192) != 0; }
    }

    /// <summary>Field number for the "strength_data" field.</summary>
    public const int StrengthDataFieldNumber = 62;
    private global::Protocol.StrengthSyncData strengthData_;
    /// <summary>
    ///体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.StrengthSyncData StrengthData {
      get { return strengthData_; }
      set {
        strengthData_ = value;
      }
    }
    /// <summary>Gets whether the strength_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStrengthData {
      get { return strengthData_ != null; }
    }
    /// <summary>Clears the value of the strength_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStrengthData() {
      strengthData_ = null;
    }
    /// <summary>Gets whether the "strength_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStrengthDataDirty {
      get { return (_dirtyBits1 & 16384) != 0; }
    }

    /// <summary>Field number for the "invisible_data" field.</summary>
    public const int InvisibleDataFieldNumber = 64;
    private global::Protocol.InvisibleSyncData invisibleData_;
    /// <summary>
    ///隐身
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.InvisibleSyncData InvisibleData {
      get { return invisibleData_; }
      set {
        invisibleData_ = value;
      }
    }
    /// <summary>Gets whether the invisible_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInvisibleData {
      get { return invisibleData_ != null; }
    }
    /// <summary>Clears the value of the invisible_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInvisibleData() {
      invisibleData_ = null;
    }
    /// <summary>Gets whether the "invisible_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInvisibleDataDirty {
      get { return (_dirtyBits1 & 32768) != 0; }
    }

    /// <summary>Field number for the "magic_wall_data" field.</summary>
    public const int MagicWallDataFieldNumber = 65;
    private global::Protocol.MagicWallSyncData magicWallData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.MagicWallSyncData MagicWallData {
      get { return magicWallData_; }
      set {
        magicWallData_ = value;
      }
    }
    /// <summary>Gets whether the magic_wall_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMagicWallData {
      get { return magicWallData_ != null; }
    }
    /// <summary>Clears the value of the magic_wall_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMagicWallData() {
      magicWallData_ = null;
    }
    /// <summary>Gets whether the "magic_wall_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMagicWallDataDirty {
      get { return (_dirtyBits1 & 65536) != 0; }
    }

    /// <summary>Field number for the "paralysis_data" field.</summary>
    public const int ParalysisDataFieldNumber = 66;
    private global::Protocol.ParalysisSyncData paralysisData_;
    /// <summary>
    ///瘫痪
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ParalysisSyncData ParalysisData {
      get { return paralysisData_; }
      set {
        paralysisData_ = value;
      }
    }
    /// <summary>Gets whether the paralysis_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParalysisData {
      get { return paralysisData_ != null; }
    }
    /// <summary>Clears the value of the paralysis_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParalysisData() {
      paralysisData_ = null;
    }
    /// <summary>Gets whether the "paralysis_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsParalysisDataDirty {
      get { return (_dirtyBits1 & 131072) != 0; }
    }

    /// <summary>Field number for the "seal_point_data" field.</summary>
    public const int SealPointDataFieldNumber = 67;
    private global::Protocol.SealingPointSyncData sealPointData_;
    /// <summary>
    ///封印剑
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.SealingPointSyncData SealPointData {
      get { return sealPointData_; }
      set {
        sealPointData_ = value;
      }
    }
    /// <summary>Gets whether the seal_point_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSealPointData {
      get { return sealPointData_ != null; }
    }
    /// <summary>Clears the value of the seal_point_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSealPointData() {
      sealPointData_ = null;
    }
    /// <summary>Gets whether the "seal_point_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSealPointDataDirty {
      get { return (_dirtyBits1 & 262144) != 0; }
    }

    /// <summary>Field number for the "seal_line_data" field.</summary>
    public const int SealLineDataFieldNumber = 68;
    private global::Protocol.SealingLineSyncData sealLineData_;
    /// <summary>
    ///封印线
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.SealingLineSyncData SealLineData {
      get { return sealLineData_; }
      set {
        sealLineData_ = value;
      }
    }
    /// <summary>Gets whether the seal_line_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSealLineData {
      get { return sealLineData_ != null; }
    }
    /// <summary>Clears the value of the seal_line_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSealLineData() {
      sealLineData_ = null;
    }
    /// <summary>Gets whether the "seal_line_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSealLineDataDirty {
      get { return (_dirtyBits1 & 524288) != 0; }
    }

    /// <summary>Field number for the "thunder_nail_data" field.</summary>
    public const int ThunderNailDataFieldNumber = 69;
    private global::Protocol.ThunderNailSyncData thunderNailData_;
    /// <summary>
    ///雷钉
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ThunderNailSyncData ThunderNailData {
      get { return thunderNailData_; }
      set {
        thunderNailData_ = value;
      }
    }
    /// <summary>Gets whether the thunder_nail_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasThunderNailData {
      get { return thunderNailData_ != null; }
    }
    /// <summary>Clears the value of the thunder_nail_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearThunderNailData() {
      thunderNailData_ = null;
    }
    /// <summary>Gets whether the "thunder_nail_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsThunderNailDataDirty {
      get { return (_dirtyBits1 & 1048576) != 0; }
    }

    /// <summary>Field number for the "hook_point_data" field.</summary>
    public const int HookPointDataFieldNumber = 70;
    private global::Protocol.HookPointSyncData hookPointData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.HookPointSyncData HookPointData {
      get { return hookPointData_; }
      set {
        hookPointData_ = value;
      }
    }
    /// <summary>Gets whether the hook_point_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHookPointData {
      get { return hookPointData_ != null; }
    }
    /// <summary>Clears the value of the hook_point_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHookPointData() {
      hookPointData_ = null;
    }
    /// <summary>Gets whether the "hook_point_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHookPointDataDirty {
      get { return (_dirtyBits1 & 2097152) != 0; }
    }

    /// <summary>Field number for the "golden_tire_data" field.</summary>
    public const int GoldenTireDataFieldNumber = 71;
    private global::Protocol.GoldenTireSyncData goldenTireData_;
    /// <summary>
    ///金轮
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.GoldenTireSyncData GoldenTireData {
      get { return goldenTireData_; }
      set {
        goldenTireData_ = value;
      }
    }
    /// <summary>Gets whether the golden_tire_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGoldenTireData {
      get { return goldenTireData_ != null; }
    }
    /// <summary>Clears the value of the golden_tire_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGoldenTireData() {
      goldenTireData_ = null;
    }
    /// <summary>Gets whether the "golden_tire_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGoldenTireDataDirty {
      get { return (_dirtyBits1 & 4194304) != 0; }
    }

    /// <summary>Field number for the "golden_bell_data" field.</summary>
    public const int GoldenBellDataFieldNumber = 72;
    private global::Protocol.GoldenBellSyncData goldenBellData_;
    /// <summary>
    ///金钟罩
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.GoldenBellSyncData GoldenBellData {
      get { return goldenBellData_; }
      set {
        goldenBellData_ = value;
      }
    }
    /// <summary>Gets whether the golden_bell_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGoldenBellData {
      get { return goldenBellData_ != null; }
    }
    /// <summary>Clears the value of the golden_bell_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGoldenBellData() {
      goldenBellData_ = null;
    }
    /// <summary>Gets whether the "golden_bell_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGoldenBellDataDirty {
      get { return (_dirtyBits1 & 8388608) != 0; }
    }

    /// <summary>Field number for the "timeline_data" field.</summary>
    public const int TimelineDataFieldNumber = 73;
    private global::Protocol.TimelineSyncData timelineData_;
    /// <summary>
    ///timeline
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.TimelineSyncData TimelineData {
      get { return timelineData_; }
      set {
        timelineData_ = value;
      }
    }
    /// <summary>Gets whether the timeline_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimelineData {
      get { return timelineData_ != null; }
    }
    /// <summary>Clears the value of the timeline_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimelineData() {
      timelineData_ = null;
    }
    /// <summary>Gets whether the "timeline_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTimelineDataDirty {
      get { return (_dirtyBits1 & 16777216) != 0; }
    }

    /// <summary>Field number for the "custom_entity_data" field.</summary>
    public const int CustomEntityDataFieldNumber = 74;
    private global::Protocol.CustomEntitySyncData customEntityData_;
    /// <summary>
    ///自定义entity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.CustomEntitySyncData CustomEntityData {
      get { return customEntityData_; }
      set {
        customEntityData_ = value;
      }
    }
    /// <summary>Gets whether the custom_entity_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomEntityData {
      get { return customEntityData_ != null; }
    }
    /// <summary>Clears the value of the custom_entity_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomEntityData() {
      customEntityData_ = null;
    }
    /// <summary>Gets whether the "custom_entity_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCustomEntityDataDirty {
      get { return (_dirtyBits1 & 33554432) != 0; }
    }

    /// <summary>Field number for the "hide_area_data" field.</summary>
    public const int HideAreaDataFieldNumber = 75;
    private global::Protocol.HideAreaSyncData hideAreaData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.HideAreaSyncData HideAreaData {
      get { return hideAreaData_; }
      set {
        hideAreaData_ = value;
      }
    }
    /// <summary>Gets whether the hide_area_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHideAreaData {
      get { return hideAreaData_ != null; }
    }
    /// <summary>Clears the value of the hide_area_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHideAreaData() {
      hideAreaData_ = null;
    }
    /// <summary>Gets whether the "hide_area_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHideAreaDataDirty {
      get { return (_dirtyBits1 & 67108864) != 0; }
    }

    /// <summary>Field number for the "recover_data" field.</summary>
    public const int RecoverDataFieldNumber = 76;
    private global::Protocol.RecoverSyncData recoverData_;
    /// <summary>
    ///恢复
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.RecoverSyncData RecoverData {
      get { return recoverData_; }
      set {
        recoverData_ = value;
      }
    }
    /// <summary>Gets whether the recover_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRecoverData {
      get { return recoverData_ != null; }
    }
    /// <summary>Clears the value of the recover_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRecoverData() {
      recoverData_ = null;
    }
    /// <summary>Gets whether the "recover_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRecoverDataDirty {
      get { return (_dirtyBits1 & 134217728) != 0; }
    }

    /// <summary>Field number for the "gaze_syne_data" field.</summary>
    public const int GazeSyneDataFieldNumber = 77;
    private global::Protocol.GazeSyncData gazeSyneData_;
    /// <summary>
    ///Npc注视
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.GazeSyncData GazeSyneData {
      get { return gazeSyneData_; }
      set {
        gazeSyneData_ = value;
      }
    }
    /// <summary>Gets whether the gaze_syne_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGazeSyneData {
      get { return gazeSyneData_ != null; }
    }
    /// <summary>Clears the value of the gaze_syne_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGazeSyneData() {
      gazeSyneData_ = null;
    }
    /// <summary>Gets whether the "gaze_syne_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGazeSyneDataDirty {
      get { return (_dirtyBits1 & 268435456) != 0; }
    }

    /// <summary>Field number for the "total_attack_val" field.</summary>
    public const int TotalAttackValFieldNumber = 78;
    private float totalAttackVal_;
    /// <summary>
    ///全部伤害累计
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TotalAttackVal {
      get { if ((_hasBits0 & 32) != 0) { return totalAttackVal_; } else { return 0F; } }
      set {
        _hasBits0 |= 32;
        _dirtyBits1 |= 536870912;
        totalAttackVal_ = value;
      }
    }
    /// <summary>Gets whether the "total_attack_val" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTotalAttackVal {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Gets whether the "total_attack_val" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTotalAttackValDirty {
      get { return (_dirtyBits1 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "total_attack_val" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTotalAttackVal() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "attack_stats_dic" field.</summary>
    public const int AttackStatsDicFieldNumber = 79;
    private static readonly pbc::MapField<uint, float>.Codec _map_attackStatsDic_codec
        = new pbc::MapField<uint, float>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForFloat(21, 0F), 634);
    private readonly pbc::MapField<uint, float> attackStatsDic_ = new pbc::MapField<uint, float>();
    /// <summary>
    ///伤害的详细信息（对每个entity 的伤害）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, float> AttackStatsDic {
      get { return attackStatsDic_; }
    }
    /// <summary>Gets whether the "attack_stats_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttackStatsDicDirty {
      get { return (_dirtyBits1 & 1073741824) != 0; }
    }

    /// <summary>Field number for the "total_skill_count" field.</summary>
    public const int TotalSkillCountFieldNumber = 80;
    private uint totalSkillCount_;
    /// <summary>
    ///释放技能次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalSkillCount {
      get { if ((_hasBits0 & 64) != 0) { return totalSkillCount_; } else { return 0; } }
      set {
        _hasBits0 |= 64;
        _dirtyBits1 |= -2147483648;
        totalSkillCount_ = value;
      }
    }
    /// <summary>Gets whether the "total_skill_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTotalSkillCount {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Gets whether the "total_skill_count" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTotalSkillCountDirty {
      get { return (_dirtyBits1 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "total_skill_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTotalSkillCount() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "total_skill_success_count" field.</summary>
    public const int TotalSkillSuccessCountFieldNumber = 81;
    private uint totalSkillSuccessCount_;
    /// <summary>
    ///技能命中次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalSkillSuccessCount {
      get { if ((_hasBits0 & 128) != 0) { return totalSkillSuccessCount_; } else { return 0; } }
      set {
        _hasBits0 |= 128;
        _dirtyBits2 |= 1;
        totalSkillSuccessCount_ = value;
      }
    }
    /// <summary>Gets whether the "total_skill_success_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTotalSkillSuccessCount {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Gets whether the "total_skill_success_count" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTotalSkillSuccessCountDirty {
      get { return (_dirtyBits2 & 1) != 0; }
    }
    /// <summary>Clears the value of the "total_skill_success_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTotalSkillSuccessCount() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "skill_stats_dic" field.</summary>
    public const int SkillStatsDicFieldNumber = 82;
    private static readonly pbc::MapField<uint, uint>.Codec _map_skillStatsDic_codec
        = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForUInt32(16, 0), 658);
    private readonly pbc::MapField<uint, uint> skillStatsDic_ = new pbc::MapField<uint, uint>();
    /// <summary>
    ///命中技能的信息 （每个entity 被命中的次数）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, uint> SkillStatsDic {
      get { return skillStatsDic_; }
    }
    /// <summary>Gets whether the "skill_stats_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkillStatsDicDirty {
      get { return (_dirtyBits2 & 2) != 0; }
    }

    /// <summary>Field number for the "normal_attack_count" field.</summary>
    public const int NormalAttackCountFieldNumber = 83;
    private uint normalAttackCount_;
    /// <summary>
    ///普攻次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NormalAttackCount {
      get { if ((_hasBits0 & 256) != 0) { return normalAttackCount_; } else { return 0; } }
      set {
        _hasBits0 |= 256;
        _dirtyBits2 |= 4;
        normalAttackCount_ = value;
      }
    }
    /// <summary>Gets whether the "normal_attack_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNormalAttackCount {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Gets whether the "normal_attack_count" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNormalAttackCountDirty {
      get { return (_dirtyBits2 & 4) != 0; }
    }
    /// <summary>Clears the value of the "normal_attack_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNormalAttackCount() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "normal_attack_success_count" field.</summary>
    public const int NormalAttackSuccessCountFieldNumber = 84;
    private uint normalAttackSuccessCount_;
    /// <summary>
    ///普攻成功次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NormalAttackSuccessCount {
      get { if ((_hasBits0 & 512) != 0) { return normalAttackSuccessCount_; } else { return 0; } }
      set {
        _hasBits0 |= 512;
        _dirtyBits2 |= 8;
        normalAttackSuccessCount_ = value;
      }
    }
    /// <summary>Gets whether the "normal_attack_success_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNormalAttackSuccessCount {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Gets whether the "normal_attack_success_count" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNormalAttackSuccessCountDirty {
      get { return (_dirtyBits2 & 8) != 0; }
    }
    /// <summary>Clears the value of the "normal_attack_success_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNormalAttackSuccessCount() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "normal_attack_stats_dic" field.</summary>
    public const int NormalAttackStatsDicFieldNumber = 85;
    private static readonly pbc::MapField<uint, uint>.Codec _map_normalAttackStatsDic_codec
        = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForUInt32(16, 0), 682);
    private readonly pbc::MapField<uint, uint> normalAttackStatsDic_ = new pbc::MapField<uint, uint>();
    /// <summary>
    ///普攻技能的信息 （每个entity 被命中的次数）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, uint> NormalAttackStatsDic {
      get { return normalAttackStatsDic_; }
    }
    /// <summary>Gets whether the "normal_attack_stats_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNormalAttackStatsDicDirty {
      get { return (_dirtyBits2 & 16) != 0; }
    }

    /// <summary>Field number for the "normal_attack_break_count" field.</summary>
    public const int NormalAttackBreakCountFieldNumber = 86;
    private uint normalAttackBreakCount_;
    /// <summary>
    /// 普攻命中 但无效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NormalAttackBreakCount {
      get { if ((_hasBits0 & 1024) != 0) { return normalAttackBreakCount_; } else { return 0; } }
      set {
        _hasBits0 |= 1024;
        _dirtyBits2 |= 32;
        normalAttackBreakCount_ = value;
      }
    }
    /// <summary>Gets whether the "normal_attack_break_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNormalAttackBreakCount {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Gets whether the "normal_attack_break_count" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNormalAttackBreakCountDirty {
      get { return (_dirtyBits2 & 32) != 0; }
    }
    /// <summary>Clears the value of the "normal_attack_break_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNormalAttackBreakCount() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "hold_dic" field.</summary>
    public const int HoldDicFieldNumber = 87;
    private static readonly pbc::MapField<uint, float>.Codec _map_holdDic_codec
        = new pbc::MapField<uint, float>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForFloat(21, 0F), 698);
    private readonly pbc::MapField<uint, float> holdDic_ = new pbc::MapField<uint, float>();
    /// <summary>
    ///蓄力类型数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, float> HoldDic {
      get { return holdDic_; }
    }
    /// <summary>Gets whether the "hold_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHoldDicDirty {
      get { return (_dirtyBits2 & 64) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntitySyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntitySyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (Camp != other.Camp) return false;
      if (Destroyed != other.Destroyed) return false;
      if (ModelId != other.ModelId) return false;
      if (!object.Equals(StateAttrData, other.StateAttrData)) return false;
      if (!object.Equals(LifeData, other.LifeData)) return false;
      if (!object.Equals(CharacterCtrlData, other.CharacterCtrlData)) return false;
      if (!object.Equals(PropCollectionsData, other.PropCollectionsData)) return false;
      if (!object.Equals(SkillCtrlData, other.SkillCtrlData)) return false;
      if (!object.Equals(BuffCtrlData, other.BuffCtrlData)) return false;
      if (!object.Equals(HitCheckData, other.HitCheckData)) return false;
      if (!object.Equals(NavData, other.NavData)) return false;
      if (!object.Equals(TagData, other.TagData)) return false;
      if (!object.Equals(GoapData, other.GoapData)) return false;
      if (!object.Equals(ArchData, other.ArchData)) return false;
      if (!object.Equals(AreaData, other.AreaData)) return false;
      if (!object.Equals(PasserBrainData, other.PasserBrainData)) return false;
      if (!object.Equals(GuardData, other.GuardData)) return false;
      if (!object.Equals(FlyItemData, other.FlyItemData)) return false;
      if (!object.Equals(LadderData, other.LadderData)) return false;
      if (!object.Equals(ThingData, other.ThingData)) return false;
      if (!object.Equals(HeroData, other.HeroData)) return false;
      if (!object.Equals(WeaponData, other.WeaponData)) return false;
      if (!object.Equals(HotData, other.HotData)) return false;
      if (!object.Equals(AnqiData, other.AnqiData)) return false;
      if (!object.Equals(PeddlerData, other.PeddlerData)) return false;
      if (!object.Equals(WarningData, other.WarningData)) return false;
      if (!object.Equals(SmokeData, other.SmokeData)) return false;
      if (!object.Equals(JumpPointData, other.JumpPointData)) return false;
      if (!object.Equals(LadderCheckData, other.LadderCheckData)) return false;
      if (!object.Equals(BoatData, other.BoatData)) return false;
      if (!object.Equals(ShopData, other.ShopData)) return false;
      if (!object.Equals(BossData, other.BossData)) return false;
      if (!object.Equals(NestData, other.NestData)) return false;
      if (!object.Equals(HideStateData, other.HideStateData)) return false;
      if (!object.Equals(DropData, other.DropData)) return false;
      if (!object.Equals(AntidoteScatterData, other.AntidoteScatterData)) return false;
      if (!object.Equals(MonsterData, other.MonsterData)) return false;
      if (!object.Equals(PhysicalData, other.PhysicalData)) return false;
      if (!object.Equals(FireDiamond, other.FireDiamond)) return false;
      if (!object.Equals(InsanityData, other.InsanityData)) return false;
      if (!object.Equals(BallData, other.BallData)) return false;
      if (!object.Equals(FollowData, other.FollowData)) return false;
      if (!object.Equals(StrengthData, other.StrengthData)) return false;
      if (!object.Equals(InvisibleData, other.InvisibleData)) return false;
      if (!object.Equals(MagicWallData, other.MagicWallData)) return false;
      if (!object.Equals(ParalysisData, other.ParalysisData)) return false;
      if (!object.Equals(SealPointData, other.SealPointData)) return false;
      if (!object.Equals(SealLineData, other.SealLineData)) return false;
      if (!object.Equals(ThunderNailData, other.ThunderNailData)) return false;
      if (!object.Equals(HookPointData, other.HookPointData)) return false;
      if (!object.Equals(GoldenTireData, other.GoldenTireData)) return false;
      if (!object.Equals(GoldenBellData, other.GoldenBellData)) return false;
      if (!object.Equals(TimelineData, other.TimelineData)) return false;
      if (!object.Equals(CustomEntityData, other.CustomEntityData)) return false;
      if (!object.Equals(HideAreaData, other.HideAreaData)) return false;
      if (!object.Equals(RecoverData, other.RecoverData)) return false;
      if (!object.Equals(GazeSyneData, other.GazeSyneData)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TotalAttackVal, other.TotalAttackVal)) return false;
      if (!AttackStatsDic.Equals(other.AttackStatsDic)) return false;
      if (TotalSkillCount != other.TotalSkillCount) return false;
      if (TotalSkillSuccessCount != other.TotalSkillSuccessCount) return false;
      if (!SkillStatsDic.Equals(other.SkillStatsDic)) return false;
      if (NormalAttackCount != other.NormalAttackCount) return false;
      if (NormalAttackSuccessCount != other.NormalAttackSuccessCount) return false;
      if (!NormalAttackStatsDic.Equals(other.NormalAttackStatsDic)) return false;
      if (NormalAttackBreakCount != other.NormalAttackBreakCount) return false;
      if (!HoldDic.Equals(other.HoldDic)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasPosition) hash ^= Position.GetHashCode();
      if (HasRotation) hash ^= Rotation.GetHashCode();
      if (HasCamp) hash ^= Camp.GetHashCode();
      if (HasDestroyed) hash ^= Destroyed.GetHashCode();
      if (HasModelId) hash ^= ModelId.GetHashCode();
      if (HasStateAttrData) hash ^= StateAttrData.GetHashCode();
      if (HasLifeData) hash ^= LifeData.GetHashCode();
      if (HasCharacterCtrlData) hash ^= CharacterCtrlData.GetHashCode();
      if (HasPropCollectionsData) hash ^= PropCollectionsData.GetHashCode();
      if (HasSkillCtrlData) hash ^= SkillCtrlData.GetHashCode();
      if (HasBuffCtrlData) hash ^= BuffCtrlData.GetHashCode();
      if (HasHitCheckData) hash ^= HitCheckData.GetHashCode();
      if (HasNavData) hash ^= NavData.GetHashCode();
      if (HasTagData) hash ^= TagData.GetHashCode();
      if (HasGoapData) hash ^= GoapData.GetHashCode();
      if (HasArchData) hash ^= ArchData.GetHashCode();
      if (HasAreaData) hash ^= AreaData.GetHashCode();
      if (HasPasserBrainData) hash ^= PasserBrainData.GetHashCode();
      if (HasGuardData) hash ^= GuardData.GetHashCode();
      if (HasFlyItemData) hash ^= FlyItemData.GetHashCode();
      if (HasLadderData) hash ^= LadderData.GetHashCode();
      if (HasThingData) hash ^= ThingData.GetHashCode();
      if (HasHeroData) hash ^= HeroData.GetHashCode();
      if (HasWeaponData) hash ^= WeaponData.GetHashCode();
      if (HasHotData) hash ^= HotData.GetHashCode();
      if (HasAnqiData) hash ^= AnqiData.GetHashCode();
      if (HasPeddlerData) hash ^= PeddlerData.GetHashCode();
      if (HasWarningData) hash ^= WarningData.GetHashCode();
      if (HasSmokeData) hash ^= SmokeData.GetHashCode();
      if (HasJumpPointData) hash ^= JumpPointData.GetHashCode();
      if (HasLadderCheckData) hash ^= LadderCheckData.GetHashCode();
      if (HasBoatData) hash ^= BoatData.GetHashCode();
      if (HasShopData) hash ^= ShopData.GetHashCode();
      if (HasBossData) hash ^= BossData.GetHashCode();
      if (HasNestData) hash ^= NestData.GetHashCode();
      if (HasHideStateData) hash ^= HideStateData.GetHashCode();
      if (HasDropData) hash ^= DropData.GetHashCode();
      if (HasAntidoteScatterData) hash ^= AntidoteScatterData.GetHashCode();
      if (HasMonsterData) hash ^= MonsterData.GetHashCode();
      if (HasPhysicalData) hash ^= PhysicalData.GetHashCode();
      if (HasFireDiamond) hash ^= FireDiamond.GetHashCode();
      if (HasInsanityData) hash ^= InsanityData.GetHashCode();
      if (HasBallData) hash ^= BallData.GetHashCode();
      if (HasFollowData) hash ^= FollowData.GetHashCode();
      if (HasStrengthData) hash ^= StrengthData.GetHashCode();
      if (HasInvisibleData) hash ^= InvisibleData.GetHashCode();
      if (HasMagicWallData) hash ^= MagicWallData.GetHashCode();
      if (HasParalysisData) hash ^= ParalysisData.GetHashCode();
      if (HasSealPointData) hash ^= SealPointData.GetHashCode();
      if (HasSealLineData) hash ^= SealLineData.GetHashCode();
      if (HasThunderNailData) hash ^= ThunderNailData.GetHashCode();
      if (HasHookPointData) hash ^= HookPointData.GetHashCode();
      if (HasGoldenTireData) hash ^= GoldenTireData.GetHashCode();
      if (HasGoldenBellData) hash ^= GoldenBellData.GetHashCode();
      if (HasTimelineData) hash ^= TimelineData.GetHashCode();
      if (HasCustomEntityData) hash ^= CustomEntityData.GetHashCode();
      if (HasHideAreaData) hash ^= HideAreaData.GetHashCode();
      if (HasRecoverData) hash ^= RecoverData.GetHashCode();
      if (HasGazeSyneData) hash ^= GazeSyneData.GetHashCode();
      if (HasTotalAttackVal) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TotalAttackVal);
      hash ^= AttackStatsDic.GetHashCode();
      if (HasTotalSkillCount) hash ^= TotalSkillCount.GetHashCode();
      if (HasTotalSkillSuccessCount) hash ^= TotalSkillSuccessCount.GetHashCode();
      hash ^= SkillStatsDic.GetHashCode();
      if (HasNormalAttackCount) hash ^= NormalAttackCount.GetHashCode();
      if (HasNormalAttackSuccessCount) hash ^= NormalAttackSuccessCount.GetHashCode();
      hash ^= NormalAttackStatsDic.GetHashCode();
      if (HasNormalAttackBreakCount) hash ^= NormalAttackBreakCount.GetHashCode();
      hash ^= HoldDic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTypeDirty)) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPositionDirty)) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasRotation)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRotationDirty)) {
        output.WriteRawTag(34);
        output.WriteMessage(Rotation);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCamp)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCampDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(Camp);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDestroyed)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDestroyedDirty)) {
        output.WriteRawTag(56);
        output.WriteBool(Destroyed);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasModelId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsModelIdDirty)) {
        output.WriteRawTag(64);
        output.WriteUInt32(ModelId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStateAttrData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStateAttrDataDirty)) {
        output.WriteRawTag(90);
        output.WriteMessage(StateAttrData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLifeData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLifeDataDirty)) {
        output.WriteRawTag(98);
        output.WriteMessage(LifeData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCharacterCtrlData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCharacterCtrlDataDirty)) {
        output.WriteRawTag(106);
        output.WriteMessage(CharacterCtrlData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPropCollectionsData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropCollectionsDataDirty)) {
        output.WriteRawTag(114);
        output.WriteMessage(PropCollectionsData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillCtrlData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillCtrlDataDirty)) {
        output.WriteRawTag(122);
        output.WriteMessage(SkillCtrlData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBuffCtrlData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBuffCtrlDataDirty)) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(BuffCtrlData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHitCheckData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHitCheckDataDirty)) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(HitCheckData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNavData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNavDataDirty)) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(NavData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTagData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTagDataDirty)) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(TagData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasGoapData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsGoapDataDirty)) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(GoapData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasArchData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsArchDataDirty)) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(ArchData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAreaData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAreaDataDirty)) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(AreaData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPasserBrainData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPasserBrainDataDirty)) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(PasserBrainData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasGuardData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsGuardDataDirty)) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(GuardData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFlyItemData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFlyItemDataDirty)) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(FlyItemData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLadderData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLadderDataDirty)) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(LadderData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasThingData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsThingDataDirty)) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(ThingData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHeroData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeroDataDirty)) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(HeroData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasWeaponData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsWeaponDataDirty)) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(WeaponData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHotData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHotDataDirty)) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(HotData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAnqiData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAnqiDataDirty)) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(AnqiData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPeddlerData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPeddlerDataDirty)) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(PeddlerData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasWarningData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsWarningDataDirty)) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(WarningData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSmokeData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSmokeDataDirty)) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(SmokeData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasJumpPointData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsJumpPointDataDirty)) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(JumpPointData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLadderCheckData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLadderCheckDataDirty)) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(LadderCheckData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBoatData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBoatDataDirty)) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(BoatData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasShopData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsShopDataDirty)) {
        output.WriteRawTag(250, 2);
        output.WriteMessage(ShopData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBossData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBossDataDirty)) {
        output.WriteRawTag(138, 3);
        output.WriteMessage(BossData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNestData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNestDataDirty)) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(NestData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHideStateData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHideStateDataDirty)) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(HideStateData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDropData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDropDataDirty)) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(DropData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAntidoteScatterData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAntidoteScatterDataDirty)) {
        output.WriteRawTag(178, 3);
        output.WriteMessage(AntidoteScatterData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMonsterData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMonsterDataDirty)) {
        output.WriteRawTag(186, 3);
        output.WriteMessage(MonsterData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPhysicalData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPhysicalDataDirty)) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(PhysicalData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFireDiamond)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFireDiamondDirty)) {
        output.WriteRawTag(210, 3);
        output.WriteMessage(FireDiamond);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasInsanityData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsInsanityDataDirty)) {
        output.WriteRawTag(218, 3);
        output.WriteMessage(InsanityData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBallData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBallDataDirty)) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(BallData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFollowData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFollowDataDirty)) {
        output.WriteRawTag(234, 3);
        output.WriteMessage(FollowData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStrengthData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStrengthDataDirty)) {
        output.WriteRawTag(242, 3);
        output.WriteMessage(StrengthData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasInvisibleData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsInvisibleDataDirty)) {
        output.WriteRawTag(130, 4);
        output.WriteMessage(InvisibleData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMagicWallData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMagicWallDataDirty)) {
        output.WriteRawTag(138, 4);
        output.WriteMessage(MagicWallData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasParalysisData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsParalysisDataDirty)) {
        output.WriteRawTag(146, 4);
        output.WriteMessage(ParalysisData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSealPointData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSealPointDataDirty)) {
        output.WriteRawTag(154, 4);
        output.WriteMessage(SealPointData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSealLineData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSealLineDataDirty)) {
        output.WriteRawTag(162, 4);
        output.WriteMessage(SealLineData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasThunderNailData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsThunderNailDataDirty)) {
        output.WriteRawTag(170, 4);
        output.WriteMessage(ThunderNailData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHookPointData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHookPointDataDirty)) {
        output.WriteRawTag(178, 4);
        output.WriteMessage(HookPointData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasGoldenTireData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsGoldenTireDataDirty)) {
        output.WriteRawTag(186, 4);
        output.WriteMessage(GoldenTireData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasGoldenBellData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsGoldenBellDataDirty)) {
        output.WriteRawTag(194, 4);
        output.WriteMessage(GoldenBellData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTimelineData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTimelineDataDirty)) {
        output.WriteRawTag(202, 4);
        output.WriteMessage(TimelineData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCustomEntityData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCustomEntityDataDirty)) {
        output.WriteRawTag(210, 4);
        output.WriteMessage(CustomEntityData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHideAreaData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHideAreaDataDirty)) {
        output.WriteRawTag(218, 4);
        output.WriteMessage(HideAreaData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasRecoverData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRecoverDataDirty)) {
        output.WriteRawTag(226, 4);
        output.WriteMessage(RecoverData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasGazeSyneData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsGazeSyneDataDirty)) {
        output.WriteRawTag(234, 4);
        output.WriteMessage(GazeSyneData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTotalAttackVal)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTotalAttackValDirty)) {
        output.WriteRawTag(245, 4);
        output.WriteFloat(TotalAttackVal);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAttackStatsDicDirty)) {
        attackStatsDic_.WriteTo(output, _map_attackStatsDic_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTotalSkillCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTotalSkillCountDirty)) {
        output.WriteRawTag(128, 5);
        output.WriteUInt32(TotalSkillCount);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTotalSkillSuccessCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTotalSkillSuccessCountDirty)) {
        output.WriteRawTag(136, 5);
        output.WriteUInt32(TotalSkillSuccessCount);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillStatsDicDirty)) {
        skillStatsDic_.WriteTo(output, _map_skillStatsDic_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNormalAttackCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNormalAttackCountDirty)) {
        output.WriteRawTag(152, 5);
        output.WriteUInt32(NormalAttackCount);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNormalAttackSuccessCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNormalAttackSuccessCountDirty)) {
        output.WriteRawTag(160, 5);
        output.WriteUInt32(NormalAttackSuccessCount);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNormalAttackStatsDicDirty)) {
        normalAttackStatsDic_.WriteTo(output, _map_normalAttackStatsDic_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNormalAttackBreakCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNormalAttackBreakCountDirty)) {
        output.WriteRawTag(176, 5);
        output.WriteUInt32(NormalAttackBreakCount);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHoldDicDirty)) {
        holdDic_.WriteTo(output, _map_holdDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTypeDirty)) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPositionDirty)) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasRotation)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRotationDirty)) {
        output.WriteRawTag(34);
        output.WriteMessage(Rotation);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCamp)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCampDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(Camp);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDestroyed)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDestroyedDirty)) {
        output.WriteRawTag(56);
        output.WriteBool(Destroyed);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasModelId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsModelIdDirty)) {
        output.WriteRawTag(64);
        output.WriteUInt32(ModelId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStateAttrData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStateAttrDataDirty)) {
        output.WriteRawTag(90);
        output.WriteMessage(StateAttrData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLifeData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLifeDataDirty)) {
        output.WriteRawTag(98);
        output.WriteMessage(LifeData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCharacterCtrlData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCharacterCtrlDataDirty)) {
        output.WriteRawTag(106);
        output.WriteMessage(CharacterCtrlData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPropCollectionsData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropCollectionsDataDirty)) {
        output.WriteRawTag(114);
        output.WriteMessage(PropCollectionsData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillCtrlData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillCtrlDataDirty)) {
        output.WriteRawTag(122);
        output.WriteMessage(SkillCtrlData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBuffCtrlData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBuffCtrlDataDirty)) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(BuffCtrlData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHitCheckData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHitCheckDataDirty)) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(HitCheckData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNavData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNavDataDirty)) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(NavData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTagData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTagDataDirty)) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(TagData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasGoapData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsGoapDataDirty)) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(GoapData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasArchData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsArchDataDirty)) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(ArchData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAreaData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAreaDataDirty)) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(AreaData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPasserBrainData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPasserBrainDataDirty)) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(PasserBrainData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasGuardData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsGuardDataDirty)) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(GuardData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFlyItemData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFlyItemDataDirty)) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(FlyItemData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLadderData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLadderDataDirty)) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(LadderData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasThingData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsThingDataDirty)) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(ThingData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHeroData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeroDataDirty)) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(HeroData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasWeaponData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsWeaponDataDirty)) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(WeaponData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHotData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHotDataDirty)) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(HotData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAnqiData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAnqiDataDirty)) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(AnqiData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPeddlerData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPeddlerDataDirty)) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(PeddlerData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasWarningData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsWarningDataDirty)) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(WarningData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSmokeData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSmokeDataDirty)) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(SmokeData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasJumpPointData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsJumpPointDataDirty)) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(JumpPointData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLadderCheckData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLadderCheckDataDirty)) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(LadderCheckData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBoatData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBoatDataDirty)) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(BoatData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasShopData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsShopDataDirty)) {
        output.WriteRawTag(250, 2);
        output.WriteMessage(ShopData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBossData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBossDataDirty)) {
        output.WriteRawTag(138, 3);
        output.WriteMessage(BossData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNestData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNestDataDirty)) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(NestData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHideStateData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHideStateDataDirty)) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(HideStateData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDropData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDropDataDirty)) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(DropData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAntidoteScatterData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAntidoteScatterDataDirty)) {
        output.WriteRawTag(178, 3);
        output.WriteMessage(AntidoteScatterData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMonsterData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMonsterDataDirty)) {
        output.WriteRawTag(186, 3);
        output.WriteMessage(MonsterData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPhysicalData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPhysicalDataDirty)) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(PhysicalData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFireDiamond)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFireDiamondDirty)) {
        output.WriteRawTag(210, 3);
        output.WriteMessage(FireDiamond);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasInsanityData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsInsanityDataDirty)) {
        output.WriteRawTag(218, 3);
        output.WriteMessage(InsanityData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBallData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBallDataDirty)) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(BallData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFollowData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFollowDataDirty)) {
        output.WriteRawTag(234, 3);
        output.WriteMessage(FollowData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStrengthData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStrengthDataDirty)) {
        output.WriteRawTag(242, 3);
        output.WriteMessage(StrengthData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasInvisibleData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsInvisibleDataDirty)) {
        output.WriteRawTag(130, 4);
        output.WriteMessage(InvisibleData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMagicWallData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMagicWallDataDirty)) {
        output.WriteRawTag(138, 4);
        output.WriteMessage(MagicWallData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasParalysisData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsParalysisDataDirty)) {
        output.WriteRawTag(146, 4);
        output.WriteMessage(ParalysisData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSealPointData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSealPointDataDirty)) {
        output.WriteRawTag(154, 4);
        output.WriteMessage(SealPointData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSealLineData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSealLineDataDirty)) {
        output.WriteRawTag(162, 4);
        output.WriteMessage(SealLineData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasThunderNailData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsThunderNailDataDirty)) {
        output.WriteRawTag(170, 4);
        output.WriteMessage(ThunderNailData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHookPointData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHookPointDataDirty)) {
        output.WriteRawTag(178, 4);
        output.WriteMessage(HookPointData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasGoldenTireData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsGoldenTireDataDirty)) {
        output.WriteRawTag(186, 4);
        output.WriteMessage(GoldenTireData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasGoldenBellData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsGoldenBellDataDirty)) {
        output.WriteRawTag(194, 4);
        output.WriteMessage(GoldenBellData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTimelineData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTimelineDataDirty)) {
        output.WriteRawTag(202, 4);
        output.WriteMessage(TimelineData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCustomEntityData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCustomEntityDataDirty)) {
        output.WriteRawTag(210, 4);
        output.WriteMessage(CustomEntityData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHideAreaData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHideAreaDataDirty)) {
        output.WriteRawTag(218, 4);
        output.WriteMessage(HideAreaData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasRecoverData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRecoverDataDirty)) {
        output.WriteRawTag(226, 4);
        output.WriteMessage(RecoverData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasGazeSyneData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsGazeSyneDataDirty)) {
        output.WriteRawTag(234, 4);
        output.WriteMessage(GazeSyneData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTotalAttackVal)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTotalAttackValDirty)) {
        output.WriteRawTag(245, 4);
        output.WriteFloat(TotalAttackVal);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAttackStatsDicDirty)) {
        attackStatsDic_.WriteTo(ref output, _map_attackStatsDic_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTotalSkillCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTotalSkillCountDirty)) {
        output.WriteRawTag(128, 5);
        output.WriteUInt32(TotalSkillCount);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTotalSkillSuccessCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTotalSkillSuccessCountDirty)) {
        output.WriteRawTag(136, 5);
        output.WriteUInt32(TotalSkillSuccessCount);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillStatsDicDirty)) {
        skillStatsDic_.WriteTo(ref output, _map_skillStatsDic_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNormalAttackCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNormalAttackCountDirty)) {
        output.WriteRawTag(152, 5);
        output.WriteUInt32(NormalAttackCount);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNormalAttackSuccessCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNormalAttackSuccessCountDirty)) {
        output.WriteRawTag(160, 5);
        output.WriteUInt32(NormalAttackSuccessCount);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNormalAttackStatsDicDirty)) {
        normalAttackStatsDic_.WriteTo(ref output, _map_normalAttackStatsDic_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNormalAttackBreakCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNormalAttackBreakCountDirty)) {
        output.WriteRawTag(176, 5);
        output.WriteUInt32(NormalAttackBreakCount);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHoldDicDirty)) {
        holdDic_.WriteTo(ref output, _map_holdDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if ((scope == pb.WriteScope.FULL && HasType)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTypeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasPosition) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Position, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 4;
        } else {
          _dirtyBits0 &= ~4;
        }
      }
      if (HasRotation) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Rotation, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 8;
        } else {
          _dirtyBits0 &= ~8;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasCamp)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCampDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Camp);
      }
      if ((scope == pb.WriteScope.FULL && HasDestroyed)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsDestroyedDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasModelId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsModelIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ModelId);
      }
      if (HasStateAttrData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(StateAttrData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 128;
        } else {
          _dirtyBits0 &= ~128;
        }
      }
      if (HasLifeData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(LifeData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 256;
        } else {
          _dirtyBits0 &= ~256;
        }
      }
      if (HasCharacterCtrlData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(CharacterCtrlData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 512;
        } else {
          _dirtyBits0 &= ~512;
        }
      }
      if (HasPropCollectionsData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(PropCollectionsData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 1024;
        } else {
          _dirtyBits0 &= ~1024;
        }
      }
      if (HasSkillCtrlData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(SkillCtrlData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 2048;
        } else {
          _dirtyBits0 &= ~2048;
        }
      }
      if (HasBuffCtrlData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(BuffCtrlData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 4096;
        } else {
          _dirtyBits0 &= ~4096;
        }
      }
      if (HasHitCheckData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(HitCheckData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 8192;
        } else {
          _dirtyBits0 &= ~8192;
        }
      }
      if (HasNavData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(NavData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 16384;
        } else {
          _dirtyBits0 &= ~16384;
        }
      }
      if (HasTagData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(TagData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 32768;
        } else {
          _dirtyBits0 &= ~32768;
        }
      }
      if (HasGoapData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(GoapData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 65536;
        } else {
          _dirtyBits0 &= ~65536;
        }
      }
      if (HasArchData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(ArchData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 131072;
        } else {
          _dirtyBits0 &= ~131072;
        }
      }
      if (HasAreaData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(AreaData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 262144;
        } else {
          _dirtyBits0 &= ~262144;
        }
      }
      if (HasPasserBrainData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(PasserBrainData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 524288;
        } else {
          _dirtyBits0 &= ~524288;
        }
      }
      if (HasGuardData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(GuardData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 1048576;
        } else {
          _dirtyBits0 &= ~1048576;
        }
      }
      if (HasFlyItemData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(FlyItemData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 2097152;
        } else {
          _dirtyBits0 &= ~2097152;
        }
      }
      if (HasLadderData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(LadderData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 4194304;
        } else {
          _dirtyBits0 &= ~4194304;
        }
      }
      if (HasThingData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(ThingData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 8388608;
        } else {
          _dirtyBits0 &= ~8388608;
        }
      }
      if (HasHeroData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(HeroData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 16777216;
        } else {
          _dirtyBits0 &= ~16777216;
        }
      }
      if (HasWeaponData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(WeaponData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 33554432;
        } else {
          _dirtyBits0 &= ~33554432;
        }
      }
      if (HasHotData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(HotData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 67108864;
        } else {
          _dirtyBits0 &= ~67108864;
        }
      }
      if (HasAnqiData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(AnqiData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 134217728;
        } else {
          _dirtyBits0 &= ~134217728;
        }
      }
      if (HasPeddlerData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(PeddlerData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 268435456;
        } else {
          _dirtyBits0 &= ~268435456;
        }
      }
      if (HasWarningData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(WarningData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 536870912;
        } else {
          _dirtyBits0 &= ~536870912;
        }
      }
      if (HasSmokeData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(SmokeData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 1073741824;
        } else {
          _dirtyBits0 &= ~1073741824;
        }
      }
      if (HasJumpPointData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(JumpPointData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= -2147483648;
        } else {
          _dirtyBits0 &= ~-2147483648;
        }
      }
      if (HasLadderCheckData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(LadderCheckData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 1;
        } else {
          _dirtyBits1 &= ~1;
        }
      }
      if (HasBoatData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(BoatData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 2;
        } else {
          _dirtyBits1 &= ~2;
        }
      }
      if (HasShopData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(ShopData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 4;
        } else {
          _dirtyBits1 &= ~4;
        }
      }
      if (HasBossData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(BossData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 8;
        } else {
          _dirtyBits1 &= ~8;
        }
      }
      if (HasNestData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(NestData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 16;
        } else {
          _dirtyBits1 &= ~16;
        }
      }
      if (HasHideStateData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(HideStateData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 32;
        } else {
          _dirtyBits1 &= ~32;
        }
      }
      if (HasDropData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(DropData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 64;
        } else {
          _dirtyBits1 &= ~64;
        }
      }
      if (HasAntidoteScatterData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(AntidoteScatterData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 128;
        } else {
          _dirtyBits1 &= ~128;
        }
      }
      if (HasMonsterData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(MonsterData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 256;
        } else {
          _dirtyBits1 &= ~256;
        }
      }
      if (HasPhysicalData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(PhysicalData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 512;
        } else {
          _dirtyBits1 &= ~512;
        }
      }
      if (HasFireDiamond) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(FireDiamond, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 1024;
        } else {
          _dirtyBits1 &= ~1024;
        }
      }
      if (HasInsanityData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(InsanityData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 2048;
        } else {
          _dirtyBits1 &= ~2048;
        }
      }
      if (HasBallData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(BallData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 4096;
        } else {
          _dirtyBits1 &= ~4096;
        }
      }
      if (HasFollowData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(FollowData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 8192;
        } else {
          _dirtyBits1 &= ~8192;
        }
      }
      if (HasStrengthData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(StrengthData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 16384;
        } else {
          _dirtyBits1 &= ~16384;
        }
      }
      if (HasInvisibleData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(InvisibleData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 32768;
        } else {
          _dirtyBits1 &= ~32768;
        }
      }
      if (HasMagicWallData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(MagicWallData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 65536;
        } else {
          _dirtyBits1 &= ~65536;
        }
      }
      if (HasParalysisData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(ParalysisData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 131072;
        } else {
          _dirtyBits1 &= ~131072;
        }
      }
      if (HasSealPointData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(SealPointData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 262144;
        } else {
          _dirtyBits1 &= ~262144;
        }
      }
      if (HasSealLineData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(SealLineData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 524288;
        } else {
          _dirtyBits1 &= ~524288;
        }
      }
      if (HasThunderNailData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(ThunderNailData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 1048576;
        } else {
          _dirtyBits1 &= ~1048576;
        }
      }
      if (HasHookPointData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(HookPointData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 2097152;
        } else {
          _dirtyBits1 &= ~2097152;
        }
      }
      if (HasGoldenTireData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(GoldenTireData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 4194304;
        } else {
          _dirtyBits1 &= ~4194304;
        }
      }
      if (HasGoldenBellData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(GoldenBellData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 8388608;
        } else {
          _dirtyBits1 &= ~8388608;
        }
      }
      if (HasTimelineData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(TimelineData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 16777216;
        } else {
          _dirtyBits1 &= ~16777216;
        }
      }
      if (HasCustomEntityData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(CustomEntityData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 33554432;
        } else {
          _dirtyBits1 &= ~33554432;
        }
      }
      if (HasHideAreaData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(HideAreaData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 67108864;
        } else {
          _dirtyBits1 &= ~67108864;
        }
      }
      if (HasRecoverData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(RecoverData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 134217728;
        } else {
          _dirtyBits1 &= ~134217728;
        }
      }
      if (HasGazeSyneData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(GazeSyneData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 2 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits1 |= 268435456;
        } else {
          _dirtyBits1 &= ~268435456;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasTotalAttackVal)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTotalAttackValDirty)) {
        size += 2 + 4;
      }
      if (AttackStatsDic != null) {
        int msgSize = attackStatsDic_.CalculateSize(_map_attackStatsDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits1 |= 1073741824;
        } else {
          _dirtyBits1 &= ~1073741824;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasTotalSkillCount)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTotalSkillCountDirty)) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TotalSkillCount);
      }
      if ((scope == pb.WriteScope.FULL && HasTotalSkillSuccessCount)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTotalSkillSuccessCountDirty)) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TotalSkillSuccessCount);
      }
      if (SkillStatsDic != null) {
        int msgSize = skillStatsDic_.CalculateSize(_map_skillStatsDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits2 |= 2;
        } else {
          _dirtyBits2 &= ~2;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasNormalAttackCount)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNormalAttackCountDirty)) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NormalAttackCount);
      }
      if ((scope == pb.WriteScope.FULL && HasNormalAttackSuccessCount)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNormalAttackSuccessCountDirty)) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NormalAttackSuccessCount);
      }
      if (NormalAttackStatsDic != null) {
        int msgSize = normalAttackStatsDic_.CalculateSize(_map_normalAttackStatsDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits2 |= 16;
        } else {
          _dirtyBits2 &= ~16;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasNormalAttackBreakCount)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNormalAttackBreakCountDirty)) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NormalAttackBreakCount);
      }
      if (HoldDic != null) {
        int msgSize = holdDic_.CalculateSize(_map_holdDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits2 |= 64;
        } else {
          _dirtyBits2 &= ~64;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntitySyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasPosition) {
        if (!HasPosition) {
          Position = new global::Protocol.Int3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.HasRotation) {
        if (!HasRotation) {
          Rotation = new global::Protocol.Int3();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.HasCamp) {
        Camp = other.Camp;
      }
      if (other.HasDestroyed) {
        Destroyed = other.Destroyed;
      }
      if (other.HasModelId) {
        ModelId = other.ModelId;
      }
      if (other.HasStateAttrData) {
        if (!HasStateAttrData) {
          StateAttrData = new global::Protocol.StateAttributeSyncData();
        }
        StateAttrData.MergeFrom(other.StateAttrData);
      }
      if (other.HasLifeData) {
        if (!HasLifeData) {
          LifeData = new global::Protocol.LifeSyncData();
        }
        LifeData.MergeFrom(other.LifeData);
      }
      if (other.HasCharacterCtrlData) {
        if (!HasCharacterCtrlData) {
          CharacterCtrlData = new global::Protocol.CharacterCtrlSyncData();
        }
        CharacterCtrlData.MergeFrom(other.CharacterCtrlData);
      }
      if (other.HasPropCollectionsData) {
        if (!HasPropCollectionsData) {
          PropCollectionsData = new global::Protocol.PropCollectionsSyncData();
        }
        PropCollectionsData.MergeFrom(other.PropCollectionsData);
      }
      if (other.HasSkillCtrlData) {
        if (!HasSkillCtrlData) {
          SkillCtrlData = new global::Protocol.SkillCtrlSyncData();
        }
        SkillCtrlData.MergeFrom(other.SkillCtrlData);
      }
      if (other.HasBuffCtrlData) {
        if (!HasBuffCtrlData) {
          BuffCtrlData = new global::Protocol.BuffCtrlSyncData();
        }
        BuffCtrlData.MergeFrom(other.BuffCtrlData);
      }
      if (other.HasHitCheckData) {
        if (!HasHitCheckData) {
          HitCheckData = new global::Protocol.HitCheckSyncData();
        }
        HitCheckData.MergeFrom(other.HitCheckData);
      }
      if (other.HasNavData) {
        if (!HasNavData) {
          NavData = new global::Protocol.NavSyncData();
        }
        NavData.MergeFrom(other.NavData);
      }
      if (other.HasTagData) {
        if (!HasTagData) {
          TagData = new global::Protocol.TagSyncData();
        }
        TagData.MergeFrom(other.TagData);
      }
      if (other.HasGoapData) {
        if (!HasGoapData) {
          GoapData = new global::Protocol.GoapSyncData();
        }
        GoapData.MergeFrom(other.GoapData);
      }
      if (other.HasArchData) {
        if (!HasArchData) {
          ArchData = new global::Protocol.ArchitectureSyncData();
        }
        ArchData.MergeFrom(other.ArchData);
      }
      if (other.HasAreaData) {
        if (!HasAreaData) {
          AreaData = new global::Protocol.AreaSyncData();
        }
        AreaData.MergeFrom(other.AreaData);
      }
      if (other.HasPasserBrainData) {
        if (!HasPasserBrainData) {
          PasserBrainData = new global::Protocol.PasserBrainSyncData();
        }
        PasserBrainData.MergeFrom(other.PasserBrainData);
      }
      if (other.HasGuardData) {
        if (!HasGuardData) {
          GuardData = new global::Protocol.GuardSyncData();
        }
        GuardData.MergeFrom(other.GuardData);
      }
      if (other.HasFlyItemData) {
        if (!HasFlyItemData) {
          FlyItemData = new global::Protocol.FlyItemSyncData();
        }
        FlyItemData.MergeFrom(other.FlyItemData);
      }
      if (other.HasLadderData) {
        if (!HasLadderData) {
          LadderData = new global::Protocol.LadderSyncData();
        }
        LadderData.MergeFrom(other.LadderData);
      }
      if (other.HasThingData) {
        if (!HasThingData) {
          ThingData = new global::Protocol.ThingSyncData();
        }
        ThingData.MergeFrom(other.ThingData);
      }
      if (other.HasHeroData) {
        if (!HasHeroData) {
          HeroData = new global::Protocol.HeroSyncData();
        }
        HeroData.MergeFrom(other.HeroData);
      }
      if (other.HasWeaponData) {
        if (!HasWeaponData) {
          WeaponData = new global::Protocol.WeaponSyncData();
        }
        WeaponData.MergeFrom(other.WeaponData);
      }
      if (other.HasHotData) {
        if (!HasHotData) {
          HotData = new global::Protocol.HotSyncData();
        }
        HotData.MergeFrom(other.HotData);
      }
      if (other.HasAnqiData) {
        if (!HasAnqiData) {
          AnqiData = new global::Protocol.AnqiSyncData();
        }
        AnqiData.MergeFrom(other.AnqiData);
      }
      if (other.HasPeddlerData) {
        if (!HasPeddlerData) {
          PeddlerData = new global::Protocol.PeddlerSyncData();
        }
        PeddlerData.MergeFrom(other.PeddlerData);
      }
      if (other.HasWarningData) {
        if (!HasWarningData) {
          WarningData = new global::Protocol.WarningSyncData();
        }
        WarningData.MergeFrom(other.WarningData);
      }
      if (other.HasSmokeData) {
        if (!HasSmokeData) {
          SmokeData = new global::Protocol.SmokeSyncData();
        }
        SmokeData.MergeFrom(other.SmokeData);
      }
      if (other.HasJumpPointData) {
        if (!HasJumpPointData) {
          JumpPointData = new global::Protocol.JumpPointSyncData();
        }
        JumpPointData.MergeFrom(other.JumpPointData);
      }
      if (other.HasLadderCheckData) {
        if (!HasLadderCheckData) {
          LadderCheckData = new global::Protocol.LadderCheckSyncData();
        }
        LadderCheckData.MergeFrom(other.LadderCheckData);
      }
      if (other.HasBoatData) {
        if (!HasBoatData) {
          BoatData = new global::Protocol.BoatSyncData();
        }
        BoatData.MergeFrom(other.BoatData);
      }
      if (other.HasShopData) {
        if (!HasShopData) {
          ShopData = new global::Protocol.ShopSyncData();
        }
        ShopData.MergeFrom(other.ShopData);
      }
      if (other.HasBossData) {
        if (!HasBossData) {
          BossData = new global::Protocol.BossSyncData();
        }
        BossData.MergeFrom(other.BossData);
      }
      if (other.HasNestData) {
        if (!HasNestData) {
          NestData = new global::Protocol.NestSyncData();
        }
        NestData.MergeFrom(other.NestData);
      }
      if (other.HasHideStateData) {
        if (!HasHideStateData) {
          HideStateData = new global::Protocol.HideStateSyncData();
        }
        HideStateData.MergeFrom(other.HideStateData);
      }
      if (other.HasDropData) {
        if (!HasDropData) {
          DropData = new global::Protocol.DropSyncData();
        }
        DropData.MergeFrom(other.DropData);
      }
      if (other.HasAntidoteScatterData) {
        if (!HasAntidoteScatterData) {
          AntidoteScatterData = new global::Protocol.AntidoteScatterSyncData();
        }
        AntidoteScatterData.MergeFrom(other.AntidoteScatterData);
      }
      if (other.HasMonsterData) {
        if (!HasMonsterData) {
          MonsterData = new global::Protocol.MonsterSyncData();
        }
        MonsterData.MergeFrom(other.MonsterData);
      }
      if (other.HasPhysicalData) {
        if (!HasPhysicalData) {
          PhysicalData = new global::Protocol.PhyscialSyncData();
        }
        PhysicalData.MergeFrom(other.PhysicalData);
      }
      if (other.HasFireDiamond) {
        if (!HasFireDiamond) {
          FireDiamond = new global::Protocol.FireDiamondSyncData();
        }
        FireDiamond.MergeFrom(other.FireDiamond);
      }
      if (other.HasInsanityData) {
        if (!HasInsanityData) {
          InsanityData = new global::Protocol.InsanitySyncData();
        }
        InsanityData.MergeFrom(other.InsanityData);
      }
      if (other.HasBallData) {
        if (!HasBallData) {
          BallData = new global::Protocol.BallSyncData();
        }
        BallData.MergeFrom(other.BallData);
      }
      if (other.HasFollowData) {
        if (!HasFollowData) {
          FollowData = new global::Protocol.FollowSyncData();
        }
        FollowData.MergeFrom(other.FollowData);
      }
      if (other.HasStrengthData) {
        if (!HasStrengthData) {
          StrengthData = new global::Protocol.StrengthSyncData();
        }
        StrengthData.MergeFrom(other.StrengthData);
      }
      if (other.HasInvisibleData) {
        if (!HasInvisibleData) {
          InvisibleData = new global::Protocol.InvisibleSyncData();
        }
        InvisibleData.MergeFrom(other.InvisibleData);
      }
      if (other.HasMagicWallData) {
        if (!HasMagicWallData) {
          MagicWallData = new global::Protocol.MagicWallSyncData();
        }
        MagicWallData.MergeFrom(other.MagicWallData);
      }
      if (other.HasParalysisData) {
        if (!HasParalysisData) {
          ParalysisData = new global::Protocol.ParalysisSyncData();
        }
        ParalysisData.MergeFrom(other.ParalysisData);
      }
      if (other.HasSealPointData) {
        if (!HasSealPointData) {
          SealPointData = new global::Protocol.SealingPointSyncData();
        }
        SealPointData.MergeFrom(other.SealPointData);
      }
      if (other.HasSealLineData) {
        if (!HasSealLineData) {
          SealLineData = new global::Protocol.SealingLineSyncData();
        }
        SealLineData.MergeFrom(other.SealLineData);
      }
      if (other.HasThunderNailData) {
        if (!HasThunderNailData) {
          ThunderNailData = new global::Protocol.ThunderNailSyncData();
        }
        ThunderNailData.MergeFrom(other.ThunderNailData);
      }
      if (other.HasHookPointData) {
        if (!HasHookPointData) {
          HookPointData = new global::Protocol.HookPointSyncData();
        }
        HookPointData.MergeFrom(other.HookPointData);
      }
      if (other.HasGoldenTireData) {
        if (!HasGoldenTireData) {
          GoldenTireData = new global::Protocol.GoldenTireSyncData();
        }
        GoldenTireData.MergeFrom(other.GoldenTireData);
      }
      if (other.HasGoldenBellData) {
        if (!HasGoldenBellData) {
          GoldenBellData = new global::Protocol.GoldenBellSyncData();
        }
        GoldenBellData.MergeFrom(other.GoldenBellData);
      }
      if (other.HasTimelineData) {
        if (!HasTimelineData) {
          TimelineData = new global::Protocol.TimelineSyncData();
        }
        TimelineData.MergeFrom(other.TimelineData);
      }
      if (other.HasCustomEntityData) {
        if (!HasCustomEntityData) {
          CustomEntityData = new global::Protocol.CustomEntitySyncData();
        }
        CustomEntityData.MergeFrom(other.CustomEntityData);
      }
      if (other.HasHideAreaData) {
        if (!HasHideAreaData) {
          HideAreaData = new global::Protocol.HideAreaSyncData();
        }
        HideAreaData.MergeFrom(other.HideAreaData);
      }
      if (other.HasRecoverData) {
        if (!HasRecoverData) {
          RecoverData = new global::Protocol.RecoverSyncData();
        }
        RecoverData.MergeFrom(other.RecoverData);
      }
      if (other.HasGazeSyneData) {
        if (!HasGazeSyneData) {
          GazeSyneData = new global::Protocol.GazeSyncData();
        }
        GazeSyneData.MergeFrom(other.GazeSyneData);
      }
      if (other.HasTotalAttackVal) {
        TotalAttackVal = other.TotalAttackVal;
      }
      foreach (var key in other.attackStatsDic_.DeleteList) {
        attackStatsDic_.Remove(key);
      }
      foreach (var pair in other.attackStatsDic_) {
        attackStatsDic_[pair.Key] = pair.Value;
      }
      if (other.HasTotalSkillCount) {
        TotalSkillCount = other.TotalSkillCount;
      }
      if (other.HasTotalSkillSuccessCount) {
        TotalSkillSuccessCount = other.TotalSkillSuccessCount;
      }
      foreach (var key in other.skillStatsDic_.DeleteList) {
        skillStatsDic_.Remove(key);
      }
      foreach (var pair in other.skillStatsDic_) {
        skillStatsDic_[pair.Key] = pair.Value;
      }
      if (other.HasNormalAttackCount) {
        NormalAttackCount = other.NormalAttackCount;
      }
      if (other.HasNormalAttackSuccessCount) {
        NormalAttackSuccessCount = other.NormalAttackSuccessCount;
      }
      foreach (var key in other.normalAttackStatsDic_.DeleteList) {
        normalAttackStatsDic_.Remove(key);
      }
      foreach (var pair in other.normalAttackStatsDic_) {
        normalAttackStatsDic_[pair.Key] = pair.Value;
      }
      if (other.HasNormalAttackBreakCount) {
        NormalAttackBreakCount = other.NormalAttackBreakCount;
      }
      foreach (var key in other.holdDic_.DeleteList) {
        holdDic_.Remove(key);
      }
      foreach (var pair in other.holdDic_) {
        holdDic_[pair.Key] = pair.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Type = (global::Protocol.EntityType) input.ReadEnum();
            break;
          }
          case 26: {
            if (!HasPosition) {
              Position = new global::Protocol.Int3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 34: {
            if (!HasRotation) {
              Rotation = new global::Protocol.Int3();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 40: {
            Camp = input.ReadUInt32();
            break;
          }
          case 56: {
            Destroyed = input.ReadBool();
            break;
          }
          case 64: {
            ModelId = input.ReadUInt32();
            break;
          }
          case 90: {
            if (!HasStateAttrData) {
              StateAttrData = new global::Protocol.StateAttributeSyncData();
            }
            input.ReadMessage(StateAttrData);
            break;
          }
          case 98: {
            if (!HasLifeData) {
              LifeData = new global::Protocol.LifeSyncData();
            }
            input.ReadMessage(LifeData);
            break;
          }
          case 106: {
            if (!HasCharacterCtrlData) {
              CharacterCtrlData = new global::Protocol.CharacterCtrlSyncData();
            }
            input.ReadMessage(CharacterCtrlData);
            break;
          }
          case 114: {
            if (!HasPropCollectionsData) {
              PropCollectionsData = new global::Protocol.PropCollectionsSyncData();
            }
            input.ReadMessage(PropCollectionsData);
            break;
          }
          case 122: {
            if (!HasSkillCtrlData) {
              SkillCtrlData = new global::Protocol.SkillCtrlSyncData();
            }
            input.ReadMessage(SkillCtrlData);
            break;
          }
          case 130: {
            if (!HasBuffCtrlData) {
              BuffCtrlData = new global::Protocol.BuffCtrlSyncData();
            }
            input.ReadMessage(BuffCtrlData);
            break;
          }
          case 138: {
            if (!HasHitCheckData) {
              HitCheckData = new global::Protocol.HitCheckSyncData();
            }
            input.ReadMessage(HitCheckData);
            break;
          }
          case 146: {
            if (!HasNavData) {
              NavData = new global::Protocol.NavSyncData();
            }
            input.ReadMessage(NavData);
            break;
          }
          case 154: {
            if (!HasTagData) {
              TagData = new global::Protocol.TagSyncData();
            }
            input.ReadMessage(TagData);
            break;
          }
          case 162: {
            if (!HasGoapData) {
              GoapData = new global::Protocol.GoapSyncData();
            }
            input.ReadMessage(GoapData);
            break;
          }
          case 170: {
            if (!HasArchData) {
              ArchData = new global::Protocol.ArchitectureSyncData();
            }
            input.ReadMessage(ArchData);
            break;
          }
          case 242: {
            if (!HasAreaData) {
              AreaData = new global::Protocol.AreaSyncData();
            }
            input.ReadMessage(AreaData);
            break;
          }
          case 250: {
            if (!HasPasserBrainData) {
              PasserBrainData = new global::Protocol.PasserBrainSyncData();
            }
            input.ReadMessage(PasserBrainData);
            break;
          }
          case 258: {
            if (!HasGuardData) {
              GuardData = new global::Protocol.GuardSyncData();
            }
            input.ReadMessage(GuardData);
            break;
          }
          case 266: {
            if (!HasFlyItemData) {
              FlyItemData = new global::Protocol.FlyItemSyncData();
            }
            input.ReadMessage(FlyItemData);
            break;
          }
          case 274: {
            if (!HasLadderData) {
              LadderData = new global::Protocol.LadderSyncData();
            }
            input.ReadMessage(LadderData);
            break;
          }
          case 282: {
            if (!HasThingData) {
              ThingData = new global::Protocol.ThingSyncData();
            }
            input.ReadMessage(ThingData);
            break;
          }
          case 290: {
            if (!HasHeroData) {
              HeroData = new global::Protocol.HeroSyncData();
            }
            input.ReadMessage(HeroData);
            break;
          }
          case 298: {
            if (!HasWeaponData) {
              WeaponData = new global::Protocol.WeaponSyncData();
            }
            input.ReadMessage(WeaponData);
            break;
          }
          case 306: {
            if (!HasHotData) {
              HotData = new global::Protocol.HotSyncData();
            }
            input.ReadMessage(HotData);
            break;
          }
          case 314: {
            if (!HasAnqiData) {
              AnqiData = new global::Protocol.AnqiSyncData();
            }
            input.ReadMessage(AnqiData);
            break;
          }
          case 322: {
            if (!HasPeddlerData) {
              PeddlerData = new global::Protocol.PeddlerSyncData();
            }
            input.ReadMessage(PeddlerData);
            break;
          }
          case 338: {
            if (!HasWarningData) {
              WarningData = new global::Protocol.WarningSyncData();
            }
            input.ReadMessage(WarningData);
            break;
          }
          case 346: {
            if (!HasSmokeData) {
              SmokeData = new global::Protocol.SmokeSyncData();
            }
            input.ReadMessage(SmokeData);
            break;
          }
          case 354: {
            if (!HasJumpPointData) {
              JumpPointData = new global::Protocol.JumpPointSyncData();
            }
            input.ReadMessage(JumpPointData);
            break;
          }
          case 362: {
            if (!HasLadderCheckData) {
              LadderCheckData = new global::Protocol.LadderCheckSyncData();
            }
            input.ReadMessage(LadderCheckData);
            break;
          }
          case 370: {
            if (!HasBoatData) {
              BoatData = new global::Protocol.BoatSyncData();
            }
            input.ReadMessage(BoatData);
            break;
          }
          case 378: {
            if (!HasShopData) {
              ShopData = new global::Protocol.ShopSyncData();
            }
            input.ReadMessage(ShopData);
            break;
          }
          case 394: {
            if (!HasBossData) {
              BossData = new global::Protocol.BossSyncData();
            }
            input.ReadMessage(BossData);
            break;
          }
          case 402: {
            if (!HasNestData) {
              NestData = new global::Protocol.NestSyncData();
            }
            input.ReadMessage(NestData);
            break;
          }
          case 410: {
            if (!HasHideStateData) {
              HideStateData = new global::Protocol.HideStateSyncData();
            }
            input.ReadMessage(HideStateData);
            break;
          }
          case 418: {
            if (!HasDropData) {
              DropData = new global::Protocol.DropSyncData();
            }
            input.ReadMessage(DropData);
            break;
          }
          case 434: {
            if (!HasAntidoteScatterData) {
              AntidoteScatterData = new global::Protocol.AntidoteScatterSyncData();
            }
            input.ReadMessage(AntidoteScatterData);
            break;
          }
          case 442: {
            if (!HasMonsterData) {
              MonsterData = new global::Protocol.MonsterSyncData();
            }
            input.ReadMessage(MonsterData);
            break;
          }
          case 458: {
            if (!HasPhysicalData) {
              PhysicalData = new global::Protocol.PhyscialSyncData();
            }
            input.ReadMessage(PhysicalData);
            break;
          }
          case 466: {
            if (!HasFireDiamond) {
              FireDiamond = new global::Protocol.FireDiamondSyncData();
            }
            input.ReadMessage(FireDiamond);
            break;
          }
          case 474: {
            if (!HasInsanityData) {
              InsanityData = new global::Protocol.InsanitySyncData();
            }
            input.ReadMessage(InsanityData);
            break;
          }
          case 482: {
            if (!HasBallData) {
              BallData = new global::Protocol.BallSyncData();
            }
            input.ReadMessage(BallData);
            break;
          }
          case 490: {
            if (!HasFollowData) {
              FollowData = new global::Protocol.FollowSyncData();
            }
            input.ReadMessage(FollowData);
            break;
          }
          case 498: {
            if (!HasStrengthData) {
              StrengthData = new global::Protocol.StrengthSyncData();
            }
            input.ReadMessage(StrengthData);
            break;
          }
          case 514: {
            if (!HasInvisibleData) {
              InvisibleData = new global::Protocol.InvisibleSyncData();
            }
            input.ReadMessage(InvisibleData);
            break;
          }
          case 522: {
            if (!HasMagicWallData) {
              MagicWallData = new global::Protocol.MagicWallSyncData();
            }
            input.ReadMessage(MagicWallData);
            break;
          }
          case 530: {
            if (!HasParalysisData) {
              ParalysisData = new global::Protocol.ParalysisSyncData();
            }
            input.ReadMessage(ParalysisData);
            break;
          }
          case 538: {
            if (!HasSealPointData) {
              SealPointData = new global::Protocol.SealingPointSyncData();
            }
            input.ReadMessage(SealPointData);
            break;
          }
          case 546: {
            if (!HasSealLineData) {
              SealLineData = new global::Protocol.SealingLineSyncData();
            }
            input.ReadMessage(SealLineData);
            break;
          }
          case 554: {
            if (!HasThunderNailData) {
              ThunderNailData = new global::Protocol.ThunderNailSyncData();
            }
            input.ReadMessage(ThunderNailData);
            break;
          }
          case 562: {
            if (!HasHookPointData) {
              HookPointData = new global::Protocol.HookPointSyncData();
            }
            input.ReadMessage(HookPointData);
            break;
          }
          case 570: {
            if (!HasGoldenTireData) {
              GoldenTireData = new global::Protocol.GoldenTireSyncData();
            }
            input.ReadMessage(GoldenTireData);
            break;
          }
          case 578: {
            if (!HasGoldenBellData) {
              GoldenBellData = new global::Protocol.GoldenBellSyncData();
            }
            input.ReadMessage(GoldenBellData);
            break;
          }
          case 586: {
            if (!HasTimelineData) {
              TimelineData = new global::Protocol.TimelineSyncData();
            }
            input.ReadMessage(TimelineData);
            break;
          }
          case 594: {
            if (!HasCustomEntityData) {
              CustomEntityData = new global::Protocol.CustomEntitySyncData();
            }
            input.ReadMessage(CustomEntityData);
            break;
          }
          case 602: {
            if (!HasHideAreaData) {
              HideAreaData = new global::Protocol.HideAreaSyncData();
            }
            input.ReadMessage(HideAreaData);
            break;
          }
          case 610: {
            if (!HasRecoverData) {
              RecoverData = new global::Protocol.RecoverSyncData();
            }
            input.ReadMessage(RecoverData);
            break;
          }
          case 618: {
            if (!HasGazeSyneData) {
              GazeSyneData = new global::Protocol.GazeSyncData();
            }
            input.ReadMessage(GazeSyneData);
            break;
          }
          case 629: {
            TotalAttackVal = input.ReadFloat();
            break;
          }
          case 634: {
            attackStatsDic_.AddEntriesFrom(input, _map_attackStatsDic_codec);
            break;
          }
          case 640: {
            TotalSkillCount = input.ReadUInt32();
            break;
          }
          case 648: {
            TotalSkillSuccessCount = input.ReadUInt32();
            break;
          }
          case 658: {
            skillStatsDic_.AddEntriesFrom(input, _map_skillStatsDic_codec);
            break;
          }
          case 664: {
            NormalAttackCount = input.ReadUInt32();
            break;
          }
          case 672: {
            NormalAttackSuccessCount = input.ReadUInt32();
            break;
          }
          case 682: {
            normalAttackStatsDic_.AddEntriesFrom(input, _map_normalAttackStatsDic_codec);
            break;
          }
          case 688: {
            NormalAttackBreakCount = input.ReadUInt32();
            break;
          }
          case 698: {
            holdDic_.AddEntriesFrom(input, _map_holdDic_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Type = (global::Protocol.EntityType) input.ReadEnum();
            break;
          }
          case 26: {
            if (!HasPosition) {
              Position = new global::Protocol.Int3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 34: {
            if (!HasRotation) {
              Rotation = new global::Protocol.Int3();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 40: {
            Camp = input.ReadUInt32();
            break;
          }
          case 56: {
            Destroyed = input.ReadBool();
            break;
          }
          case 64: {
            ModelId = input.ReadUInt32();
            break;
          }
          case 90: {
            if (!HasStateAttrData) {
              StateAttrData = new global::Protocol.StateAttributeSyncData();
            }
            input.ReadMessage(StateAttrData);
            break;
          }
          case 98: {
            if (!HasLifeData) {
              LifeData = new global::Protocol.LifeSyncData();
            }
            input.ReadMessage(LifeData);
            break;
          }
          case 106: {
            if (!HasCharacterCtrlData) {
              CharacterCtrlData = new global::Protocol.CharacterCtrlSyncData();
            }
            input.ReadMessage(CharacterCtrlData);
            break;
          }
          case 114: {
            if (!HasPropCollectionsData) {
              PropCollectionsData = new global::Protocol.PropCollectionsSyncData();
            }
            input.ReadMessage(PropCollectionsData);
            break;
          }
          case 122: {
            if (!HasSkillCtrlData) {
              SkillCtrlData = new global::Protocol.SkillCtrlSyncData();
            }
            input.ReadMessage(SkillCtrlData);
            break;
          }
          case 130: {
            if (!HasBuffCtrlData) {
              BuffCtrlData = new global::Protocol.BuffCtrlSyncData();
            }
            input.ReadMessage(BuffCtrlData);
            break;
          }
          case 138: {
            if (!HasHitCheckData) {
              HitCheckData = new global::Protocol.HitCheckSyncData();
            }
            input.ReadMessage(HitCheckData);
            break;
          }
          case 146: {
            if (!HasNavData) {
              NavData = new global::Protocol.NavSyncData();
            }
            input.ReadMessage(NavData);
            break;
          }
          case 154: {
            if (!HasTagData) {
              TagData = new global::Protocol.TagSyncData();
            }
            input.ReadMessage(TagData);
            break;
          }
          case 162: {
            if (!HasGoapData) {
              GoapData = new global::Protocol.GoapSyncData();
            }
            input.ReadMessage(GoapData);
            break;
          }
          case 170: {
            if (!HasArchData) {
              ArchData = new global::Protocol.ArchitectureSyncData();
            }
            input.ReadMessage(ArchData);
            break;
          }
          case 242: {
            if (!HasAreaData) {
              AreaData = new global::Protocol.AreaSyncData();
            }
            input.ReadMessage(AreaData);
            break;
          }
          case 250: {
            if (!HasPasserBrainData) {
              PasserBrainData = new global::Protocol.PasserBrainSyncData();
            }
            input.ReadMessage(PasserBrainData);
            break;
          }
          case 258: {
            if (!HasGuardData) {
              GuardData = new global::Protocol.GuardSyncData();
            }
            input.ReadMessage(GuardData);
            break;
          }
          case 266: {
            if (!HasFlyItemData) {
              FlyItemData = new global::Protocol.FlyItemSyncData();
            }
            input.ReadMessage(FlyItemData);
            break;
          }
          case 274: {
            if (!HasLadderData) {
              LadderData = new global::Protocol.LadderSyncData();
            }
            input.ReadMessage(LadderData);
            break;
          }
          case 282: {
            if (!HasThingData) {
              ThingData = new global::Protocol.ThingSyncData();
            }
            input.ReadMessage(ThingData);
            break;
          }
          case 290: {
            if (!HasHeroData) {
              HeroData = new global::Protocol.HeroSyncData();
            }
            input.ReadMessage(HeroData);
            break;
          }
          case 298: {
            if (!HasWeaponData) {
              WeaponData = new global::Protocol.WeaponSyncData();
            }
            input.ReadMessage(WeaponData);
            break;
          }
          case 306: {
            if (!HasHotData) {
              HotData = new global::Protocol.HotSyncData();
            }
            input.ReadMessage(HotData);
            break;
          }
          case 314: {
            if (!HasAnqiData) {
              AnqiData = new global::Protocol.AnqiSyncData();
            }
            input.ReadMessage(AnqiData);
            break;
          }
          case 322: {
            if (!HasPeddlerData) {
              PeddlerData = new global::Protocol.PeddlerSyncData();
            }
            input.ReadMessage(PeddlerData);
            break;
          }
          case 338: {
            if (!HasWarningData) {
              WarningData = new global::Protocol.WarningSyncData();
            }
            input.ReadMessage(WarningData);
            break;
          }
          case 346: {
            if (!HasSmokeData) {
              SmokeData = new global::Protocol.SmokeSyncData();
            }
            input.ReadMessage(SmokeData);
            break;
          }
          case 354: {
            if (!HasJumpPointData) {
              JumpPointData = new global::Protocol.JumpPointSyncData();
            }
            input.ReadMessage(JumpPointData);
            break;
          }
          case 362: {
            if (!HasLadderCheckData) {
              LadderCheckData = new global::Protocol.LadderCheckSyncData();
            }
            input.ReadMessage(LadderCheckData);
            break;
          }
          case 370: {
            if (!HasBoatData) {
              BoatData = new global::Protocol.BoatSyncData();
            }
            input.ReadMessage(BoatData);
            break;
          }
          case 378: {
            if (!HasShopData) {
              ShopData = new global::Protocol.ShopSyncData();
            }
            input.ReadMessage(ShopData);
            break;
          }
          case 394: {
            if (!HasBossData) {
              BossData = new global::Protocol.BossSyncData();
            }
            input.ReadMessage(BossData);
            break;
          }
          case 402: {
            if (!HasNestData) {
              NestData = new global::Protocol.NestSyncData();
            }
            input.ReadMessage(NestData);
            break;
          }
          case 410: {
            if (!HasHideStateData) {
              HideStateData = new global::Protocol.HideStateSyncData();
            }
            input.ReadMessage(HideStateData);
            break;
          }
          case 418: {
            if (!HasDropData) {
              DropData = new global::Protocol.DropSyncData();
            }
            input.ReadMessage(DropData);
            break;
          }
          case 434: {
            if (!HasAntidoteScatterData) {
              AntidoteScatterData = new global::Protocol.AntidoteScatterSyncData();
            }
            input.ReadMessage(AntidoteScatterData);
            break;
          }
          case 442: {
            if (!HasMonsterData) {
              MonsterData = new global::Protocol.MonsterSyncData();
            }
            input.ReadMessage(MonsterData);
            break;
          }
          case 458: {
            if (!HasPhysicalData) {
              PhysicalData = new global::Protocol.PhyscialSyncData();
            }
            input.ReadMessage(PhysicalData);
            break;
          }
          case 466: {
            if (!HasFireDiamond) {
              FireDiamond = new global::Protocol.FireDiamondSyncData();
            }
            input.ReadMessage(FireDiamond);
            break;
          }
          case 474: {
            if (!HasInsanityData) {
              InsanityData = new global::Protocol.InsanitySyncData();
            }
            input.ReadMessage(InsanityData);
            break;
          }
          case 482: {
            if (!HasBallData) {
              BallData = new global::Protocol.BallSyncData();
            }
            input.ReadMessage(BallData);
            break;
          }
          case 490: {
            if (!HasFollowData) {
              FollowData = new global::Protocol.FollowSyncData();
            }
            input.ReadMessage(FollowData);
            break;
          }
          case 498: {
            if (!HasStrengthData) {
              StrengthData = new global::Protocol.StrengthSyncData();
            }
            input.ReadMessage(StrengthData);
            break;
          }
          case 514: {
            if (!HasInvisibleData) {
              InvisibleData = new global::Protocol.InvisibleSyncData();
            }
            input.ReadMessage(InvisibleData);
            break;
          }
          case 522: {
            if (!HasMagicWallData) {
              MagicWallData = new global::Protocol.MagicWallSyncData();
            }
            input.ReadMessage(MagicWallData);
            break;
          }
          case 530: {
            if (!HasParalysisData) {
              ParalysisData = new global::Protocol.ParalysisSyncData();
            }
            input.ReadMessage(ParalysisData);
            break;
          }
          case 538: {
            if (!HasSealPointData) {
              SealPointData = new global::Protocol.SealingPointSyncData();
            }
            input.ReadMessage(SealPointData);
            break;
          }
          case 546: {
            if (!HasSealLineData) {
              SealLineData = new global::Protocol.SealingLineSyncData();
            }
            input.ReadMessage(SealLineData);
            break;
          }
          case 554: {
            if (!HasThunderNailData) {
              ThunderNailData = new global::Protocol.ThunderNailSyncData();
            }
            input.ReadMessage(ThunderNailData);
            break;
          }
          case 562: {
            if (!HasHookPointData) {
              HookPointData = new global::Protocol.HookPointSyncData();
            }
            input.ReadMessage(HookPointData);
            break;
          }
          case 570: {
            if (!HasGoldenTireData) {
              GoldenTireData = new global::Protocol.GoldenTireSyncData();
            }
            input.ReadMessage(GoldenTireData);
            break;
          }
          case 578: {
            if (!HasGoldenBellData) {
              GoldenBellData = new global::Protocol.GoldenBellSyncData();
            }
            input.ReadMessage(GoldenBellData);
            break;
          }
          case 586: {
            if (!HasTimelineData) {
              TimelineData = new global::Protocol.TimelineSyncData();
            }
            input.ReadMessage(TimelineData);
            break;
          }
          case 594: {
            if (!HasCustomEntityData) {
              CustomEntityData = new global::Protocol.CustomEntitySyncData();
            }
            input.ReadMessage(CustomEntityData);
            break;
          }
          case 602: {
            if (!HasHideAreaData) {
              HideAreaData = new global::Protocol.HideAreaSyncData();
            }
            input.ReadMessage(HideAreaData);
            break;
          }
          case 610: {
            if (!HasRecoverData) {
              RecoverData = new global::Protocol.RecoverSyncData();
            }
            input.ReadMessage(RecoverData);
            break;
          }
          case 618: {
            if (!HasGazeSyneData) {
              GazeSyneData = new global::Protocol.GazeSyncData();
            }
            input.ReadMessage(GazeSyneData);
            break;
          }
          case 629: {
            TotalAttackVal = input.ReadFloat();
            break;
          }
          case 634: {
            attackStatsDic_.AddEntriesFrom(ref input, _map_attackStatsDic_codec);
            break;
          }
          case 640: {
            TotalSkillCount = input.ReadUInt32();
            break;
          }
          case 648: {
            TotalSkillSuccessCount = input.ReadUInt32();
            break;
          }
          case 658: {
            skillStatsDic_.AddEntriesFrom(ref input, _map_skillStatsDic_codec);
            break;
          }
          case 664: {
            NormalAttackCount = input.ReadUInt32();
            break;
          }
          case 672: {
            NormalAttackSuccessCount = input.ReadUInt32();
            break;
          }
          case 682: {
            normalAttackStatsDic_.AddEntriesFrom(ref input, _map_normalAttackStatsDic_codec);
            break;
          }
          case 688: {
            NormalAttackBreakCount = input.ReadUInt32();
            break;
          }
          case 698: {
            holdDic_.AddEntriesFrom(ref input, _map_holdDic_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RecoverSyncData : pb::IMessage<RecoverSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RecoverSyncData> _parser = new pb::MessageParser<RecoverSyncData>(() => new RecoverSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecoverSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecoverSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecoverSyncData(RecoverSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      recoverTime_ = other.recoverTime_;
      recoverTimes_ = other.recoverTimes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecoverSyncData Clone() {
      return new RecoverSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "recover_time" field.</summary>
    public const int RecoverTimeFieldNumber = 1;
    private int recoverTime_;
    /// <summary>
    ///恢复时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecoverTime {
      get { if ((_hasBits0 & 1) != 0) { return recoverTime_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        recoverTime_ = value;
      }
    }
    /// <summary>Gets whether the "recover_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRecoverTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "recover_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRecoverTimeDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "recover_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRecoverTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "recover_times" field.</summary>
    public const int RecoverTimesFieldNumber = 2;
    private int recoverTimes_;
    /// <summary>
    ///恢复次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecoverTimes {
      get { if ((_hasBits0 & 2) != 0) { return recoverTimes_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        recoverTimes_ = value;
      }
    }
    /// <summary>Gets whether the "recover_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRecoverTimes {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "recover_times" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRecoverTimesDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "recover_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRecoverTimes() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecoverSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecoverSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecoverTime != other.RecoverTime) return false;
      if (RecoverTimes != other.RecoverTimes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRecoverTime) hash ^= RecoverTime.GetHashCode();
      if (HasRecoverTimes) hash ^= RecoverTimes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasRecoverTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRecoverTimeDirty)) {
        output.WriteRawTag(8);
        output.WriteInt32(RecoverTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasRecoverTimes)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRecoverTimesDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(RecoverTimes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasRecoverTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRecoverTimeDirty)) {
        output.WriteRawTag(8);
        output.WriteInt32(RecoverTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasRecoverTimes)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRecoverTimesDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(RecoverTimes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasRecoverTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsRecoverTimeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecoverTime);
      }
      if ((scope == pb.WriteScope.FULL && HasRecoverTimes)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsRecoverTimesDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecoverTimes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecoverSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasRecoverTime) {
        RecoverTime = other.RecoverTime;
      }
      if (other.HasRecoverTimes) {
        RecoverTimes = other.RecoverTimes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RecoverTime = input.ReadInt32();
            break;
          }
          case 16: {
            RecoverTimes = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RecoverTime = input.ReadInt32();
            break;
          }
          case 16: {
            RecoverTimes = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HideAreaSyncData : pb::IMessage<HideAreaSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HideAreaSyncData> _parser = new pb::MessageParser<HideAreaSyncData>(() => new HideAreaSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HideAreaSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HideAreaSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HideAreaSyncData(HideAreaSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      id_ = other.id_;
      invisible_ = other.invisible_;
      canSeeInArea_ = other.canSeeInArea_;
      visibleValRecoverySpeed_ = other.visibleValRecoverySpeed_;
      stayInvisibleTime_ = other.stayInvisibleTime_;
      centerPosition_ = other.HasCenterPosition ? other.centerPosition_.Clone() : null;
      colliderSize_ = other.HasColliderSize ? other.colliderSize_.Clone() : null;
      hideAreaType_ = other.hideAreaType_;
      modelOcclude_ = other.modelOcclude_;
      onAreaEntityDic_ = other.onAreaEntityDic_.Clone();
      modelSize_ = other.HasModelSize ? other.modelSize_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HideAreaSyncData Clone() {
      return new HideAreaSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "invisible" field.</summary>
    public const int InvisibleFieldNumber = 2;
    private bool invisible_;
    /// <summary>
    ///进入区域是否能隐身
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Invisible {
      get { if ((_hasBits0 & 2) != 0) { return invisible_; } else { return false; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        invisible_ = value;
      }
    }
    /// <summary>Gets whether the "invisible" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInvisible {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "invisible" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInvisibleDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "invisible" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInvisible() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "can_see_in_area" field.</summary>
    public const int CanSeeInAreaFieldNumber = 6;
    private bool canSeeInArea_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanSeeInArea {
      get { if ((_hasBits0 & 4) != 0) { return canSeeInArea_; } else { return false; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        canSeeInArea_ = value;
      }
    }
    /// <summary>Gets whether the "can_see_in_area" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCanSeeInArea {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "can_see_in_area" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCanSeeInAreaDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "can_see_in_area" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCanSeeInArea() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "visible_val_recovery_speed" field.</summary>
    public const int VisibleValRecoverySpeedFieldNumber = 7;
    private float visibleValRecoverySpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VisibleValRecoverySpeed {
      get { if ((_hasBits0 & 8) != 0) { return visibleValRecoverySpeed_; } else { return 0F; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        visibleValRecoverySpeed_ = value;
      }
    }
    /// <summary>Gets whether the "visible_val_recovery_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVisibleValRecoverySpeed {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "visible_val_recovery_speed" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVisibleValRecoverySpeedDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "visible_val_recovery_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVisibleValRecoverySpeed() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "stay_invisible_time" field.</summary>
    public const int StayInvisibleTimeFieldNumber = 8;
    private float stayInvisibleTime_;
    /// <summary>
    ///离开藏匿区域后，保持隐身的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StayInvisibleTime {
      get { if ((_hasBits0 & 16) != 0) { return stayInvisibleTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 16;
        stayInvisibleTime_ = value;
      }
    }
    /// <summary>Gets whether the "stay_invisible_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStayInvisibleTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "stay_invisible_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStayInvisibleTimeDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "stay_invisible_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStayInvisibleTime() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "center_position" field.</summary>
    public const int CenterPositionFieldNumber = 9;
    private global::Protocol.Float3 centerPosition_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 CenterPosition {
      get { return centerPosition_; }
      set {
        centerPosition_ = value;
      }
    }
    /// <summary>Gets whether the center_position field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCenterPosition {
      get { return centerPosition_ != null; }
    }
    /// <summary>Clears the value of the center_position field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCenterPosition() {
      centerPosition_ = null;
    }
    /// <summary>Gets whether the "center_position" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCenterPositionDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }

    /// <summary>Field number for the "collider_size" field.</summary>
    public const int ColliderSizeFieldNumber = 10;
    private global::Protocol.Float3 colliderSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 ColliderSize {
      get { return colliderSize_; }
      set {
        colliderSize_ = value;
      }
    }
    /// <summary>Gets whether the collider_size field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasColliderSize {
      get { return colliderSize_ != null; }
    }
    /// <summary>Clears the value of the collider_size field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearColliderSize() {
      colliderSize_ = null;
    }
    /// <summary>Gets whether the "collider_size" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsColliderSizeDirty {
      get { return (_dirtyBits0 & 64) != 0; }
    }

    /// <summary>Field number for the "hide_area_type" field.</summary>
    public const int HideAreaTypeFieldNumber = 12;
    private global::Protocol.HideAreaType hideAreaType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.HideAreaType HideAreaType {
      get { if ((_hasBits0 & 32) != 0) { return hideAreaType_; } else { return global::Protocol.HideAreaType.Cube; } }
      set {
        _hasBits0 |= 32;
        _dirtyBits0 |= 128;
        hideAreaType_ = value;
      }
    }
    /// <summary>Gets whether the "hide_area_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHideAreaType {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Gets whether the "hide_area_type" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHideAreaTypeDirty {
      get { return (_dirtyBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "hide_area_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHideAreaType() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "model_occlude" field.</summary>
    public const int ModelOccludeFieldNumber = 13;
    private bool modelOcclude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ModelOcclude {
      get { if ((_hasBits0 & 64) != 0) { return modelOcclude_; } else { return false; } }
      set {
        _hasBits0 |= 64;
        _dirtyBits0 |= 256;
        modelOcclude_ = value;
      }
    }
    /// <summary>Gets whether the "model_occlude" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasModelOcclude {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Gets whether the "model_occlude" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsModelOccludeDirty {
      get { return (_dirtyBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "model_occlude" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearModelOcclude() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "on_area_entity_dic" field.</summary>
    public const int OnAreaEntityDicFieldNumber = 14;
    private static readonly pbc::MapField<uint, bool>.Codec _map_onAreaEntityDic_codec
        = new pbc::MapField<uint, bool>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForBool(16, false), 114);
    private readonly pbc::MapField<uint, bool> onAreaEntityDic_ = new pbc::MapField<uint, bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, bool> OnAreaEntityDic {
      get { return onAreaEntityDic_; }
    }
    /// <summary>Gets whether the "on_area_entity_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOnAreaEntityDicDirty {
      get { return (_dirtyBits0 & 512) != 0; }
    }

    /// <summary>Field number for the "model_size" field.</summary>
    public const int ModelSizeFieldNumber = 15;
    private global::Protocol.Float3 modelSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 ModelSize {
      get { return modelSize_; }
      set {
        modelSize_ = value;
      }
    }
    /// <summary>Gets whether the model_size field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasModelSize {
      get { return modelSize_ != null; }
    }
    /// <summary>Clears the value of the model_size field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearModelSize() {
      modelSize_ = null;
    }
    /// <summary>Gets whether the "model_size" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsModelSizeDirty {
      get { return (_dirtyBits0 & 1024) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HideAreaSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HideAreaSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Invisible != other.Invisible) return false;
      if (CanSeeInArea != other.CanSeeInArea) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VisibleValRecoverySpeed, other.VisibleValRecoverySpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StayInvisibleTime, other.StayInvisibleTime)) return false;
      if (!object.Equals(CenterPosition, other.CenterPosition)) return false;
      if (!object.Equals(ColliderSize, other.ColliderSize)) return false;
      if (HideAreaType != other.HideAreaType) return false;
      if (ModelOcclude != other.ModelOcclude) return false;
      if (!OnAreaEntityDic.Equals(other.OnAreaEntityDic)) return false;
      if (!object.Equals(ModelSize, other.ModelSize)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasInvisible) hash ^= Invisible.GetHashCode();
      if (HasCanSeeInArea) hash ^= CanSeeInArea.GetHashCode();
      if (HasVisibleValRecoverySpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VisibleValRecoverySpeed);
      if (HasStayInvisibleTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StayInvisibleTime);
      if (HasCenterPosition) hash ^= CenterPosition.GetHashCode();
      if (HasColliderSize) hash ^= ColliderSize.GetHashCode();
      if (HasHideAreaType) hash ^= HideAreaType.GetHashCode();
      if (HasModelOcclude) hash ^= ModelOcclude.GetHashCode();
      hash ^= OnAreaEntityDic.GetHashCode();
      if (HasModelSize) hash ^= ModelSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasInvisible)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsInvisibleDirty)) {
        output.WriteRawTag(16);
        output.WriteBool(Invisible);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCanSeeInArea)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCanSeeInAreaDirty)) {
        output.WriteRawTag(48);
        output.WriteBool(CanSeeInArea);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasVisibleValRecoverySpeed)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsVisibleValRecoverySpeedDirty)) {
        output.WriteRawTag(61);
        output.WriteFloat(VisibleValRecoverySpeed);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStayInvisibleTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStayInvisibleTimeDirty)) {
        output.WriteRawTag(69);
        output.WriteFloat(StayInvisibleTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCenterPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCenterPositionDirty)) {
        output.WriteRawTag(74);
        output.WriteMessage(CenterPosition);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasColliderSize)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsColliderSizeDirty)) {
        output.WriteRawTag(82);
        output.WriteMessage(ColliderSize);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHideAreaType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHideAreaTypeDirty)) {
        output.WriteRawTag(96);
        output.WriteEnum((int) HideAreaType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasModelOcclude)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsModelOccludeDirty)) {
        output.WriteRawTag(104);
        output.WriteBool(ModelOcclude);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOnAreaEntityDicDirty)) {
        onAreaEntityDic_.WriteTo(output, _map_onAreaEntityDic_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasModelSize)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsModelSizeDirty)) {
        output.WriteRawTag(122);
        output.WriteMessage(ModelSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasInvisible)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsInvisibleDirty)) {
        output.WriteRawTag(16);
        output.WriteBool(Invisible);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCanSeeInArea)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCanSeeInAreaDirty)) {
        output.WriteRawTag(48);
        output.WriteBool(CanSeeInArea);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasVisibleValRecoverySpeed)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsVisibleValRecoverySpeedDirty)) {
        output.WriteRawTag(61);
        output.WriteFloat(VisibleValRecoverySpeed);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStayInvisibleTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStayInvisibleTimeDirty)) {
        output.WriteRawTag(69);
        output.WriteFloat(StayInvisibleTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCenterPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCenterPositionDirty)) {
        output.WriteRawTag(74);
        output.WriteMessage(CenterPosition);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasColliderSize)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsColliderSizeDirty)) {
        output.WriteRawTag(82);
        output.WriteMessage(ColliderSize);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHideAreaType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHideAreaTypeDirty)) {
        output.WriteRawTag(96);
        output.WriteEnum((int) HideAreaType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasModelOcclude)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsModelOccludeDirty)) {
        output.WriteRawTag(104);
        output.WriteBool(ModelOcclude);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOnAreaEntityDicDirty)) {
        onAreaEntityDic_.WriteTo(ref output, _map_onAreaEntityDic_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasModelSize)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsModelSizeDirty)) {
        output.WriteRawTag(122);
        output.WriteMessage(ModelSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if ((scope == pb.WriteScope.FULL && HasInvisible)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsInvisibleDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasCanSeeInArea)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCanSeeInAreaDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasVisibleValRecoverySpeed)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsVisibleValRecoverySpeedDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasStayInvisibleTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsStayInvisibleTimeDirty)) {
        size += 1 + 4;
      }
      if (HasCenterPosition) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(CenterPosition, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 32;
        } else {
          _dirtyBits0 &= ~32;
        }
      }
      if (HasColliderSize) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(ColliderSize, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 64;
        } else {
          _dirtyBits0 &= ~64;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasHideAreaType)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsHideAreaTypeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HideAreaType);
      }
      if ((scope == pb.WriteScope.FULL && HasModelOcclude)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsModelOccludeDirty)) {
        size += 1 + 1;
      }
      if (OnAreaEntityDic != null) {
        int msgSize = onAreaEntityDic_.CalculateSize(_map_onAreaEntityDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 512;
        } else {
          _dirtyBits0 &= ~512;
        }
      }
      if (HasModelSize) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(ModelSize, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 1024;
        } else {
          _dirtyBits0 &= ~1024;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HideAreaSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasInvisible) {
        Invisible = other.Invisible;
      }
      if (other.HasCanSeeInArea) {
        CanSeeInArea = other.CanSeeInArea;
      }
      if (other.HasVisibleValRecoverySpeed) {
        VisibleValRecoverySpeed = other.VisibleValRecoverySpeed;
      }
      if (other.HasStayInvisibleTime) {
        StayInvisibleTime = other.StayInvisibleTime;
      }
      if (other.HasCenterPosition) {
        if (!HasCenterPosition) {
          CenterPosition = new global::Protocol.Float3();
        }
        CenterPosition.MergeFrom(other.CenterPosition);
      }
      if (other.HasColliderSize) {
        if (!HasColliderSize) {
          ColliderSize = new global::Protocol.Float3();
        }
        ColliderSize.MergeFrom(other.ColliderSize);
      }
      if (other.HasHideAreaType) {
        HideAreaType = other.HideAreaType;
      }
      if (other.HasModelOcclude) {
        ModelOcclude = other.ModelOcclude;
      }
      foreach (var key in other.onAreaEntityDic_.DeleteList) {
        onAreaEntityDic_.Remove(key);
      }
      foreach (var pair in other.onAreaEntityDic_) {
        onAreaEntityDic_[pair.Key] = pair.Value;
      }
      if (other.HasModelSize) {
        if (!HasModelSize) {
          ModelSize = new global::Protocol.Float3();
        }
        ModelSize.MergeFrom(other.ModelSize);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Invisible = input.ReadBool();
            break;
          }
          case 48: {
            CanSeeInArea = input.ReadBool();
            break;
          }
          case 61: {
            VisibleValRecoverySpeed = input.ReadFloat();
            break;
          }
          case 69: {
            StayInvisibleTime = input.ReadFloat();
            break;
          }
          case 74: {
            if (!HasCenterPosition) {
              CenterPosition = new global::Protocol.Float3();
            }
            input.ReadMessage(CenterPosition);
            break;
          }
          case 82: {
            if (!HasColliderSize) {
              ColliderSize = new global::Protocol.Float3();
            }
            input.ReadMessage(ColliderSize);
            break;
          }
          case 96: {
            HideAreaType = (global::Protocol.HideAreaType) input.ReadEnum();
            break;
          }
          case 104: {
            ModelOcclude = input.ReadBool();
            break;
          }
          case 114: {
            onAreaEntityDic_.AddEntriesFrom(input, _map_onAreaEntityDic_codec);
            break;
          }
          case 122: {
            if (!HasModelSize) {
              ModelSize = new global::Protocol.Float3();
            }
            input.ReadMessage(ModelSize);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Invisible = input.ReadBool();
            break;
          }
          case 48: {
            CanSeeInArea = input.ReadBool();
            break;
          }
          case 61: {
            VisibleValRecoverySpeed = input.ReadFloat();
            break;
          }
          case 69: {
            StayInvisibleTime = input.ReadFloat();
            break;
          }
          case 74: {
            if (!HasCenterPosition) {
              CenterPosition = new global::Protocol.Float3();
            }
            input.ReadMessage(CenterPosition);
            break;
          }
          case 82: {
            if (!HasColliderSize) {
              ColliderSize = new global::Protocol.Float3();
            }
            input.ReadMessage(ColliderSize);
            break;
          }
          case 96: {
            HideAreaType = (global::Protocol.HideAreaType) input.ReadEnum();
            break;
          }
          case 104: {
            ModelOcclude = input.ReadBool();
            break;
          }
          case 114: {
            onAreaEntityDic_.AddEntriesFrom(ref input, _map_onAreaEntityDic_codec);
            break;
          }
          case 122: {
            if (!HasModelSize) {
              ModelSize = new global::Protocol.Float3();
            }
            input.ReadMessage(ModelSize);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GoldenTireSyncData : pb::IMessage<GoldenTireSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GoldenTireSyncData> _parser = new pb::MessageParser<GoldenTireSyncData>(() => new GoldenTireSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoldenTireSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoldenTireSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoldenTireSyncData(GoldenTireSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      originEntityId_ = other.originEntityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoldenTireSyncData Clone() {
      return new GoldenTireSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "origin_entity_id" field.</summary>
    public const int OriginEntityIdFieldNumber = 1;
    private uint originEntityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OriginEntityId {
      get { if ((_hasBits0 & 1) != 0) { return originEntityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        originEntityId_ = value;
      }
    }
    /// <summary>Gets whether the "origin_entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "origin_entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOriginEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "origin_entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginEntityId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GoldenTireSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GoldenTireSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OriginEntityId != other.OriginEntityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOriginEntityId) hash ^= OriginEntityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasOriginEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOriginEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(OriginEntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasOriginEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOriginEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(OriginEntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasOriginEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsOriginEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OriginEntityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GoldenTireSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasOriginEntityId) {
        OriginEntityId = other.OriginEntityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OriginEntityId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OriginEntityId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GoldenBellSyncData : pb::IMessage<GoldenBellSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GoldenBellSyncData> _parser = new pb::MessageParser<GoldenBellSyncData>(() => new GoldenBellSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoldenBellSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoldenBellSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoldenBellSyncData(GoldenBellSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      targetEntityId_ = other.targetEntityId_;
      inputTypeCode_ = other.inputTypeCode_;
      leftHp_ = other.leftHp_;
      rightHp_ = other.rightHp_;
      originEntityId_ = other.originEntityId_;
      effectName_ = other.effectName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoldenBellSyncData Clone() {
      return new GoldenBellSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "target_entity_id" field.</summary>
    public const int TargetEntityIdFieldNumber = 1;
    private uint targetEntityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetEntityId {
      get { if ((_hasBits0 & 1) != 0) { return targetEntityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        targetEntityId_ = value;
      }
    }
    /// <summary>Gets whether the "target_entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "target_entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTargetEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "target_entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "input_type_code" field.</summary>
    public const int InputTypeCodeFieldNumber = 2;
    private int inputTypeCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InputTypeCode {
      get { if ((_hasBits0 & 2) != 0) { return inputTypeCode_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        inputTypeCode_ = value;
      }
    }
    /// <summary>Gets whether the "input_type_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInputTypeCode {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "input_type_code" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInputTypeCodeDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "input_type_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInputTypeCode() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "leftHp" field.</summary>
    public const int LeftHpFieldNumber = 3;
    private float leftHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LeftHp {
      get { if ((_hasBits0 & 4) != 0) { return leftHp_; } else { return 0F; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        leftHp_ = value;
      }
    }
    /// <summary>Gets whether the "leftHp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeftHp {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "leftHp" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLeftHpDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "leftHp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeftHp() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "rightHp" field.</summary>
    public const int RightHpFieldNumber = 4;
    private float rightHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RightHp {
      get { if ((_hasBits0 & 8) != 0) { return rightHp_; } else { return 0F; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        rightHp_ = value;
      }
    }
    /// <summary>Gets whether the "rightHp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRightHp {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "rightHp" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRightHpDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "rightHp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRightHp() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "origin_entity_id" field.</summary>
    public const int OriginEntityIdFieldNumber = 5;
    private uint originEntityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OriginEntityId {
      get { if ((_hasBits0 & 16) != 0) { return originEntityId_; } else { return 0; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 16;
        originEntityId_ = value;
      }
    }
    /// <summary>Gets whether the "origin_entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginEntityId {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "origin_entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOriginEntityIdDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "origin_entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginEntityId() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "effect_name" field.</summary>
    public const int EffectNameFieldNumber = 6;
    private string effectName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EffectName {
      get { return effectName_ ?? ""; }
      set {
        effectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "effect_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEffectName {
      get { return effectName_ != null; }
    }
    /// <summary>Gets whether the "effect_name" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEffectNameDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "effect_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEffectName() {
      effectName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GoldenBellSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GoldenBellSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetEntityId != other.TargetEntityId) return false;
      if (InputTypeCode != other.InputTypeCode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LeftHp, other.LeftHp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RightHp, other.RightHp)) return false;
      if (OriginEntityId != other.OriginEntityId) return false;
      if (EffectName != other.EffectName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTargetEntityId) hash ^= TargetEntityId.GetHashCode();
      if (HasInputTypeCode) hash ^= InputTypeCode.GetHashCode();
      if (HasLeftHp) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LeftHp);
      if (HasRightHp) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RightHp);
      if (HasOriginEntityId) hash ^= OriginEntityId.GetHashCode();
      if (HasEffectName) hash ^= EffectName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasTargetEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTargetEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(TargetEntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasInputTypeCode)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsInputTypeCodeDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(InputTypeCode);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLeftHp)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLeftHpDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(LeftHp);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasRightHp)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRightHpDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(RightHp);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOriginEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOriginEntityIdDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(OriginEntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEffectName)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEffectNameDirty)) {
        output.WriteRawTag(50);
        output.WriteString(EffectName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasTargetEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTargetEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(TargetEntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasInputTypeCode)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsInputTypeCodeDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(InputTypeCode);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLeftHp)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLeftHpDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(LeftHp);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasRightHp)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRightHpDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(RightHp);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOriginEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOriginEntityIdDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(OriginEntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEffectName)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEffectNameDirty)) {
        output.WriteRawTag(50);
        output.WriteString(EffectName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasTargetEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTargetEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetEntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasInputTypeCode)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsInputTypeCodeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputTypeCode);
      }
      if ((scope == pb.WriteScope.FULL && HasLeftHp)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsLeftHpDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasRightHp)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsRightHpDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasOriginEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsOriginEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OriginEntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasEffectName)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEffectNameDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EffectName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GoldenBellSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasTargetEntityId) {
        TargetEntityId = other.TargetEntityId;
      }
      if (other.HasInputTypeCode) {
        InputTypeCode = other.InputTypeCode;
      }
      if (other.HasLeftHp) {
        LeftHp = other.LeftHp;
      }
      if (other.HasRightHp) {
        RightHp = other.RightHp;
      }
      if (other.HasOriginEntityId) {
        OriginEntityId = other.OriginEntityId;
      }
      if (other.HasEffectName) {
        EffectName = other.EffectName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetEntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            InputTypeCode = input.ReadInt32();
            break;
          }
          case 29: {
            LeftHp = input.ReadFloat();
            break;
          }
          case 37: {
            RightHp = input.ReadFloat();
            break;
          }
          case 40: {
            OriginEntityId = input.ReadUInt32();
            break;
          }
          case 50: {
            EffectName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TargetEntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            InputTypeCode = input.ReadInt32();
            break;
          }
          case 29: {
            LeftHp = input.ReadFloat();
            break;
          }
          case 37: {
            RightHp = input.ReadFloat();
            break;
          }
          case 40: {
            OriginEntityId = input.ReadUInt32();
            break;
          }
          case 50: {
            EffectName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ThunderNailSyncData : pb::IMessage<ThunderNailSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ThunderNailSyncData> _parser = new pb::MessageParser<ThunderNailSyncData>(() => new ThunderNailSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ThunderNailSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThunderNailSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThunderNailSyncData(ThunderNailSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      completeMove_ = other.completeMove_;
      completePointTime_ = other.completePointTime_;
      minRadius_ = other.minRadius_;
      maxRadius_ = other.maxRadius_;
      lifeTime_ = other.lifeTime_;
      booming_ = other.booming_;
      completeBoom_ = other.completeBoom_;
      currRadius_ = other.currRadius_;
      boomEffectGroup_ = other.boomEffectGroup_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThunderNailSyncData Clone() {
      return new ThunderNailSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "complete_move" field.</summary>
    public const int CompleteMoveFieldNumber = 1;
    private bool completeMove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CompleteMove {
      get { if ((_hasBits0 & 1) != 0) { return completeMove_; } else { return false; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        completeMove_ = value;
      }
    }
    /// <summary>Gets whether the "complete_move" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCompleteMove {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "complete_move" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCompleteMoveDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "complete_move" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCompleteMove() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "complete_point_time" field.</summary>
    public const int CompletePointTimeFieldNumber = 2;
    private float completePointTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CompletePointTime {
      get { if ((_hasBits0 & 2) != 0) { return completePointTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        completePointTime_ = value;
      }
    }
    /// <summary>Gets whether the "complete_point_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCompletePointTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "complete_point_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCompletePointTimeDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "complete_point_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCompletePointTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "min_radius" field.</summary>
    public const int MinRadiusFieldNumber = 3;
    private float minRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinRadius {
      get { if ((_hasBits0 & 4) != 0) { return minRadius_; } else { return 0F; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        minRadius_ = value;
      }
    }
    /// <summary>Gets whether the "min_radius" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMinRadius {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "min_radius" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMinRadiusDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "min_radius" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMinRadius() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "max_radius" field.</summary>
    public const int MaxRadiusFieldNumber = 4;
    private float maxRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxRadius {
      get { if ((_hasBits0 & 8) != 0) { return maxRadius_; } else { return 0F; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        maxRadius_ = value;
      }
    }
    /// <summary>Gets whether the "max_radius" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxRadius {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "max_radius" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMaxRadiusDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "max_radius" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxRadius() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "life_time" field.</summary>
    public const int LifeTimeFieldNumber = 5;
    private float lifeTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LifeTime {
      get { if ((_hasBits0 & 16) != 0) { return lifeTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 16;
        lifeTime_ = value;
      }
    }
    /// <summary>Gets whether the "life_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLifeTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "life_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLifeTimeDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "life_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLifeTime() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "booming" field.</summary>
    public const int BoomingFieldNumber = 6;
    private bool booming_;
    /// <summary>
    ///正在爆炸中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Booming {
      get { if ((_hasBits0 & 32) != 0) { return booming_; } else { return false; } }
      set {
        _hasBits0 |= 32;
        _dirtyBits0 |= 32;
        booming_ = value;
      }
    }
    /// <summary>Gets whether the "booming" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBooming {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Gets whether the "booming" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBoomingDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "booming" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBooming() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "complete_boom" field.</summary>
    public const int CompleteBoomFieldNumber = 7;
    private bool completeBoom_;
    /// <summary>
    ///完成爆炸
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CompleteBoom {
      get { if ((_hasBits0 & 64) != 0) { return completeBoom_; } else { return false; } }
      set {
        _hasBits0 |= 64;
        _dirtyBits0 |= 64;
        completeBoom_ = value;
      }
    }
    /// <summary>Gets whether the "complete_boom" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCompleteBoom {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Gets whether the "complete_boom" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCompleteBoomDirty {
      get { return (_dirtyBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "complete_boom" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCompleteBoom() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "curr_radius" field.</summary>
    public const int CurrRadiusFieldNumber = 8;
    private float currRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CurrRadius {
      get { if ((_hasBits0 & 128) != 0) { return currRadius_; } else { return 0F; } }
      set {
        _hasBits0 |= 128;
        _dirtyBits0 |= 128;
        currRadius_ = value;
      }
    }
    /// <summary>Gets whether the "curr_radius" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrRadius {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Gets whether the "curr_radius" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCurrRadiusDirty {
      get { return (_dirtyBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "curr_radius" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrRadius() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "boom_effect_group" field.</summary>
    public const int BoomEffectGroupFieldNumber = 9;
    private static readonly pbc::MapField<uint, string>.Codec _map_boomEffectGroup_codec
        = new pbc::MapField<uint, string>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForString(18, ""), 74);
    private readonly pbc::MapField<uint, string> boomEffectGroup_ = new pbc::MapField<uint, string>();
    /// <summary>
    ///效果组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, string> BoomEffectGroup {
      get { return boomEffectGroup_; }
    }
    /// <summary>Gets whether the "boom_effect_group" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBoomEffectGroupDirty {
      get { return (_dirtyBits0 & 256) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ThunderNailSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ThunderNailSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CompleteMove != other.CompleteMove) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CompletePointTime, other.CompletePointTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinRadius, other.MinRadius)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxRadius, other.MaxRadius)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LifeTime, other.LifeTime)) return false;
      if (Booming != other.Booming) return false;
      if (CompleteBoom != other.CompleteBoom) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CurrRadius, other.CurrRadius)) return false;
      if (!BoomEffectGroup.Equals(other.BoomEffectGroup)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCompleteMove) hash ^= CompleteMove.GetHashCode();
      if (HasCompletePointTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CompletePointTime);
      if (HasMinRadius) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinRadius);
      if (HasMaxRadius) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxRadius);
      if (HasLifeTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LifeTime);
      if (HasBooming) hash ^= Booming.GetHashCode();
      if (HasCompleteBoom) hash ^= CompleteBoom.GetHashCode();
      if (HasCurrRadius) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CurrRadius);
      hash ^= BoomEffectGroup.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasCompleteMove)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCompleteMoveDirty)) {
        output.WriteRawTag(8);
        output.WriteBool(CompleteMove);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCompletePointTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCompletePointTimeDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(CompletePointTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMinRadius)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMinRadiusDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(MinRadius);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMaxRadius)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMaxRadiusDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(MaxRadius);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLifeTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLifeTimeDirty)) {
        output.WriteRawTag(45);
        output.WriteFloat(LifeTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBooming)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBoomingDirty)) {
        output.WriteRawTag(48);
        output.WriteBool(Booming);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCompleteBoom)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCompleteBoomDirty)) {
        output.WriteRawTag(56);
        output.WriteBool(CompleteBoom);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCurrRadius)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCurrRadiusDirty)) {
        output.WriteRawTag(69);
        output.WriteFloat(CurrRadius);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBoomEffectGroupDirty)) {
        boomEffectGroup_.WriteTo(output, _map_boomEffectGroup_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasCompleteMove)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCompleteMoveDirty)) {
        output.WriteRawTag(8);
        output.WriteBool(CompleteMove);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCompletePointTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCompletePointTimeDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(CompletePointTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMinRadius)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMinRadiusDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(MinRadius);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMaxRadius)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMaxRadiusDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(MaxRadius);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLifeTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLifeTimeDirty)) {
        output.WriteRawTag(45);
        output.WriteFloat(LifeTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBooming)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBoomingDirty)) {
        output.WriteRawTag(48);
        output.WriteBool(Booming);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCompleteBoom)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCompleteBoomDirty)) {
        output.WriteRawTag(56);
        output.WriteBool(CompleteBoom);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCurrRadius)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCurrRadiusDirty)) {
        output.WriteRawTag(69);
        output.WriteFloat(CurrRadius);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBoomEffectGroupDirty)) {
        boomEffectGroup_.WriteTo(ref output, _map_boomEffectGroup_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasCompleteMove)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCompleteMoveDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasCompletePointTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCompletePointTimeDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasMinRadius)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsMinRadiusDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasMaxRadius)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsMaxRadiusDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasLifeTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsLifeTimeDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasBooming)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsBoomingDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasCompleteBoom)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCompleteBoomDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasCurrRadius)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCurrRadiusDirty)) {
        size += 1 + 4;
      }
      if (BoomEffectGroup != null) {
        int msgSize = boomEffectGroup_.CalculateSize(_map_boomEffectGroup_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 256;
        } else {
          _dirtyBits0 &= ~256;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ThunderNailSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasCompleteMove) {
        CompleteMove = other.CompleteMove;
      }
      if (other.HasCompletePointTime) {
        CompletePointTime = other.CompletePointTime;
      }
      if (other.HasMinRadius) {
        MinRadius = other.MinRadius;
      }
      if (other.HasMaxRadius) {
        MaxRadius = other.MaxRadius;
      }
      if (other.HasLifeTime) {
        LifeTime = other.LifeTime;
      }
      if (other.HasBooming) {
        Booming = other.Booming;
      }
      if (other.HasCompleteBoom) {
        CompleteBoom = other.CompleteBoom;
      }
      if (other.HasCurrRadius) {
        CurrRadius = other.CurrRadius;
      }
      foreach (var key in other.boomEffectGroup_.DeleteList) {
        boomEffectGroup_.Remove(key);
      }
      foreach (var pair in other.boomEffectGroup_) {
        boomEffectGroup_[pair.Key] = pair.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CompleteMove = input.ReadBool();
            break;
          }
          case 21: {
            CompletePointTime = input.ReadFloat();
            break;
          }
          case 29: {
            MinRadius = input.ReadFloat();
            break;
          }
          case 37: {
            MaxRadius = input.ReadFloat();
            break;
          }
          case 45: {
            LifeTime = input.ReadFloat();
            break;
          }
          case 48: {
            Booming = input.ReadBool();
            break;
          }
          case 56: {
            CompleteBoom = input.ReadBool();
            break;
          }
          case 69: {
            CurrRadius = input.ReadFloat();
            break;
          }
          case 74: {
            boomEffectGroup_.AddEntriesFrom(input, _map_boomEffectGroup_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CompleteMove = input.ReadBool();
            break;
          }
          case 21: {
            CompletePointTime = input.ReadFloat();
            break;
          }
          case 29: {
            MinRadius = input.ReadFloat();
            break;
          }
          case 37: {
            MaxRadius = input.ReadFloat();
            break;
          }
          case 45: {
            LifeTime = input.ReadFloat();
            break;
          }
          case 48: {
            Booming = input.ReadBool();
            break;
          }
          case 56: {
            CompleteBoom = input.ReadBool();
            break;
          }
          case 69: {
            CurrRadius = input.ReadFloat();
            break;
          }
          case 74: {
            boomEffectGroup_.AddEntriesFrom(ref input, _map_boomEffectGroup_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HookPointSyncData : pb::IMessage<HookPointSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HookPointSyncData> _parser = new pb::MessageParser<HookPointSyncData>(() => new HookPointSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HookPointSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HookPointSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HookPointSyncData(HookPointSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      limitRadius_ = other.limitRadius_;
      fromEntityId_ = other.fromEntityId_;
      effectRadius_ = other.effectRadius_;
      canHook_ = other.canHook_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HookPointSyncData Clone() {
      return new HookPointSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "limit_radius" field.</summary>
    public const int LimitRadiusFieldNumber = 1;
    private float limitRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LimitRadius {
      get { if ((_hasBits0 & 1) != 0) { return limitRadius_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        limitRadius_ = value;
      }
    }
    /// <summary>Gets whether the "limit_radius" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLimitRadius {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "limit_radius" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLimitRadiusDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "limit_radius" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLimitRadius() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "from_entity_id" field.</summary>
    public const int FromEntityIdFieldNumber = 2;
    private uint fromEntityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FromEntityId {
      get { if ((_hasBits0 & 2) != 0) { return fromEntityId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        fromEntityId_ = value;
      }
    }
    /// <summary>Gets whether the "from_entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFromEntityId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "from_entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFromEntityIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "from_entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFromEntityId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "effect_radius" field.</summary>
    public const int EffectRadiusFieldNumber = 3;
    private float effectRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EffectRadius {
      get { if ((_hasBits0 & 4) != 0) { return effectRadius_; } else { return 0F; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        effectRadius_ = value;
      }
    }
    /// <summary>Gets whether the "effect_radius" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEffectRadius {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "effect_radius" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEffectRadiusDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "effect_radius" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEffectRadius() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "can_hook" field.</summary>
    public const int CanHookFieldNumber = 4;
    private bool canHook_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanHook {
      get { if ((_hasBits0 & 8) != 0) { return canHook_; } else { return false; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        canHook_ = value;
      }
    }
    /// <summary>Gets whether the "can_hook" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCanHook {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "can_hook" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCanHookDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "can_hook" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCanHook() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HookPointSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HookPointSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LimitRadius, other.LimitRadius)) return false;
      if (FromEntityId != other.FromEntityId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EffectRadius, other.EffectRadius)) return false;
      if (CanHook != other.CanHook) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLimitRadius) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LimitRadius);
      if (HasFromEntityId) hash ^= FromEntityId.GetHashCode();
      if (HasEffectRadius) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EffectRadius);
      if (HasCanHook) hash ^= CanHook.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasLimitRadius)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLimitRadiusDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(LimitRadius);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFromEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFromEntityIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(FromEntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEffectRadius)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEffectRadiusDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(EffectRadius);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCanHook)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCanHookDirty)) {
        output.WriteRawTag(32);
        output.WriteBool(CanHook);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasLimitRadius)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLimitRadiusDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(LimitRadius);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFromEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFromEntityIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(FromEntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEffectRadius)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEffectRadiusDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(EffectRadius);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCanHook)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCanHookDirty)) {
        output.WriteRawTag(32);
        output.WriteBool(CanHook);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasLimitRadius)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsLimitRadiusDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasFromEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsFromEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FromEntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasEffectRadius)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEffectRadiusDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasCanHook)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCanHookDirty)) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HookPointSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasLimitRadius) {
        LimitRadius = other.LimitRadius;
      }
      if (other.HasFromEntityId) {
        FromEntityId = other.FromEntityId;
      }
      if (other.HasEffectRadius) {
        EffectRadius = other.EffectRadius;
      }
      if (other.HasCanHook) {
        CanHook = other.CanHook;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            LimitRadius = input.ReadFloat();
            break;
          }
          case 16: {
            FromEntityId = input.ReadUInt32();
            break;
          }
          case 29: {
            EffectRadius = input.ReadFloat();
            break;
          }
          case 32: {
            CanHook = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            LimitRadius = input.ReadFloat();
            break;
          }
          case 16: {
            FromEntityId = input.ReadUInt32();
            break;
          }
          case 29: {
            EffectRadius = input.ReadFloat();
            break;
          }
          case 32: {
            CanHook = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SealingLineSyncData : pb::IMessage<SealingLineSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SealingLineSyncData> _parser = new pb::MessageParser<SealingLineSyncData>(() => new SealingLineSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SealingLineSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SealingLineSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SealingLineSyncData(SealingLineSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      length_ = other.length_;
      createTime_ = other.createTime_;
      disable_ = other.disable_;
      speed_ = other.speed_;
      ownerId_ = other.ownerId_;
      height_ = other.height_;
      targetPostion_ = other.HasTargetPostion ? other.targetPostion_.Clone() : null;
      leftSide_ = other.leftSide_;
      hitTime_ = other.hitTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SealingLineSyncData Clone() {
      return new SealingLineSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 1;
    private float length_;
    /// <summary>
    ///线的长度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Length {
      get { if ((_hasBits0 & 1) != 0) { return length_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        length_ = value;
      }
    }
    /// <summary>Gets whether the "length" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLength {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "length" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLengthDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "length" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLength() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 2;
    private float createTime_;
    /// <summary>
    ///创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CreateTime {
      get { if ((_hasBits0 & 2) != 0) { return createTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        createTime_ = value;
      }
    }
    /// <summary>Gets whether the "create_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCreateTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "create_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCreateTimeDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "create_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCreateTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "disable" field.</summary>
    public const int DisableFieldNumber = 3;
    private bool disable_;
    /// <summary>
    ///失效用于围成的时候表现和暂留
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Disable {
      get { if ((_hasBits0 & 4) != 0) { return disable_; } else { return false; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        disable_ = value;
      }
    }
    /// <summary>Gets whether the "disable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDisable {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "disable" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDisableDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "disable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDisable() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 4;
    private float speed_;
    /// <summary>
    ///创建速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { if ((_hasBits0 & 8) != 0) { return speed_; } else { return 0F; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        speed_ = value;
      }
    }
    /// <summary>Gets whether the "speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSpeed {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "speed" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSpeedDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSpeed() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "owner_id" field.</summary>
    public const int OwnerIdFieldNumber = 5;
    private uint ownerId_;
    /// <summary>
    ///释放者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OwnerId {
      get { if ((_hasBits0 & 16) != 0) { return ownerId_; } else { return 0; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 16;
        ownerId_ = value;
      }
    }
    /// <summary>Gets whether the "owner_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOwnerId {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "owner_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOwnerIdDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "owner_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOwnerId() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 6;
    private float height_;
    /// <summary>
    ///高度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Height {
      get { if ((_hasBits0 & 32) != 0) { return height_; } else { return 0F; } }
      set {
        _hasBits0 |= 32;
        _dirtyBits0 |= 32;
        height_ = value;
      }
    }
    /// <summary>Gets whether the "height" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeight {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Gets whether the "height" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHeightDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "height" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeight() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "target_postion" field.</summary>
    public const int TargetPostionFieldNumber = 7;
    private global::Protocol.Float3 targetPostion_;
    /// <summary>
    ///交汇位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 TargetPostion {
      get { return targetPostion_; }
      set {
        targetPostion_ = value;
      }
    }
    /// <summary>Gets whether the target_postion field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetPostion {
      get { return targetPostion_ != null; }
    }
    /// <summary>Clears the value of the target_postion field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetPostion() {
      targetPostion_ = null;
    }
    /// <summary>Gets whether the "target_postion" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTargetPostionDirty {
      get { return (_dirtyBits0 & 64) != 0; }
    }

    /// <summary>Field number for the "left_side" field.</summary>
    public const int LeftSideFieldNumber = 8;
    private bool leftSide_;
    /// <summary>
    ///左边阻挡，反之右边阻挡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LeftSide {
      get { if ((_hasBits0 & 64) != 0) { return leftSide_; } else { return false; } }
      set {
        _hasBits0 |= 64;
        _dirtyBits0 |= 128;
        leftSide_ = value;
      }
    }
    /// <summary>Gets whether the "left_side" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeftSide {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Gets whether the "left_side" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLeftSideDirty {
      get { return (_dirtyBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "left_side" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeftSide() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "hit_time" field.</summary>
    public const int HitTimeFieldNumber = 9;
    private float hitTime_;
    /// <summary>
    ///打击时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HitTime {
      get { if ((_hasBits0 & 128) != 0) { return hitTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 128;
        _dirtyBits0 |= 256;
        hitTime_ = value;
      }
    }
    /// <summary>Gets whether the "hit_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHitTime {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Gets whether the "hit_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHitTimeDirty {
      get { return (_dirtyBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "hit_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHitTime() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SealingLineSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SealingLineSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Length, other.Length)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CreateTime, other.CreateTime)) return false;
      if (Disable != other.Disable) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (OwnerId != other.OwnerId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Height, other.Height)) return false;
      if (!object.Equals(TargetPostion, other.TargetPostion)) return false;
      if (LeftSide != other.LeftSide) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HitTime, other.HitTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLength) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Length);
      if (HasCreateTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CreateTime);
      if (HasDisable) hash ^= Disable.GetHashCode();
      if (HasSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (HasOwnerId) hash ^= OwnerId.GetHashCode();
      if (HasHeight) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Height);
      if (HasTargetPostion) hash ^= TargetPostion.GetHashCode();
      if (HasLeftSide) hash ^= LeftSide.GetHashCode();
      if (HasHitTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HitTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasLength)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLengthDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(Length);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCreateTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCreateTimeDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(CreateTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDisable)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDisableDirty)) {
        output.WriteRawTag(24);
        output.WriteBool(Disable);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSpeed)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSpeedDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(Speed);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOwnerId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOwnerIdDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(OwnerId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHeight)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeightDirty)) {
        output.WriteRawTag(53);
        output.WriteFloat(Height);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTargetPostion)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTargetPostionDirty)) {
        output.WriteRawTag(58);
        output.WriteMessage(TargetPostion);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLeftSide)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLeftSideDirty)) {
        output.WriteRawTag(64);
        output.WriteBool(LeftSide);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHitTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHitTimeDirty)) {
        output.WriteRawTag(77);
        output.WriteFloat(HitTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasLength)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLengthDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(Length);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCreateTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCreateTimeDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(CreateTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDisable)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDisableDirty)) {
        output.WriteRawTag(24);
        output.WriteBool(Disable);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSpeed)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSpeedDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(Speed);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOwnerId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOwnerIdDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(OwnerId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHeight)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeightDirty)) {
        output.WriteRawTag(53);
        output.WriteFloat(Height);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTargetPostion)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTargetPostionDirty)) {
        output.WriteRawTag(58);
        output.WriteMessage(TargetPostion);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLeftSide)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLeftSideDirty)) {
        output.WriteRawTag(64);
        output.WriteBool(LeftSide);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHitTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHitTimeDirty)) {
        output.WriteRawTag(77);
        output.WriteFloat(HitTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasLength)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsLengthDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasCreateTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCreateTimeDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasDisable)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsDisableDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasSpeed)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSpeedDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasOwnerId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsOwnerIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OwnerId);
      }
      if ((scope == pb.WriteScope.FULL && HasHeight)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsHeightDirty)) {
        size += 1 + 4;
      }
      if (HasTargetPostion) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(TargetPostion, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 64;
        } else {
          _dirtyBits0 &= ~64;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasLeftSide)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsLeftSideDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasHitTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsHitTimeDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SealingLineSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasLength) {
        Length = other.Length;
      }
      if (other.HasCreateTime) {
        CreateTime = other.CreateTime;
      }
      if (other.HasDisable) {
        Disable = other.Disable;
      }
      if (other.HasSpeed) {
        Speed = other.Speed;
      }
      if (other.HasOwnerId) {
        OwnerId = other.OwnerId;
      }
      if (other.HasHeight) {
        Height = other.Height;
      }
      if (other.HasTargetPostion) {
        if (!HasTargetPostion) {
          TargetPostion = new global::Protocol.Float3();
        }
        TargetPostion.MergeFrom(other.TargetPostion);
      }
      if (other.HasLeftSide) {
        LeftSide = other.LeftSide;
      }
      if (other.HasHitTime) {
        HitTime = other.HitTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Length = input.ReadFloat();
            break;
          }
          case 21: {
            CreateTime = input.ReadFloat();
            break;
          }
          case 24: {
            Disable = input.ReadBool();
            break;
          }
          case 37: {
            Speed = input.ReadFloat();
            break;
          }
          case 40: {
            OwnerId = input.ReadUInt32();
            break;
          }
          case 53: {
            Height = input.ReadFloat();
            break;
          }
          case 58: {
            if (!HasTargetPostion) {
              TargetPostion = new global::Protocol.Float3();
            }
            input.ReadMessage(TargetPostion);
            break;
          }
          case 64: {
            LeftSide = input.ReadBool();
            break;
          }
          case 77: {
            HitTime = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Length = input.ReadFloat();
            break;
          }
          case 21: {
            CreateTime = input.ReadFloat();
            break;
          }
          case 24: {
            Disable = input.ReadBool();
            break;
          }
          case 37: {
            Speed = input.ReadFloat();
            break;
          }
          case 40: {
            OwnerId = input.ReadUInt32();
            break;
          }
          case 53: {
            Height = input.ReadFloat();
            break;
          }
          case 58: {
            if (!HasTargetPostion) {
              TargetPostion = new global::Protocol.Float3();
            }
            input.ReadMessage(TargetPostion);
            break;
          }
          case 64: {
            LeftSide = input.ReadBool();
            break;
          }
          case 77: {
            HitTime = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SealingPointSyncData : pb::IMessage<SealingPointSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SealingPointSyncData> _parser = new pb::MessageParser<SealingPointSyncData>(() => new SealingPointSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SealingPointSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SealingPointSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SealingPointSyncData(SealingPointSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      ownerId_ = other.ownerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SealingPointSyncData Clone() {
      return new SealingPointSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "owner_id" field.</summary>
    public const int OwnerIdFieldNumber = 1;
    private uint ownerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OwnerId {
      get { if ((_hasBits0 & 1) != 0) { return ownerId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        ownerId_ = value;
      }
    }
    /// <summary>Gets whether the "owner_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOwnerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "owner_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOwnerIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "owner_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOwnerId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SealingPointSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SealingPointSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OwnerId != other.OwnerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOwnerId) hash ^= OwnerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasOwnerId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOwnerIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(OwnerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasOwnerId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOwnerIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(OwnerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasOwnerId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsOwnerIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OwnerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SealingPointSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasOwnerId) {
        OwnerId = other.OwnerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OwnerId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OwnerId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ParalysisSyncData : pb::IMessage<ParalysisSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ParalysisSyncData> _parser = new pb::MessageParser<ParalysisSyncData>(() => new ParalysisSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParalysisSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParalysisSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParalysisSyncData(ParalysisSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      isParalysis_ = other.isParalysis_;
      paralysisValue_ = other.paralysisValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParalysisSyncData Clone() {
      return new ParalysisSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "is_paralysis" field.</summary>
    public const int IsParalysisFieldNumber = 1;
    private bool isParalysis_;
    /// <summary>
    ///是否瘫痪
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsParalysis {
      get { if ((_hasBits0 & 1) != 0) { return isParalysis_; } else { return false; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        isParalysis_ = value;
      }
    }
    /// <summary>Gets whether the "is_paralysis" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsParalysis {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "is_paralysis" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIsParalysisDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_paralysis" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsParalysis() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "paralysis_value" field.</summary>
    public const int ParalysisValueFieldNumber = 2;
    private float paralysisValue_;
    /// <summary>
    ///瘫痪值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ParalysisValue {
      get { if ((_hasBits0 & 2) != 0) { return paralysisValue_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        paralysisValue_ = value;
      }
    }
    /// <summary>Gets whether the "paralysis_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParalysisValue {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "paralysis_value" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsParalysisValueDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "paralysis_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParalysisValue() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParalysisSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParalysisSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsParalysis != other.IsParalysis) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ParalysisValue, other.ParalysisValue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIsParalysis) hash ^= IsParalysis.GetHashCode();
      if (HasParalysisValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ParalysisValue);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasIsParalysis)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsParalysisDirty)) {
        output.WriteRawTag(8);
        output.WriteBool(IsParalysis);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasParalysisValue)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsParalysisValueDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(ParalysisValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasIsParalysis)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsParalysisDirty)) {
        output.WriteRawTag(8);
        output.WriteBool(IsParalysis);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasParalysisValue)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsParalysisValueDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(ParalysisValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasIsParalysis)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIsParalysisDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasParalysisValue)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsParalysisValueDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParalysisSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasIsParalysis) {
        IsParalysis = other.IsParalysis;
      }
      if (other.HasParalysisValue) {
        ParalysisValue = other.ParalysisValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsParalysis = input.ReadBool();
            break;
          }
          case 21: {
            ParalysisValue = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsParalysis = input.ReadBool();
            break;
          }
          case 21: {
            ParalysisValue = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///升岩壁
  /// </summary>
  public sealed partial class MagicWallSyncData : pb::IMessage<MagicWallSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MagicWallSyncData> _parser = new pb::MessageParser<MagicWallSyncData>(() => new MagicWallSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MagicWallSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MagicWallSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MagicWallSyncData(MagicWallSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      collider_ = other.HasCollider ? other.collider_.Clone() : null;
      endTime_ = other.endTime_;
      finalTargetY_ = other.finalTargetY_;
      realCollider_ = other.HasRealCollider ? other.realCollider_.Clone() : null;
      originEntityId_ = other.originEntityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MagicWallSyncData Clone() {
      return new MagicWallSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "collider" field.</summary>
    public const int ColliderFieldNumber = 1;
    private global::Protocol.BoxColliderData collider_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.BoxColliderData Collider {
      get { return collider_; }
      set {
        collider_ = value;
      }
    }
    /// <summary>Gets whether the collider field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCollider {
      get { return collider_ != null; }
    }
    /// <summary>Clears the value of the collider field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCollider() {
      collider_ = null;
    }
    /// <summary>Gets whether the "collider" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsColliderDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private float endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EndTime {
      get { if ((_hasBits0 & 1) != 0) { return endTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 2;
        endTime_ = value;
      }
    }
    /// <summary>Gets whether the "end_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEndTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "end_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEndTimeDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "end_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEndTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "final_target_y" field.</summary>
    public const int FinalTargetYFieldNumber = 3;
    private float finalTargetY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FinalTargetY {
      get { if ((_hasBits0 & 2) != 0) { return finalTargetY_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 4;
        finalTargetY_ = value;
      }
    }
    /// <summary>Gets whether the "final_target_y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFinalTargetY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "final_target_y" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFinalTargetYDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "final_target_y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFinalTargetY() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "real_collider" field.</summary>
    public const int RealColliderFieldNumber = 4;
    private global::Protocol.BoxColliderData realCollider_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.BoxColliderData RealCollider {
      get { return realCollider_; }
      set {
        realCollider_ = value;
      }
    }
    /// <summary>Gets whether the real_collider field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRealCollider {
      get { return realCollider_ != null; }
    }
    /// <summary>Clears the value of the real_collider field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRealCollider() {
      realCollider_ = null;
    }
    /// <summary>Gets whether the "real_collider" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRealColliderDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }

    /// <summary>Field number for the "origin_entity_id" field.</summary>
    public const int OriginEntityIdFieldNumber = 5;
    private uint originEntityId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OriginEntityId {
      get { if ((_hasBits0 & 4) != 0) { return originEntityId_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 16;
        originEntityId_ = value;
      }
    }
    /// <summary>Gets whether the "origin_entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginEntityId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "origin_entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOriginEntityIdDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "origin_entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginEntityId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MagicWallSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MagicWallSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Collider, other.Collider)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EndTime, other.EndTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FinalTargetY, other.FinalTargetY)) return false;
      if (!object.Equals(RealCollider, other.RealCollider)) return false;
      if (OriginEntityId != other.OriginEntityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCollider) hash ^= Collider.GetHashCode();
      if (HasEndTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EndTime);
      if (HasFinalTargetY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FinalTargetY);
      if (HasRealCollider) hash ^= RealCollider.GetHashCode();
      if (HasOriginEntityId) hash ^= OriginEntityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasCollider)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsColliderDirty)) {
        output.WriteRawTag(10);
        output.WriteMessage(Collider);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEndTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEndTimeDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(EndTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFinalTargetY)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFinalTargetYDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(FinalTargetY);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasRealCollider)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRealColliderDirty)) {
        output.WriteRawTag(34);
        output.WriteMessage(RealCollider);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOriginEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOriginEntityIdDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(OriginEntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasCollider)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsColliderDirty)) {
        output.WriteRawTag(10);
        output.WriteMessage(Collider);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEndTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEndTimeDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(EndTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFinalTargetY)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFinalTargetYDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(FinalTargetY);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasRealCollider)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRealColliderDirty)) {
        output.WriteRawTag(34);
        output.WriteMessage(RealCollider);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOriginEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOriginEntityIdDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(OriginEntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if (HasCollider) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Collider, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 1;
        } else {
          _dirtyBits0 &= ~1;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasEndTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEndTimeDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasFinalTargetY)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsFinalTargetYDirty)) {
        size += 1 + 4;
      }
      if (HasRealCollider) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(RealCollider, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 8;
        } else {
          _dirtyBits0 &= ~8;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasOriginEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsOriginEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OriginEntityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MagicWallSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasCollider) {
        if (!HasCollider) {
          Collider = new global::Protocol.BoxColliderData();
        }
        Collider.MergeFrom(other.Collider);
      }
      if (other.HasEndTime) {
        EndTime = other.EndTime;
      }
      if (other.HasFinalTargetY) {
        FinalTargetY = other.FinalTargetY;
      }
      if (other.HasRealCollider) {
        if (!HasRealCollider) {
          RealCollider = new global::Protocol.BoxColliderData();
        }
        RealCollider.MergeFrom(other.RealCollider);
      }
      if (other.HasOriginEntityId) {
        OriginEntityId = other.OriginEntityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasCollider) {
              Collider = new global::Protocol.BoxColliderData();
            }
            input.ReadMessage(Collider);
            break;
          }
          case 21: {
            EndTime = input.ReadFloat();
            break;
          }
          case 29: {
            FinalTargetY = input.ReadFloat();
            break;
          }
          case 34: {
            if (!HasRealCollider) {
              RealCollider = new global::Protocol.BoxColliderData();
            }
            input.ReadMessage(RealCollider);
            break;
          }
          case 40: {
            OriginEntityId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (!HasCollider) {
              Collider = new global::Protocol.BoxColliderData();
            }
            input.ReadMessage(Collider);
            break;
          }
          case 21: {
            EndTime = input.ReadFloat();
            break;
          }
          case 29: {
            FinalTargetY = input.ReadFloat();
            break;
          }
          case 34: {
            if (!HasRealCollider) {
              RealCollider = new global::Protocol.BoxColliderData();
            }
            input.ReadMessage(RealCollider);
            break;
          }
          case 40: {
            OriginEntityId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InvisibleSyncData : pb::IMessage<InvisibleSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InvisibleSyncData> _parser = new pb::MessageParser<InvisibleSyncData>(() => new InvisibleSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InvisibleSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvisibleSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvisibleSyncData(InvisibleSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      isInvisible_ = other.isInvisible_;
      lastInvisible_ = other.lastInvisible_;
      onHideAreaId_ = other.onHideAreaId_;
      onHideArea_ = other.onHideArea_;
      onHideAreaBreakTime_ = other.onHideAreaBreakTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvisibleSyncData Clone() {
      return new InvisibleSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "is_invisible" field.</summary>
    public const int IsInvisibleFieldNumber = 1;
    private bool isInvisible_;
    /// <summary>
    ///是否是隐身
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInvisible {
      get { if ((_hasBits0 & 1) != 0) { return isInvisible_; } else { return false; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        isInvisible_ = value;
      }
    }
    /// <summary>Gets whether the "is_invisible" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsInvisible {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "is_invisible" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIsInvisibleDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_invisible" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsInvisible() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "last_invisible" field.</summary>
    public const int LastInvisibleFieldNumber = 2;
    private bool lastInvisible_;
    /// <summary>
    ///上一次隐身状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LastInvisible {
      get { if ((_hasBits0 & 2) != 0) { return lastInvisible_; } else { return false; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        lastInvisible_ = value;
      }
    }
    /// <summary>Gets whether the "last_invisible" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastInvisible {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "last_invisible" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLastInvisibleDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "last_invisible" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastInvisible() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "on_hide_area_id" field.</summary>
    public const int OnHideAreaIdFieldNumber = 3;
    private uint onHideAreaId_;
    /// <summary>
    ///在藏匿区内
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OnHideAreaId {
      get { if ((_hasBits0 & 4) != 0) { return onHideAreaId_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        onHideAreaId_ = value;
      }
    }
    /// <summary>Gets whether the "on_hide_area_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOnHideAreaId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "on_hide_area_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOnHideAreaIdDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "on_hide_area_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOnHideAreaId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "on_hide_area" field.</summary>
    public const int OnHideAreaFieldNumber = 4;
    private bool onHideArea_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OnHideArea {
      get { if ((_hasBits0 & 8) != 0) { return onHideArea_; } else { return false; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        onHideArea_ = value;
      }
    }
    /// <summary>Gets whether the "on_hide_area" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOnHideArea {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "on_hide_area" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOnHideAreaDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "on_hide_area" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOnHideArea() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "on_hide_area_break_time" field.</summary>
    public const int OnHideAreaBreakTimeFieldNumber = 5;
    private float onHideAreaBreakTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OnHideAreaBreakTime {
      get { if ((_hasBits0 & 16) != 0) { return onHideAreaBreakTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 16;
        onHideAreaBreakTime_ = value;
      }
    }
    /// <summary>Gets whether the "on_hide_area_break_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOnHideAreaBreakTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "on_hide_area_break_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOnHideAreaBreakTimeDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "on_hide_area_break_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOnHideAreaBreakTime() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InvisibleSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InvisibleSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsInvisible != other.IsInvisible) return false;
      if (LastInvisible != other.LastInvisible) return false;
      if (OnHideAreaId != other.OnHideAreaId) return false;
      if (OnHideArea != other.OnHideArea) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OnHideAreaBreakTime, other.OnHideAreaBreakTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIsInvisible) hash ^= IsInvisible.GetHashCode();
      if (HasLastInvisible) hash ^= LastInvisible.GetHashCode();
      if (HasOnHideAreaId) hash ^= OnHideAreaId.GetHashCode();
      if (HasOnHideArea) hash ^= OnHideArea.GetHashCode();
      if (HasOnHideAreaBreakTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OnHideAreaBreakTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasIsInvisible)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsInvisibleDirty)) {
        output.WriteRawTag(8);
        output.WriteBool(IsInvisible);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLastInvisible)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLastInvisibleDirty)) {
        output.WriteRawTag(16);
        output.WriteBool(LastInvisible);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOnHideAreaId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOnHideAreaIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(OnHideAreaId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOnHideArea)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOnHideAreaDirty)) {
        output.WriteRawTag(32);
        output.WriteBool(OnHideArea);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOnHideAreaBreakTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOnHideAreaBreakTimeDirty)) {
        output.WriteRawTag(45);
        output.WriteFloat(OnHideAreaBreakTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasIsInvisible)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsInvisibleDirty)) {
        output.WriteRawTag(8);
        output.WriteBool(IsInvisible);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLastInvisible)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLastInvisibleDirty)) {
        output.WriteRawTag(16);
        output.WriteBool(LastInvisible);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOnHideAreaId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOnHideAreaIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(OnHideAreaId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOnHideArea)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOnHideAreaDirty)) {
        output.WriteRawTag(32);
        output.WriteBool(OnHideArea);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOnHideAreaBreakTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOnHideAreaBreakTimeDirty)) {
        output.WriteRawTag(45);
        output.WriteFloat(OnHideAreaBreakTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasIsInvisible)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIsInvisibleDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasLastInvisible)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsLastInvisibleDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasOnHideAreaId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsOnHideAreaIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OnHideAreaId);
      }
      if ((scope == pb.WriteScope.FULL && HasOnHideArea)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsOnHideAreaDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasOnHideAreaBreakTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsOnHideAreaBreakTimeDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InvisibleSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasIsInvisible) {
        IsInvisible = other.IsInvisible;
      }
      if (other.HasLastInvisible) {
        LastInvisible = other.LastInvisible;
      }
      if (other.HasOnHideAreaId) {
        OnHideAreaId = other.OnHideAreaId;
      }
      if (other.HasOnHideArea) {
        OnHideArea = other.OnHideArea;
      }
      if (other.HasOnHideAreaBreakTime) {
        OnHideAreaBreakTime = other.OnHideAreaBreakTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsInvisible = input.ReadBool();
            break;
          }
          case 16: {
            LastInvisible = input.ReadBool();
            break;
          }
          case 24: {
            OnHideAreaId = input.ReadUInt32();
            break;
          }
          case 32: {
            OnHideArea = input.ReadBool();
            break;
          }
          case 45: {
            OnHideAreaBreakTime = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsInvisible = input.ReadBool();
            break;
          }
          case 16: {
            LastInvisible = input.ReadBool();
            break;
          }
          case 24: {
            OnHideAreaId = input.ReadUInt32();
            break;
          }
          case 32: {
            OnHideArea = input.ReadBool();
            break;
          }
          case 45: {
            OnHideAreaBreakTime = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StrengthSyncData : pb::IMessage<StrengthSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StrengthSyncData> _parser = new pb::MessageParser<StrengthSyncData>(() => new StrengthSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StrengthSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StrengthSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StrengthSyncData(StrengthSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      addValue_ = other.addValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StrengthSyncData Clone() {
      return new StrengthSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "add_value" field.</summary>
    public const int AddValueFieldNumber = 1;
    private float addValue_;
    /// <summary>
    ///体力增加值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AddValue {
      get { if ((_hasBits0 & 1) != 0) { return addValue_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        addValue_ = value;
      }
    }
    /// <summary>Gets whether the "add_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAddValue {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "add_value" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAddValueDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "add_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAddValue() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StrengthSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StrengthSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AddValue, other.AddValue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAddValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AddValue);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasAddValue)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAddValueDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(AddValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasAddValue)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAddValueDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(AddValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasAddValue)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsAddValueDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StrengthSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasAddValue) {
        AddValue = other.AddValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            AddValue = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            AddValue = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FireDiamondSyncData : pb::IMessage<FireDiamondSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FireDiamondSyncData> _parser = new pb::MessageParser<FireDiamondSyncData>(() => new FireDiamondSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FireDiamondSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FireDiamondSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FireDiamondSyncData(FireDiamondSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      power_ = other.power_;
      type_ = other.type_;
      fromEntityId_ = other.fromEntityId_;
      maxPower_ = other.maxPower_;
      baseDamage_ = other.baseDamage_;
      bombDamage_ = other.bombDamage_;
      aimSpeed_ = other.aimSpeed_;
      normalSpeed_ = other.normalSpeed_;
      decreaseMpSpeed_ = other.decreaseMpSpeed_;
      effectRadius_ = other.effectRadius_;
      followEntityId_ = other.followEntityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FireDiamondSyncData Clone() {
      return new FireDiamondSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 1;
    private float power_;
    /// <summary>
    ///聚集的能量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Power {
      get { if ((_hasBits0 & 1) != 0) { return power_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        power_ = value;
      }
    }
    /// <summary>Gets whether the "power" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPower {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "power" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPowerDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "power" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPower() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Protocol.FireDiamondType type_;
    /// <summary>
    ///炎玉状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.FireDiamondType Type {
      get { if ((_hasBits0 & 2) != 0) { return type_; } else { return global::Protocol.FireDiamondType.FdNone; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "type" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTypeDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "from_entity_id" field.</summary>
    public const int FromEntityIdFieldNumber = 3;
    private uint fromEntityId_;
    /// <summary>
    ///来源ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FromEntityId {
      get { if ((_hasBits0 & 4) != 0) { return fromEntityId_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        fromEntityId_ = value;
      }
    }
    /// <summary>Gets whether the "from_entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFromEntityId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "from_entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFromEntityIdDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "from_entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFromEntityId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "max_power" field.</summary>
    public const int MaxPowerFieldNumber = 4;
    private float maxPower_;
    /// <summary>
    ///最大能量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxPower {
      get { if ((_hasBits0 & 8) != 0) { return maxPower_; } else { return 0F; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        maxPower_ = value;
      }
    }
    /// <summary>Gets whether the "max_power" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxPower {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "max_power" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMaxPowerDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "max_power" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxPower() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "base_damage" field.</summary>
    public const int BaseDamageFieldNumber = 6;
    private float baseDamage_;
    /// <summary>
    ///基础伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BaseDamage {
      get { if ((_hasBits0 & 16) != 0) { return baseDamage_; } else { return 0F; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 16;
        baseDamage_ = value;
      }
    }
    /// <summary>Gets whether the "base_damage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBaseDamage {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "base_damage" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBaseDamageDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "base_damage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBaseDamage() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "bomb_damage" field.</summary>
    public const int BombDamageFieldNumber = 7;
    private float bombDamage_;
    /// <summary>
    ///爆炸基础伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BombDamage {
      get { if ((_hasBits0 & 32) != 0) { return bombDamage_; } else { return 0F; } }
      set {
        _hasBits0 |= 32;
        _dirtyBits0 |= 32;
        bombDamage_ = value;
      }
    }
    /// <summary>Gets whether the "bomb_damage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBombDamage {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Gets whether the "bomb_damage" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBombDamageDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "bomb_damage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBombDamage() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "aim_speed" field.</summary>
    public const int AimSpeedFieldNumber = 8;
    private float aimSpeed_;
    /// <summary>
    ///瞄准状态增长速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AimSpeed {
      get { if ((_hasBits0 & 64) != 0) { return aimSpeed_; } else { return 0F; } }
      set {
        _hasBits0 |= 64;
        _dirtyBits0 |= 64;
        aimSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "aim_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAimSpeed {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Gets whether the "aim_speed" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAimSpeedDirty {
      get { return (_dirtyBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "aim_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAimSpeed() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "normal_speed" field.</summary>
    public const int NormalSpeedFieldNumber = 9;
    private float normalSpeed_;
    /// <summary>
    ///放置状态增长速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NormalSpeed {
      get { if ((_hasBits0 & 128) != 0) { return normalSpeed_; } else { return 0F; } }
      set {
        _hasBits0 |= 128;
        _dirtyBits0 |= 128;
        normalSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "normal_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNormalSpeed {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Gets whether the "normal_speed" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNormalSpeedDirty {
      get { return (_dirtyBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "normal_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNormalSpeed() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "decrease_mp_speed" field.</summary>
    public const int DecreaseMpSpeedFieldNumber = 10;
    private float decreaseMpSpeed_;
    /// <summary>
    ///减神源力速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DecreaseMpSpeed {
      get { if ((_hasBits0 & 256) != 0) { return decreaseMpSpeed_; } else { return 0F; } }
      set {
        _hasBits0 |= 256;
        _dirtyBits0 |= 256;
        decreaseMpSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "decrease_mp_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDecreaseMpSpeed {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Gets whether the "decrease_mp_speed" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDecreaseMpSpeedDirty {
      get { return (_dirtyBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "decrease_mp_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDecreaseMpSpeed() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "effect_radius" field.</summary>
    public const int EffectRadiusFieldNumber = 11;
    private float effectRadius_;
    /// <summary>
    ///效果半径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EffectRadius {
      get { if ((_hasBits0 & 512) != 0) { return effectRadius_; } else { return 0F; } }
      set {
        _hasBits0 |= 512;
        _dirtyBits0 |= 512;
        effectRadius_ = value;
      }
    }
    /// <summary>Gets whether the "effect_radius" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEffectRadius {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Gets whether the "effect_radius" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEffectRadiusDirty {
      get { return (_dirtyBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "effect_radius" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEffectRadius() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "follow_entity_id" field.</summary>
    public const int FollowEntityIdFieldNumber = 12;
    private uint followEntityId_;
    /// <summary>
    ///被entity Catch走
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FollowEntityId {
      get { if ((_hasBits0 & 1024) != 0) { return followEntityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1024;
        _dirtyBits0 |= 1024;
        followEntityId_ = value;
      }
    }
    /// <summary>Gets whether the "follow_entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFollowEntityId {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Gets whether the "follow_entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFollowEntityIdDirty {
      get { return (_dirtyBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "follow_entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFollowEntityId() {
      _hasBits0 &= ~1024;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FireDiamondSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FireDiamondSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Power, other.Power)) return false;
      if (Type != other.Type) return false;
      if (FromEntityId != other.FromEntityId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxPower, other.MaxPower)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BaseDamage, other.BaseDamage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BombDamage, other.BombDamage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AimSpeed, other.AimSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NormalSpeed, other.NormalSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DecreaseMpSpeed, other.DecreaseMpSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EffectRadius, other.EffectRadius)) return false;
      if (FollowEntityId != other.FollowEntityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPower) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Power);
      if (HasType) hash ^= Type.GetHashCode();
      if (HasFromEntityId) hash ^= FromEntityId.GetHashCode();
      if (HasMaxPower) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxPower);
      if (HasBaseDamage) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BaseDamage);
      if (HasBombDamage) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BombDamage);
      if (HasAimSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AimSpeed);
      if (HasNormalSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NormalSpeed);
      if (HasDecreaseMpSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DecreaseMpSpeed);
      if (HasEffectRadius) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EffectRadius);
      if (HasFollowEntityId) hash ^= FollowEntityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasPower)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPowerDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(Power);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTypeDirty)) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFromEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFromEntityIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(FromEntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMaxPower)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMaxPowerDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(MaxPower);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBaseDamage)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBaseDamageDirty)) {
        output.WriteRawTag(53);
        output.WriteFloat(BaseDamage);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBombDamage)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBombDamageDirty)) {
        output.WriteRawTag(61);
        output.WriteFloat(BombDamage);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAimSpeed)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAimSpeedDirty)) {
        output.WriteRawTag(69);
        output.WriteFloat(AimSpeed);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNormalSpeed)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNormalSpeedDirty)) {
        output.WriteRawTag(77);
        output.WriteFloat(NormalSpeed);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDecreaseMpSpeed)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDecreaseMpSpeedDirty)) {
        output.WriteRawTag(85);
        output.WriteFloat(DecreaseMpSpeed);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEffectRadius)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEffectRadiusDirty)) {
        output.WriteRawTag(93);
        output.WriteFloat(EffectRadius);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFollowEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFollowEntityIdDirty)) {
        output.WriteRawTag(96);
        output.WriteUInt32(FollowEntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasPower)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPowerDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(Power);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTypeDirty)) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFromEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFromEntityIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(FromEntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMaxPower)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMaxPowerDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(MaxPower);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBaseDamage)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBaseDamageDirty)) {
        output.WriteRawTag(53);
        output.WriteFloat(BaseDamage);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBombDamage)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBombDamageDirty)) {
        output.WriteRawTag(61);
        output.WriteFloat(BombDamage);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAimSpeed)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAimSpeedDirty)) {
        output.WriteRawTag(69);
        output.WriteFloat(AimSpeed);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNormalSpeed)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNormalSpeedDirty)) {
        output.WriteRawTag(77);
        output.WriteFloat(NormalSpeed);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDecreaseMpSpeed)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDecreaseMpSpeedDirty)) {
        output.WriteRawTag(85);
        output.WriteFloat(DecreaseMpSpeed);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEffectRadius)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEffectRadiusDirty)) {
        output.WriteRawTag(93);
        output.WriteFloat(EffectRadius);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFollowEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFollowEntityIdDirty)) {
        output.WriteRawTag(96);
        output.WriteUInt32(FollowEntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasPower)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsPowerDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasType)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTypeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if ((scope == pb.WriteScope.FULL && HasFromEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsFromEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FromEntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasMaxPower)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsMaxPowerDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasBaseDamage)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsBaseDamageDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasBombDamage)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsBombDamageDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasAimSpeed)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsAimSpeedDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasNormalSpeed)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNormalSpeedDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasDecreaseMpSpeed)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsDecreaseMpSpeedDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasEffectRadius)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEffectRadiusDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasFollowEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsFollowEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FollowEntityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FireDiamondSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasPower) {
        Power = other.Power;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasFromEntityId) {
        FromEntityId = other.FromEntityId;
      }
      if (other.HasMaxPower) {
        MaxPower = other.MaxPower;
      }
      if (other.HasBaseDamage) {
        BaseDamage = other.BaseDamage;
      }
      if (other.HasBombDamage) {
        BombDamage = other.BombDamage;
      }
      if (other.HasAimSpeed) {
        AimSpeed = other.AimSpeed;
      }
      if (other.HasNormalSpeed) {
        NormalSpeed = other.NormalSpeed;
      }
      if (other.HasDecreaseMpSpeed) {
        DecreaseMpSpeed = other.DecreaseMpSpeed;
      }
      if (other.HasEffectRadius) {
        EffectRadius = other.EffectRadius;
      }
      if (other.HasFollowEntityId) {
        FollowEntityId = other.FollowEntityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Power = input.ReadFloat();
            break;
          }
          case 16: {
            Type = (global::Protocol.FireDiamondType) input.ReadEnum();
            break;
          }
          case 24: {
            FromEntityId = input.ReadUInt32();
            break;
          }
          case 37: {
            MaxPower = input.ReadFloat();
            break;
          }
          case 53: {
            BaseDamage = input.ReadFloat();
            break;
          }
          case 61: {
            BombDamage = input.ReadFloat();
            break;
          }
          case 69: {
            AimSpeed = input.ReadFloat();
            break;
          }
          case 77: {
            NormalSpeed = input.ReadFloat();
            break;
          }
          case 85: {
            DecreaseMpSpeed = input.ReadFloat();
            break;
          }
          case 93: {
            EffectRadius = input.ReadFloat();
            break;
          }
          case 96: {
            FollowEntityId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Power = input.ReadFloat();
            break;
          }
          case 16: {
            Type = (global::Protocol.FireDiamondType) input.ReadEnum();
            break;
          }
          case 24: {
            FromEntityId = input.ReadUInt32();
            break;
          }
          case 37: {
            MaxPower = input.ReadFloat();
            break;
          }
          case 53: {
            BaseDamage = input.ReadFloat();
            break;
          }
          case 61: {
            BombDamage = input.ReadFloat();
            break;
          }
          case 69: {
            AimSpeed = input.ReadFloat();
            break;
          }
          case 77: {
            NormalSpeed = input.ReadFloat();
            break;
          }
          case 85: {
            DecreaseMpSpeed = input.ReadFloat();
            break;
          }
          case 93: {
            EffectRadius = input.ReadFloat();
            break;
          }
          case 96: {
            FollowEntityId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BoatSyncData : pb::IMessage<BoatSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BoatSyncData> _parser = new pb::MessageParser<BoatSyncData>(() => new BoatSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoatSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoatSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoatSyncData(BoatSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      state_ = other.state_;
      action_ = other.action_;
      npcId_ = other.npcId_;
      wayMapId_ = other.wayMapId_;
      wayPointType_ = other.wayPointType_;
      npcMoveSpeed_ = other.npcMoveSpeed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoatSyncData Clone() {
      return new BoatSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Protocol.BoatState state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.BoatState State {
      get { if ((_hasBits0 & 1) != 0) { return state_; } else { return global::Protocol.BoatState.BsIdle; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "state" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStateDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 2;
    private int action_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Action {
      get { if ((_hasBits0 & 2) != 0) { return action_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        action_ = value;
      }
    }
    /// <summary>Gets whether the "action" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAction {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "action" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActionDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "action" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "npc_id" field.</summary>
    public const int NpcIdFieldNumber = 3;
    private uint npcId_;
    /// <summary>
    ///NPC的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NpcId {
      get { if ((_hasBits0 & 4) != 0) { return npcId_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        npcId_ = value;
      }
    }
    /// <summary>Gets whether the "npc_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNpcId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "npc_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNpcIdDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "npc_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNpcId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "way_map_id" field.</summary>
    public const int WayMapIdFieldNumber = 4;
    private uint wayMapId_;
    /// <summary>
    ///所属路点类型 0表示所有，TODO：其他可配置组合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WayMapId {
      get { if ((_hasBits0 & 8) != 0) { return wayMapId_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        wayMapId_ = value;
      }
    }
    /// <summary>Gets whether the "way_map_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWayMapId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "way_map_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWayMapIdDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "way_map_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWayMapId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "way_point_type" field.</summary>
    public const int WayPointTypeFieldNumber = 5;
    private uint wayPointType_;
    /// <summary>
    ///路点类型 0表示人，1代表船
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WayPointType {
      get { if ((_hasBits0 & 16) != 0) { return wayPointType_; } else { return 0; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 16;
        wayPointType_ = value;
      }
    }
    /// <summary>Gets whether the "way_point_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWayPointType {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "way_point_type" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWayPointTypeDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "way_point_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWayPointType() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "npc_move_speed" field.</summary>
    public const int NpcMoveSpeedFieldNumber = 6;
    private float npcMoveSpeed_;
    /// <summary>
    ///npc移动速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NpcMoveSpeed {
      get { if ((_hasBits0 & 32) != 0) { return npcMoveSpeed_; } else { return 0F; } }
      set {
        _hasBits0 |= 32;
        _dirtyBits0 |= 32;
        npcMoveSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "npc_move_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNpcMoveSpeed {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Gets whether the "npc_move_speed" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNpcMoveSpeedDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "npc_move_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNpcMoveSpeed() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoatSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoatSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (Action != other.Action) return false;
      if (NpcId != other.NpcId) return false;
      if (WayMapId != other.WayMapId) return false;
      if (WayPointType != other.WayPointType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NpcMoveSpeed, other.NpcMoveSpeed)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasState) hash ^= State.GetHashCode();
      if (HasAction) hash ^= Action.GetHashCode();
      if (HasNpcId) hash ^= NpcId.GetHashCode();
      if (HasWayMapId) hash ^= WayMapId.GetHashCode();
      if (HasWayPointType) hash ^= WayPointType.GetHashCode();
      if (HasNpcMoveSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NpcMoveSpeed);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStateDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAction)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsActionDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(Action);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNpcId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNpcIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(NpcId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasWayMapId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsWayMapIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(WayMapId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasWayPointType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsWayPointTypeDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(WayPointType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNpcMoveSpeed)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNpcMoveSpeedDirty)) {
        output.WriteRawTag(53);
        output.WriteFloat(NpcMoveSpeed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStateDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAction)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsActionDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(Action);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNpcId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNpcIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(NpcId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasWayMapId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsWayMapIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(WayMapId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasWayPointType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsWayPointTypeDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(WayPointType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNpcMoveSpeed)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNpcMoveSpeedDirty)) {
        output.WriteRawTag(53);
        output.WriteFloat(NpcMoveSpeed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasState)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsStateDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if ((scope == pb.WriteScope.FULL && HasAction)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsActionDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Action);
      }
      if ((scope == pb.WriteScope.FULL && HasNpcId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNpcIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcId);
      }
      if ((scope == pb.WriteScope.FULL && HasWayMapId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsWayMapIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WayMapId);
      }
      if ((scope == pb.WriteScope.FULL && HasWayPointType)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsWayPointTypeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WayPointType);
      }
      if ((scope == pb.WriteScope.FULL && HasNpcMoveSpeed)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNpcMoveSpeedDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoatSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasState) {
        State = other.State;
      }
      if (other.HasAction) {
        Action = other.Action;
      }
      if (other.HasNpcId) {
        NpcId = other.NpcId;
      }
      if (other.HasWayMapId) {
        WayMapId = other.WayMapId;
      }
      if (other.HasWayPointType) {
        WayPointType = other.WayPointType;
      }
      if (other.HasNpcMoveSpeed) {
        NpcMoveSpeed = other.NpcMoveSpeed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = (global::Protocol.BoatState) input.ReadEnum();
            break;
          }
          case 16: {
            Action = input.ReadInt32();
            break;
          }
          case 24: {
            NpcId = input.ReadUInt32();
            break;
          }
          case 32: {
            WayMapId = input.ReadUInt32();
            break;
          }
          case 40: {
            WayPointType = input.ReadUInt32();
            break;
          }
          case 53: {
            NpcMoveSpeed = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            State = (global::Protocol.BoatState) input.ReadEnum();
            break;
          }
          case 16: {
            Action = input.ReadInt32();
            break;
          }
          case 24: {
            NpcId = input.ReadUInt32();
            break;
          }
          case 32: {
            WayMapId = input.ReadUInt32();
            break;
          }
          case 40: {
            WayPointType = input.ReadUInt32();
            break;
          }
          case 53: {
            NpcMoveSpeed = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ShopSyncData : pb::IMessage<ShopSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ShopSyncData> _parser = new pb::MessageParser<ShopSyncData>(() => new ShopSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopSyncData(ShopSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      shopCfgId_ = other.shopCfgId_;
      shopName_ = other.shopName_;
      shopDesc_ = other.shopDesc_;
      npcId_ = other.npcId_;
      totalIncome_ = other.totalIncome_;
      saleItemDic_ = other.saleItemDic_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopSyncData Clone() {
      return new ShopSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "shop_cfg_id" field.</summary>
    public const int ShopCfgIdFieldNumber = 1;
    private uint shopCfgId_;
    /// <summary>
    ///shop cfg id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShopCfgId {
      get { if ((_hasBits0 & 1) != 0) { return shopCfgId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        shopCfgId_ = value;
      }
    }
    /// <summary>Gets whether the "shop_cfg_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShopCfgId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "shop_cfg_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShopCfgIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "shop_cfg_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShopCfgId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "shop_name" field.</summary>
    public const int ShopNameFieldNumber = 2;
    private string shopName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShopName {
      get { return shopName_ ?? ""; }
      set {
        shopName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "shop_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShopName {
      get { return shopName_ != null; }
    }
    /// <summary>Gets whether the "shop_name" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShopNameDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "shop_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShopName() {
      shopName_ = null;
    }

    /// <summary>Field number for the "shop_desc" field.</summary>
    public const int ShopDescFieldNumber = 3;
    private string shopDesc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShopDesc {
      get { return shopDesc_ ?? ""; }
      set {
        shopDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "shop_desc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShopDesc {
      get { return shopDesc_ != null; }
    }
    /// <summary>Gets whether the "shop_desc" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShopDescDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "shop_desc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShopDesc() {
      shopDesc_ = null;
    }

    /// <summary>Field number for the "npc_id" field.</summary>
    public const int NpcIdFieldNumber = 4;
    private uint npcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NpcId {
      get { if ((_hasBits0 & 2) != 0) { return npcId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 8;
        npcId_ = value;
      }
    }
    /// <summary>Gets whether the "npc_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNpcId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "npc_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNpcIdDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "npc_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNpcId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "total_income" field.</summary>
    public const int TotalIncomeFieldNumber = 5;
    private int totalIncome_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalIncome {
      get { if ((_hasBits0 & 4) != 0) { return totalIncome_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 16;
        totalIncome_ = value;
      }
    }
    /// <summary>Gets whether the "total_income" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTotalIncome {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "total_income" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTotalIncomeDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "total_income" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTotalIncome() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "sale_item_dic" field.</summary>
    public const int SaleItemDicFieldNumber = 6;
    private static readonly pbc::MapField<ulong, global::Protocol.SalePropItemData>.Codec _map_saleItemDic_codec
        = new pbc::MapField<ulong, global::Protocol.SalePropItemData>.Codec(pb::FieldCodec.ForUInt64(8, 0UL), pb::FieldCodec.ForMessage(18, global::Protocol.SalePropItemData.Parser), 50);
    private readonly pbc::MapField<ulong, global::Protocol.SalePropItemData> saleItemDic_ = new pbc::MapField<ulong, global::Protocol.SalePropItemData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, global::Protocol.SalePropItemData> SaleItemDic {
      get { return saleItemDic_; }
    }
    /// <summary>Gets whether the "sale_item_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSaleItemDicDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShopCfgId != other.ShopCfgId) return false;
      if (ShopName != other.ShopName) return false;
      if (ShopDesc != other.ShopDesc) return false;
      if (NpcId != other.NpcId) return false;
      if (TotalIncome != other.TotalIncome) return false;
      if (!SaleItemDic.Equals(other.SaleItemDic)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasShopCfgId) hash ^= ShopCfgId.GetHashCode();
      if (HasShopName) hash ^= ShopName.GetHashCode();
      if (HasShopDesc) hash ^= ShopDesc.GetHashCode();
      if (HasNpcId) hash ^= NpcId.GetHashCode();
      if (HasTotalIncome) hash ^= TotalIncome.GetHashCode();
      hash ^= SaleItemDic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasShopCfgId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsShopCfgIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(ShopCfgId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasShopName)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsShopNameDirty)) {
        output.WriteRawTag(18);
        output.WriteString(ShopName);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasShopDesc)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsShopDescDirty)) {
        output.WriteRawTag(26);
        output.WriteString(ShopDesc);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNpcId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNpcIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(NpcId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTotalIncome)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTotalIncomeDirty)) {
        output.WriteRawTag(40);
        output.WriteInt32(TotalIncome);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSaleItemDicDirty)) {
        saleItemDic_.WriteTo(output, _map_saleItemDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasShopCfgId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsShopCfgIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(ShopCfgId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasShopName)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsShopNameDirty)) {
        output.WriteRawTag(18);
        output.WriteString(ShopName);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasShopDesc)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsShopDescDirty)) {
        output.WriteRawTag(26);
        output.WriteString(ShopDesc);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNpcId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNpcIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(NpcId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTotalIncome)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTotalIncomeDirty)) {
        output.WriteRawTag(40);
        output.WriteInt32(TotalIncome);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSaleItemDicDirty)) {
        saleItemDic_.WriteTo(ref output, _map_saleItemDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasShopCfgId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsShopCfgIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShopCfgId);
      }
      if ((scope == pb.WriteScope.FULL && HasShopName)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsShopNameDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShopName);
      }
      if ((scope == pb.WriteScope.FULL && HasShopDesc)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsShopDescDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShopDesc);
      }
      if ((scope == pb.WriteScope.FULL && HasNpcId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNpcIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcId);
      }
      if ((scope == pb.WriteScope.FULL && HasTotalIncome)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTotalIncomeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalIncome);
      }
      if (SaleItemDic != null) {
        int msgSize = saleItemDic_.CalculateSize(_map_saleItemDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 32;
        } else {
          _dirtyBits0 &= ~32;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasShopCfgId) {
        ShopCfgId = other.ShopCfgId;
      }
      if (other.HasShopName) {
        ShopName = other.ShopName;
      }
      if (other.HasShopDesc) {
        ShopDesc = other.ShopDesc;
      }
      if (other.HasNpcId) {
        NpcId = other.NpcId;
      }
      if (other.HasTotalIncome) {
        TotalIncome = other.TotalIncome;
      }
      foreach (var key in other.saleItemDic_.DeleteList) {
        saleItemDic_.Remove(key);
      }
      foreach (var pair in other.saleItemDic_) {
        global::Protocol.SalePropItemData value;
        if(saleItemDic_.TryGetValue(pair.Key, out value)) {
          value.MergeFrom(pair.Value);
        }else{
          saleItemDic_.Add(pair.Key, pair.Value);
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShopCfgId = input.ReadUInt32();
            break;
          }
          case 18: {
            ShopName = input.ReadString();
            break;
          }
          case 26: {
            ShopDesc = input.ReadString();
            break;
          }
          case 32: {
            NpcId = input.ReadUInt32();
            break;
          }
          case 40: {
            TotalIncome = input.ReadInt32();
            break;
          }
          case 50: {
            saleItemDic_.AddEntriesFrom(input, _map_saleItemDic_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ShopCfgId = input.ReadUInt32();
            break;
          }
          case 18: {
            ShopName = input.ReadString();
            break;
          }
          case 26: {
            ShopDesc = input.ReadString();
            break;
          }
          case 32: {
            NpcId = input.ReadUInt32();
            break;
          }
          case 40: {
            TotalIncome = input.ReadInt32();
            break;
          }
          case 50: {
            saleItemDic_.AddEntriesFrom(ref input, _map_saleItemDic_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DropSyncData : pb::IMessage<DropSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DropSyncData> _parser = new pb::MessageParser<DropSyncData>(() => new DropSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DropSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropSyncData(DropSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      id_ = other.id_;
      areaId_ = other.areaId_;
      dropGroupId_ = other.dropGroupId_;
      propDataDic_ = other.propDataDic_.Clone();
      fromEntityId_ = other.fromEntityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropSyncData Clone() {
      return new DropSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "area_id" field.</summary>
    public const int AreaIdFieldNumber = 2;
    private uint areaId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AreaId {
      get { if ((_hasBits0 & 2) != 0) { return areaId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        areaId_ = value;
      }
    }
    /// <summary>Gets whether the "area_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAreaId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "area_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAreaIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "area_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAreaId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "drop_group_id" field.</summary>
    public const int DropGroupIdFieldNumber = 3;
    private uint dropGroupId_;
    /// <summary>
    /// 某一掉落组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DropGroupId {
      get { if ((_hasBits0 & 4) != 0) { return dropGroupId_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        dropGroupId_ = value;
      }
    }
    /// <summary>Gets whether the "drop_group_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDropGroupId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "drop_group_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDropGroupIdDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "drop_group_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDropGroupId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "prop_data_dic" field.</summary>
    public const int PropDataDicFieldNumber = 4;
    private static readonly pbc::MapField<ulong, global::Protocol.PropData>.Codec _map_propDataDic_codec
        = new pbc::MapField<ulong, global::Protocol.PropData>.Codec(pb::FieldCodec.ForUInt64(8, 0UL), pb::FieldCodec.ForMessage(18, global::Protocol.PropData.Parser), 34);
    private readonly pbc::MapField<ulong, global::Protocol.PropData> propDataDic_ = new pbc::MapField<ulong, global::Protocol.PropData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, global::Protocol.PropData> PropDataDic {
      get { return propDataDic_; }
    }
    /// <summary>Gets whether the "prop_data_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPropDataDicDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }

    /// <summary>Field number for the "from_entity_id" field.</summary>
    public const int FromEntityIdFieldNumber = 5;
    private uint fromEntityId_;
    /// <summary>
    ///掉落物的来源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FromEntityId {
      get { if ((_hasBits0 & 8) != 0) { return fromEntityId_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 16;
        fromEntityId_ = value;
      }
    }
    /// <summary>Gets whether the "from_entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFromEntityId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "from_entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFromEntityIdDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "from_entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFromEntityId() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DropSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DropSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (AreaId != other.AreaId) return false;
      if (DropGroupId != other.DropGroupId) return false;
      if (!PropDataDic.Equals(other.PropDataDic)) return false;
      if (FromEntityId != other.FromEntityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasAreaId) hash ^= AreaId.GetHashCode();
      if (HasDropGroupId) hash ^= DropGroupId.GetHashCode();
      hash ^= PropDataDic.GetHashCode();
      if (HasFromEntityId) hash ^= FromEntityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAreaId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAreaIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(AreaId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDropGroupId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDropGroupIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(DropGroupId);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropDataDicDirty)) {
        propDataDic_.WriteTo(output, _map_propDataDic_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFromEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFromEntityIdDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(FromEntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAreaId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAreaIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(AreaId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDropGroupId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDropGroupIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(DropGroupId);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropDataDicDirty)) {
        propDataDic_.WriteTo(ref output, _map_propDataDic_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFromEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFromEntityIdDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(FromEntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if ((scope == pb.WriteScope.FULL && HasAreaId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsAreaIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AreaId);
      }
      if ((scope == pb.WriteScope.FULL && HasDropGroupId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsDropGroupIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DropGroupId);
      }
      if (PropDataDic != null) {
        int msgSize = propDataDic_.CalculateSize(_map_propDataDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 8;
        } else {
          _dirtyBits0 &= ~8;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasFromEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsFromEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FromEntityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DropSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasAreaId) {
        AreaId = other.AreaId;
      }
      if (other.HasDropGroupId) {
        DropGroupId = other.DropGroupId;
      }
      foreach (var key in other.propDataDic_.DeleteList) {
        propDataDic_.Remove(key);
      }
      foreach (var pair in other.propDataDic_) {
        global::Protocol.PropData value;
        if(propDataDic_.TryGetValue(pair.Key, out value)) {
          value.MergeFrom(pair.Value);
        }else{
          propDataDic_.Add(pair.Key, pair.Value);
        }
      }
      if (other.HasFromEntityId) {
        FromEntityId = other.FromEntityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            AreaId = input.ReadUInt32();
            break;
          }
          case 24: {
            DropGroupId = input.ReadUInt32();
            break;
          }
          case 34: {
            propDataDic_.AddEntriesFrom(input, _map_propDataDic_codec);
            break;
          }
          case 40: {
            FromEntityId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            AreaId = input.ReadUInt32();
            break;
          }
          case 24: {
            DropGroupId = input.ReadUInt32();
            break;
          }
          case 34: {
            propDataDic_.AddEntriesFrom(ref input, _map_propDataDic_codec);
            break;
          }
          case 40: {
            FromEntityId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BossSyncData : pb::IMessage<BossSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BossSyncData> _parser = new pb::MessageParser<BossSyncData>(() => new BossSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BossSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BossSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BossSyncData(BossSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      bossId_ = other.bossId_;
      skinId_ = other.skinId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BossSyncData Clone() {
      return new BossSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "boss_id" field.</summary>
    public const int BossIdFieldNumber = 1;
    private uint bossId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BossId {
      get { if ((_hasBits0 & 1) != 0) { return bossId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        bossId_ = value;
      }
    }
    /// <summary>Gets whether the "boss_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBossId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "boss_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBossIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "boss_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBossId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "skin_id" field.</summary>
    public const int SkinIdFieldNumber = 2;
    private uint skinId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkinId {
      get { if ((_hasBits0 & 2) != 0) { return skinId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        skinId_ = value;
      }
    }
    /// <summary>Gets whether the "skin_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSkinId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "skin_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkinIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "skin_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSkinId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BossSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BossSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BossId != other.BossId) return false;
      if (SkinId != other.SkinId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBossId) hash ^= BossId.GetHashCode();
      if (HasSkinId) hash ^= SkinId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasBossId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBossIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(BossId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkinId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkinIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkinId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasBossId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBossIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(BossId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkinId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkinIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkinId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasBossId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsBossIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BossId);
      }
      if ((scope == pb.WriteScope.FULL && HasSkinId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSkinIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkinId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BossSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasBossId) {
        BossId = other.BossId;
      }
      if (other.HasSkinId) {
        SkinId = other.SkinId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BossId = input.ReadUInt32();
            break;
          }
          case 16: {
            SkinId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BossId = input.ReadUInt32();
            break;
          }
          case 16: {
            SkinId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SalePropItemData : pb::IMessage<SalePropItemData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SalePropItemData> _parser = new pb::MessageParser<SalePropItemData>(() => new SalePropItemData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SalePropItemData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SalePropItemData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SalePropItemData(SalePropItemData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      id_ = other.id_;
      index_ = other.index_;
      propCfgId_ = other.propCfgId_;
      stockNum_ = other.stockNum_;
      totalNum_ = other.totalNum_;
      unitPrice_ = other.unitPrice_;
      owner_ = other.owner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SalePropItemData Clone() {
      return new SalePropItemData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    /// <summary>
    ///instanceId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return 0UL; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { if ((_hasBits0 & 2) != 0) { return index_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        index_ = value;
      }
    }
    /// <summary>Gets whether the "index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIndex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "index" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIndexDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIndex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "prop_cfg_id" field.</summary>
    public const int PropCfgIdFieldNumber = 3;
    private uint propCfgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PropCfgId {
      get { if ((_hasBits0 & 4) != 0) { return propCfgId_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        propCfgId_ = value;
      }
    }
    /// <summary>Gets whether the "prop_cfg_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPropCfgId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "prop_cfg_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPropCfgIdDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "prop_cfg_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPropCfgId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "stock_num" field.</summary>
    public const int StockNumFieldNumber = 4;
    private int stockNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StockNum {
      get { if ((_hasBits0 & 8) != 0) { return stockNum_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        stockNum_ = value;
      }
    }
    /// <summary>Gets whether the "stock_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStockNum {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "stock_num" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStockNumDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "stock_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStockNum() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "total_num" field.</summary>
    public const int TotalNumFieldNumber = 5;
    private int totalNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalNum {
      get { if ((_hasBits0 & 16) != 0) { return totalNum_; } else { return 0; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 16;
        totalNum_ = value;
      }
    }
    /// <summary>Gets whether the "total_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTotalNum {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "total_num" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTotalNumDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "total_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTotalNum() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "unit_price" field.</summary>
    public const int UnitPriceFieldNumber = 6;
    private int unitPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnitPrice {
      get { if ((_hasBits0 & 32) != 0) { return unitPrice_; } else { return 0; } }
      set {
        _hasBits0 |= 32;
        _dirtyBits0 |= 32;
        unitPrice_ = value;
      }
    }
    /// <summary>Gets whether the "unit_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUnitPrice {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Gets whether the "unit_price" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUnitPriceDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "unit_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUnitPrice() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 7;
    private string owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_ ?? ""; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "owner" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOwner {
      get { return owner_ != null; }
    }
    /// <summary>Gets whether the "owner" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOwnerDirty {
      get { return (_dirtyBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "owner" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOwner() {
      owner_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SalePropItemData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SalePropItemData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Index != other.Index) return false;
      if (PropCfgId != other.PropCfgId) return false;
      if (StockNum != other.StockNum) return false;
      if (TotalNum != other.TotalNum) return false;
      if (UnitPrice != other.UnitPrice) return false;
      if (Owner != other.Owner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasIndex) hash ^= Index.GetHashCode();
      if (HasPropCfgId) hash ^= PropCfgId.GetHashCode();
      if (HasStockNum) hash ^= StockNum.GetHashCode();
      if (HasTotalNum) hash ^= TotalNum.GetHashCode();
      if (HasUnitPrice) hash ^= UnitPrice.GetHashCode();
      if (HasOwner) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIndex)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIndexDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPropCfgId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropCfgIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(PropCfgId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStockNum)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStockNumDirty)) {
        output.WriteRawTag(32);
        output.WriteInt32(StockNum);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTotalNum)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTotalNumDirty)) {
        output.WriteRawTag(40);
        output.WriteInt32(TotalNum);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasUnitPrice)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUnitPriceDirty)) {
        output.WriteRawTag(48);
        output.WriteInt32(UnitPrice);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOwner)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOwnerDirty)) {
        output.WriteRawTag(58);
        output.WriteString(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIndex)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIndexDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPropCfgId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropCfgIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(PropCfgId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStockNum)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStockNumDirty)) {
        output.WriteRawTag(32);
        output.WriteInt32(StockNum);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTotalNum)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTotalNumDirty)) {
        output.WriteRawTag(40);
        output.WriteInt32(TotalNum);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasUnitPrice)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUnitPriceDirty)) {
        output.WriteRawTag(48);
        output.WriteInt32(UnitPrice);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOwner)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOwnerDirty)) {
        output.WriteRawTag(58);
        output.WriteString(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if ((scope == pb.WriteScope.FULL && HasIndex)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIndexDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if ((scope == pb.WriteScope.FULL && HasPropCfgId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsPropCfgIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PropCfgId);
      }
      if ((scope == pb.WriteScope.FULL && HasStockNum)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsStockNumDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StockNum);
      }
      if ((scope == pb.WriteScope.FULL && HasTotalNum)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTotalNumDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNum);
      }
      if ((scope == pb.WriteScope.FULL && HasUnitPrice)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsUnitPriceDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitPrice);
      }
      if ((scope == pb.WriteScope.FULL && HasOwner)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsOwnerDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SalePropItemData other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasIndex) {
        Index = other.Index;
      }
      if (other.HasPropCfgId) {
        PropCfgId = other.PropCfgId;
      }
      if (other.HasStockNum) {
        StockNum = other.StockNum;
      }
      if (other.HasTotalNum) {
        TotalNum = other.TotalNum;
      }
      if (other.HasUnitPrice) {
        UnitPrice = other.UnitPrice;
      }
      if (other.HasOwner) {
        Owner = other.Owner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
          case 24: {
            PropCfgId = input.ReadUInt32();
            break;
          }
          case 32: {
            StockNum = input.ReadInt32();
            break;
          }
          case 40: {
            TotalNum = input.ReadInt32();
            break;
          }
          case 48: {
            UnitPrice = input.ReadInt32();
            break;
          }
          case 58: {
            Owner = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
          case 24: {
            PropCfgId = input.ReadUInt32();
            break;
          }
          case 32: {
            StockNum = input.ReadInt32();
            break;
          }
          case 40: {
            TotalNum = input.ReadInt32();
            break;
          }
          case 48: {
            UnitPrice = input.ReadInt32();
            break;
          }
          case 58: {
            Owner = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AntidoteScatterSyncData : pb::IMessage<AntidoteScatterSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AntidoteScatterSyncData> _parser = new pb::MessageParser<AntidoteScatterSyncData>(() => new AntidoteScatterSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AntidoteScatterSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AntidoteScatterSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AntidoteScatterSyncData(AntidoteScatterSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      state_ = other.state_;
      scatterNum_ = other.scatterNum_;
      scatterMax_ = other.scatterMax_;
      collider_ = other.HasCollider ? other.collider_.Clone() : null;
      igniteId_ = other.igniteId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AntidoteScatterSyncData Clone() {
      return new AntidoteScatterSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Protocol.ScatterState state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ScatterState State {
      get { if ((_hasBits0 & 1) != 0) { return state_; } else { return global::Protocol.ScatterState.SsNone; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "state" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStateDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "scatter_num" field.</summary>
    public const int ScatterNumFieldNumber = 2;
    private float scatterNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScatterNum {
      get { if ((_hasBits0 & 2) != 0) { return scatterNum_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        scatterNum_ = value;
      }
    }
    /// <summary>Gets whether the "scatter_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScatterNum {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "scatter_num" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsScatterNumDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "scatter_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScatterNum() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "scatter_max" field.</summary>
    public const int ScatterMaxFieldNumber = 3;
    private float scatterMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScatterMax {
      get { if ((_hasBits0 & 4) != 0) { return scatterMax_; } else { return 0F; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        scatterMax_ = value;
      }
    }
    /// <summary>Gets whether the "scatter_max" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScatterMax {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "scatter_max" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsScatterMaxDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "scatter_max" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScatterMax() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "collider" field.</summary>
    public const int ColliderFieldNumber = 5;
    private global::Protocol.BoxColliderData collider_;
    /// <summary>
    /// 碰撞盒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.BoxColliderData Collider {
      get { return collider_; }
      set {
        collider_ = value;
      }
    }
    /// <summary>Gets whether the collider field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCollider {
      get { return collider_ != null; }
    }
    /// <summary>Clears the value of the collider field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCollider() {
      collider_ = null;
    }
    /// <summary>Gets whether the "collider" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsColliderDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }

    /// <summary>Field number for the "ignite_id" field.</summary>
    public const int IgniteIdFieldNumber = 6;
    private uint igniteId_;
    /// <summary>
    /// 点火参入者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgniteId {
      get { if ((_hasBits0 & 8) != 0) { return igniteId_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 16;
        igniteId_ = value;
      }
    }
    /// <summary>Gets whether the "ignite_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIgniteId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "ignite_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIgniteIdDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "ignite_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIgniteId() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AntidoteScatterSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AntidoteScatterSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScatterNum, other.ScatterNum)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScatterMax, other.ScatterMax)) return false;
      if (!object.Equals(Collider, other.Collider)) return false;
      if (IgniteId != other.IgniteId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasState) hash ^= State.GetHashCode();
      if (HasScatterNum) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScatterNum);
      if (HasScatterMax) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScatterMax);
      if (HasCollider) hash ^= Collider.GetHashCode();
      if (HasIgniteId) hash ^= IgniteId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStateDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasScatterNum)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsScatterNumDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(ScatterNum);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasScatterMax)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsScatterMaxDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(ScatterMax);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCollider)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsColliderDirty)) {
        output.WriteRawTag(42);
        output.WriteMessage(Collider);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIgniteId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIgniteIdDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(IgniteId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStateDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasScatterNum)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsScatterNumDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(ScatterNum);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasScatterMax)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsScatterMaxDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(ScatterMax);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCollider)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsColliderDirty)) {
        output.WriteRawTag(42);
        output.WriteMessage(Collider);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIgniteId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIgniteIdDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(IgniteId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasState)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsStateDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if ((scope == pb.WriteScope.FULL && HasScatterNum)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsScatterNumDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasScatterMax)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsScatterMaxDirty)) {
        size += 1 + 4;
      }
      if (HasCollider) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Collider, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 8;
        } else {
          _dirtyBits0 &= ~8;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasIgniteId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIgniteIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IgniteId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AntidoteScatterSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasState) {
        State = other.State;
      }
      if (other.HasScatterNum) {
        ScatterNum = other.ScatterNum;
      }
      if (other.HasScatterMax) {
        ScatterMax = other.ScatterMax;
      }
      if (other.HasCollider) {
        if (!HasCollider) {
          Collider = new global::Protocol.BoxColliderData();
        }
        Collider.MergeFrom(other.Collider);
      }
      if (other.HasIgniteId) {
        IgniteId = other.IgniteId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = (global::Protocol.ScatterState) input.ReadEnum();
            break;
          }
          case 21: {
            ScatterNum = input.ReadFloat();
            break;
          }
          case 29: {
            ScatterMax = input.ReadFloat();
            break;
          }
          case 42: {
            if (!HasCollider) {
              Collider = new global::Protocol.BoxColliderData();
            }
            input.ReadMessage(Collider);
            break;
          }
          case 48: {
            IgniteId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            State = (global::Protocol.ScatterState) input.ReadEnum();
            break;
          }
          case 21: {
            ScatterNum = input.ReadFloat();
            break;
          }
          case 29: {
            ScatterMax = input.ReadFloat();
            break;
          }
          case 42: {
            if (!HasCollider) {
              Collider = new global::Protocol.BoxColliderData();
            }
            input.ReadMessage(Collider);
            break;
          }
          case 48: {
            IgniteId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// --------------------action---------------------------------	
  /// </summary>
  public sealed partial class ActionBoatMoveMsg : pb::IMessage<ActionBoatMoveMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActionBoatMoveMsg> _parser = new pb::MessageParser<ActionBoatMoveMsg>(() => new ActionBoatMoveMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionBoatMoveMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionBoatMoveMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionBoatMoveMsg(ActionBoatMoveMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionBoatMoveMsg Clone() {
      return new ActionBoatMoveMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionBoatMoveMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionBoatMoveMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionBoatMoveMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TagSyncData : pb::IMessage<TagSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TagSyncData> _parser = new pb::MessageParser<TagSyncData>(() => new TagSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TagSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TagSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TagSyncData(TagSyncData other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      tempValueDic_ = other.tempValueDic_.Clone();
      tagDic_ = other.tagDic_.Clone();
      talentDic_ = other.talentDic_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TagSyncData Clone() {
      return new TagSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "temp_value_dic" field.</summary>
    public const int TempValueDicFieldNumber = 1;
    private static readonly pbc::MapField<uint, int>.Codec _map_tempValueDic_codec
        = new pbc::MapField<uint, int>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 10);
    private readonly pbc::MapField<uint, int> tempValueDic_ = new pbc::MapField<uint, int>();
    /// <summary>
    /// tag标签列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, int> TempValueDic {
      get { return tempValueDic_; }
    }
    /// <summary>Gets whether the "temp_value_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTempValueDicDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "tag_dic" field.</summary>
    public const int TagDicFieldNumber = 2;
    private static readonly pbc::MapField<int, int>.Codec _map_tagDic_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 18);
    private readonly pbc::MapField<int, int> tagDic_ = new pbc::MapField<int, int>();
    /// <summary>
    /// tag列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> TagDic {
      get { return tagDic_; }
    }
    /// <summary>Gets whether the "tag_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTagDicDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    /// <summary>Field number for the "talent_dic" field.</summary>
    public const int TalentDicFieldNumber = 3;
    private static readonly pbc::MapField<int, int>.Codec _map_talentDic_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 26);
    private readonly pbc::MapField<int, int> talentDic_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 天赋列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> TalentDic {
      get { return talentDic_; }
    }
    /// <summary>Gets whether the "talent_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTalentDicDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TagSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TagSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!TempValueDic.Equals(other.TempValueDic)) return false;
      if (!TagDic.Equals(other.TagDic)) return false;
      if (!TalentDic.Equals(other.TalentDic)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= TempValueDic.GetHashCode();
      hash ^= TagDic.GetHashCode();
      hash ^= TalentDic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTempValueDicDirty)) {
        tempValueDic_.WriteTo(output, _map_tempValueDic_codec);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTagDicDirty)) {
        tagDic_.WriteTo(output, _map_tagDic_codec);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTalentDicDirty)) {
        talentDic_.WriteTo(output, _map_talentDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTempValueDicDirty)) {
        tempValueDic_.WriteTo(ref output, _map_tempValueDic_codec);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTagDicDirty)) {
        tagDic_.WriteTo(ref output, _map_tagDic_codec);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTalentDicDirty)) {
        talentDic_.WriteTo(ref output, _map_talentDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if (TempValueDic != null) {
        int msgSize = tempValueDic_.CalculateSize(_map_tempValueDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 1;
        } else {
          _dirtyBits0 &= ~1;
        }
      }
      if (TagDic != null) {
        int msgSize = tagDic_.CalculateSize(_map_tagDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 2;
        } else {
          _dirtyBits0 &= ~2;
        }
      }
      if (TalentDic != null) {
        int msgSize = talentDic_.CalculateSize(_map_talentDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 4;
        } else {
          _dirtyBits0 &= ~4;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TagSyncData other) {
      if (other == null) {
        return;
      }
      foreach (var key in other.tempValueDic_.DeleteList) {
        tempValueDic_.Remove(key);
      }
      foreach (var pair in other.tempValueDic_) {
        tempValueDic_[pair.Key] = pair.Value;
      }
      foreach (var key in other.tagDic_.DeleteList) {
        tagDic_.Remove(key);
      }
      foreach (var pair in other.tagDic_) {
        tagDic_[pair.Key] = pair.Value;
      }
      foreach (var key in other.talentDic_.DeleteList) {
        talentDic_.Remove(key);
      }
      foreach (var pair in other.talentDic_) {
        talentDic_[pair.Key] = pair.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tempValueDic_.AddEntriesFrom(input, _map_tempValueDic_codec);
            break;
          }
          case 18: {
            tagDic_.AddEntriesFrom(input, _map_tagDic_codec);
            break;
          }
          case 26: {
            talentDic_.AddEntriesFrom(input, _map_talentDic_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            tempValueDic_.AddEntriesFrom(ref input, _map_tempValueDic_codec);
            break;
          }
          case 18: {
            tagDic_.AddEntriesFrom(ref input, _map_tagDic_codec);
            break;
          }
          case 26: {
            talentDic_.AddEntriesFrom(ref input, _map_talentDic_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StateAttributeSyncData : pb::IMessage<StateAttributeSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StateAttributeSyncData> _parser = new pb::MessageParser<StateAttributeSyncData>(() => new StateAttributeSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StateAttributeSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateAttributeSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateAttributeSyncData(StateAttributeSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      subState_ = other.subState_;
      index_ = other.index_;
      defaultState_ = other.defaultState_;
      attrDic_ = other.attrDic_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateAttributeSyncData Clone() {
      return new StateAttributeSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "sub_state" field.</summary>
    public const int SubStateFieldNumber = 1;
    private uint subState_;
    /// <summary>
    ///主状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubState {
      get { if ((_hasBits0 & 1) != 0) { return subState_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        subState_ = value;
      }
    }
    /// <summary>Gets whether the "sub_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubState {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "sub_state" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSubStateDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "sub_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubState() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    /// <summary>
    ///子状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { if ((_hasBits0 & 2) != 0) { return index_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        index_ = value;
      }
    }
    /// <summary>Gets whether the "index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIndex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "index" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIndexDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIndex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "default_state" field.</summary>
    public const int DefaultStateFieldNumber = 3;
    private uint defaultState_;
    /// <summary>
    ///默认状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DefaultState {
      get { if ((_hasBits0 & 4) != 0) { return defaultState_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        defaultState_ = value;
      }
    }
    /// <summary>Gets whether the "default_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDefaultState {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "default_state" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDefaultStateDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "default_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDefaultState() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "attr_dic" field.</summary>
    public const int AttrDicFieldNumber = 4;
    private static readonly pbc::MapField<uint, int>.Codec _map_attrDic_codec
        = new pbc::MapField<uint, int>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 34);
    private readonly pbc::MapField<uint, int> attrDic_ = new pbc::MapField<uint, int>();
    /// <summary>
    ///属性列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, int> AttrDic {
      get { return attrDic_; }
    }
    /// <summary>Gets whether the "attr_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttrDicDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StateAttributeSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StateAttributeSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubState != other.SubState) return false;
      if (Index != other.Index) return false;
      if (DefaultState != other.DefaultState) return false;
      if (!AttrDic.Equals(other.AttrDic)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSubState) hash ^= SubState.GetHashCode();
      if (HasIndex) hash ^= Index.GetHashCode();
      if (HasDefaultState) hash ^= DefaultState.GetHashCode();
      hash ^= AttrDic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasSubState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSubStateDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(SubState);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIndex)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIndexDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDefaultState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDefaultStateDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(DefaultState);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAttrDicDirty)) {
        attrDic_.WriteTo(output, _map_attrDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasSubState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSubStateDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(SubState);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIndex)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIndexDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDefaultState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDefaultStateDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(DefaultState);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAttrDicDirty)) {
        attrDic_.WriteTo(ref output, _map_attrDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasSubState)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSubStateDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubState);
      }
      if ((scope == pb.WriteScope.FULL && HasIndex)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIndexDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if ((scope == pb.WriteScope.FULL && HasDefaultState)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsDefaultStateDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DefaultState);
      }
      if (AttrDic != null) {
        int msgSize = attrDic_.CalculateSize(_map_attrDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 8;
        } else {
          _dirtyBits0 &= ~8;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StateAttributeSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasSubState) {
        SubState = other.SubState;
      }
      if (other.HasIndex) {
        Index = other.Index;
      }
      if (other.HasDefaultState) {
        DefaultState = other.DefaultState;
      }
      foreach (var key in other.attrDic_.DeleteList) {
        attrDic_.Remove(key);
      }
      foreach (var pair in other.attrDic_) {
        attrDic_[pair.Key] = pair.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SubState = input.ReadUInt32();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
          case 24: {
            DefaultState = input.ReadUInt32();
            break;
          }
          case 34: {
            attrDic_.AddEntriesFrom(input, _map_attrDic_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SubState = input.ReadUInt32();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
          case 24: {
            DefaultState = input.ReadUInt32();
            break;
          }
          case 34: {
            attrDic_.AddEntriesFrom(ref input, _map_attrDic_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LifeSyncData : pb::IMessage<LifeSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LifeSyncData> _parser = new pb::MessageParser<LifeSyncData>(() => new LifeSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LifeSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LifeSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LifeSyncData(LifeSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      dead_ = other.dead_;
      value_ = other.value_;
      baseValue_ = other.baseValue_;
      maxValue_ = other.maxValue_;
      lastChangeTime_ = other.lastChangeTime_;
      killerId_ = other.killerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LifeSyncData Clone() {
      return new LifeSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "dead" field.</summary>
    public const int DeadFieldNumber = 1;
    private bool dead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Dead {
      get { if ((_hasBits0 & 1) != 0) { return dead_; } else { return false; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        dead_ = value;
      }
    }
    /// <summary>Gets whether the "dead" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDead {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "dead" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDeadDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "dead" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDead() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { if ((_hasBits0 & 2) != 0) { return value_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        value_ = value;
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "value" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsValueDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "base_value" field.</summary>
    public const int BaseValueFieldNumber = 3;
    private float baseValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BaseValue {
      get { if ((_hasBits0 & 4) != 0) { return baseValue_; } else { return 0F; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        baseValue_ = value;
      }
    }
    /// <summary>Gets whether the "base_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBaseValue {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "base_value" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBaseValueDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "base_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBaseValue() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "max_value" field.</summary>
    public const int MaxValueFieldNumber = 4;
    private float maxValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxValue {
      get { if ((_hasBits0 & 8) != 0) { return maxValue_; } else { return 0F; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        maxValue_ = value;
      }
    }
    /// <summary>Gets whether the "max_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxValue {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "max_value" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMaxValueDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "max_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxValue() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "last_change_time" field.</summary>
    public const int LastChangeTimeFieldNumber = 5;
    private float lastChangeTime_;
    /// <summary>
    ///上一次属性改变时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LastChangeTime {
      get { if ((_hasBits0 & 16) != 0) { return lastChangeTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 16;
        lastChangeTime_ = value;
      }
    }
    /// <summary>Gets whether the "last_change_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastChangeTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "last_change_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLastChangeTimeDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "last_change_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastChangeTime() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "killer_id" field.</summary>
    public const int KillerIdFieldNumber = 6;
    private uint killerId_;
    /// <summary>
    ///击杀者ID			
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KillerId {
      get { if ((_hasBits0 & 32) != 0) { return killerId_; } else { return 0; } }
      set {
        _hasBits0 |= 32;
        _dirtyBits0 |= 32;
        killerId_ = value;
      }
    }
    /// <summary>Gets whether the "killer_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKillerId {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Gets whether the "killer_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsKillerIdDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "killer_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKillerId() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LifeSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LifeSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dead != other.Dead) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BaseValue, other.BaseValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxValue, other.MaxValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LastChangeTime, other.LastChangeTime)) return false;
      if (KillerId != other.KillerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDead) hash ^= Dead.GetHashCode();
      if (HasValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
      if (HasBaseValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BaseValue);
      if (HasMaxValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxValue);
      if (HasLastChangeTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LastChangeTime);
      if (HasKillerId) hash ^= KillerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasDead)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDeadDirty)) {
        output.WriteRawTag(8);
        output.WriteBool(Dead);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasValue)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsValueDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(Value);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBaseValue)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBaseValueDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(BaseValue);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMaxValue)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMaxValueDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(MaxValue);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLastChangeTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLastChangeTimeDirty)) {
        output.WriteRawTag(45);
        output.WriteFloat(LastChangeTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasKillerId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsKillerIdDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(KillerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasDead)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDeadDirty)) {
        output.WriteRawTag(8);
        output.WriteBool(Dead);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasValue)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsValueDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(Value);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBaseValue)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBaseValueDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(BaseValue);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMaxValue)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMaxValueDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(MaxValue);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLastChangeTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLastChangeTimeDirty)) {
        output.WriteRawTag(45);
        output.WriteFloat(LastChangeTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasKillerId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsKillerIdDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(KillerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasDead)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsDeadDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasValue)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsValueDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasBaseValue)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsBaseValueDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasMaxValue)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsMaxValueDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasLastChangeTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsLastChangeTimeDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasKillerId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsKillerIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KillerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LifeSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasDead) {
        Dead = other.Dead;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      if (other.HasBaseValue) {
        BaseValue = other.BaseValue;
      }
      if (other.HasMaxValue) {
        MaxValue = other.MaxValue;
      }
      if (other.HasLastChangeTime) {
        LastChangeTime = other.LastChangeTime;
      }
      if (other.HasKillerId) {
        KillerId = other.KillerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Dead = input.ReadBool();
            break;
          }
          case 21: {
            Value = input.ReadFloat();
            break;
          }
          case 29: {
            BaseValue = input.ReadFloat();
            break;
          }
          case 37: {
            MaxValue = input.ReadFloat();
            break;
          }
          case 45: {
            LastChangeTime = input.ReadFloat();
            break;
          }
          case 48: {
            KillerId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Dead = input.ReadBool();
            break;
          }
          case 21: {
            Value = input.ReadFloat();
            break;
          }
          case 29: {
            BaseValue = input.ReadFloat();
            break;
          }
          case 37: {
            MaxValue = input.ReadFloat();
            break;
          }
          case 45: {
            LastChangeTime = input.ReadFloat();
            break;
          }
          case 48: {
            KillerId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CharacterCtrlSyncData : pb::IMessage<CharacterCtrlSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CharacterCtrlSyncData> _parser = new pb::MessageParser<CharacterCtrlSyncData>(() => new CharacterCtrlSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterCtrlSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterCtrlSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterCtrlSyncData(CharacterCtrlSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      moveState_ = other.moveState_;
      moveAngle_ = other.moveAngle_;
      viewRow_ = other.viewRow_;
      viewPitch_ = other.viewPitch_;
      actionSpeed_ = other.actionSpeed_;
      disableMove_ = other.disableMove_;
      disableRotation_ = other.disableRotation_;
      moveController_ = other.moveController_;
      isStart_ = other.isStart_;
      width_ = other.width_;
      height_ = other.height_;
      disableHitBox_ = other.disableHitBox_;
      cancelTweenCameraAngle_ = other.cancelTweenCameraAngle_;
      viewDic_ = other.viewDic_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterCtrlSyncData Clone() {
      return new CharacterCtrlSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "move_state" field.</summary>
    public const int MoveStateFieldNumber = 1;
    private uint moveState_;
    /// <summary>
    ///是否在移动中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MoveState {
      get { if ((_hasBits0 & 1) != 0) { return moveState_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        moveState_ = value;
      }
    }
    /// <summary>Gets whether the "move_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMoveState {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "move_state" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMoveStateDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "move_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMoveState() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "move_angle" field.</summary>
    public const int MoveAngleFieldNumber = 2;
    private float moveAngle_;
    /// <summary>
    ///移动方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveAngle {
      get { if ((_hasBits0 & 2) != 0) { return moveAngle_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        moveAngle_ = value;
      }
    }
    /// <summary>Gets whether the "move_angle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMoveAngle {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "move_angle" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMoveAngleDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "move_angle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMoveAngle() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "view_row" field.</summary>
    public const int ViewRowFieldNumber = 3;
    private float viewRow_;
    /// <summary>
    ///观察位仰角
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ViewRow {
      get { if ((_hasBits0 & 4) != 0) { return viewRow_; } else { return 0F; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        viewRow_ = value;
      }
    }
    /// <summary>Gets whether the "view_row" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasViewRow {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "view_row" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsViewRowDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "view_row" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearViewRow() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "view_pitch" field.</summary>
    public const int ViewPitchFieldNumber = 4;
    private float viewPitch_;
    /// <summary>
    ///观察位偏航角
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ViewPitch {
      get { if ((_hasBits0 & 8) != 0) { return viewPitch_; } else { return 0F; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        viewPitch_ = value;
      }
    }
    /// <summary>Gets whether the "view_pitch" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasViewPitch {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "view_pitch" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsViewPitchDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "view_pitch" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearViewPitch() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "action_speed" field.</summary>
    public const int ActionSpeedFieldNumber = 5;
    private float actionSpeed_;
    /// <summary>
    ///动作速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ActionSpeed {
      get { if ((_hasBits0 & 16) != 0) { return actionSpeed_; } else { return 0F; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 16;
        actionSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "action_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasActionSpeed {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "action_speed" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActionSpeedDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "action_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearActionSpeed() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "disable_move" field.</summary>
    public const int DisableMoveFieldNumber = 6;
    private bool disableMove_;
    /// <summary>
    ///禁止移动（动画依旧会播放）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableMove {
      get { if ((_hasBits0 & 32) != 0) { return disableMove_; } else { return false; } }
      set {
        _hasBits0 |= 32;
        _dirtyBits0 |= 32;
        disableMove_ = value;
      }
    }
    /// <summary>Gets whether the "disable_move" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDisableMove {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Gets whether the "disable_move" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDisableMoveDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "disable_move" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDisableMove() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "disable_rotation" field.</summary>
    public const int DisableRotationFieldNumber = 7;
    private bool disableRotation_;
    /// <summary>
    ///禁止旋转（动画依旧会播放）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableRotation {
      get { if ((_hasBits0 & 64) != 0) { return disableRotation_; } else { return false; } }
      set {
        _hasBits0 |= 64;
        _dirtyBits0 |= 64;
        disableRotation_ = value;
      }
    }
    /// <summary>Gets whether the "disable_rotation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDisableRotation {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Gets whether the "disable_rotation" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDisableRotationDirty {
      get { return (_dirtyBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "disable_rotation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDisableRotation() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "move_controller" field.</summary>
    public const int MoveControllerFieldNumber = 8;
    private string moveController_;
    /// <summary>
    ///移动控制器，来自hero或者npc表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MoveController {
      get { return moveController_ ?? ""; }
      set {
        moveController_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "move_controller" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMoveController {
      get { return moveController_ != null; }
    }
    /// <summary>Gets whether the "move_controller" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMoveControllerDirty {
      get { return (_dirtyBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "move_controller" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMoveController() {
      moveController_ = null;
    }

    /// <summary>Field number for the "is_start" field.</summary>
    public const int IsStartFieldNumber = 9;
    private bool isStart_;
    /// <summary>
    ///是否处于起步
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStart {
      get { if ((_hasBits0 & 128) != 0) { return isStart_; } else { return false; } }
      set {
        _hasBits0 |= 128;
        _dirtyBits0 |= 256;
        isStart_ = value;
      }
    }
    /// <summary>Gets whether the "is_start" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsStart {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Gets whether the "is_start" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIsStartDirty {
      get { return (_dirtyBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "is_start" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsStart() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 10;
    private float width_;
    /// <summary>
    ///碰撞体宽度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Width {
      get { if ((_hasBits0 & 256) != 0) { return width_; } else { return 0F; } }
      set {
        _hasBits0 |= 256;
        _dirtyBits0 |= 512;
        width_ = value;
      }
    }
    /// <summary>Gets whether the "width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWidth {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Gets whether the "width" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWidthDirty {
      get { return (_dirtyBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWidth() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 11;
    private float height_;
    /// <summary>
    ///碰撞体高度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Height {
      get { if ((_hasBits0 & 512) != 0) { return height_; } else { return 0F; } }
      set {
        _hasBits0 |= 512;
        _dirtyBits0 |= 1024;
        height_ = value;
      }
    }
    /// <summary>Gets whether the "height" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeight {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Gets whether the "height" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHeightDirty {
      get { return (_dirtyBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "height" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeight() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "disable_hit_box" field.</summary>
    public const int DisableHitBoxFieldNumber = 12;
    private bool disableHitBox_;
    /// <summary>
    ///禁用受击盒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableHitBox {
      get { if ((_hasBits0 & 1024) != 0) { return disableHitBox_; } else { return false; } }
      set {
        _hasBits0 |= 1024;
        _dirtyBits0 |= 2048;
        disableHitBox_ = value;
      }
    }
    /// <summary>Gets whether the "disable_hit_box" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDisableHitBox {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Gets whether the "disable_hit_box" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDisableHitBoxDirty {
      get { return (_dirtyBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "disable_hit_box" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDisableHitBox() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "cancel_tween_camera_angle" field.</summary>
    public const int CancelTweenCameraAngleFieldNumber = 13;
    private bool cancelTweenCameraAngle_;
    /// <summary>
    ///取消缓动相机角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CancelTweenCameraAngle {
      get { if ((_hasBits0 & 2048) != 0) { return cancelTweenCameraAngle_; } else { return false; } }
      set {
        _hasBits0 |= 2048;
        _dirtyBits0 |= 4096;
        cancelTweenCameraAngle_ = value;
      }
    }
    /// <summary>Gets whether the "cancel_tween_camera_angle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCancelTweenCameraAngle {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Gets whether the "cancel_tween_camera_angle" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCancelTweenCameraAngleDirty {
      get { return (_dirtyBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "cancel_tween_camera_angle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCancelTweenCameraAngle() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "view_dic" field.</summary>
    public const int ViewDicFieldNumber = 14;
    private static readonly pbc::MapField<uint, uint>.Codec _map_viewDic_codec
        = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForUInt32(16, 0), 114);
    private readonly pbc::MapField<uint, uint> viewDic_ = new pbc::MapField<uint, uint>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, uint> ViewDic {
      get { return viewDic_; }
    }
    /// <summary>Gets whether the "view_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsViewDicDirty {
      get { return (_dirtyBits0 & 8192) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharacterCtrlSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterCtrlSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MoveState != other.MoveState) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveAngle, other.MoveAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ViewRow, other.ViewRow)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ViewPitch, other.ViewPitch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ActionSpeed, other.ActionSpeed)) return false;
      if (DisableMove != other.DisableMove) return false;
      if (DisableRotation != other.DisableRotation) return false;
      if (MoveController != other.MoveController) return false;
      if (IsStart != other.IsStart) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Width, other.Width)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Height, other.Height)) return false;
      if (DisableHitBox != other.DisableHitBox) return false;
      if (CancelTweenCameraAngle != other.CancelTweenCameraAngle) return false;
      if (!ViewDic.Equals(other.ViewDic)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMoveState) hash ^= MoveState.GetHashCode();
      if (HasMoveAngle) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveAngle);
      if (HasViewRow) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ViewRow);
      if (HasViewPitch) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ViewPitch);
      if (HasActionSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ActionSpeed);
      if (HasDisableMove) hash ^= DisableMove.GetHashCode();
      if (HasDisableRotation) hash ^= DisableRotation.GetHashCode();
      if (HasMoveController) hash ^= MoveController.GetHashCode();
      if (HasIsStart) hash ^= IsStart.GetHashCode();
      if (HasWidth) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Width);
      if (HasHeight) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Height);
      if (HasDisableHitBox) hash ^= DisableHitBox.GetHashCode();
      if (HasCancelTweenCameraAngle) hash ^= CancelTweenCameraAngle.GetHashCode();
      hash ^= ViewDic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasMoveState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMoveStateDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(MoveState);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMoveAngle)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMoveAngleDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(MoveAngle);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasViewRow)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsViewRowDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(ViewRow);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasViewPitch)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsViewPitchDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(ViewPitch);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasActionSpeed)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsActionSpeedDirty)) {
        output.WriteRawTag(45);
        output.WriteFloat(ActionSpeed);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDisableMove)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDisableMoveDirty)) {
        output.WriteRawTag(48);
        output.WriteBool(DisableMove);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDisableRotation)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDisableRotationDirty)) {
        output.WriteRawTag(56);
        output.WriteBool(DisableRotation);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMoveController)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMoveControllerDirty)) {
        output.WriteRawTag(66);
        output.WriteString(MoveController);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsStart)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsStartDirty)) {
        output.WriteRawTag(72);
        output.WriteBool(IsStart);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasWidth)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsWidthDirty)) {
        output.WriteRawTag(85);
        output.WriteFloat(Width);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHeight)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeightDirty)) {
        output.WriteRawTag(93);
        output.WriteFloat(Height);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDisableHitBox)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDisableHitBoxDirty)) {
        output.WriteRawTag(96);
        output.WriteBool(DisableHitBox);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCancelTweenCameraAngle)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCancelTweenCameraAngleDirty)) {
        output.WriteRawTag(104);
        output.WriteBool(CancelTweenCameraAngle);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsViewDicDirty)) {
        viewDic_.WriteTo(output, _map_viewDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasMoveState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMoveStateDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(MoveState);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMoveAngle)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMoveAngleDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(MoveAngle);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasViewRow)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsViewRowDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(ViewRow);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasViewPitch)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsViewPitchDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(ViewPitch);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasActionSpeed)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsActionSpeedDirty)) {
        output.WriteRawTag(45);
        output.WriteFloat(ActionSpeed);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDisableMove)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDisableMoveDirty)) {
        output.WriteRawTag(48);
        output.WriteBool(DisableMove);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDisableRotation)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDisableRotationDirty)) {
        output.WriteRawTag(56);
        output.WriteBool(DisableRotation);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMoveController)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMoveControllerDirty)) {
        output.WriteRawTag(66);
        output.WriteString(MoveController);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsStart)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsStartDirty)) {
        output.WriteRawTag(72);
        output.WriteBool(IsStart);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasWidth)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsWidthDirty)) {
        output.WriteRawTag(85);
        output.WriteFloat(Width);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHeight)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeightDirty)) {
        output.WriteRawTag(93);
        output.WriteFloat(Height);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDisableHitBox)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDisableHitBoxDirty)) {
        output.WriteRawTag(96);
        output.WriteBool(DisableHitBox);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCancelTweenCameraAngle)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCancelTweenCameraAngleDirty)) {
        output.WriteRawTag(104);
        output.WriteBool(CancelTweenCameraAngle);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsViewDicDirty)) {
        viewDic_.WriteTo(ref output, _map_viewDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasMoveState)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsMoveStateDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoveState);
      }
      if ((scope == pb.WriteScope.FULL && HasMoveAngle)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsMoveAngleDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasViewRow)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsViewRowDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasViewPitch)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsViewPitchDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasActionSpeed)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsActionSpeedDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasDisableMove)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsDisableMoveDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasDisableRotation)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsDisableRotationDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasMoveController)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsMoveControllerDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MoveController);
      }
      if ((scope == pb.WriteScope.FULL && HasIsStart)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIsStartDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasWidth)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsWidthDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasHeight)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsHeightDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasDisableHitBox)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsDisableHitBoxDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasCancelTweenCameraAngle)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCancelTweenCameraAngleDirty)) {
        size += 1 + 1;
      }
      if (ViewDic != null) {
        int msgSize = viewDic_.CalculateSize(_map_viewDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 8192;
        } else {
          _dirtyBits0 &= ~8192;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterCtrlSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasMoveState) {
        MoveState = other.MoveState;
      }
      if (other.HasMoveAngle) {
        MoveAngle = other.MoveAngle;
      }
      if (other.HasViewRow) {
        ViewRow = other.ViewRow;
      }
      if (other.HasViewPitch) {
        ViewPitch = other.ViewPitch;
      }
      if (other.HasActionSpeed) {
        ActionSpeed = other.ActionSpeed;
      }
      if (other.HasDisableMove) {
        DisableMove = other.DisableMove;
      }
      if (other.HasDisableRotation) {
        DisableRotation = other.DisableRotation;
      }
      if (other.HasMoveController) {
        MoveController = other.MoveController;
      }
      if (other.HasIsStart) {
        IsStart = other.IsStart;
      }
      if (other.HasWidth) {
        Width = other.Width;
      }
      if (other.HasHeight) {
        Height = other.Height;
      }
      if (other.HasDisableHitBox) {
        DisableHitBox = other.DisableHitBox;
      }
      if (other.HasCancelTweenCameraAngle) {
        CancelTweenCameraAngle = other.CancelTweenCameraAngle;
      }
      foreach (var key in other.viewDic_.DeleteList) {
        viewDic_.Remove(key);
      }
      foreach (var pair in other.viewDic_) {
        viewDic_[pair.Key] = pair.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MoveState = input.ReadUInt32();
            break;
          }
          case 21: {
            MoveAngle = input.ReadFloat();
            break;
          }
          case 29: {
            ViewRow = input.ReadFloat();
            break;
          }
          case 37: {
            ViewPitch = input.ReadFloat();
            break;
          }
          case 45: {
            ActionSpeed = input.ReadFloat();
            break;
          }
          case 48: {
            DisableMove = input.ReadBool();
            break;
          }
          case 56: {
            DisableRotation = input.ReadBool();
            break;
          }
          case 66: {
            MoveController = input.ReadString();
            break;
          }
          case 72: {
            IsStart = input.ReadBool();
            break;
          }
          case 85: {
            Width = input.ReadFloat();
            break;
          }
          case 93: {
            Height = input.ReadFloat();
            break;
          }
          case 96: {
            DisableHitBox = input.ReadBool();
            break;
          }
          case 104: {
            CancelTweenCameraAngle = input.ReadBool();
            break;
          }
          case 114: {
            viewDic_.AddEntriesFrom(input, _map_viewDic_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MoveState = input.ReadUInt32();
            break;
          }
          case 21: {
            MoveAngle = input.ReadFloat();
            break;
          }
          case 29: {
            ViewRow = input.ReadFloat();
            break;
          }
          case 37: {
            ViewPitch = input.ReadFloat();
            break;
          }
          case 45: {
            ActionSpeed = input.ReadFloat();
            break;
          }
          case 48: {
            DisableMove = input.ReadBool();
            break;
          }
          case 56: {
            DisableRotation = input.ReadBool();
            break;
          }
          case 66: {
            MoveController = input.ReadString();
            break;
          }
          case 72: {
            IsStart = input.ReadBool();
            break;
          }
          case 85: {
            Width = input.ReadFloat();
            break;
          }
          case 93: {
            Height = input.ReadFloat();
            break;
          }
          case 96: {
            DisableHitBox = input.ReadBool();
            break;
          }
          case 104: {
            CancelTweenCameraAngle = input.ReadBool();
            break;
          }
          case 114: {
            viewDic_.AddEntriesFrom(ref input, _map_viewDic_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TimelineSyncData : pb::IMessage<TimelineSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimelineSyncData> _parser = new pb::MessageParser<TimelineSyncData>(() => new TimelineSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimelineSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimelineSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimelineSyncData(TimelineSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      skillUid_ = other.skillUid_;
      jumpTime_ = other.jumpTime_;
      timelineName_ = other.timelineName_;
      skillPos_ = other.HasSkillPos ? other.skillPos_.Clone() : null;
      targetIds_ = other.targetIds_.Clone();
      resultIds_ = other.resultIds_.Clone();
      skillRotation_ = other.HasSkillRotation ? other.skillRotation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimelineSyncData Clone() {
      return new TimelineSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "skill_uid" field.</summary>
    public const int SkillUidFieldNumber = 1;
    private ulong skillUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SkillUid {
      get { if ((_hasBits0 & 1) != 0) { return skillUid_; } else { return 0UL; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        skillUid_ = value;
      }
    }
    /// <summary>Gets whether the "skill_uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSkillUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "skill_uid" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkillUidDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "skill_uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSkillUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "jump_time" field.</summary>
    public const int JumpTimeFieldNumber = 2;
    private float jumpTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float JumpTime {
      get { if ((_hasBits0 & 2) != 0) { return jumpTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        jumpTime_ = value;
      }
    }
    /// <summary>Gets whether the "jump_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasJumpTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "jump_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsJumpTimeDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "jump_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearJumpTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "timeline_name" field.</summary>
    public const int TimelineNameFieldNumber = 3;
    private string timelineName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TimelineName {
      get { return timelineName_ ?? ""; }
      set {
        timelineName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "timeline_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimelineName {
      get { return timelineName_ != null; }
    }
    /// <summary>Gets whether the "timeline_name" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTimelineNameDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "timeline_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimelineName() {
      timelineName_ = null;
    }

    /// <summary>Field number for the "skill_pos" field.</summary>
    public const int SkillPosFieldNumber = 4;
    private global::Protocol.Float3 skillPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 SkillPos {
      get { return skillPos_; }
      set {
        skillPos_ = value;
      }
    }
    /// <summary>Gets whether the skill_pos field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSkillPos {
      get { return skillPos_ != null; }
    }
    /// <summary>Clears the value of the skill_pos field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSkillPos() {
      skillPos_ = null;
    }
    /// <summary>Gets whether the "skill_pos" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkillPosDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }

    /// <summary>Field number for the "target_ids" field.</summary>
    public const int TargetIdsFieldNumber = 5;
    private static readonly pbc::MapField<uint, uint>.Codec _map_targetIds_codec
        = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForUInt32(16, 0), 42);
    private readonly pbc::MapField<uint, uint> targetIds_ = new pbc::MapField<uint, uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, uint> TargetIds {
      get { return targetIds_; }
    }
    /// <summary>Gets whether the "target_ids" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTargetIdsDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }

    /// <summary>Field number for the "result_ids" field.</summary>
    public const int ResultIdsFieldNumber = 6;
    private static readonly pbc::MapField<uint, uint>.Codec _map_resultIds_codec
        = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForUInt32(16, 0), 50);
    private readonly pbc::MapField<uint, uint> resultIds_ = new pbc::MapField<uint, uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, uint> ResultIds {
      get { return resultIds_; }
    }
    /// <summary>Gets whether the "result_ids" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsResultIdsDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }

    /// <summary>Field number for the "skill_rotation" field.</summary>
    public const int SkillRotationFieldNumber = 7;
    private global::Protocol.Float3 skillRotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 SkillRotation {
      get { return skillRotation_; }
      set {
        skillRotation_ = value;
      }
    }
    /// <summary>Gets whether the skill_rotation field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSkillRotation {
      get { return skillRotation_ != null; }
    }
    /// <summary>Clears the value of the skill_rotation field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSkillRotation() {
      skillRotation_ = null;
    }
    /// <summary>Gets whether the "skill_rotation" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkillRotationDirty {
      get { return (_dirtyBits0 & 64) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimelineSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimelineSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillUid != other.SkillUid) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(JumpTime, other.JumpTime)) return false;
      if (TimelineName != other.TimelineName) return false;
      if (!object.Equals(SkillPos, other.SkillPos)) return false;
      if (!TargetIds.Equals(other.TargetIds)) return false;
      if (!ResultIds.Equals(other.ResultIds)) return false;
      if (!object.Equals(SkillRotation, other.SkillRotation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSkillUid) hash ^= SkillUid.GetHashCode();
      if (HasJumpTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(JumpTime);
      if (HasTimelineName) hash ^= TimelineName.GetHashCode();
      if (HasSkillPos) hash ^= SkillPos.GetHashCode();
      hash ^= TargetIds.GetHashCode();
      hash ^= ResultIds.GetHashCode();
      if (HasSkillRotation) hash ^= SkillRotation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillUid)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillUidDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(SkillUid);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasJumpTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsJumpTimeDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(JumpTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTimelineName)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTimelineNameDirty)) {
        output.WriteRawTag(26);
        output.WriteString(TimelineName);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillPos)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillPosDirty)) {
        output.WriteRawTag(34);
        output.WriteMessage(SkillPos);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTargetIdsDirty)) {
        targetIds_.WriteTo(output, _map_targetIds_codec);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsResultIdsDirty)) {
        resultIds_.WriteTo(output, _map_resultIds_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillRotation)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillRotationDirty)) {
        output.WriteRawTag(58);
        output.WriteMessage(SkillRotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillUid)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillUidDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(SkillUid);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasJumpTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsJumpTimeDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(JumpTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTimelineName)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTimelineNameDirty)) {
        output.WriteRawTag(26);
        output.WriteString(TimelineName);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillPos)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillPosDirty)) {
        output.WriteRawTag(34);
        output.WriteMessage(SkillPos);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTargetIdsDirty)) {
        targetIds_.WriteTo(ref output, _map_targetIds_codec);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsResultIdsDirty)) {
        resultIds_.WriteTo(ref output, _map_resultIds_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkillRotation)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillRotationDirty)) {
        output.WriteRawTag(58);
        output.WriteMessage(SkillRotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasSkillUid)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSkillUidDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SkillUid);
      }
      if ((scope == pb.WriteScope.FULL && HasJumpTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsJumpTimeDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasTimelineName)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTimelineNameDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TimelineName);
      }
      if (HasSkillPos) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(SkillPos, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 8;
        } else {
          _dirtyBits0 &= ~8;
        }
      }
      if (TargetIds != null) {
        int msgSize = targetIds_.CalculateSize(_map_targetIds_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 16;
        } else {
          _dirtyBits0 &= ~16;
        }
      }
      if (ResultIds != null) {
        int msgSize = resultIds_.CalculateSize(_map_resultIds_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 32;
        } else {
          _dirtyBits0 &= ~32;
        }
      }
      if (HasSkillRotation) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(SkillRotation, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 64;
        } else {
          _dirtyBits0 &= ~64;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimelineSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasSkillUid) {
        SkillUid = other.SkillUid;
      }
      if (other.HasJumpTime) {
        JumpTime = other.JumpTime;
      }
      if (other.HasTimelineName) {
        TimelineName = other.TimelineName;
      }
      if (other.HasSkillPos) {
        if (!HasSkillPos) {
          SkillPos = new global::Protocol.Float3();
        }
        SkillPos.MergeFrom(other.SkillPos);
      }
      foreach (var key in other.targetIds_.DeleteList) {
        targetIds_.Remove(key);
      }
      foreach (var pair in other.targetIds_) {
        targetIds_[pair.Key] = pair.Value;
      }
      foreach (var key in other.resultIds_.DeleteList) {
        resultIds_.Remove(key);
      }
      foreach (var pair in other.resultIds_) {
        resultIds_[pair.Key] = pair.Value;
      }
      if (other.HasSkillRotation) {
        if (!HasSkillRotation) {
          SkillRotation = new global::Protocol.Float3();
        }
        SkillRotation.MergeFrom(other.SkillRotation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SkillUid = input.ReadUInt64();
            break;
          }
          case 21: {
            JumpTime = input.ReadFloat();
            break;
          }
          case 26: {
            TimelineName = input.ReadString();
            break;
          }
          case 34: {
            if (!HasSkillPos) {
              SkillPos = new global::Protocol.Float3();
            }
            input.ReadMessage(SkillPos);
            break;
          }
          case 42: {
            targetIds_.AddEntriesFrom(input, _map_targetIds_codec);
            break;
          }
          case 50: {
            resultIds_.AddEntriesFrom(input, _map_resultIds_codec);
            break;
          }
          case 58: {
            if (!HasSkillRotation) {
              SkillRotation = new global::Protocol.Float3();
            }
            input.ReadMessage(SkillRotation);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SkillUid = input.ReadUInt64();
            break;
          }
          case 21: {
            JumpTime = input.ReadFloat();
            break;
          }
          case 26: {
            TimelineName = input.ReadString();
            break;
          }
          case 34: {
            if (!HasSkillPos) {
              SkillPos = new global::Protocol.Float3();
            }
            input.ReadMessage(SkillPos);
            break;
          }
          case 42: {
            targetIds_.AddEntriesFrom(ref input, _map_targetIds_codec);
            break;
          }
          case 50: {
            resultIds_.AddEntriesFrom(ref input, _map_resultIds_codec);
            break;
          }
          case 58: {
            if (!HasSkillRotation) {
              SkillRotation = new global::Protocol.Float3();
            }
            input.ReadMessage(SkillRotation);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PropCollectionsSyncData : pb::IMessage<PropCollectionsSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PropCollectionsSyncData> _parser = new pb::MessageParser<PropCollectionsSyncData>(() => new PropCollectionsSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropCollectionsSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropCollectionsSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropCollectionsSyncData(PropCollectionsSyncData other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      weaponSlotDic_ = other.weaponSlotDic_.Clone();
      anqiSlotDic_ = other.anqiSlotDic_.Clone();
      grocerySlotDic_ = other.grocerySlotDic_.Clone();
      propCollectionsDic_ = other.propCollectionsDic_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropCollectionsSyncData Clone() {
      return new PropCollectionsSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "weapon_slot_dic" field.</summary>
    public const int WeaponSlotDicFieldNumber = 5;
    private static readonly pbc::MapField<uint, global::Protocol.PropSlotData>.Codec _map_weaponSlotDic_codec
        = new pbc::MapField<uint, global::Protocol.PropSlotData>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Protocol.PropSlotData.Parser), 42);
    private readonly pbc::MapField<uint, global::Protocol.PropSlotData> weaponSlotDic_ = new pbc::MapField<uint, global::Protocol.PropSlotData>();
    /// <summary>
    ///武器槽位数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Protocol.PropSlotData> WeaponSlotDic {
      get { return weaponSlotDic_; }
    }
    /// <summary>Gets whether the "weapon_slot_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWeaponSlotDicDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "anqi_slot_dic" field.</summary>
    public const int AnqiSlotDicFieldNumber = 6;
    private static readonly pbc::MapField<uint, global::Protocol.PropSlotData>.Codec _map_anqiSlotDic_codec
        = new pbc::MapField<uint, global::Protocol.PropSlotData>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Protocol.PropSlotData.Parser), 50);
    private readonly pbc::MapField<uint, global::Protocol.PropSlotData> anqiSlotDic_ = new pbc::MapField<uint, global::Protocol.PropSlotData>();
    /// <summary>
    ///暗器槽位数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Protocol.PropSlotData> AnqiSlotDic {
      get { return anqiSlotDic_; }
    }
    /// <summary>Gets whether the "anqi_slot_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAnqiSlotDicDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    /// <summary>Field number for the "grocery_slot_dic" field.</summary>
    public const int GrocerySlotDicFieldNumber = 7;
    private static readonly pbc::MapField<uint, global::Protocol.PropSlotData>.Codec _map_grocerySlotDic_codec
        = new pbc::MapField<uint, global::Protocol.PropSlotData>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Protocol.PropSlotData.Parser), 58);
    private readonly pbc::MapField<uint, global::Protocol.PropSlotData> grocerySlotDic_ = new pbc::MapField<uint, global::Protocol.PropSlotData>();
    /// <summary>
    ///杂货槽位数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Protocol.PropSlotData> GrocerySlotDic {
      get { return grocerySlotDic_; }
    }
    /// <summary>Gets whether the "grocery_slot_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGrocerySlotDicDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    /// <summary>Field number for the "prop_collections_dic" field.</summary>
    public const int PropCollectionsDicFieldNumber = 9;
    private static readonly pbc::MapField<ulong, global::Protocol.PropData>.Codec _map_propCollectionsDic_codec
        = new pbc::MapField<ulong, global::Protocol.PropData>.Codec(pb::FieldCodec.ForUInt64(8, 0UL), pb::FieldCodec.ForMessage(18, global::Protocol.PropData.Parser), 74);
    private readonly pbc::MapField<ulong, global::Protocol.PropData> propCollectionsDic_ = new pbc::MapField<ulong, global::Protocol.PropData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, global::Protocol.PropData> PropCollectionsDic {
      get { return propCollectionsDic_; }
    }
    /// <summary>Gets whether the "prop_collections_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPropCollectionsDicDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropCollectionsSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropCollectionsSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!WeaponSlotDic.Equals(other.WeaponSlotDic)) return false;
      if (!AnqiSlotDic.Equals(other.AnqiSlotDic)) return false;
      if (!GrocerySlotDic.Equals(other.GrocerySlotDic)) return false;
      if (!PropCollectionsDic.Equals(other.PropCollectionsDic)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= WeaponSlotDic.GetHashCode();
      hash ^= AnqiSlotDic.GetHashCode();
      hash ^= GrocerySlotDic.GetHashCode();
      hash ^= PropCollectionsDic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsWeaponSlotDicDirty)) {
        weaponSlotDic_.WriteTo(output, _map_weaponSlotDic_codec);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAnqiSlotDicDirty)) {
        anqiSlotDic_.WriteTo(output, _map_anqiSlotDic_codec);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsGrocerySlotDicDirty)) {
        grocerySlotDic_.WriteTo(output, _map_grocerySlotDic_codec);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropCollectionsDicDirty)) {
        propCollectionsDic_.WriteTo(output, _map_propCollectionsDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsWeaponSlotDicDirty)) {
        weaponSlotDic_.WriteTo(ref output, _map_weaponSlotDic_codec);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAnqiSlotDicDirty)) {
        anqiSlotDic_.WriteTo(ref output, _map_anqiSlotDic_codec);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsGrocerySlotDicDirty)) {
        grocerySlotDic_.WriteTo(ref output, _map_grocerySlotDic_codec);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropCollectionsDicDirty)) {
        propCollectionsDic_.WriteTo(ref output, _map_propCollectionsDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if (WeaponSlotDic != null) {
        int msgSize = weaponSlotDic_.CalculateSize(_map_weaponSlotDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 1;
        } else {
          _dirtyBits0 &= ~1;
        }
      }
      if (AnqiSlotDic != null) {
        int msgSize = anqiSlotDic_.CalculateSize(_map_anqiSlotDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 2;
        } else {
          _dirtyBits0 &= ~2;
        }
      }
      if (GrocerySlotDic != null) {
        int msgSize = grocerySlotDic_.CalculateSize(_map_grocerySlotDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 4;
        } else {
          _dirtyBits0 &= ~4;
        }
      }
      if (PropCollectionsDic != null) {
        int msgSize = propCollectionsDic_.CalculateSize(_map_propCollectionsDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 8;
        } else {
          _dirtyBits0 &= ~8;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PropCollectionsSyncData other) {
      if (other == null) {
        return;
      }
      foreach (var key in other.weaponSlotDic_.DeleteList) {
        weaponSlotDic_.Remove(key);
      }
      foreach (var pair in other.weaponSlotDic_) {
        global::Protocol.PropSlotData value;
        if(weaponSlotDic_.TryGetValue(pair.Key, out value)) {
          value.MergeFrom(pair.Value);
        }else{
          weaponSlotDic_.Add(pair.Key, pair.Value);
        }
      }
      foreach (var key in other.anqiSlotDic_.DeleteList) {
        anqiSlotDic_.Remove(key);
      }
      foreach (var pair in other.anqiSlotDic_) {
        global::Protocol.PropSlotData value;
        if(anqiSlotDic_.TryGetValue(pair.Key, out value)) {
          value.MergeFrom(pair.Value);
        }else{
          anqiSlotDic_.Add(pair.Key, pair.Value);
        }
      }
      foreach (var key in other.grocerySlotDic_.DeleteList) {
        grocerySlotDic_.Remove(key);
      }
      foreach (var pair in other.grocerySlotDic_) {
        global::Protocol.PropSlotData value;
        if(grocerySlotDic_.TryGetValue(pair.Key, out value)) {
          value.MergeFrom(pair.Value);
        }else{
          grocerySlotDic_.Add(pair.Key, pair.Value);
        }
      }
      foreach (var key in other.propCollectionsDic_.DeleteList) {
        propCollectionsDic_.Remove(key);
      }
      foreach (var pair in other.propCollectionsDic_) {
        global::Protocol.PropData value;
        if(propCollectionsDic_.TryGetValue(pair.Key, out value)) {
          value.MergeFrom(pair.Value);
        }else{
          propCollectionsDic_.Add(pair.Key, pair.Value);
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 42: {
            weaponSlotDic_.AddEntriesFrom(input, _map_weaponSlotDic_codec);
            break;
          }
          case 50: {
            anqiSlotDic_.AddEntriesFrom(input, _map_anqiSlotDic_codec);
            break;
          }
          case 58: {
            grocerySlotDic_.AddEntriesFrom(input, _map_grocerySlotDic_codec);
            break;
          }
          case 74: {
            propCollectionsDic_.AddEntriesFrom(input, _map_propCollectionsDic_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 42: {
            weaponSlotDic_.AddEntriesFrom(ref input, _map_weaponSlotDic_codec);
            break;
          }
          case 50: {
            anqiSlotDic_.AddEntriesFrom(ref input, _map_anqiSlotDic_codec);
            break;
          }
          case 58: {
            grocerySlotDic_.AddEntriesFrom(ref input, _map_grocerySlotDic_codec);
            break;
          }
          case 74: {
            propCollectionsDic_.AddEntriesFrom(ref input, _map_propCollectionsDic_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SkillCtrlSyncData : pb::IMessage<SkillCtrlSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SkillCtrlSyncData> _parser = new pb::MessageParser<SkillCtrlSyncData>(() => new SkillCtrlSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillCtrlSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillCtrlSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillCtrlSyncData(SkillCtrlSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      lastSkillId_ = other.lastSkillId_;
      skillsDic_ = other.skillsDic_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillCtrlSyncData Clone() {
      return new SkillCtrlSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "last_skill_id" field.</summary>
    public const int LastSkillIdFieldNumber = 1;
    private uint lastSkillId_;
    /// <summary>
    ///上一个释放技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastSkillId {
      get { if ((_hasBits0 & 1) != 0) { return lastSkillId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        lastSkillId_ = value;
      }
    }
    /// <summary>Gets whether the "last_skill_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastSkillId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "last_skill_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLastSkillIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "last_skill_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastSkillId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "skills_dic" field.</summary>
    public const int SkillsDicFieldNumber = 2;
    private static readonly pbc::MapField<uint, global::Protocol.SkillItemData>.Codec _map_skillsDic_codec
        = new pbc::MapField<uint, global::Protocol.SkillItemData>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Protocol.SkillItemData.Parser), 18);
    private readonly pbc::MapField<uint, global::Protocol.SkillItemData> skillsDic_ = new pbc::MapField<uint, global::Protocol.SkillItemData>();
    /// <summary>
    ///运行时的技能数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Protocol.SkillItemData> SkillsDic {
      get { return skillsDic_; }
    }
    /// <summary>Gets whether the "skills_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkillsDicDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillCtrlSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillCtrlSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastSkillId != other.LastSkillId) return false;
      if (!SkillsDic.Equals(other.SkillsDic)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLastSkillId) hash ^= LastSkillId.GetHashCode();
      hash ^= SkillsDic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasLastSkillId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLastSkillIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(LastSkillId);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillsDicDirty)) {
        skillsDic_.WriteTo(output, _map_skillsDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasLastSkillId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLastSkillIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(LastSkillId);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkillsDicDirty)) {
        skillsDic_.WriteTo(ref output, _map_skillsDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasLastSkillId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsLastSkillIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastSkillId);
      }
      if (SkillsDic != null) {
        int msgSize = skillsDic_.CalculateSize(_map_skillsDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 2;
        } else {
          _dirtyBits0 &= ~2;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillCtrlSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasLastSkillId) {
        LastSkillId = other.LastSkillId;
      }
      foreach (var key in other.skillsDic_.DeleteList) {
        skillsDic_.Remove(key);
      }
      foreach (var pair in other.skillsDic_) {
        global::Protocol.SkillItemData value;
        if(skillsDic_.TryGetValue(pair.Key, out value)) {
          value.MergeFrom(pair.Value);
        }else{
          skillsDic_.Add(pair.Key, pair.Value);
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LastSkillId = input.ReadUInt32();
            break;
          }
          case 18: {
            skillsDic_.AddEntriesFrom(input, _map_skillsDic_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LastSkillId = input.ReadUInt32();
            break;
          }
          case 18: {
            skillsDic_.AddEntriesFrom(ref input, _map_skillsDic_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WeaponSyncData : pb::IMessage<WeaponSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WeaponSyncData> _parser = new pb::MessageParser<WeaponSyncData>(() => new WeaponSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponSyncData(WeaponSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      switchWeaponRemainCd_ = other.switchWeaponRemainCd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponSyncData Clone() {
      return new WeaponSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "switch_weapon_remain_cd" field.</summary>
    public const int SwitchWeaponRemainCdFieldNumber = 1;
    private float switchWeaponRemainCd_;
    /// <summary>
    ///切换武器剩余cd时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SwitchWeaponRemainCd {
      get { if ((_hasBits0 & 1) != 0) { return switchWeaponRemainCd_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        switchWeaponRemainCd_ = value;
      }
    }
    /// <summary>Gets whether the "switch_weapon_remain_cd" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSwitchWeaponRemainCd {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "switch_weapon_remain_cd" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSwitchWeaponRemainCdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "switch_weapon_remain_cd" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSwitchWeaponRemainCd() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SwitchWeaponRemainCd, other.SwitchWeaponRemainCd)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSwitchWeaponRemainCd) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SwitchWeaponRemainCd);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasSwitchWeaponRemainCd)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSwitchWeaponRemainCdDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(SwitchWeaponRemainCd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasSwitchWeaponRemainCd)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSwitchWeaponRemainCdDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(SwitchWeaponRemainCd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasSwitchWeaponRemainCd)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSwitchWeaponRemainCdDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasSwitchWeaponRemainCd) {
        SwitchWeaponRemainCd = other.SwitchWeaponRemainCd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            SwitchWeaponRemainCd = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            SwitchWeaponRemainCd = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AnqiSyncData : pb::IMessage<AnqiSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AnqiSyncData> _parser = new pb::MessageParser<AnqiSyncData>(() => new AnqiSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnqiSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnqiSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnqiSyncData(AnqiSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      switchAnqiRemainCd_ = other.switchAnqiRemainCd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnqiSyncData Clone() {
      return new AnqiSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "switch_anqi_remain_cd" field.</summary>
    public const int SwitchAnqiRemainCdFieldNumber = 1;
    private float switchAnqiRemainCd_;
    /// <summary>
    ///切换暗器剩余cd时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SwitchAnqiRemainCd {
      get { if ((_hasBits0 & 1) != 0) { return switchAnqiRemainCd_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        switchAnqiRemainCd_ = value;
      }
    }
    /// <summary>Gets whether the "switch_anqi_remain_cd" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSwitchAnqiRemainCd {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "switch_anqi_remain_cd" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSwitchAnqiRemainCdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "switch_anqi_remain_cd" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSwitchAnqiRemainCd() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnqiSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnqiSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SwitchAnqiRemainCd, other.SwitchAnqiRemainCd)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSwitchAnqiRemainCd) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SwitchAnqiRemainCd);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasSwitchAnqiRemainCd)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSwitchAnqiRemainCdDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(SwitchAnqiRemainCd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasSwitchAnqiRemainCd)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSwitchAnqiRemainCdDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(SwitchAnqiRemainCd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasSwitchAnqiRemainCd)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSwitchAnqiRemainCdDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnqiSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasSwitchAnqiRemainCd) {
        SwitchAnqiRemainCd = other.SwitchAnqiRemainCd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            SwitchAnqiRemainCd = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            SwitchAnqiRemainCd = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TaskSyncData : pb::IMessage<TaskSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TaskSyncData> _parser = new pb::MessageParser<TaskSyncData>(() => new TaskSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskSyncData(TaskSyncData other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      taskItemDic_ = other.taskItemDic_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskSyncData Clone() {
      return new TaskSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "task_item_dic" field.</summary>
    public const int TaskItemDicFieldNumber = 1;
    private static readonly pbc::MapField<uint, global::Protocol.TaskItem>.Codec _map_taskItemDic_codec
        = new pbc::MapField<uint, global::Protocol.TaskItem>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Protocol.TaskItem.Parser), 10);
    private readonly pbc::MapField<uint, global::Protocol.TaskItem> taskItemDic_ = new pbc::MapField<uint, global::Protocol.TaskItem>();
    /// <summary>
    ///任务数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Protocol.TaskItem> TaskItemDic {
      get { return taskItemDic_; }
    }
    /// <summary>Gets whether the "task_item_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTaskItemDicDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!TaskItemDic.Equals(other.TaskItemDic)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= TaskItemDic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTaskItemDicDirty)) {
        taskItemDic_.WriteTo(output, _map_taskItemDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTaskItemDicDirty)) {
        taskItemDic_.WriteTo(ref output, _map_taskItemDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if (TaskItemDic != null) {
        int msgSize = taskItemDic_.CalculateSize(_map_taskItemDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 1;
        } else {
          _dirtyBits0 &= ~1;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskSyncData other) {
      if (other == null) {
        return;
      }
      foreach (var key in other.taskItemDic_.DeleteList) {
        taskItemDic_.Remove(key);
      }
      foreach (var pair in other.taskItemDic_) {
        global::Protocol.TaskItem value;
        if(taskItemDic_.TryGetValue(pair.Key, out value)) {
          value.MergeFrom(pair.Value);
        }else{
          taskItemDic_.Add(pair.Key, pair.Value);
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            taskItemDic_.AddEntriesFrom(input, _map_taskItemDic_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            taskItemDic_.AddEntriesFrom(ref input, _map_taskItemDic_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InsanitySyncData : pb::IMessage<InsanitySyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InsanitySyncData> _parser = new pb::MessageParser<InsanitySyncData>(() => new InsanitySyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsanitySyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsanitySyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsanitySyncData(InsanitySyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      catchEntityId_ = other.catchEntityId_;
      masterEntityId_ = other.masterEntityId_;
      heroId_ = other.heroId_;
      skinId_ = other.skinId_;
      isShieldWeak_ = other.isShieldWeak_;
      thunderAttackCount_ = other.thunderAttackCount_;
      lastAddThunderTime_ = other.lastAddThunderTime_;
      vaStateDic_ = other.vaStateDic_.Clone();
      isAi_ = other.isAi_;
      debugVaDic_ = other.debugVaDic_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsanitySyncData Clone() {
      return new InsanitySyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "catch_entity_id" field.</summary>
    public const int CatchEntityIdFieldNumber = 1;
    private uint catchEntityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CatchEntityId {
      get { if ((_hasBits0 & 1) != 0) { return catchEntityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        catchEntityId_ = value;
      }
    }
    /// <summary>Gets whether the "catch_entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCatchEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "catch_entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCatchEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "catch_entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCatchEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "master_entity_id" field.</summary>
    public const int MasterEntityIdFieldNumber = 2;
    private uint masterEntityId_;
    /// <summary>
    ///所属master
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MasterEntityId {
      get { if ((_hasBits0 & 2) != 0) { return masterEntityId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        masterEntityId_ = value;
      }
    }
    /// <summary>Gets whether the "master_entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMasterEntityId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "master_entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMasterEntityIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "master_entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMasterEntityId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 3;
    private uint heroId_;
    /// <summary>
    ///英雄id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { if ((_hasBits0 & 4) != 0) { return heroId_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "hero_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHeroIdDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "skin_id" field.</summary>
    public const int SkinIdFieldNumber = 4;
    private uint skinId_;
    /// <summary>
    ///皮肤id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkinId {
      get { if ((_hasBits0 & 8) != 0) { return skinId_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        skinId_ = value;
      }
    }
    /// <summary>Gets whether the "skin_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSkinId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "skin_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkinIdDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "skin_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSkinId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "is_shield_weak" field.</summary>
    public const int IsShieldWeakFieldNumber = 6;
    private bool isShieldWeak_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShieldWeak {
      get { if ((_hasBits0 & 16) != 0) { return isShieldWeak_; } else { return false; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 16;
        isShieldWeak_ = value;
      }
    }
    /// <summary>Gets whether the "is_shield_weak" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsShieldWeak {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "is_shield_weak" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIsShieldWeakDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "is_shield_weak" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsShieldWeak() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "thunder_attack_count" field.</summary>
    public const int ThunderAttackCountFieldNumber = 7;
    private uint thunderAttackCount_;
    /// <summary>
    ///雷斩层数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ThunderAttackCount {
      get { if ((_hasBits0 & 32) != 0) { return thunderAttackCount_; } else { return 0; } }
      set {
        _hasBits0 |= 32;
        _dirtyBits0 |= 32;
        thunderAttackCount_ = value;
      }
    }
    /// <summary>Gets whether the "thunder_attack_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasThunderAttackCount {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Gets whether the "thunder_attack_count" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsThunderAttackCountDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "thunder_attack_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearThunderAttackCount() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "last_add_thunder_time" field.</summary>
    public const int LastAddThunderTimeFieldNumber = 8;
    private float lastAddThunderTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LastAddThunderTime {
      get { if ((_hasBits0 & 64) != 0) { return lastAddThunderTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 64;
        _dirtyBits0 |= 64;
        lastAddThunderTime_ = value;
      }
    }
    /// <summary>Gets whether the "last_add_thunder_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastAddThunderTime {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Gets whether the "last_add_thunder_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLastAddThunderTimeDirty {
      get { return (_dirtyBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "last_add_thunder_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastAddThunderTime() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "va_state_dic" field.</summary>
    public const int VaStateDicFieldNumber = 10;
    private static readonly pbc::MapField<uint, int>.Codec _map_vaStateDic_codec
        = new pbc::MapField<uint, int>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 82);
    private readonly pbc::MapField<uint, int> vaStateDic_ = new pbc::MapField<uint, int>();
    /// <summary>
    ///输入状态		
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, int> VaStateDic {
      get { return vaStateDic_; }
    }
    /// <summary>Gets whether the "va_state_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVaStateDicDirty {
      get { return (_dirtyBits0 & 128) != 0; }
    }

    /// <summary>Field number for the "is_ai" field.</summary>
    public const int IsAiFieldNumber = 11;
    private bool isAi_;
    /// <summary>
    ///是否为AI
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAi {
      get { if ((_hasBits0 & 128) != 0) { return isAi_; } else { return false; } }
      set {
        _hasBits0 |= 128;
        _dirtyBits0 |= 256;
        isAi_ = value;
      }
    }
    /// <summary>Gets whether the "is_ai" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsAi {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Gets whether the "is_ai" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIsAiDirty {
      get { return (_dirtyBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "is_ai" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsAi() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "debug_va_dic" field.</summary>
    public const int DebugVaDicFieldNumber = 12;
    private static readonly pbc::MapField<uint, int>.Codec _map_debugVaDic_codec
        = new pbc::MapField<uint, int>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 98);
    private readonly pbc::MapField<uint, int> debugVaDic_ = new pbc::MapField<uint, int>();
    /// <summary>
    ///展示VA信息，打印在客户端
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, int> DebugVaDic {
      get { return debugVaDic_; }
    }
    /// <summary>Gets whether the "debug_va_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDebugVaDicDirty {
      get { return (_dirtyBits0 & 512) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsanitySyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsanitySyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CatchEntityId != other.CatchEntityId) return false;
      if (MasterEntityId != other.MasterEntityId) return false;
      if (HeroId != other.HeroId) return false;
      if (SkinId != other.SkinId) return false;
      if (IsShieldWeak != other.IsShieldWeak) return false;
      if (ThunderAttackCount != other.ThunderAttackCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LastAddThunderTime, other.LastAddThunderTime)) return false;
      if (!VaStateDic.Equals(other.VaStateDic)) return false;
      if (IsAi != other.IsAi) return false;
      if (!DebugVaDic.Equals(other.DebugVaDic)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCatchEntityId) hash ^= CatchEntityId.GetHashCode();
      if (HasMasterEntityId) hash ^= MasterEntityId.GetHashCode();
      if (HasHeroId) hash ^= HeroId.GetHashCode();
      if (HasSkinId) hash ^= SkinId.GetHashCode();
      if (HasIsShieldWeak) hash ^= IsShieldWeak.GetHashCode();
      if (HasThunderAttackCount) hash ^= ThunderAttackCount.GetHashCode();
      if (HasLastAddThunderTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LastAddThunderTime);
      hash ^= VaStateDic.GetHashCode();
      if (HasIsAi) hash ^= IsAi.GetHashCode();
      hash ^= DebugVaDic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasCatchEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCatchEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(CatchEntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMasterEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMasterEntityIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(MasterEntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHeroId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(HeroId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkinId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkinIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(SkinId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsShieldWeak)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsShieldWeakDirty)) {
        output.WriteRawTag(48);
        output.WriteBool(IsShieldWeak);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasThunderAttackCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsThunderAttackCountDirty)) {
        output.WriteRawTag(56);
        output.WriteUInt32(ThunderAttackCount);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLastAddThunderTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLastAddThunderTimeDirty)) {
        output.WriteRawTag(69);
        output.WriteFloat(LastAddThunderTime);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsVaStateDicDirty)) {
        vaStateDic_.WriteTo(output, _map_vaStateDic_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsAi)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsAiDirty)) {
        output.WriteRawTag(88);
        output.WriteBool(IsAi);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDebugVaDicDirty)) {
        debugVaDic_.WriteTo(output, _map_debugVaDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasCatchEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCatchEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(CatchEntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMasterEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMasterEntityIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(MasterEntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHeroId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(HeroId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkinId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkinIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(SkinId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsShieldWeak)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsShieldWeakDirty)) {
        output.WriteRawTag(48);
        output.WriteBool(IsShieldWeak);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasThunderAttackCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsThunderAttackCountDirty)) {
        output.WriteRawTag(56);
        output.WriteUInt32(ThunderAttackCount);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLastAddThunderTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLastAddThunderTimeDirty)) {
        output.WriteRawTag(69);
        output.WriteFloat(LastAddThunderTime);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsVaStateDicDirty)) {
        vaStateDic_.WriteTo(ref output, _map_vaStateDic_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsAi)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsAiDirty)) {
        output.WriteRawTag(88);
        output.WriteBool(IsAi);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDebugVaDicDirty)) {
        debugVaDic_.WriteTo(ref output, _map_debugVaDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasCatchEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCatchEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CatchEntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasMasterEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsMasterEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MasterEntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasHeroId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if ((scope == pb.WriteScope.FULL && HasSkinId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSkinIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkinId);
      }
      if ((scope == pb.WriteScope.FULL && HasIsShieldWeak)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIsShieldWeakDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasThunderAttackCount)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsThunderAttackCountDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ThunderAttackCount);
      }
      if ((scope == pb.WriteScope.FULL && HasLastAddThunderTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsLastAddThunderTimeDirty)) {
        size += 1 + 4;
      }
      if (VaStateDic != null) {
        int msgSize = vaStateDic_.CalculateSize(_map_vaStateDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 128;
        } else {
          _dirtyBits0 &= ~128;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasIsAi)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIsAiDirty)) {
        size += 1 + 1;
      }
      if (DebugVaDic != null) {
        int msgSize = debugVaDic_.CalculateSize(_map_debugVaDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 512;
        } else {
          _dirtyBits0 &= ~512;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsanitySyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasCatchEntityId) {
        CatchEntityId = other.CatchEntityId;
      }
      if (other.HasMasterEntityId) {
        MasterEntityId = other.MasterEntityId;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      if (other.HasSkinId) {
        SkinId = other.SkinId;
      }
      if (other.HasIsShieldWeak) {
        IsShieldWeak = other.IsShieldWeak;
      }
      if (other.HasThunderAttackCount) {
        ThunderAttackCount = other.ThunderAttackCount;
      }
      if (other.HasLastAddThunderTime) {
        LastAddThunderTime = other.LastAddThunderTime;
      }
      foreach (var key in other.vaStateDic_.DeleteList) {
        vaStateDic_.Remove(key);
      }
      foreach (var pair in other.vaStateDic_) {
        vaStateDic_[pair.Key] = pair.Value;
      }
      if (other.HasIsAi) {
        IsAi = other.IsAi;
      }
      foreach (var key in other.debugVaDic_.DeleteList) {
        debugVaDic_.Remove(key);
      }
      foreach (var pair in other.debugVaDic_) {
        debugVaDic_[pair.Key] = pair.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CatchEntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            MasterEntityId = input.ReadUInt32();
            break;
          }
          case 24: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 32: {
            SkinId = input.ReadUInt32();
            break;
          }
          case 48: {
            IsShieldWeak = input.ReadBool();
            break;
          }
          case 56: {
            ThunderAttackCount = input.ReadUInt32();
            break;
          }
          case 69: {
            LastAddThunderTime = input.ReadFloat();
            break;
          }
          case 82: {
            vaStateDic_.AddEntriesFrom(input, _map_vaStateDic_codec);
            break;
          }
          case 88: {
            IsAi = input.ReadBool();
            break;
          }
          case 98: {
            debugVaDic_.AddEntriesFrom(input, _map_debugVaDic_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CatchEntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            MasterEntityId = input.ReadUInt32();
            break;
          }
          case 24: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 32: {
            SkinId = input.ReadUInt32();
            break;
          }
          case 48: {
            IsShieldWeak = input.ReadBool();
            break;
          }
          case 56: {
            ThunderAttackCount = input.ReadUInt32();
            break;
          }
          case 69: {
            LastAddThunderTime = input.ReadFloat();
            break;
          }
          case 82: {
            vaStateDic_.AddEntriesFrom(ref input, _map_vaStateDic_codec);
            break;
          }
          case 88: {
            IsAi = input.ReadBool();
            break;
          }
          case 98: {
            debugVaDic_.AddEntriesFrom(ref input, _map_debugVaDic_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TaskItem : pb::IMessage<TaskItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TaskItem> _parser = new pb::MessageParser<TaskItem>(() => new TaskItem());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskItem(TaskItem other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      id_ = other.id_;
      taskState_ = other.taskState_;
      taskDetailParamDic_ = other.taskDetailParamDic_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskItem Clone() {
      return new TaskItem(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///任务ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "task_state" field.</summary>
    public const int TaskStateFieldNumber = 2;
    private uint taskState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskState {
      get { if ((_hasBits0 & 2) != 0) { return taskState_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        taskState_ = value;
      }
    }
    /// <summary>Gets whether the "task_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTaskState {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "task_state" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTaskStateDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "task_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTaskState() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "task_detail_param_dic" field.</summary>
    public const int TaskDetailParamDicFieldNumber = 3;
    private static readonly pbc::MapField<uint, global::Protocol.TaskDetailParam>.Codec _map_taskDetailParamDic_codec
        = new pbc::MapField<uint, global::Protocol.TaskDetailParam>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Protocol.TaskDetailParam.Parser), 26);
    private readonly pbc::MapField<uint, global::Protocol.TaskDetailParam> taskDetailParamDic_ = new pbc::MapField<uint, global::Protocol.TaskDetailParam>();
    /// <summary>
    ///具体任务所需id,num条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Protocol.TaskDetailParam> TaskDetailParamDic {
      get { return taskDetailParamDic_; }
    }
    /// <summary>Gets whether the "task_detail_param_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTaskDetailParamDicDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (TaskState != other.TaskState) return false;
      if (!TaskDetailParamDic.Equals(other.TaskDetailParamDic)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasTaskState) hash ^= TaskState.GetHashCode();
      hash ^= TaskDetailParamDic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTaskState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTaskStateDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(TaskState);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTaskDetailParamDicDirty)) {
        taskDetailParamDic_.WriteTo(output, _map_taskDetailParamDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTaskState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTaskStateDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(TaskState);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTaskDetailParamDicDirty)) {
        taskDetailParamDic_.WriteTo(ref output, _map_taskDetailParamDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if ((scope == pb.WriteScope.FULL && HasTaskState)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTaskStateDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskState);
      }
      if (TaskDetailParamDic != null) {
        int msgSize = taskDetailParamDic_.CalculateSize(_map_taskDetailParamDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 4;
        } else {
          _dirtyBits0 &= ~4;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskItem other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasTaskState) {
        TaskState = other.TaskState;
      }
      foreach (var key in other.taskDetailParamDic_.DeleteList) {
        taskDetailParamDic_.Remove(key);
      }
      foreach (var pair in other.taskDetailParamDic_) {
        global::Protocol.TaskDetailParam value;
        if(taskDetailParamDic_.TryGetValue(pair.Key, out value)) {
          value.MergeFrom(pair.Value);
        }else{
          taskDetailParamDic_.Add(pair.Key, pair.Value);
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            TaskState = input.ReadUInt32();
            break;
          }
          case 26: {
            taskDetailParamDic_.AddEntriesFrom(input, _map_taskDetailParamDic_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            TaskState = input.ReadUInt32();
            break;
          }
          case 26: {
            taskDetailParamDic_.AddEntriesFrom(ref input, _map_taskDetailParamDic_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TaskDetailParam : pb::IMessage<TaskDetailParam>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TaskDetailParam> _parser = new pb::MessageParser<TaskDetailParam>(() => new TaskDetailParam());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskDetailParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskDetailParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskDetailParam(TaskDetailParam other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      id_ = other.id_;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskDetailParam Clone() {
      return new TaskDetailParam(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 3;
    private uint num_;
    /// <summary>
    ///repeated uint32 id_merge_list							= 2; //IDs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Num {
      get { if ((_hasBits0 & 2) != 0) { return num_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        num_ = value;
      }
    }
    /// <summary>Gets whether the "num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNum {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "num" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNumDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNum() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskDetailParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskDetailParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasNum) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNum)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNumDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNum)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNumDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if ((scope == pb.WriteScope.FULL && HasNum)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNumDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskDetailParam other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasNum) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            Num = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            Num = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PropSlotData : pb::IMessage<PropSlotData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PropSlotData> _parser = new pb::MessageParser<PropSlotData>(() => new PropSlotData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropSlotData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropSlotData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropSlotData(PropSlotData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      id_ = other.id_;
      propType_ = other.propType_;
      propCfgId_ = other.propCfgId_;
      propIdDic_ = other.propIdDic_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropSlotData Clone() {
      return new PropSlotData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///槽位ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "prop_type" field.</summary>
    public const int PropTypeFieldNumber = 2;
    private global::Protocol.PropType propType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.PropType PropType {
      get { if ((_hasBits0 & 2) != 0) { return propType_; } else { return global::Protocol.PropType.PtNone; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        propType_ = value;
      }
    }
    /// <summary>Gets whether the "prop_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPropType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "prop_type" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPropTypeDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "prop_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPropType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "prop_cfg_id" field.</summary>
    public const int PropCfgIdFieldNumber = 3;
    private uint propCfgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PropCfgId {
      get { if ((_hasBits0 & 4) != 0) { return propCfgId_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        propCfgId_ = value;
      }
    }
    /// <summary>Gets whether the "prop_cfg_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPropCfgId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "prop_cfg_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPropCfgIdDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "prop_cfg_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPropCfgId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "prop_id_dic" field.</summary>
    public const int PropIdDicFieldNumber = 4;
    private static readonly pbc::MapField<ulong, int>.Codec _map_propIdDic_codec
        = new pbc::MapField<ulong, int>.Codec(pb::FieldCodec.ForUInt64(8, 0UL), pb::FieldCodec.ForInt32(16, 0), 34);
    private readonly pbc::MapField<ulong, int> propIdDic_ = new pbc::MapField<ulong, int>();
    /// <summary>
    ///当前槽位所有prop的instanceId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, int> PropIdDic {
      get { return propIdDic_; }
    }
    /// <summary>Gets whether the "prop_id_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPropIdDicDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropSlotData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropSlotData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (PropType != other.PropType) return false;
      if (PropCfgId != other.PropCfgId) return false;
      if (!PropIdDic.Equals(other.PropIdDic)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasPropType) hash ^= PropType.GetHashCode();
      if (HasPropCfgId) hash ^= PropCfgId.GetHashCode();
      hash ^= PropIdDic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPropType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropTypeDirty)) {
        output.WriteRawTag(16);
        output.WriteEnum((int) PropType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPropCfgId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropCfgIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(PropCfgId);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropIdDicDirty)) {
        propIdDic_.WriteTo(output, _map_propIdDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPropType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropTypeDirty)) {
        output.WriteRawTag(16);
        output.WriteEnum((int) PropType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPropCfgId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropCfgIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(PropCfgId);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropIdDicDirty)) {
        propIdDic_.WriteTo(ref output, _map_propIdDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if ((scope == pb.WriteScope.FULL && HasPropType)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsPropTypeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PropType);
      }
      if ((scope == pb.WriteScope.FULL && HasPropCfgId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsPropCfgIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PropCfgId);
      }
      if (PropIdDic != null) {
        int msgSize = propIdDic_.CalculateSize(_map_propIdDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 8;
        } else {
          _dirtyBits0 &= ~8;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PropSlotData other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasPropType) {
        PropType = other.PropType;
      }
      if (other.HasPropCfgId) {
        PropCfgId = other.PropCfgId;
      }
      foreach (var key in other.propIdDic_.DeleteList) {
        propIdDic_.Remove(key);
      }
      foreach (var pair in other.propIdDic_) {
        propIdDic_[pair.Key] = pair.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            PropType = (global::Protocol.PropType) input.ReadEnum();
            break;
          }
          case 24: {
            PropCfgId = input.ReadUInt32();
            break;
          }
          case 34: {
            propIdDic_.AddEntriesFrom(input, _map_propIdDic_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            PropType = (global::Protocol.PropType) input.ReadEnum();
            break;
          }
          case 24: {
            PropCfgId = input.ReadUInt32();
            break;
          }
          case 34: {
            propIdDic_.AddEntriesFrom(ref input, _map_propIdDic_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BuffCtrlSyncData : pb::IMessage<BuffCtrlSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BuffCtrlSyncData> _parser = new pb::MessageParser<BuffCtrlSyncData>(() => new BuffCtrlSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuffCtrlSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffCtrlSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffCtrlSyncData(BuffCtrlSyncData other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      buffDic_ = other.buffDic_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffCtrlSyncData Clone() {
      return new BuffCtrlSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "buff_dic" field.</summary>
    public const int BuffDicFieldNumber = 1;
    private static readonly pbc::MapField<uint, global::Protocol.BuffItem>.Codec _map_buffDic_codec
        = new pbc::MapField<uint, global::Protocol.BuffItem>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Protocol.BuffItem.Parser), 10);
    private readonly pbc::MapField<uint, global::Protocol.BuffItem> buffDic_ = new pbc::MapField<uint, global::Protocol.BuffItem>();
    /// <summary>
    ///携带的buff
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Protocol.BuffItem> BuffDic {
      get { return buffDic_; }
    }
    /// <summary>Gets whether the "buff_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBuffDicDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuffCtrlSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuffCtrlSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!BuffDic.Equals(other.BuffDic)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= BuffDic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBuffDicDirty)) {
        buffDic_.WriteTo(output, _map_buffDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBuffDicDirty)) {
        buffDic_.WriteTo(ref output, _map_buffDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if (BuffDic != null) {
        int msgSize = buffDic_.CalculateSize(_map_buffDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 1;
        } else {
          _dirtyBits0 &= ~1;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuffCtrlSyncData other) {
      if (other == null) {
        return;
      }
      foreach (var key in other.buffDic_.DeleteList) {
        buffDic_.Remove(key);
      }
      foreach (var pair in other.buffDic_) {
        global::Protocol.BuffItem value;
        if(buffDic_.TryGetValue(pair.Key, out value)) {
          value.MergeFrom(pair.Value);
        }else{
          buffDic_.Add(pair.Key, pair.Value);
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            buffDic_.AddEntriesFrom(input, _map_buffDic_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            buffDic_.AddEntriesFrom(ref input, _map_buffDic_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BuffItem : pb::IMessage<BuffItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BuffItem> _parser = new pb::MessageParser<BuffItem>(() => new BuffItem());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuffItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[104]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffItem(BuffItem other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      id_ = other.id_;
      addTime_ = other.addTime_;
      buffCount_ = other.buffCount_;
      sourceEId_ = other.sourceEId_;
      buffTriggerCount_ = other.buffTriggerCount_;
      parentBuffId_ = other.parentBuffId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffItem Clone() {
      return new BuffItem(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///buff id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "add_time" field.</summary>
    public const int AddTimeFieldNumber = 2;
    private float addTime_;
    /// <summary>
    ///buff 添加时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AddTime {
      get { if ((_hasBits0 & 2) != 0) { return addTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        addTime_ = value;
      }
    }
    /// <summary>Gets whether the "add_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAddTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "add_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAddTimeDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "add_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAddTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "buff_count" field.</summary>
    public const int BuffCountFieldNumber = 3;
    private uint buffCount_;
    /// <summary>
    ///buff 层数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuffCount {
      get { if ((_hasBits0 & 4) != 0) { return buffCount_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        buffCount_ = value;
      }
    }
    /// <summary>Gets whether the "buff_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBuffCount {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "buff_count" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBuffCountDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "buff_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBuffCount() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "source_eId" field.</summary>
    public const int SourceEIdFieldNumber = 4;
    private uint sourceEId_;
    /// <summary>
    ///buff的施加人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SourceEId {
      get { if ((_hasBits0 & 8) != 0) { return sourceEId_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        sourceEId_ = value;
      }
    }
    /// <summary>Gets whether the "source_eId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourceEId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "source_eId" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSourceEIdDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "source_eId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourceEId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "buff_trigger_count" field.</summary>
    public const int BuffTriggerCountFieldNumber = 5;
    private uint buffTriggerCount_;
    /// <summary>
    ///buff的触发次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuffTriggerCount {
      get { if ((_hasBits0 & 16) != 0) { return buffTriggerCount_; } else { return 0; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 16;
        buffTriggerCount_ = value;
      }
    }
    /// <summary>Gets whether the "buff_trigger_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBuffTriggerCount {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "buff_trigger_count" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBuffTriggerCountDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "buff_trigger_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBuffTriggerCount() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "parent_buff_id" field.</summary>
    public const int ParentBuffIdFieldNumber = 6;
    private uint parentBuffId_;
    /// <summary>
    ///父buff_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ParentBuffId {
      get { if ((_hasBits0 & 32) != 0) { return parentBuffId_; } else { return 0; } }
      set {
        _hasBits0 |= 32;
        _dirtyBits0 |= 32;
        parentBuffId_ = value;
      }
    }
    /// <summary>Gets whether the "parent_buff_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParentBuffId {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Gets whether the "parent_buff_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsParentBuffIdDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "parent_buff_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParentBuffId() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuffItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuffItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AddTime, other.AddTime)) return false;
      if (BuffCount != other.BuffCount) return false;
      if (SourceEId != other.SourceEId) return false;
      if (BuffTriggerCount != other.BuffTriggerCount) return false;
      if (ParentBuffId != other.ParentBuffId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasAddTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AddTime);
      if (HasBuffCount) hash ^= BuffCount.GetHashCode();
      if (HasSourceEId) hash ^= SourceEId.GetHashCode();
      if (HasBuffTriggerCount) hash ^= BuffTriggerCount.GetHashCode();
      if (HasParentBuffId) hash ^= ParentBuffId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAddTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAddTimeDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(AddTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBuffCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBuffCountDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(BuffCount);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSourceEId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSourceEIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(SourceEId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBuffTriggerCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBuffTriggerCountDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(BuffTriggerCount);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasParentBuffId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsParentBuffIdDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(ParentBuffId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAddTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAddTimeDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(AddTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBuffCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBuffCountDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(BuffCount);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSourceEId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSourceEIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(SourceEId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBuffTriggerCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBuffTriggerCountDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(BuffTriggerCount);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasParentBuffId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsParentBuffIdDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(ParentBuffId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if ((scope == pb.WriteScope.FULL && HasAddTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsAddTimeDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasBuffCount)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsBuffCountDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuffCount);
      }
      if ((scope == pb.WriteScope.FULL && HasSourceEId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSourceEIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceEId);
      }
      if ((scope == pb.WriteScope.FULL && HasBuffTriggerCount)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsBuffTriggerCountDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuffTriggerCount);
      }
      if ((scope == pb.WriteScope.FULL && HasParentBuffId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsParentBuffIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ParentBuffId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuffItem other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasAddTime) {
        AddTime = other.AddTime;
      }
      if (other.HasBuffCount) {
        BuffCount = other.BuffCount;
      }
      if (other.HasSourceEId) {
        SourceEId = other.SourceEId;
      }
      if (other.HasBuffTriggerCount) {
        BuffTriggerCount = other.BuffTriggerCount;
      }
      if (other.HasParentBuffId) {
        ParentBuffId = other.ParentBuffId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 21: {
            AddTime = input.ReadFloat();
            break;
          }
          case 24: {
            BuffCount = input.ReadUInt32();
            break;
          }
          case 32: {
            SourceEId = input.ReadUInt32();
            break;
          }
          case 40: {
            BuffTriggerCount = input.ReadUInt32();
            break;
          }
          case 48: {
            ParentBuffId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 21: {
            AddTime = input.ReadFloat();
            break;
          }
          case 24: {
            BuffCount = input.ReadUInt32();
            break;
          }
          case 32: {
            SourceEId = input.ReadUInt32();
            break;
          }
          case 40: {
            BuffTriggerCount = input.ReadUInt32();
            break;
          }
          case 48: {
            ParentBuffId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FollowSyncData : pb::IMessage<FollowSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FollowSyncData> _parser = new pb::MessageParser<FollowSyncData>(() => new FollowSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FollowSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[105]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FollowSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FollowSyncData(FollowSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      following_ = other.following_;
      followEntityId_ = other.followEntityId_;
      offsetPosition_ = other.HasOffsetPosition ? other.offsetPosition_.Clone() : null;
      stopFollow_ = other.stopFollow_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FollowSyncData Clone() {
      return new FollowSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "following" field.</summary>
    public const int FollowingFieldNumber = 1;
    private bool following_;
    /// <summary>
    ///是否处于跟随
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Following {
      get { if ((_hasBits0 & 1) != 0) { return following_; } else { return false; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        following_ = value;
      }
    }
    /// <summary>Gets whether the "following" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFollowing {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "following" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFollowingDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "following" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFollowing() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "follow_entity_id" field.</summary>
    public const int FollowEntityIdFieldNumber = 2;
    private uint followEntityId_;
    /// <summary>
    ///跟随EntityId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FollowEntityId {
      get { if ((_hasBits0 & 2) != 0) { return followEntityId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        followEntityId_ = value;
      }
    }
    /// <summary>Gets whether the "follow_entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFollowEntityId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "follow_entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFollowEntityIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "follow_entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFollowEntityId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "offset_position" field.</summary>
    public const int OffsetPositionFieldNumber = 3;
    private global::Protocol.Float3 offsetPosition_;
    /// <summary>
    ///相对坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 OffsetPosition {
      get { return offsetPosition_; }
      set {
        offsetPosition_ = value;
      }
    }
    /// <summary>Gets whether the offset_position field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOffsetPosition {
      get { return offsetPosition_ != null; }
    }
    /// <summary>Clears the value of the offset_position field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOffsetPosition() {
      offsetPosition_ = null;
    }
    /// <summary>Gets whether the "offset_position" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOffsetPositionDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    /// <summary>Field number for the "stop_follow" field.</summary>
    public const int StopFollowFieldNumber = 4;
    private bool stopFollow_;
    /// <summary>
    ///短暂停止跟随
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StopFollow {
      get { if ((_hasBits0 & 4) != 0) { return stopFollow_; } else { return false; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 8;
        stopFollow_ = value;
      }
    }
    /// <summary>Gets whether the "stop_follow" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStopFollow {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "stop_follow" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStopFollowDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "stop_follow" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStopFollow() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FollowSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FollowSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Following != other.Following) return false;
      if (FollowEntityId != other.FollowEntityId) return false;
      if (!object.Equals(OffsetPosition, other.OffsetPosition)) return false;
      if (StopFollow != other.StopFollow) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFollowing) hash ^= Following.GetHashCode();
      if (HasFollowEntityId) hash ^= FollowEntityId.GetHashCode();
      if (HasOffsetPosition) hash ^= OffsetPosition.GetHashCode();
      if (HasStopFollow) hash ^= StopFollow.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasFollowing)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFollowingDirty)) {
        output.WriteRawTag(8);
        output.WriteBool(Following);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFollowEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFollowEntityIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(FollowEntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOffsetPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOffsetPositionDirty)) {
        output.WriteRawTag(26);
        output.WriteMessage(OffsetPosition);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStopFollow)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStopFollowDirty)) {
        output.WriteRawTag(32);
        output.WriteBool(StopFollow);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasFollowing)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFollowingDirty)) {
        output.WriteRawTag(8);
        output.WriteBool(Following);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFollowEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFollowEntityIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(FollowEntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOffsetPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOffsetPositionDirty)) {
        output.WriteRawTag(26);
        output.WriteMessage(OffsetPosition);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStopFollow)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStopFollowDirty)) {
        output.WriteRawTag(32);
        output.WriteBool(StopFollow);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasFollowing)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsFollowingDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasFollowEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsFollowEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FollowEntityId);
      }
      if (HasOffsetPosition) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(OffsetPosition, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 4;
        } else {
          _dirtyBits0 &= ~4;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasStopFollow)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsStopFollowDirty)) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FollowSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasFollowing) {
        Following = other.Following;
      }
      if (other.HasFollowEntityId) {
        FollowEntityId = other.FollowEntityId;
      }
      if (other.HasOffsetPosition) {
        if (!HasOffsetPosition) {
          OffsetPosition = new global::Protocol.Float3();
        }
        OffsetPosition.MergeFrom(other.OffsetPosition);
      }
      if (other.HasStopFollow) {
        StopFollow = other.StopFollow;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Following = input.ReadBool();
            break;
          }
          case 16: {
            FollowEntityId = input.ReadUInt32();
            break;
          }
          case 26: {
            if (!HasOffsetPosition) {
              OffsetPosition = new global::Protocol.Float3();
            }
            input.ReadMessage(OffsetPosition);
            break;
          }
          case 32: {
            StopFollow = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Following = input.ReadBool();
            break;
          }
          case 16: {
            FollowEntityId = input.ReadUInt32();
            break;
          }
          case 26: {
            if (!HasOffsetPosition) {
              OffsetPosition = new global::Protocol.Float3();
            }
            input.ReadMessage(OffsetPosition);
            break;
          }
          case 32: {
            StopFollow = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SkillItemData : pb::IMessage<SkillItemData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SkillItemData> _parser = new pb::MessageParser<SkillItemData>(() => new SkillItemData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillItemData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[106]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillItemData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillItemData(SkillItemData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      remainCd_ = other.remainCd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillItemData Clone() {
      return new SkillItemData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "remain_cd" field.</summary>
    public const int RemainCdFieldNumber = 1;
    private float remainCd_;
    /// <summary>
    ///技能剩余cd时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RemainCd {
      get { if ((_hasBits0 & 1) != 0) { return remainCd_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        remainCd_ = value;
      }
    }
    /// <summary>Gets whether the "remain_cd" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRemainCd {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "remain_cd" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRemainCdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "remain_cd" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRemainCd() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillItemData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillItemData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RemainCd, other.RemainCd)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRemainCd) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RemainCd);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasRemainCd)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRemainCdDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(RemainCd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasRemainCd)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRemainCdDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(RemainCd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasRemainCd)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsRemainCdDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillItemData other) {
      if (other == null) {
        return;
      }
      if (other.HasRemainCd) {
        RemainCd = other.RemainCd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            RemainCd = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            RemainCd = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HitInfoData : pb::IMessage<HitInfoData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HitInfoData> _parser = new pb::MessageParser<HitInfoData>(() => new HitInfoData());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HitInfoData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[107]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitInfoData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitInfoData(HitInfoData other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      point_ = other.HasPoint ? other.point_.Clone() : null;
      normal_ = other.HasNormal ? other.normal_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitInfoData Clone() {
      return new HitInfoData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 1;
    private global::Protocol.Float3 point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }
    /// <summary>Gets whether the point field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPoint {
      get { return point_ != null; }
    }
    /// <summary>Clears the value of the point field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPoint() {
      point_ = null;
    }
    /// <summary>Gets whether the "point" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPointDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "normal" field.</summary>
    public const int NormalFieldNumber = 2;
    private global::Protocol.Float3 normal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 Normal {
      get { return normal_; }
      set {
        normal_ = value;
      }
    }
    /// <summary>Gets whether the normal field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNormal {
      get { return normal_ != null; }
    }
    /// <summary>Clears the value of the normal field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNormal() {
      normal_ = null;
    }
    /// <summary>Gets whether the "normal" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNormalDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HitInfoData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HitInfoData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Point, other.Point)) return false;
      if (!object.Equals(Normal, other.Normal)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPoint) hash ^= Point.GetHashCode();
      if (HasNormal) hash ^= Normal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasPoint)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPointDirty)) {
        output.WriteRawTag(10);
        output.WriteMessage(Point);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNormal)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNormalDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(Normal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasPoint)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPointDirty)) {
        output.WriteRawTag(10);
        output.WriteMessage(Point);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNormal)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNormalDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(Normal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if (HasPoint) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Point, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 1;
        } else {
          _dirtyBits0 &= ~1;
        }
      }
      if (HasNormal) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Normal, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 2;
        } else {
          _dirtyBits0 &= ~2;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HitInfoData other) {
      if (other == null) {
        return;
      }
      if (other.HasPoint) {
        if (!HasPoint) {
          Point = new global::Protocol.Float3();
        }
        Point.MergeFrom(other.Point);
      }
      if (other.HasNormal) {
        if (!HasNormal) {
          Normal = new global::Protocol.Float3();
        }
        Normal.MergeFrom(other.Normal);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasPoint) {
              Point = new global::Protocol.Float3();
            }
            input.ReadMessage(Point);
            break;
          }
          case 18: {
            if (!HasNormal) {
              Normal = new global::Protocol.Float3();
            }
            input.ReadMessage(Normal);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (!HasPoint) {
              Point = new global::Protocol.Float3();
            }
            input.ReadMessage(Point);
            break;
          }
          case 18: {
            if (!HasNormal) {
              Normal = new global::Protocol.Float3();
            }
            input.ReadMessage(Normal);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HitCheckSyncData : pb::IMessage<HitCheckSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HitCheckSyncData> _parser = new pb::MessageParser<HitCheckSyncData>(() => new HitCheckSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HitCheckSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[108]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitCheckSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitCheckSyncData(HitCheckSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      hitEntityDic_ = other.hitEntityDic_.Clone();
      hitInfos_ = other.hitInfos_.Clone();
      isHitEntity_ = other.isHitEntity_;
      isHitEnvironment_ = other.isHitEnvironment_;
      size_ = other.HasSize ? other.size_.Clone() : null;
      usedBoxCast_ = other.usedBoxCast_;
      mulHitEntityDic_ = other.mulHitEntityDic_.Clone();
      ignoreEntity_ = other.ignoreEntity_.Clone();
      createdEntityType_ = other.createdEntityType_;
      colliderOrder_ = other.colliderOrder_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitCheckSyncData Clone() {
      return new HitCheckSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "hit_entity_dic" field.</summary>
    public const int HitEntityDicFieldNumber = 1;
    private static readonly pbc::MapField<uint, uint>.Codec _map_hitEntityDic_codec
        = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForUInt32(16, 0), 10);
    private readonly pbc::MapField<uint, uint> hitEntityDic_ = new pbc::MapField<uint, uint>();
    /// <summary>
    ///命中的Entity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, uint> HitEntityDic {
      get { return hitEntityDic_; }
    }
    /// <summary>Gets whether the "hit_entity_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHitEntityDicDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "hit_infos" field.</summary>
    public const int HitInfosFieldNumber = 2;
    private static readonly pbc::MapField<int, global::Protocol.HitInfoData>.Codec _map_hitInfos_codec
        = new pbc::MapField<int, global::Protocol.HitInfoData>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Protocol.HitInfoData.Parser), 18);
    private readonly pbc::MapField<int, global::Protocol.HitInfoData> hitInfos_ = new pbc::MapField<int, global::Protocol.HitInfoData>();
    /// <summary>
    ///命中的环境物体
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Protocol.HitInfoData> HitInfos {
      get { return hitInfos_; }
    }
    /// <summary>Gets whether the "hit_infos" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHitInfosDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    /// <summary>Field number for the "is_hit_entity" field.</summary>
    public const int IsHitEntityFieldNumber = 3;
    private bool isHitEntity_;
    /// <summary>
    ///entity碰撞检测
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHitEntity {
      get { if ((_hasBits0 & 1) != 0) { return isHitEntity_; } else { return false; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 4;
        isHitEntity_ = value;
      }
    }
    /// <summary>Gets whether the "is_hit_entity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsHitEntity {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "is_hit_entity" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIsHitEntityDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "is_hit_entity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsHitEntity() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "is_hit_environment" field.</summary>
    public const int IsHitEnvironmentFieldNumber = 4;
    private bool isHitEnvironment_;
    /// <summary>
    ///环境碰撞检测
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHitEnvironment {
      get { if ((_hasBits0 & 2) != 0) { return isHitEnvironment_; } else { return false; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 8;
        isHitEnvironment_ = value;
      }
    }
    /// <summary>Gets whether the "is_hit_environment" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsHitEnvironment {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "is_hit_environment" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIsHitEnvironmentDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "is_hit_environment" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsHitEnvironment() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 5;
    private global::Protocol.Float3 size_;
    /// <summary>
    ///碰撞盒大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }
    /// <summary>Gets whether the size field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSize {
      get { return size_ != null; }
    }
    /// <summary>Clears the value of the size field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSize() {
      size_ = null;
    }
    /// <summary>Gets whether the "size" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSizeDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }

    /// <summary>Field number for the "used_box_cast" field.</summary>
    public const int UsedBoxCastFieldNumber = 6;
    private bool usedBoxCast_;
    /// <summary>
    ///使用box碰撞（精确） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UsedBoxCast {
      get { if ((_hasBits0 & 4) != 0) { return usedBoxCast_; } else { return false; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 32;
        usedBoxCast_ = value;
      }
    }
    /// <summary>Gets whether the "used_box_cast" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUsedBoxCast {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "used_box_cast" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUsedBoxCastDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "used_box_cast" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUsedBoxCast() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "mul_hit_entity_dic" field.</summary>
    public const int MulHitEntityDicFieldNumber = 7;
    private static readonly pbc::MapField<uint, uint>.Codec _map_mulHitEntityDic_codec
        = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForUInt32(16, 0), 58);
    private readonly pbc::MapField<uint, uint> mulHitEntityDic_ = new pbc::MapField<uint, uint>();
    /// <summary>
    ///法术场中的Entity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, uint> MulHitEntityDic {
      get { return mulHitEntityDic_; }
    }
    /// <summary>Gets whether the "mul_hit_entity_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMulHitEntityDicDirty {
      get { return (_dirtyBits0 & 64) != 0; }
    }

    /// <summary>Field number for the "ignore_entity" field.</summary>
    public const int IgnoreEntityFieldNumber = 8;
    private static readonly pbc::MapField<uint, float>.Codec _map_ignoreEntity_codec
        = new pbc::MapField<uint, float>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForFloat(21, 0F), 66);
    private readonly pbc::MapField<uint, float> ignoreEntity_ = new pbc::MapField<uint, float>();
    /// <summary>
    ///忽略entity	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, float> IgnoreEntity {
      get { return ignoreEntity_; }
    }
    /// <summary>Gets whether the "ignore_entity" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIgnoreEntityDirty {
      get { return (_dirtyBits0 & 128) != 0; }
    }

    /// <summary>Field number for the "created_entity_type" field.</summary>
    public const int CreatedEntityTypeFieldNumber = 9;
    private uint createdEntityType_;
    /// <summary>
    ///被创建的Entity类型		
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreatedEntityType {
      get { if ((_hasBits0 & 8) != 0) { return createdEntityType_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 256;
        createdEntityType_ = value;
      }
    }
    /// <summary>Gets whether the "created_entity_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCreatedEntityType {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "created_entity_type" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCreatedEntityTypeDirty {
      get { return (_dirtyBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "created_entity_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCreatedEntityType() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "collider_order" field.</summary>
    public const int ColliderOrderFieldNumber = 10;
    private uint colliderOrder_;
    /// <summary>
    ///碰撞等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ColliderOrder {
      get { if ((_hasBits0 & 16) != 0) { return colliderOrder_; } else { return 0; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 512;
        colliderOrder_ = value;
      }
    }
    /// <summary>Gets whether the "collider_order" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasColliderOrder {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "collider_order" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsColliderOrderDirty {
      get { return (_dirtyBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "collider_order" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearColliderOrder() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HitCheckSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HitCheckSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!HitEntityDic.Equals(other.HitEntityDic)) return false;
      if (!HitInfos.Equals(other.HitInfos)) return false;
      if (IsHitEntity != other.IsHitEntity) return false;
      if (IsHitEnvironment != other.IsHitEnvironment) return false;
      if (!object.Equals(Size, other.Size)) return false;
      if (UsedBoxCast != other.UsedBoxCast) return false;
      if (!MulHitEntityDic.Equals(other.MulHitEntityDic)) return false;
      if (!IgnoreEntity.Equals(other.IgnoreEntity)) return false;
      if (CreatedEntityType != other.CreatedEntityType) return false;
      if (ColliderOrder != other.ColliderOrder) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= HitEntityDic.GetHashCode();
      hash ^= HitInfos.GetHashCode();
      if (HasIsHitEntity) hash ^= IsHitEntity.GetHashCode();
      if (HasIsHitEnvironment) hash ^= IsHitEnvironment.GetHashCode();
      if (HasSize) hash ^= Size.GetHashCode();
      if (HasUsedBoxCast) hash ^= UsedBoxCast.GetHashCode();
      hash ^= MulHitEntityDic.GetHashCode();
      hash ^= IgnoreEntity.GetHashCode();
      if (HasCreatedEntityType) hash ^= CreatedEntityType.GetHashCode();
      if (HasColliderOrder) hash ^= ColliderOrder.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHitEntityDicDirty)) {
        hitEntityDic_.WriteTo(output, _map_hitEntityDic_codec);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHitInfosDirty)) {
        hitInfos_.WriteTo(output, _map_hitInfos_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsHitEntity)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsHitEntityDirty)) {
        output.WriteRawTag(24);
        output.WriteBool(IsHitEntity);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsHitEnvironment)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsHitEnvironmentDirty)) {
        output.WriteRawTag(32);
        output.WriteBool(IsHitEnvironment);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSize)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSizeDirty)) {
        output.WriteRawTag(42);
        output.WriteMessage(Size);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasUsedBoxCast)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUsedBoxCastDirty)) {
        output.WriteRawTag(48);
        output.WriteBool(UsedBoxCast);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMulHitEntityDicDirty)) {
        mulHitEntityDic_.WriteTo(output, _map_mulHitEntityDic_codec);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIgnoreEntityDirty)) {
        ignoreEntity_.WriteTo(output, _map_ignoreEntity_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCreatedEntityType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCreatedEntityTypeDirty)) {
        output.WriteRawTag(72);
        output.WriteUInt32(CreatedEntityType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasColliderOrder)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsColliderOrderDirty)) {
        output.WriteRawTag(80);
        output.WriteUInt32(ColliderOrder);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHitEntityDicDirty)) {
        hitEntityDic_.WriteTo(ref output, _map_hitEntityDic_codec);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHitInfosDirty)) {
        hitInfos_.WriteTo(ref output, _map_hitInfos_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsHitEntity)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsHitEntityDirty)) {
        output.WriteRawTag(24);
        output.WriteBool(IsHitEntity);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsHitEnvironment)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsHitEnvironmentDirty)) {
        output.WriteRawTag(32);
        output.WriteBool(IsHitEnvironment);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSize)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSizeDirty)) {
        output.WriteRawTag(42);
        output.WriteMessage(Size);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasUsedBoxCast)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUsedBoxCastDirty)) {
        output.WriteRawTag(48);
        output.WriteBool(UsedBoxCast);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMulHitEntityDicDirty)) {
        mulHitEntityDic_.WriteTo(ref output, _map_mulHitEntityDic_codec);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIgnoreEntityDirty)) {
        ignoreEntity_.WriteTo(ref output, _map_ignoreEntity_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCreatedEntityType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCreatedEntityTypeDirty)) {
        output.WriteRawTag(72);
        output.WriteUInt32(CreatedEntityType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasColliderOrder)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsColliderOrderDirty)) {
        output.WriteRawTag(80);
        output.WriteUInt32(ColliderOrder);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if (HitEntityDic != null) {
        int msgSize = hitEntityDic_.CalculateSize(_map_hitEntityDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 1;
        } else {
          _dirtyBits0 &= ~1;
        }
      }
      if (HitInfos != null) {
        int msgSize = hitInfos_.CalculateSize(_map_hitInfos_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 2;
        } else {
          _dirtyBits0 &= ~2;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasIsHitEntity)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIsHitEntityDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasIsHitEnvironment)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIsHitEnvironmentDirty)) {
        size += 1 + 1;
      }
      if (HasSize) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Size, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 16;
        } else {
          _dirtyBits0 &= ~16;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasUsedBoxCast)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsUsedBoxCastDirty)) {
        size += 1 + 1;
      }
      if (MulHitEntityDic != null) {
        int msgSize = mulHitEntityDic_.CalculateSize(_map_mulHitEntityDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 64;
        } else {
          _dirtyBits0 &= ~64;
        }
      }
      if (IgnoreEntity != null) {
        int msgSize = ignoreEntity_.CalculateSize(_map_ignoreEntity_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 128;
        } else {
          _dirtyBits0 &= ~128;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasCreatedEntityType)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCreatedEntityTypeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreatedEntityType);
      }
      if ((scope == pb.WriteScope.FULL && HasColliderOrder)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsColliderOrderDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ColliderOrder);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HitCheckSyncData other) {
      if (other == null) {
        return;
      }
      foreach (var key in other.hitEntityDic_.DeleteList) {
        hitEntityDic_.Remove(key);
      }
      foreach (var pair in other.hitEntityDic_) {
        hitEntityDic_[pair.Key] = pair.Value;
      }
      foreach (var key in other.hitInfos_.DeleteList) {
        hitInfos_.Remove(key);
      }
      foreach (var pair in other.hitInfos_) {
        global::Protocol.HitInfoData value;
        if(hitInfos_.TryGetValue(pair.Key, out value)) {
          value.MergeFrom(pair.Value);
        }else{
          hitInfos_.Add(pair.Key, pair.Value);
        }
      }
      if (other.HasIsHitEntity) {
        IsHitEntity = other.IsHitEntity;
      }
      if (other.HasIsHitEnvironment) {
        IsHitEnvironment = other.IsHitEnvironment;
      }
      if (other.HasSize) {
        if (!HasSize) {
          Size = new global::Protocol.Float3();
        }
        Size.MergeFrom(other.Size);
      }
      if (other.HasUsedBoxCast) {
        UsedBoxCast = other.UsedBoxCast;
      }
      foreach (var key in other.mulHitEntityDic_.DeleteList) {
        mulHitEntityDic_.Remove(key);
      }
      foreach (var pair in other.mulHitEntityDic_) {
        mulHitEntityDic_[pair.Key] = pair.Value;
      }
      foreach (var key in other.ignoreEntity_.DeleteList) {
        ignoreEntity_.Remove(key);
      }
      foreach (var pair in other.ignoreEntity_) {
        ignoreEntity_[pair.Key] = pair.Value;
      }
      if (other.HasCreatedEntityType) {
        CreatedEntityType = other.CreatedEntityType;
      }
      if (other.HasColliderOrder) {
        ColliderOrder = other.ColliderOrder;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            hitEntityDic_.AddEntriesFrom(input, _map_hitEntityDic_codec);
            break;
          }
          case 18: {
            hitInfos_.AddEntriesFrom(input, _map_hitInfos_codec);
            break;
          }
          case 24: {
            IsHitEntity = input.ReadBool();
            break;
          }
          case 32: {
            IsHitEnvironment = input.ReadBool();
            break;
          }
          case 42: {
            if (!HasSize) {
              Size = new global::Protocol.Float3();
            }
            input.ReadMessage(Size);
            break;
          }
          case 48: {
            UsedBoxCast = input.ReadBool();
            break;
          }
          case 58: {
            mulHitEntityDic_.AddEntriesFrom(input, _map_mulHitEntityDic_codec);
            break;
          }
          case 66: {
            ignoreEntity_.AddEntriesFrom(input, _map_ignoreEntity_codec);
            break;
          }
          case 72: {
            CreatedEntityType = input.ReadUInt32();
            break;
          }
          case 80: {
            ColliderOrder = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            hitEntityDic_.AddEntriesFrom(ref input, _map_hitEntityDic_codec);
            break;
          }
          case 18: {
            hitInfos_.AddEntriesFrom(ref input, _map_hitInfos_codec);
            break;
          }
          case 24: {
            IsHitEntity = input.ReadBool();
            break;
          }
          case 32: {
            IsHitEnvironment = input.ReadBool();
            break;
          }
          case 42: {
            if (!HasSize) {
              Size = new global::Protocol.Float3();
            }
            input.ReadMessage(Size);
            break;
          }
          case 48: {
            UsedBoxCast = input.ReadBool();
            break;
          }
          case 58: {
            mulHitEntityDic_.AddEntriesFrom(ref input, _map_mulHitEntityDic_codec);
            break;
          }
          case 66: {
            ignoreEntity_.AddEntriesFrom(ref input, _map_ignoreEntity_codec);
            break;
          }
          case 72: {
            CreatedEntityType = input.ReadUInt32();
            break;
          }
          case 80: {
            ColliderOrder = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NavSyncData : pb::IMessage<NavSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NavSyncData> _parser = new pb::MessageParser<NavSyncData>(() => new NavSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NavSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[109]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavSyncData(NavSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      wayMapId_ = other.wayMapId_;
      nextPosition_ = other.HasNextPosition ? other.nextPosition_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavSyncData Clone() {
      return new NavSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "way_map_id" field.</summary>
    public const int WayMapIdFieldNumber = 1;
    private uint wayMapId_;
    /// <summary>
    ///关联的路点ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WayMapId {
      get { if ((_hasBits0 & 1) != 0) { return wayMapId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        wayMapId_ = value;
      }
    }
    /// <summary>Gets whether the "way_map_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWayMapId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "way_map_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWayMapIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "way_map_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWayMapId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "next_position" field.</summary>
    public const int NextPositionFieldNumber = 2;
    private global::Protocol.Float3 nextPosition_;
    /// <summary>
    ///正在前往的点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 NextPosition {
      get { return nextPosition_; }
      set {
        nextPosition_ = value;
      }
    }
    /// <summary>Gets whether the next_position field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNextPosition {
      get { return nextPosition_ != null; }
    }
    /// <summary>Clears the value of the next_position field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNextPosition() {
      nextPosition_ = null;
    }
    /// <summary>Gets whether the "next_position" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNextPositionDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NavSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NavSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WayMapId != other.WayMapId) return false;
      if (!object.Equals(NextPosition, other.NextPosition)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasWayMapId) hash ^= WayMapId.GetHashCode();
      if (HasNextPosition) hash ^= NextPosition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasWayMapId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsWayMapIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(WayMapId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNextPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNextPositionDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(NextPosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasWayMapId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsWayMapIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(WayMapId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNextPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNextPositionDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(NextPosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasWayMapId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsWayMapIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WayMapId);
      }
      if (HasNextPosition) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(NextPosition, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 2;
        } else {
          _dirtyBits0 &= ~2;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NavSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasWayMapId) {
        WayMapId = other.WayMapId;
      }
      if (other.HasNextPosition) {
        if (!HasNextPosition) {
          NextPosition = new global::Protocol.Float3();
        }
        NextPosition.MergeFrom(other.NextPosition);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WayMapId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (!HasNextPosition) {
              NextPosition = new global::Protocol.Float3();
            }
            input.ReadMessage(NextPosition);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WayMapId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (!HasNextPosition) {
              NextPosition = new global::Protocol.Float3();
            }
            input.ReadMessage(NextPosition);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GoapSyncData : pb::IMessage<GoapSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GoapSyncData> _parser = new pb::MessageParser<GoapSyncData>(() => new GoapSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoapSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[110]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoapSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoapSyncData(GoapSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      playAnimation_ = other.playAnimation_;
      destinPosition_ = other.HasDestinPosition ? other.destinPosition_.Clone() : null;
      goapAssetPath_ = other.goapAssetPath_;
      architectureNpc_ = other.architectureNpc_;
      architectureBindId_ = other.architectureBindId_;
      clusterChatData_ = other.HasClusterChatData ? other.clusterChatData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoapSyncData Clone() {
      return new GoapSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "play_animation" field.</summary>
    public const int PlayAnimationFieldNumber = 1;
    private uint playAnimation_;
    /// <summary>
    ///播放指定名称动画   0: Walk 1: Run 2: Idle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayAnimation {
      get { if ((_hasBits0 & 1) != 0) { return playAnimation_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        playAnimation_ = value;
      }
    }
    /// <summary>Gets whether the "play_animation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayAnimation {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "play_animation" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPlayAnimationDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "play_animation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayAnimation() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "destin_position" field.</summary>
    public const int DestinPositionFieldNumber = 2;
    private global::Protocol.Float3 destinPosition_;
    /// <summary>
    ///当前导航去的终点位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 DestinPosition {
      get { return destinPosition_; }
      set {
        destinPosition_ = value;
      }
    }
    /// <summary>Gets whether the destin_position field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestinPosition {
      get { return destinPosition_ != null; }
    }
    /// <summary>Clears the value of the destin_position field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestinPosition() {
      destinPosition_ = null;
    }
    /// <summary>Gets whether the "destin_position" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDestinPositionDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    /// <summary>Field number for the "goap_asset_path" field.</summary>
    public const int GoapAssetPathFieldNumber = 3;
    private string goapAssetPath_;
    /// <summary>
    ///Goap配置资源文件名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GoapAssetPath {
      get { return goapAssetPath_ ?? ""; }
      set {
        goapAssetPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "goap_asset_path" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGoapAssetPath {
      get { return goapAssetPath_ != null; }
    }
    /// <summary>Gets whether the "goap_asset_path" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGoapAssetPathDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "goap_asset_path" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGoapAssetPath() {
      goapAssetPath_ = null;
    }

    /// <summary>Field number for the "architecture_npc" field.</summary>
    public const int ArchitectureNpcFieldNumber = 4;
    private bool architectureNpc_;
    /// <summary>
    ///是否建筑Npc，摊贩等 无需寻路Npc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ArchitectureNpc {
      get { if ((_hasBits0 & 2) != 0) { return architectureNpc_; } else { return false; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 8;
        architectureNpc_ = value;
      }
    }
    /// <summary>Gets whether the "architecture_npc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasArchitectureNpc {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "architecture_npc" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsArchitectureNpcDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "architecture_npc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearArchitectureNpc() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "architecture_bind_id" field.</summary>
    public const int ArchitectureBindIdFieldNumber = 5;
    private uint architectureBindId_;
    /// <summary>
    ///建筑Npc ，绑定的建筑 LogicEntity Id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArchitectureBindId {
      get { if ((_hasBits0 & 4) != 0) { return architectureBindId_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 16;
        architectureBindId_ = value;
      }
    }
    /// <summary>Gets whether the "architecture_bind_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasArchitectureBindId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "architecture_bind_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsArchitectureBindIdDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "architecture_bind_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearArchitectureBindId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "cluster_chat_data" field.</summary>
    public const int ClusterChatDataFieldNumber = 6;
    private global::Protocol.ClusterChatSyncData clusterChatData_;
    /// <summary>
    ///集群聊天行为
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ClusterChatSyncData ClusterChatData {
      get { return clusterChatData_; }
      set {
        clusterChatData_ = value;
      }
    }
    /// <summary>Gets whether the cluster_chat_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClusterChatData {
      get { return clusterChatData_ != null; }
    }
    /// <summary>Clears the value of the cluster_chat_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClusterChatData() {
      clusterChatData_ = null;
    }
    /// <summary>Gets whether the "cluster_chat_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsClusterChatDataDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GoapSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GoapSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayAnimation != other.PlayAnimation) return false;
      if (!object.Equals(DestinPosition, other.DestinPosition)) return false;
      if (GoapAssetPath != other.GoapAssetPath) return false;
      if (ArchitectureNpc != other.ArchitectureNpc) return false;
      if (ArchitectureBindId != other.ArchitectureBindId) return false;
      if (!object.Equals(ClusterChatData, other.ClusterChatData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayAnimation) hash ^= PlayAnimation.GetHashCode();
      if (HasDestinPosition) hash ^= DestinPosition.GetHashCode();
      if (HasGoapAssetPath) hash ^= GoapAssetPath.GetHashCode();
      if (HasArchitectureNpc) hash ^= ArchitectureNpc.GetHashCode();
      if (HasArchitectureBindId) hash ^= ArchitectureBindId.GetHashCode();
      if (HasClusterChatData) hash ^= ClusterChatData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasPlayAnimation)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPlayAnimationDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayAnimation);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDestinPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDestinPositionDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(DestinPosition);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasGoapAssetPath)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsGoapAssetPathDirty)) {
        output.WriteRawTag(26);
        output.WriteString(GoapAssetPath);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasArchitectureNpc)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsArchitectureNpcDirty)) {
        output.WriteRawTag(32);
        output.WriteBool(ArchitectureNpc);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasArchitectureBindId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsArchitectureBindIdDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(ArchitectureBindId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasClusterChatData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsClusterChatDataDirty)) {
        output.WriteRawTag(50);
        output.WriteMessage(ClusterChatData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasPlayAnimation)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPlayAnimationDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayAnimation);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDestinPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDestinPositionDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(DestinPosition);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasGoapAssetPath)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsGoapAssetPathDirty)) {
        output.WriteRawTag(26);
        output.WriteString(GoapAssetPath);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasArchitectureNpc)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsArchitectureNpcDirty)) {
        output.WriteRawTag(32);
        output.WriteBool(ArchitectureNpc);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasArchitectureBindId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsArchitectureBindIdDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(ArchitectureBindId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasClusterChatData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsClusterChatDataDirty)) {
        output.WriteRawTag(50);
        output.WriteMessage(ClusterChatData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasPlayAnimation)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsPlayAnimationDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayAnimation);
      }
      if (HasDestinPosition) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(DestinPosition, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 2;
        } else {
          _dirtyBits0 &= ~2;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasGoapAssetPath)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsGoapAssetPathDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GoapAssetPath);
      }
      if ((scope == pb.WriteScope.FULL && HasArchitectureNpc)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsArchitectureNpcDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasArchitectureBindId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsArchitectureBindIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArchitectureBindId);
      }
      if (HasClusterChatData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(ClusterChatData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 32;
        } else {
          _dirtyBits0 &= ~32;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GoapSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayAnimation) {
        PlayAnimation = other.PlayAnimation;
      }
      if (other.HasDestinPosition) {
        if (!HasDestinPosition) {
          DestinPosition = new global::Protocol.Float3();
        }
        DestinPosition.MergeFrom(other.DestinPosition);
      }
      if (other.HasGoapAssetPath) {
        GoapAssetPath = other.GoapAssetPath;
      }
      if (other.HasArchitectureNpc) {
        ArchitectureNpc = other.ArchitectureNpc;
      }
      if (other.HasArchitectureBindId) {
        ArchitectureBindId = other.ArchitectureBindId;
      }
      if (other.HasClusterChatData) {
        if (!HasClusterChatData) {
          ClusterChatData = new global::Protocol.ClusterChatSyncData();
        }
        ClusterChatData.MergeFrom(other.ClusterChatData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayAnimation = input.ReadUInt32();
            break;
          }
          case 18: {
            if (!HasDestinPosition) {
              DestinPosition = new global::Protocol.Float3();
            }
            input.ReadMessage(DestinPosition);
            break;
          }
          case 26: {
            GoapAssetPath = input.ReadString();
            break;
          }
          case 32: {
            ArchitectureNpc = input.ReadBool();
            break;
          }
          case 40: {
            ArchitectureBindId = input.ReadUInt32();
            break;
          }
          case 50: {
            if (!HasClusterChatData) {
              ClusterChatData = new global::Protocol.ClusterChatSyncData();
            }
            input.ReadMessage(ClusterChatData);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayAnimation = input.ReadUInt32();
            break;
          }
          case 18: {
            if (!HasDestinPosition) {
              DestinPosition = new global::Protocol.Float3();
            }
            input.ReadMessage(DestinPosition);
            break;
          }
          case 26: {
            GoapAssetPath = input.ReadString();
            break;
          }
          case 32: {
            ArchitectureNpc = input.ReadBool();
            break;
          }
          case 40: {
            ArchitectureBindId = input.ReadUInt32();
            break;
          }
          case 50: {
            if (!HasClusterChatData) {
              ClusterChatData = new global::Protocol.ClusterChatSyncData();
            }
            input.ReadMessage(ClusterChatData);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ClusterChatSyncData : pb::IMessage<ClusterChatSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClusterChatSyncData> _parser = new pb::MessageParser<ClusterChatSyncData>(() => new ClusterChatSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClusterChatSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[111]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterChatSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterChatSyncData(ClusterChatSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      clusterId_ = other.clusterId_;
      assignCluster_ = other.assignCluster_;
      listen_ = other.listen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterChatSyncData Clone() {
      return new ClusterChatSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private uint clusterId_;
    /// <summary>
    ///所属集群id.0 默认表示非集群npc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClusterId {
      get { if ((_hasBits0 & 1) != 0) { return clusterId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        clusterId_ = value;
      }
    }
    /// <summary>Gets whether the "cluster_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClusterId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "cluster_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsClusterIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cluster_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClusterId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "assign_cluster" field.</summary>
    public const int AssignClusterFieldNumber = 2;
    private bool assignCluster_;
    /// <summary>
    ///集群当次行为是否分配。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AssignCluster {
      get { if ((_hasBits0 & 2) != 0) { return assignCluster_; } else { return false; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        assignCluster_ = value;
      }
    }
    /// <summary>Gets whether the "assign_cluster" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAssignCluster {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "assign_cluster" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAssignClusterDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "assign_cluster" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAssignCluster() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "listen" field.</summary>
    public const int ListenFieldNumber = 3;
    private bool listen_;
    /// <summary>
    /// true:执行listen行为, false: 执行chat行为
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Listen {
      get { if ((_hasBits0 & 4) != 0) { return listen_; } else { return false; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        listen_ = value;
      }
    }
    /// <summary>Gets whether the "listen" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasListen {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "listen" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsListenDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "listen" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearListen() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClusterChatSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClusterChatSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (AssignCluster != other.AssignCluster) return false;
      if (Listen != other.Listen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasClusterId) hash ^= ClusterId.GetHashCode();
      if (HasAssignCluster) hash ^= AssignCluster.GetHashCode();
      if (HasListen) hash ^= Listen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasClusterId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsClusterIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(ClusterId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAssignCluster)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAssignClusterDirty)) {
        output.WriteRawTag(16);
        output.WriteBool(AssignCluster);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasListen)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsListenDirty)) {
        output.WriteRawTag(24);
        output.WriteBool(Listen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasClusterId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsClusterIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(ClusterId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAssignCluster)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAssignClusterDirty)) {
        output.WriteRawTag(16);
        output.WriteBool(AssignCluster);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasListen)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsListenDirty)) {
        output.WriteRawTag(24);
        output.WriteBool(Listen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasClusterId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsClusterIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClusterId);
      }
      if ((scope == pb.WriteScope.FULL && HasAssignCluster)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsAssignClusterDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasListen)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsListenDirty)) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClusterChatSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasClusterId) {
        ClusterId = other.ClusterId;
      }
      if (other.HasAssignCluster) {
        AssignCluster = other.AssignCluster;
      }
      if (other.HasListen) {
        Listen = other.Listen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClusterId = input.ReadUInt32();
            break;
          }
          case 16: {
            AssignCluster = input.ReadBool();
            break;
          }
          case 24: {
            Listen = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ClusterId = input.ReadUInt32();
            break;
          }
          case 16: {
            AssignCluster = input.ReadBool();
            break;
          }
          case 24: {
            Listen = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GazeSyncData : pb::IMessage<GazeSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GazeSyncData> _parser = new pb::MessageParser<GazeSyncData>(() => new GazeSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GazeSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[112]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GazeSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GazeSyncData(GazeSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      openGazeFunc_ = other.openGazeFunc_;
      angle_ = other.angle_;
      radius_ = other.radius_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GazeSyncData Clone() {
      return new GazeSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "open_gaze_func" field.</summary>
    public const int OpenGazeFuncFieldNumber = 1;
    private bool openGazeFunc_;
    /// <summary>
    ///开启npc注视功能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OpenGazeFunc {
      get { if ((_hasBits0 & 1) != 0) { return openGazeFunc_; } else { return false; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        openGazeFunc_ = value;
      }
    }
    /// <summary>Gets whether the "open_gaze_func" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOpenGazeFunc {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "open_gaze_func" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOpenGazeFuncDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "open_gaze_func" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOpenGazeFunc() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 2;
    private float angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Angle {
      get { if ((_hasBits0 & 2) != 0) { return angle_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        angle_ = value;
      }
    }
    /// <summary>Gets whether the "angle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAngle {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "angle" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAngleDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "angle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAngle() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 3;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { if ((_hasBits0 & 4) != 0) { return radius_; } else { return 0F; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        radius_ = value;
      }
    }
    /// <summary>Gets whether the "radius" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRadius {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "radius" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRadiusDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "radius" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRadius() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GazeSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GazeSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OpenGazeFunc != other.OpenGazeFunc) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Angle, other.Angle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOpenGazeFunc) hash ^= OpenGazeFunc.GetHashCode();
      if (HasAngle) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Angle);
      if (HasRadius) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasOpenGazeFunc)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOpenGazeFuncDirty)) {
        output.WriteRawTag(8);
        output.WriteBool(OpenGazeFunc);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAngle)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAngleDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(Angle);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasRadius)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRadiusDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(Radius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasOpenGazeFunc)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOpenGazeFuncDirty)) {
        output.WriteRawTag(8);
        output.WriteBool(OpenGazeFunc);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAngle)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAngleDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(Angle);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasRadius)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRadiusDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(Radius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasOpenGazeFunc)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsOpenGazeFuncDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasAngle)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsAngleDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasRadius)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsRadiusDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GazeSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasOpenGazeFunc) {
        OpenGazeFunc = other.OpenGazeFunc;
      }
      if (other.HasAngle) {
        Angle = other.Angle;
      }
      if (other.HasRadius) {
        Radius = other.Radius;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OpenGazeFunc = input.ReadBool();
            break;
          }
          case 21: {
            Angle = input.ReadFloat();
            break;
          }
          case 29: {
            Radius = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OpenGazeFunc = input.ReadBool();
            break;
          }
          case 21: {
            Angle = input.ReadFloat();
            break;
          }
          case 29: {
            Radius = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ArchitectureSyncData : pb::IMessage<ArchitectureSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ArchitectureSyncData> _parser = new pb::MessageParser<ArchitectureSyncData>(() => new ArchitectureSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArchitectureSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[113]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArchitectureSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArchitectureSyncData(ArchitectureSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      architId_ = other.architId_;
      lineDic_ = other.lineDic_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArchitectureSyncData Clone() {
      return new ArchitectureSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "archit_id" field.</summary>
    public const int ArchitIdFieldNumber = 1;
    private uint architId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArchitId {
      get { if ((_hasBits0 & 1) != 0) { return architId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        architId_ = value;
      }
    }
    /// <summary>Gets whether the "archit_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasArchitId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "archit_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsArchitIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "archit_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearArchitId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "line_dic" field.</summary>
    public const int LineDicFieldNumber = 2;
    private static readonly pbc::MapField<uint, global::Protocol.ArchitectureLineUpInfo>.Codec _map_lineDic_codec
        = new pbc::MapField<uint, global::Protocol.ArchitectureLineUpInfo>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Protocol.ArchitectureLineUpInfo.Parser), 18);
    private readonly pbc::MapField<uint, global::Protocol.ArchitectureLineUpInfo> lineDic_ = new pbc::MapField<uint, global::Protocol.ArchitectureLineUpInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Protocol.ArchitectureLineUpInfo> LineDic {
      get { return lineDic_; }
    }
    /// <summary>Gets whether the "line_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLineDicDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArchitectureSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArchitectureSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ArchitId != other.ArchitId) return false;
      if (!LineDic.Equals(other.LineDic)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasArchitId) hash ^= ArchitId.GetHashCode();
      hash ^= LineDic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasArchitId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsArchitIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(ArchitId);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLineDicDirty)) {
        lineDic_.WriteTo(output, _map_lineDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasArchitId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsArchitIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(ArchitId);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLineDicDirty)) {
        lineDic_.WriteTo(ref output, _map_lineDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasArchitId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsArchitIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArchitId);
      }
      if (LineDic != null) {
        int msgSize = lineDic_.CalculateSize(_map_lineDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 2;
        } else {
          _dirtyBits0 &= ~2;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArchitectureSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasArchitId) {
        ArchitId = other.ArchitId;
      }
      foreach (var key in other.lineDic_.DeleteList) {
        lineDic_.Remove(key);
      }
      foreach (var pair in other.lineDic_) {
        global::Protocol.ArchitectureLineUpInfo value;
        if(lineDic_.TryGetValue(pair.Key, out value)) {
          value.MergeFrom(pair.Value);
        }else{
          lineDic_.Add(pair.Key, pair.Value);
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ArchitId = input.ReadUInt32();
            break;
          }
          case 18: {
            lineDic_.AddEntriesFrom(input, _map_lineDic_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ArchitId = input.ReadUInt32();
            break;
          }
          case 18: {
            lineDic_.AddEntriesFrom(ref input, _map_lineDic_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ArchitectureLineUpInfo : pb::IMessage<ArchitectureLineUpInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ArchitectureLineUpInfo> _parser = new pb::MessageParser<ArchitectureLineUpInfo>(() => new ArchitectureLineUpInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArchitectureLineUpInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[114]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArchitectureLineUpInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArchitectureLineUpInfo(ArchitectureLineUpInfo other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      lineIdx_ = other.lineIdx_;
      position_ = other.HasPosition ? other.position_.Clone() : null;
      rotation_ = other.HasRotation ? other.rotation_.Clone() : null;
      used_ = other.used_;
      entered_ = other.entered_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArchitectureLineUpInfo Clone() {
      return new ArchitectureLineUpInfo(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "line_idx" field.</summary>
    public const int LineIdxFieldNumber = 1;
    private uint lineIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LineIdx {
      get { if ((_hasBits0 & 1) != 0) { return lineIdx_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        lineIdx_ = value;
      }
    }
    /// <summary>Gets whether the "line_idx" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLineIdx {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "line_idx" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLineIdxDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "line_idx" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLineIdx() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Protocol.Float3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }
    /// <summary>Gets whether the position field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPosition {
      get { return position_ != null; }
    }
    /// <summary>Clears the value of the position field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPosition() {
      position_ = null;
    }
    /// <summary>Gets whether the "position" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPositionDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private global::Protocol.Float3 rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }
    /// <summary>Gets whether the rotation field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRotation {
      get { return rotation_ != null; }
    }
    /// <summary>Clears the value of the rotation field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRotation() {
      rotation_ = null;
    }
    /// <summary>Gets whether the "rotation" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRotationDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    /// <summary>Field number for the "used" field.</summary>
    public const int UsedFieldNumber = 4;
    private bool used_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Used {
      get { if ((_hasBits0 & 2) != 0) { return used_; } else { return false; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 8;
        used_ = value;
      }
    }
    /// <summary>Gets whether the "used" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUsed {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "used" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUsedDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "used" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUsed() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "entered" field.</summary>
    public const int EnteredFieldNumber = 5;
    private bool entered_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Entered {
      get { if ((_hasBits0 & 4) != 0) { return entered_; } else { return false; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 16;
        entered_ = value;
      }
    }
    /// <summary>Gets whether the "entered" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntered {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "entered" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEnteredDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "entered" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntered() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArchitectureLineUpInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArchitectureLineUpInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LineIdx != other.LineIdx) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (Used != other.Used) return false;
      if (Entered != other.Entered) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLineIdx) hash ^= LineIdx.GetHashCode();
      if (HasPosition) hash ^= Position.GetHashCode();
      if (HasRotation) hash ^= Rotation.GetHashCode();
      if (HasUsed) hash ^= Used.GetHashCode();
      if (HasEntered) hash ^= Entered.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasLineIdx)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLineIdxDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(LineIdx);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPositionDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasRotation)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRotationDirty)) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasUsed)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUsedDirty)) {
        output.WriteRawTag(32);
        output.WriteBool(Used);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEntered)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEnteredDirty)) {
        output.WriteRawTag(40);
        output.WriteBool(Entered);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasLineIdx)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLineIdxDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(LineIdx);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPositionDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasRotation)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRotationDirty)) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasUsed)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUsedDirty)) {
        output.WriteRawTag(32);
        output.WriteBool(Used);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEntered)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEnteredDirty)) {
        output.WriteRawTag(40);
        output.WriteBool(Entered);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasLineIdx)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsLineIdxDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LineIdx);
      }
      if (HasPosition) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Position, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 2;
        } else {
          _dirtyBits0 &= ~2;
        }
      }
      if (HasRotation) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Rotation, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 4;
        } else {
          _dirtyBits0 &= ~4;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasUsed)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsUsedDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasEntered)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEnteredDirty)) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArchitectureLineUpInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasLineIdx) {
        LineIdx = other.LineIdx;
      }
      if (other.HasPosition) {
        if (!HasPosition) {
          Position = new global::Protocol.Float3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.HasRotation) {
        if (!HasRotation) {
          Rotation = new global::Protocol.Float3();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.HasUsed) {
        Used = other.Used;
      }
      if (other.HasEntered) {
        Entered = other.Entered;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LineIdx = input.ReadUInt32();
            break;
          }
          case 18: {
            if (!HasPosition) {
              Position = new global::Protocol.Float3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            if (!HasRotation) {
              Rotation = new global::Protocol.Float3();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 32: {
            Used = input.ReadBool();
            break;
          }
          case 40: {
            Entered = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LineIdx = input.ReadUInt32();
            break;
          }
          case 18: {
            if (!HasPosition) {
              Position = new global::Protocol.Float3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            if (!HasRotation) {
              Rotation = new global::Protocol.Float3();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 32: {
            Used = input.ReadBool();
            break;
          }
          case 40: {
            Entered = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HotSyncData : pb::IMessage<HotSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HotSyncData> _parser = new pb::MessageParser<HotSyncData>(() => new HotSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HotSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[115]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HotSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HotSyncData(HotSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      pointId_ = other.pointId_;
      pickingTime_ = other.pickingTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HotSyncData Clone() {
      return new HotSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "point_id" field.</summary>
    public const int PointIdFieldNumber = 1;
    private int pointId_;
    /// <summary>
    ///得分点ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PointId {
      get { if ((_hasBits0 & 1) != 0) { return pointId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        pointId_ = value;
      }
    }
    /// <summary>Gets whether the "point_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPointId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "point_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPointIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "point_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPointId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "picking_time" field.</summary>
    public const int PickingTimeFieldNumber = 2;
    private float pickingTime_;
    /// <summary>
    ///交互时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PickingTime {
      get { if ((_hasBits0 & 2) != 0) { return pickingTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        pickingTime_ = value;
      }
    }
    /// <summary>Gets whether the "picking_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPickingTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "picking_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPickingTimeDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "picking_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPickingTime() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HotSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HotSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PointId != other.PointId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PickingTime, other.PickingTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPointId) hash ^= PointId.GetHashCode();
      if (HasPickingTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PickingTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasPointId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPointIdDirty)) {
        output.WriteRawTag(8);
        output.WriteInt32(PointId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPickingTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPickingTimeDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(PickingTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasPointId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPointIdDirty)) {
        output.WriteRawTag(8);
        output.WriteInt32(PointId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPickingTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPickingTimeDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(PickingTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasPointId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsPointIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PointId);
      }
      if ((scope == pb.WriteScope.FULL && HasPickingTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsPickingTimeDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HotSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasPointId) {
        PointId = other.PointId;
      }
      if (other.HasPickingTime) {
        PickingTime = other.PickingTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PointId = input.ReadInt32();
            break;
          }
          case 21: {
            PickingTime = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PointId = input.ReadInt32();
            break;
          }
          case 21: {
            PickingTime = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AreaSyncData : pb::IMessage<AreaSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AreaSyncData> _parser = new pb::MessageParser<AreaSyncData>(() => new AreaSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AreaSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[116]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AreaSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AreaSyncData(AreaSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      sidePointMergeList_ = other.sidePointMergeList_.Clone();
      radius_ = other.radius_;
      hideSideLine_ = other.hideSideLine_;
      areaActionType_ = other.areaActionType_;
      id_ = other.id_;
      areaStandDic_ = other.areaStandDic_.Clone();
      maxNpcCount_ = other.maxNpcCount_;
      frequency_ = other.frequency_;
      powerRadius_ = other.powerRadius_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AreaSyncData Clone() {
      return new AreaSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "side_point_merge_list" field.</summary>
    public const int SidePointMergeListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.Float3> _repeated_sidePointMergeList_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.Float3.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Float3> sidePointMergeList_ = new pbc::RepeatedField<global::Protocol.Float3>();
    /// <summary>
    ///外轮廓点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Float3> SidePointMergeList {
      get { return sidePointMergeList_; }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 2;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { if ((_hasBits0 & 1) != 0) { return radius_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 2;
        radius_ = value;
      }
    }
    /// <summary>Gets whether the "radius" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRadius {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "radius" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRadiusDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "radius" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRadius() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "hide_side_line" field.</summary>
    public const int HideSideLineFieldNumber = 3;
    private bool hideSideLine_;
    /// <summary>
    ///是否隐藏边际线
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HideSideLine {
      get { if ((_hasBits0 & 2) != 0) { return hideSideLine_; } else { return false; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 4;
        hideSideLine_ = value;
      }
    }
    /// <summary>Gets whether the "hide_side_line" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHideSideLine {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "hide_side_line" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHideSideLineDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "hide_side_line" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHideSideLine() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "areaActionType" field.</summary>
    public const int AreaActionTypeFieldNumber = 4;
    private global::Protocol.AreaActionType areaActionType_;
    /// <summary>
    ///藏匿区行为类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AreaActionType AreaActionType {
      get { if ((_hasBits0 & 4) != 0) { return areaActionType_; } else { return global::Protocol.AreaActionType.Talk; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 8;
        areaActionType_ = value;
      }
    }
    /// <summary>Gets whether the "areaActionType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAreaActionType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "areaActionType" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAreaActionTypeDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "areaActionType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAreaActionType() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 5;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 8) != 0) { return id_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 16;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIdDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "area_stand_dic" field.</summary>
    public const int AreaStandDicFieldNumber = 6;
    private static readonly pbc::MapField<uint, global::Protocol.AreaStandPoint>.Codec _map_areaStandDic_codec
        = new pbc::MapField<uint, global::Protocol.AreaStandPoint>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Protocol.AreaStandPoint.Parser), 50);
    private readonly pbc::MapField<uint, global::Protocol.AreaStandPoint> areaStandDic_ = new pbc::MapField<uint, global::Protocol.AreaStandPoint>();
    /// <summary>
    ///藏匿区上的停留点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Protocol.AreaStandPoint> AreaStandDic {
      get { return areaStandDic_; }
    }
    /// <summary>Gets whether the "area_stand_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAreaStandDicDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }

    /// <summary>Field number for the "max_npc_count" field.</summary>
    public const int MaxNpcCountFieldNumber = 7;
    private uint maxNpcCount_;
    /// <summary>
    ///最大NPC数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxNpcCount {
      get { if ((_hasBits0 & 16) != 0) { return maxNpcCount_; } else { return 0; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 64;
        maxNpcCount_ = value;
      }
    }
    /// <summary>Gets whether the "max_npc_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxNpcCount {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "max_npc_count" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMaxNpcCountDirty {
      get { return (_dirtyBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "max_npc_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxNpcCount() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "frequency" field.</summary>
    public const int FrequencyFieldNumber = 8;
    private float frequency_;
    /// <summary>
    ///吸引概率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Frequency {
      get { if ((_hasBits0 & 32) != 0) { return frequency_; } else { return 0F; } }
      set {
        _hasBits0 |= 32;
        _dirtyBits0 |= 128;
        frequency_ = value;
      }
    }
    /// <summary>Gets whether the "frequency" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFrequency {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Gets whether the "frequency" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFrequencyDirty {
      get { return (_dirtyBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "frequency" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFrequency() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "power_radius" field.</summary>
    public const int PowerRadiusFieldNumber = 9;
    private float powerRadius_;
    /// <summary>
    ///吸引半径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PowerRadius {
      get { if ((_hasBits0 & 64) != 0) { return powerRadius_; } else { return 0F; } }
      set {
        _hasBits0 |= 64;
        _dirtyBits0 |= 256;
        powerRadius_ = value;
      }
    }
    /// <summary>Gets whether the "power_radius" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPowerRadius {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Gets whether the "power_radius" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPowerRadiusDirty {
      get { return (_dirtyBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "power_radius" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPowerRadius() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AreaSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AreaSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sidePointMergeList_.Equals(other.sidePointMergeList_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
      if (HideSideLine != other.HideSideLine) return false;
      if (AreaActionType != other.AreaActionType) return false;
      if (Id != other.Id) return false;
      if (!AreaStandDic.Equals(other.AreaStandDic)) return false;
      if (MaxNpcCount != other.MaxNpcCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Frequency, other.Frequency)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PowerRadius, other.PowerRadius)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sidePointMergeList_.GetHashCode();
      if (HasRadius) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
      if (HasHideSideLine) hash ^= HideSideLine.GetHashCode();
      if (HasAreaActionType) hash ^= AreaActionType.GetHashCode();
      if (HasId) hash ^= Id.GetHashCode();
      hash ^= AreaStandDic.GetHashCode();
      if (HasMaxNpcCount) hash ^= MaxNpcCount.GetHashCode();
      if (HasFrequency) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Frequency);
      if (HasPowerRadius) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PowerRadius);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      sidePointMergeList_.WriteTo(output, _repeated_sidePointMergeList_codec);
      if ((output.writeScope == pb.WriteScope.FULL && HasRadius)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRadiusDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(Radius);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHideSideLine)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHideSideLineDirty)) {
        output.WriteRawTag(24);
        output.WriteBool(HideSideLine);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAreaActionType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAreaActionTypeDirty)) {
        output.WriteRawTag(32);
        output.WriteEnum((int) AreaActionType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(Id);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAreaStandDicDirty)) {
        areaStandDic_.WriteTo(output, _map_areaStandDic_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMaxNpcCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMaxNpcCountDirty)) {
        output.WriteRawTag(56);
        output.WriteUInt32(MaxNpcCount);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFrequency)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFrequencyDirty)) {
        output.WriteRawTag(69);
        output.WriteFloat(Frequency);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPowerRadius)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPowerRadiusDirty)) {
        output.WriteRawTag(77);
        output.WriteFloat(PowerRadius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      sidePointMergeList_.WriteTo(ref output, _repeated_sidePointMergeList_codec);
      if ((output.writeScope == pb.WriteScope.FULL && HasRadius)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRadiusDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(Radius);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHideSideLine)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHideSideLineDirty)) {
        output.WriteRawTag(24);
        output.WriteBool(HideSideLine);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAreaActionType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAreaActionTypeDirty)) {
        output.WriteRawTag(32);
        output.WriteEnum((int) AreaActionType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(Id);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAreaStandDicDirty)) {
        areaStandDic_.WriteTo(ref output, _map_areaStandDic_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMaxNpcCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMaxNpcCountDirty)) {
        output.WriteRawTag(56);
        output.WriteUInt32(MaxNpcCount);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFrequency)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFrequencyDirty)) {
        output.WriteRawTag(69);
        output.WriteFloat(Frequency);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPowerRadius)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPowerRadiusDirty)) {
        output.WriteRawTag(77);
        output.WriteFloat(PowerRadius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      size += sidePointMergeList_.CalculateSize(_repeated_sidePointMergeList_codec);
      if ((scope == pb.WriteScope.FULL && HasRadius)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsRadiusDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasHideSideLine)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsHideSideLineDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasAreaActionType)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsAreaActionTypeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AreaActionType);
      }
      if ((scope == pb.WriteScope.FULL && HasId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (AreaStandDic != null) {
        int msgSize = areaStandDic_.CalculateSize(_map_areaStandDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 32;
        } else {
          _dirtyBits0 &= ~32;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasMaxNpcCount)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsMaxNpcCountDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxNpcCount);
      }
      if ((scope == pb.WriteScope.FULL && HasFrequency)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsFrequencyDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasPowerRadius)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsPowerRadiusDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AreaSyncData other) {
      if (other == null) {
        return;
      }
      sidePointMergeList_.Add(other.sidePointMergeList_);
      if (other.HasRadius) {
        Radius = other.Radius;
      }
      if (other.HasHideSideLine) {
        HideSideLine = other.HideSideLine;
      }
      if (other.HasAreaActionType) {
        AreaActionType = other.AreaActionType;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      foreach (var key in other.areaStandDic_.DeleteList) {
        areaStandDic_.Remove(key);
      }
      foreach (var pair in other.areaStandDic_) {
        global::Protocol.AreaStandPoint value;
        if(areaStandDic_.TryGetValue(pair.Key, out value)) {
          value.MergeFrom(pair.Value);
        }else{
          areaStandDic_.Add(pair.Key, pair.Value);
        }
      }
      if (other.HasMaxNpcCount) {
        MaxNpcCount = other.MaxNpcCount;
      }
      if (other.HasFrequency) {
        Frequency = other.Frequency;
      }
      if (other.HasPowerRadius) {
        PowerRadius = other.PowerRadius;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            sidePointMergeList_.AddEntriesFrom(input, _repeated_sidePointMergeList_codec);
            break;
          }
          case 21: {
            Radius = input.ReadFloat();
            break;
          }
          case 24: {
            HideSideLine = input.ReadBool();
            break;
          }
          case 32: {
            AreaActionType = (global::Protocol.AreaActionType) input.ReadEnum();
            break;
          }
          case 40: {
            Id = input.ReadUInt32();
            break;
          }
          case 50: {
            areaStandDic_.AddEntriesFrom(input, _map_areaStandDic_codec);
            break;
          }
          case 56: {
            MaxNpcCount = input.ReadUInt32();
            break;
          }
          case 69: {
            Frequency = input.ReadFloat();
            break;
          }
          case 77: {
            PowerRadius = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            sidePointMergeList_.AddEntriesFrom(ref input, _repeated_sidePointMergeList_codec);
            break;
          }
          case 21: {
            Radius = input.ReadFloat();
            break;
          }
          case 24: {
            HideSideLine = input.ReadBool();
            break;
          }
          case 32: {
            AreaActionType = (global::Protocol.AreaActionType) input.ReadEnum();
            break;
          }
          case 40: {
            Id = input.ReadUInt32();
            break;
          }
          case 50: {
            areaStandDic_.AddEntriesFrom(ref input, _map_areaStandDic_codec);
            break;
          }
          case 56: {
            MaxNpcCount = input.ReadUInt32();
            break;
          }
          case 69: {
            Frequency = input.ReadFloat();
            break;
          }
          case 77: {
            PowerRadius = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///路人的同步数据
  /// </summary>
  public sealed partial class PasserBrainSyncData : pb::IMessage<PasserBrainSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PasserBrainSyncData> _parser = new pb::MessageParser<PasserBrainSyncData>(() => new PasserBrainSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PasserBrainSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[117]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PasserBrainSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PasserBrainSyncData(PasserBrainSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      state_ = other.state_;
      action_ = other.action_;
      npcId_ = other.npcId_;
      btState_ = other.btState_;
      subType_ = other.subType_;
      useBtAgent_ = other.useBtAgent_;
      standTime_ = other.standTime_;
      preMinStandTime_ = other.preMinStandTime_;
      preMaxStandTime_ = other.preMaxStandTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PasserBrainSyncData Clone() {
      return new PasserBrainSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Protocol.PasserState state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.PasserState State {
      get { if ((_hasBits0 & 1) != 0) { return state_; } else { return global::Protocol.PasserState.Idle; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "state" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStateDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 2;
    private int action_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Action {
      get { if ((_hasBits0 & 2) != 0) { return action_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        action_ = value;
      }
    }
    /// <summary>Gets whether the "action" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAction {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "action" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActionDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "action" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "npc_id" field.</summary>
    public const int NpcIdFieldNumber = 3;
    private uint npcId_;
    /// <summary>
    ///NPC的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NpcId {
      get { if ((_hasBits0 & 4) != 0) { return npcId_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        npcId_ = value;
      }
    }
    /// <summary>Gets whether the "npc_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNpcId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "npc_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNpcIdDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "npc_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNpcId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "bt_state" field.</summary>
    public const int BtStateFieldNumber = 4;
    private uint btState_;
    /// <summary>
    ///行为树所处状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BtState {
      get { if ((_hasBits0 & 8) != 0) { return btState_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        btState_ = value;
      }
    }
    /// <summary>Gets whether the "bt_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBtState {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "bt_state" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBtStateDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "bt_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBtState() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "subType" field.</summary>
    public const int SubTypeFieldNumber = 5;
    private global::Protocol.NpcSubType subType_;
    /// <summary>
    ///角色子类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.NpcSubType SubType {
      get { if ((_hasBits0 & 16) != 0) { return subType_; } else { return global::Protocol.NpcSubType.NstUnkown; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 16;
        subType_ = value;
      }
    }
    /// <summary>Gets whether the "subType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubType {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "subType" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSubTypeDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "subType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubType() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "use_bt_agent" field.</summary>
    public const int UseBtAgentFieldNumber = 6;
    private bool useBtAgent_;
    /// <summary>
    ///是否使用行为树
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseBtAgent {
      get { if ((_hasBits0 & 32) != 0) { return useBtAgent_; } else { return false; } }
      set {
        _hasBits0 |= 32;
        _dirtyBits0 |= 32;
        useBtAgent_ = value;
      }
    }
    /// <summary>Gets whether the "use_bt_agent" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUseBtAgent {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Gets whether the "use_bt_agent" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUseBtAgentDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "use_bt_agent" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUseBtAgent() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "stand_time" field.</summary>
    public const int StandTimeFieldNumber = 7;
    private float standTime_;
    /// <summary>
    ///停留时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StandTime {
      get { if ((_hasBits0 & 64) != 0) { return standTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 64;
        _dirtyBits0 |= 64;
        standTime_ = value;
      }
    }
    /// <summary>Gets whether the "stand_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStandTime {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Gets whether the "stand_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStandTimeDirty {
      get { return (_dirtyBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "stand_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStandTime() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "pre_min_stand_time" field.</summary>
    public const int PreMinStandTimeFieldNumber = 8;
    private float preMinStandTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PreMinStandTime {
      get { if ((_hasBits0 & 128) != 0) { return preMinStandTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 128;
        _dirtyBits0 |= 128;
        preMinStandTime_ = value;
      }
    }
    /// <summary>Gets whether the "pre_min_stand_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPreMinStandTime {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Gets whether the "pre_min_stand_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPreMinStandTimeDirty {
      get { return (_dirtyBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "pre_min_stand_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPreMinStandTime() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "pre_max_stand_time" field.</summary>
    public const int PreMaxStandTimeFieldNumber = 9;
    private float preMaxStandTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PreMaxStandTime {
      get { if ((_hasBits0 & 256) != 0) { return preMaxStandTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 256;
        _dirtyBits0 |= 256;
        preMaxStandTime_ = value;
      }
    }
    /// <summary>Gets whether the "pre_max_stand_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPreMaxStandTime {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Gets whether the "pre_max_stand_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPreMaxStandTimeDirty {
      get { return (_dirtyBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "pre_max_stand_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPreMaxStandTime() {
      _hasBits0 &= ~256;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PasserBrainSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PasserBrainSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (Action != other.Action) return false;
      if (NpcId != other.NpcId) return false;
      if (BtState != other.BtState) return false;
      if (SubType != other.SubType) return false;
      if (UseBtAgent != other.UseBtAgent) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StandTime, other.StandTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PreMinStandTime, other.PreMinStandTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PreMaxStandTime, other.PreMaxStandTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasState) hash ^= State.GetHashCode();
      if (HasAction) hash ^= Action.GetHashCode();
      if (HasNpcId) hash ^= NpcId.GetHashCode();
      if (HasBtState) hash ^= BtState.GetHashCode();
      if (HasSubType) hash ^= SubType.GetHashCode();
      if (HasUseBtAgent) hash ^= UseBtAgent.GetHashCode();
      if (HasStandTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StandTime);
      if (HasPreMinStandTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PreMinStandTime);
      if (HasPreMaxStandTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PreMaxStandTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStateDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAction)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsActionDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(Action);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNpcId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNpcIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(NpcId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBtState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBtStateDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(BtState);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSubType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSubTypeDirty)) {
        output.WriteRawTag(40);
        output.WriteEnum((int) SubType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasUseBtAgent)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUseBtAgentDirty)) {
        output.WriteRawTag(48);
        output.WriteBool(UseBtAgent);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStandTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStandTimeDirty)) {
        output.WriteRawTag(61);
        output.WriteFloat(StandTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPreMinStandTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPreMinStandTimeDirty)) {
        output.WriteRawTag(69);
        output.WriteFloat(PreMinStandTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPreMaxStandTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPreMaxStandTimeDirty)) {
        output.WriteRawTag(77);
        output.WriteFloat(PreMaxStandTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStateDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAction)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsActionDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(Action);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNpcId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNpcIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(NpcId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBtState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBtStateDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(BtState);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSubType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSubTypeDirty)) {
        output.WriteRawTag(40);
        output.WriteEnum((int) SubType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasUseBtAgent)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUseBtAgentDirty)) {
        output.WriteRawTag(48);
        output.WriteBool(UseBtAgent);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStandTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStandTimeDirty)) {
        output.WriteRawTag(61);
        output.WriteFloat(StandTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPreMinStandTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPreMinStandTimeDirty)) {
        output.WriteRawTag(69);
        output.WriteFloat(PreMinStandTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPreMaxStandTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPreMaxStandTimeDirty)) {
        output.WriteRawTag(77);
        output.WriteFloat(PreMaxStandTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasState)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsStateDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if ((scope == pb.WriteScope.FULL && HasAction)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsActionDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Action);
      }
      if ((scope == pb.WriteScope.FULL && HasNpcId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNpcIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcId);
      }
      if ((scope == pb.WriteScope.FULL && HasBtState)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsBtStateDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BtState);
      }
      if ((scope == pb.WriteScope.FULL && HasSubType)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSubTypeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SubType);
      }
      if ((scope == pb.WriteScope.FULL && HasUseBtAgent)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsUseBtAgentDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasStandTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsStandTimeDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasPreMinStandTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsPreMinStandTimeDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasPreMaxStandTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsPreMaxStandTimeDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PasserBrainSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasState) {
        State = other.State;
      }
      if (other.HasAction) {
        Action = other.Action;
      }
      if (other.HasNpcId) {
        NpcId = other.NpcId;
      }
      if (other.HasBtState) {
        BtState = other.BtState;
      }
      if (other.HasSubType) {
        SubType = other.SubType;
      }
      if (other.HasUseBtAgent) {
        UseBtAgent = other.UseBtAgent;
      }
      if (other.HasStandTime) {
        StandTime = other.StandTime;
      }
      if (other.HasPreMinStandTime) {
        PreMinStandTime = other.PreMinStandTime;
      }
      if (other.HasPreMaxStandTime) {
        PreMaxStandTime = other.PreMaxStandTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = (global::Protocol.PasserState) input.ReadEnum();
            break;
          }
          case 16: {
            Action = input.ReadInt32();
            break;
          }
          case 24: {
            NpcId = input.ReadUInt32();
            break;
          }
          case 32: {
            BtState = input.ReadUInt32();
            break;
          }
          case 40: {
            SubType = (global::Protocol.NpcSubType) input.ReadEnum();
            break;
          }
          case 48: {
            UseBtAgent = input.ReadBool();
            break;
          }
          case 61: {
            StandTime = input.ReadFloat();
            break;
          }
          case 69: {
            PreMinStandTime = input.ReadFloat();
            break;
          }
          case 77: {
            PreMaxStandTime = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            State = (global::Protocol.PasserState) input.ReadEnum();
            break;
          }
          case 16: {
            Action = input.ReadInt32();
            break;
          }
          case 24: {
            NpcId = input.ReadUInt32();
            break;
          }
          case 32: {
            BtState = input.ReadUInt32();
            break;
          }
          case 40: {
            SubType = (global::Protocol.NpcSubType) input.ReadEnum();
            break;
          }
          case 48: {
            UseBtAgent = input.ReadBool();
            break;
          }
          case 61: {
            StandTime = input.ReadFloat();
            break;
          }
          case 69: {
            PreMinStandTime = input.ReadFloat();
            break;
          }
          case 77: {
            PreMaxStandTime = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///警卫的同步数据
  /// </summary>
  public sealed partial class GuardSyncData : pb::IMessage<GuardSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GuardSyncData> _parser = new pb::MessageParser<GuardSyncData>(() => new GuardSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuardSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[118]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuardSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuardSyncData(GuardSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      state_ = other.state_;
      action_ = other.action_;
      npcId_ = other.npcId_;
      guardAreaId_ = other.guardAreaId_;
      btState_ = other.btState_;
      subType_ = other.subType_;
      standTime_ = other.standTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuardSyncData Clone() {
      return new GuardSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Protocol.GuardState state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.GuardState State {
      get { if ((_hasBits0 & 1) != 0) { return state_; } else { return global::Protocol.GuardState.GsIdle; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "state" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStateDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 2;
    private int action_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Action {
      get { if ((_hasBits0 & 2) != 0) { return action_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        action_ = value;
      }
    }
    /// <summary>Gets whether the "action" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAction {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "action" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActionDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "action" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "npc_id" field.</summary>
    public const int NpcIdFieldNumber = 3;
    private uint npcId_;
    /// <summary>
    ///NPC的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NpcId {
      get { if ((_hasBits0 & 4) != 0) { return npcId_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        npcId_ = value;
      }
    }
    /// <summary>Gets whether the "npc_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNpcId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "npc_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNpcIdDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "npc_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNpcId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "guard_area_id" field.</summary>
    public const int GuardAreaIdFieldNumber = 4;
    private uint guardAreaId_;
    /// <summary>
    ///警卫关联的巡逻区域typeId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuardAreaId {
      get { if ((_hasBits0 & 8) != 0) { return guardAreaId_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        guardAreaId_ = value;
      }
    }
    /// <summary>Gets whether the "guard_area_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuardAreaId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "guard_area_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGuardAreaIdDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "guard_area_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuardAreaId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "bt_state" field.</summary>
    public const int BtStateFieldNumber = 5;
    private uint btState_;
    /// <summary>
    ///行为树所处状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BtState {
      get { if ((_hasBits0 & 16) != 0) { return btState_; } else { return 0; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 16;
        btState_ = value;
      }
    }
    /// <summary>Gets whether the "bt_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBtState {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "bt_state" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBtStateDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "bt_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBtState() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "subType" field.</summary>
    public const int SubTypeFieldNumber = 6;
    private global::Protocol.NpcSubType subType_;
    /// <summary>
    ///角色子类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.NpcSubType SubType {
      get { if ((_hasBits0 & 32) != 0) { return subType_; } else { return global::Protocol.NpcSubType.NstUnkown; } }
      set {
        _hasBits0 |= 32;
        _dirtyBits0 |= 32;
        subType_ = value;
      }
    }
    /// <summary>Gets whether the "subType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubType {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Gets whether the "subType" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSubTypeDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "subType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubType() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "stand_time" field.</summary>
    public const int StandTimeFieldNumber = 7;
    private float standTime_;
    /// <summary>
    ///停留时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StandTime {
      get { if ((_hasBits0 & 64) != 0) { return standTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 64;
        _dirtyBits0 |= 64;
        standTime_ = value;
      }
    }
    /// <summary>Gets whether the "stand_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStandTime {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Gets whether the "stand_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStandTimeDirty {
      get { return (_dirtyBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "stand_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStandTime() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuardSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuardSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (Action != other.Action) return false;
      if (NpcId != other.NpcId) return false;
      if (GuardAreaId != other.GuardAreaId) return false;
      if (BtState != other.BtState) return false;
      if (SubType != other.SubType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StandTime, other.StandTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasState) hash ^= State.GetHashCode();
      if (HasAction) hash ^= Action.GetHashCode();
      if (HasNpcId) hash ^= NpcId.GetHashCode();
      if (HasGuardAreaId) hash ^= GuardAreaId.GetHashCode();
      if (HasBtState) hash ^= BtState.GetHashCode();
      if (HasSubType) hash ^= SubType.GetHashCode();
      if (HasStandTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StandTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStateDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAction)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsActionDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(Action);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNpcId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNpcIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(NpcId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasGuardAreaId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsGuardAreaIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(GuardAreaId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBtState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBtStateDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(BtState);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSubType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSubTypeDirty)) {
        output.WriteRawTag(48);
        output.WriteEnum((int) SubType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStandTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStandTimeDirty)) {
        output.WriteRawTag(61);
        output.WriteFloat(StandTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStateDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAction)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsActionDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(Action);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNpcId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNpcIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(NpcId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasGuardAreaId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsGuardAreaIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(GuardAreaId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBtState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBtStateDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(BtState);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSubType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSubTypeDirty)) {
        output.WriteRawTag(48);
        output.WriteEnum((int) SubType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStandTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStandTimeDirty)) {
        output.WriteRawTag(61);
        output.WriteFloat(StandTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasState)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsStateDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if ((scope == pb.WriteScope.FULL && HasAction)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsActionDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Action);
      }
      if ((scope == pb.WriteScope.FULL && HasNpcId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNpcIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcId);
      }
      if ((scope == pb.WriteScope.FULL && HasGuardAreaId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsGuardAreaIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuardAreaId);
      }
      if ((scope == pb.WriteScope.FULL && HasBtState)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsBtStateDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BtState);
      }
      if ((scope == pb.WriteScope.FULL && HasSubType)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSubTypeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SubType);
      }
      if ((scope == pb.WriteScope.FULL && HasStandTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsStandTimeDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuardSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasState) {
        State = other.State;
      }
      if (other.HasAction) {
        Action = other.Action;
      }
      if (other.HasNpcId) {
        NpcId = other.NpcId;
      }
      if (other.HasGuardAreaId) {
        GuardAreaId = other.GuardAreaId;
      }
      if (other.HasBtState) {
        BtState = other.BtState;
      }
      if (other.HasSubType) {
        SubType = other.SubType;
      }
      if (other.HasStandTime) {
        StandTime = other.StandTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = (global::Protocol.GuardState) input.ReadEnum();
            break;
          }
          case 16: {
            Action = input.ReadInt32();
            break;
          }
          case 24: {
            NpcId = input.ReadUInt32();
            break;
          }
          case 32: {
            GuardAreaId = input.ReadUInt32();
            break;
          }
          case 40: {
            BtState = input.ReadUInt32();
            break;
          }
          case 48: {
            SubType = (global::Protocol.NpcSubType) input.ReadEnum();
            break;
          }
          case 61: {
            StandTime = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            State = (global::Protocol.GuardState) input.ReadEnum();
            break;
          }
          case 16: {
            Action = input.ReadInt32();
            break;
          }
          case 24: {
            NpcId = input.ReadUInt32();
            break;
          }
          case 32: {
            GuardAreaId = input.ReadUInt32();
            break;
          }
          case 40: {
            BtState = input.ReadUInt32();
            break;
          }
          case 48: {
            SubType = (global::Protocol.NpcSubType) input.ReadEnum();
            break;
          }
          case 61: {
            StandTime = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///摊贩
  /// </summary>
  public sealed partial class PeddlerSyncData : pb::IMessage<PeddlerSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PeddlerSyncData> _parser = new pb::MessageParser<PeddlerSyncData>(() => new PeddlerSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PeddlerSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[119]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeddlerSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeddlerSyncData(PeddlerSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      state_ = other.state_;
      action_ = other.action_;
      npcId_ = other.npcId_;
      focusAreaId_ = other.focusAreaId_;
      btState_ = other.btState_;
      subType_ = other.subType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeddlerSyncData Clone() {
      return new PeddlerSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Protocol.PeddlerState state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.PeddlerState State {
      get { if ((_hasBits0 & 1) != 0) { return state_; } else { return global::Protocol.PeddlerState.PsIdle; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "state" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStateDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 2;
    private int action_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Action {
      get { if ((_hasBits0 & 2) != 0) { return action_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        action_ = value;
      }
    }
    /// <summary>Gets whether the "action" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAction {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "action" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActionDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "action" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "npc_id" field.</summary>
    public const int NpcIdFieldNumber = 3;
    private uint npcId_;
    /// <summary>
    ///NPC的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NpcId {
      get { if ((_hasBits0 & 4) != 0) { return npcId_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        npcId_ = value;
      }
    }
    /// <summary>Gets whether the "npc_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNpcId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "npc_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNpcIdDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "npc_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNpcId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "focusAreaId" field.</summary>
    public const int FocusAreaIdFieldNumber = 4;
    private uint focusAreaId_;
    /// <summary>
    ///关心的藏匿区Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FocusAreaId {
      get { if ((_hasBits0 & 8) != 0) { return focusAreaId_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        focusAreaId_ = value;
      }
    }
    /// <summary>Gets whether the "focusAreaId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFocusAreaId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "focusAreaId" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFocusAreaIdDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "focusAreaId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFocusAreaId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "bt_state" field.</summary>
    public const int BtStateFieldNumber = 5;
    private uint btState_;
    /// <summary>
    ///行为树所处状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BtState {
      get { if ((_hasBits0 & 16) != 0) { return btState_; } else { return 0; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 16;
        btState_ = value;
      }
    }
    /// <summary>Gets whether the "bt_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBtState {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "bt_state" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBtStateDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "bt_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBtState() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "subType" field.</summary>
    public const int SubTypeFieldNumber = 6;
    private global::Protocol.NpcSubType subType_;
    /// <summary>
    ///角色子类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.NpcSubType SubType {
      get { if ((_hasBits0 & 32) != 0) { return subType_; } else { return global::Protocol.NpcSubType.NstUnkown; } }
      set {
        _hasBits0 |= 32;
        _dirtyBits0 |= 32;
        subType_ = value;
      }
    }
    /// <summary>Gets whether the "subType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubType {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Gets whether the "subType" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSubTypeDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "subType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubType() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PeddlerSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PeddlerSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (Action != other.Action) return false;
      if (NpcId != other.NpcId) return false;
      if (FocusAreaId != other.FocusAreaId) return false;
      if (BtState != other.BtState) return false;
      if (SubType != other.SubType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasState) hash ^= State.GetHashCode();
      if (HasAction) hash ^= Action.GetHashCode();
      if (HasNpcId) hash ^= NpcId.GetHashCode();
      if (HasFocusAreaId) hash ^= FocusAreaId.GetHashCode();
      if (HasBtState) hash ^= BtState.GetHashCode();
      if (HasSubType) hash ^= SubType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStateDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAction)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsActionDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(Action);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNpcId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNpcIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(NpcId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFocusAreaId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFocusAreaIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(FocusAreaId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBtState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBtStateDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(BtState);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSubType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSubTypeDirty)) {
        output.WriteRawTag(48);
        output.WriteEnum((int) SubType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStateDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAction)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsActionDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(Action);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNpcId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNpcIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(NpcId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFocusAreaId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFocusAreaIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(FocusAreaId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBtState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBtStateDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(BtState);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSubType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSubTypeDirty)) {
        output.WriteRawTag(48);
        output.WriteEnum((int) SubType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasState)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsStateDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if ((scope == pb.WriteScope.FULL && HasAction)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsActionDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Action);
      }
      if ((scope == pb.WriteScope.FULL && HasNpcId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNpcIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcId);
      }
      if ((scope == pb.WriteScope.FULL && HasFocusAreaId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsFocusAreaIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FocusAreaId);
      }
      if ((scope == pb.WriteScope.FULL && HasBtState)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsBtStateDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BtState);
      }
      if ((scope == pb.WriteScope.FULL && HasSubType)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSubTypeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SubType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PeddlerSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasState) {
        State = other.State;
      }
      if (other.HasAction) {
        Action = other.Action;
      }
      if (other.HasNpcId) {
        NpcId = other.NpcId;
      }
      if (other.HasFocusAreaId) {
        FocusAreaId = other.FocusAreaId;
      }
      if (other.HasBtState) {
        BtState = other.BtState;
      }
      if (other.HasSubType) {
        SubType = other.SubType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = (global::Protocol.PeddlerState) input.ReadEnum();
            break;
          }
          case 16: {
            Action = input.ReadInt32();
            break;
          }
          case 24: {
            NpcId = input.ReadUInt32();
            break;
          }
          case 32: {
            FocusAreaId = input.ReadUInt32();
            break;
          }
          case 40: {
            BtState = input.ReadUInt32();
            break;
          }
          case 48: {
            SubType = (global::Protocol.NpcSubType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            State = (global::Protocol.PeddlerState) input.ReadEnum();
            break;
          }
          case 16: {
            Action = input.ReadInt32();
            break;
          }
          case 24: {
            NpcId = input.ReadUInt32();
            break;
          }
          case 32: {
            FocusAreaId = input.ReadUInt32();
            break;
          }
          case 40: {
            BtState = input.ReadUInt32();
            break;
          }
          case 48: {
            SubType = (global::Protocol.NpcSubType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FlyItemSyncData : pb::IMessage<FlyItemSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FlyItemSyncData> _parser = new pb::MessageParser<FlyItemSyncData>(() => new FlyItemSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlyItemSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[120]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlyItemSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlyItemSyncData(FlyItemSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      effectGroup_ = other.effectGroup_.Clone();
      attackBoxSize_ = other.HasAttackBoxSize ? other.attackBoxSize_.Clone() : null;
      during_ = other.during_;
      destoryOnHit_ = other.destoryOnHit_;
      attackTagList_ = other.attackTagList_.Clone();
      entityTypeList_ = other.entityTypeList_.Clone();
      ownerId_ = other.ownerId_;
      isInfinityTime_ = other.isInfinityTime_;
      hitForAll_ = other.hitForAll_;
      type_ = other.type_;
      envEffectGroup_ = other.envEffectGroup_.Clone();
      destoryOnHitEntity_ = other.destoryOnHitEntity_;
      destoryOnHitEnv_ = other.destoryOnHitEnv_;
      destoryOnHitTagEntity_ = other.destoryOnHitTagEntity_;
      hitMyself_ = other.hitMyself_;
      hitAllCamp_ = other.hitAllCamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlyItemSyncData Clone() {
      return new FlyItemSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "effect_group" field.</summary>
    public const int EffectGroupFieldNumber = 1;
    private static readonly pbc::MapField<uint, string>.Codec _map_effectGroup_codec
        = new pbc::MapField<uint, string>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForString(18, ""), 10);
    private readonly pbc::MapField<uint, string> effectGroup_ = new pbc::MapField<uint, string>();
    /// <summary>
    ///效果组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, string> EffectGroup {
      get { return effectGroup_; }
    }
    /// <summary>Gets whether the "effect_group" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEffectGroupDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "attack_box_size" field.</summary>
    public const int AttackBoxSizeFieldNumber = 2;
    private global::Protocol.Float3 attackBoxSize_;
    /// <summary>
    ///攻击盒大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 AttackBoxSize {
      get { return attackBoxSize_; }
      set {
        attackBoxSize_ = value;
      }
    }
    /// <summary>Gets whether the attack_box_size field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAttackBoxSize {
      get { return attackBoxSize_ != null; }
    }
    /// <summary>Clears the value of the attack_box_size field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAttackBoxSize() {
      attackBoxSize_ = null;
    }
    /// <summary>Gets whether the "attack_box_size" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttackBoxSizeDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    /// <summary>Field number for the "during" field.</summary>
    public const int DuringFieldNumber = 4;
    private float during_;
    /// <summary>
    ///持续时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float During {
      get { if ((_hasBits0 & 1) != 0) { return during_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 4;
        during_ = value;
      }
    }
    /// <summary>Gets whether the "during" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDuring {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "during" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDuringDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "during" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDuring() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "destory_on_hit" field.</summary>
    public const int DestoryOnHitFieldNumber = 5;
    private bool destoryOnHit_;
    /// <summary>
    ///命中时候销毁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DestoryOnHit {
      get { if ((_hasBits0 & 2) != 0) { return destoryOnHit_; } else { return false; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 8;
        destoryOnHit_ = value;
      }
    }
    /// <summary>Gets whether the "destory_on_hit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestoryOnHit {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "destory_on_hit" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDestoryOnHitDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "destory_on_hit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestoryOnHit() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "attack_tag_list" field.</summary>
    public const int AttackTagListFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_attackTagList_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> attackTagList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///攻击Tag
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AttackTagList {
      get { return attackTagList_; }
    }

    /// <summary>Field number for the "entity_type_list" field.</summary>
    public const int EntityTypeListFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Protocol.EntityType> _repeated_entityTypeList_codec
        = pb::FieldCodec.ForEnum(58, x => (int) x, x => (global::Protocol.EntityType) x);
    private readonly pbc::RepeatedField<global::Protocol.EntityType> entityTypeList_ = new pbc::RepeatedField<global::Protocol.EntityType>();
    /// <summary>
    ///目标Entity类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.EntityType> EntityTypeList {
      get { return entityTypeList_; }
    }

    /// <summary>Field number for the "owner_id" field.</summary>
    public const int OwnerIdFieldNumber = 8;
    private uint ownerId_;
    /// <summary>
    ///从属人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OwnerId {
      get { if ((_hasBits0 & 4) != 0) { return ownerId_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 64;
        ownerId_ = value;
      }
    }
    /// <summary>Gets whether the "owner_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOwnerId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "owner_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOwnerIdDirty {
      get { return (_dirtyBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "owner_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOwnerId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "is_infinity_time" field.</summary>
    public const int IsInfinityTimeFieldNumber = 9;
    private bool isInfinityTime_;
    /// <summary>
    ///无穷时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInfinityTime {
      get { if ((_hasBits0 & 8) != 0) { return isInfinityTime_; } else { return false; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 128;
        isInfinityTime_ = value;
      }
    }
    /// <summary>Gets whether the "is_infinity_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsInfinityTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "is_infinity_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIsInfinityTimeDirty {
      get { return (_dirtyBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "is_infinity_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsInfinityTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "hit_for_all" field.</summary>
    public const int HitForAllFieldNumber = 10;
    private bool hitForAll_;
    /// <summary>
    ///所有collider
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HitForAll {
      get { if ((_hasBits0 & 16) != 0) { return hitForAll_; } else { return false; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 256;
        hitForAll_ = value;
      }
    }
    /// <summary>Gets whether the "hit_for_all" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHitForAll {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "hit_for_all" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHitForAllDirty {
      get { return (_dirtyBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "hit_for_all" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHitForAll() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 11;
    private global::Protocol.FlyEntityType type_;
    /// <summary>
    ///飞行物类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.FlyEntityType Type {
      get { if ((_hasBits0 & 32) != 0) { return type_; } else { return global::Protocol.FlyEntityType.FlyEmpty; } }
      set {
        _hasBits0 |= 32;
        _dirtyBits0 |= 512;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Gets whether the "type" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTypeDirty {
      get { return (_dirtyBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "env_effect_group" field.</summary>
    public const int EnvEffectGroupFieldNumber = 12;
    private static readonly pbc::MapField<uint, string>.Codec _map_envEffectGroup_codec
        = new pbc::MapField<uint, string>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForString(18, ""), 98);
    private readonly pbc::MapField<uint, string> envEffectGroup_ = new pbc::MapField<uint, string>();
    /// <summary>
    ///环境效果组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, string> EnvEffectGroup {
      get { return envEffectGroup_; }
    }
    /// <summary>Gets whether the "env_effect_group" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEnvEffectGroupDirty {
      get { return (_dirtyBits0 & 1024) != 0; }
    }

    /// <summary>Field number for the "destory_on_hit_entity" field.</summary>
    public const int DestoryOnHitEntityFieldNumber = 13;
    private bool destoryOnHitEntity_;
    /// <summary>
    ///命中Entity时候销毁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DestoryOnHitEntity {
      get { if ((_hasBits0 & 64) != 0) { return destoryOnHitEntity_; } else { return false; } }
      set {
        _hasBits0 |= 64;
        _dirtyBits0 |= 2048;
        destoryOnHitEntity_ = value;
      }
    }
    /// <summary>Gets whether the "destory_on_hit_entity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestoryOnHitEntity {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Gets whether the "destory_on_hit_entity" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDestoryOnHitEntityDirty {
      get { return (_dirtyBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "destory_on_hit_entity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestoryOnHitEntity() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "destory_on_hit_env" field.</summary>
    public const int DestoryOnHitEnvFieldNumber = 14;
    private bool destoryOnHitEnv_;
    /// <summary>
    ///命中Env时候销毁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DestoryOnHitEnv {
      get { if ((_hasBits0 & 128) != 0) { return destoryOnHitEnv_; } else { return false; } }
      set {
        _hasBits0 |= 128;
        _dirtyBits0 |= 4096;
        destoryOnHitEnv_ = value;
      }
    }
    /// <summary>Gets whether the "destory_on_hit_env" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestoryOnHitEnv {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Gets whether the "destory_on_hit_env" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDestoryOnHitEnvDirty {
      get { return (_dirtyBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "destory_on_hit_env" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestoryOnHitEnv() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "destory_on_hit_tag_entity" field.</summary>
    public const int DestoryOnHitTagEntityFieldNumber = 15;
    private bool destoryOnHitTagEntity_;
    /// <summary>
    ///命中带tag 的Entity时候销毁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DestoryOnHitTagEntity {
      get { if ((_hasBits0 & 256) != 0) { return destoryOnHitTagEntity_; } else { return false; } }
      set {
        _hasBits0 |= 256;
        _dirtyBits0 |= 8192;
        destoryOnHitTagEntity_ = value;
      }
    }
    /// <summary>Gets whether the "destory_on_hit_tag_entity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestoryOnHitTagEntity {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Gets whether the "destory_on_hit_tag_entity" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDestoryOnHitTagEntityDirty {
      get { return (_dirtyBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "destory_on_hit_tag_entity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestoryOnHitTagEntity() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "hit_myself" field.</summary>
    public const int HitMyselfFieldNumber = 16;
    private bool hitMyself_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HitMyself {
      get { if ((_hasBits0 & 512) != 0) { return hitMyself_; } else { return false; } }
      set {
        _hasBits0 |= 512;
        _dirtyBits0 |= 16384;
        hitMyself_ = value;
      }
    }
    /// <summary>Gets whether the "hit_myself" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHitMyself {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Gets whether the "hit_myself" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHitMyselfDirty {
      get { return (_dirtyBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "hit_myself" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHitMyself() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "hit_all_camp" field.</summary>
    public const int HitAllCampFieldNumber = 17;
    private bool hitAllCamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HitAllCamp {
      get { if ((_hasBits0 & 1024) != 0) { return hitAllCamp_; } else { return false; } }
      set {
        _hasBits0 |= 1024;
        _dirtyBits0 |= 32768;
        hitAllCamp_ = value;
      }
    }
    /// <summary>Gets whether the "hit_all_camp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHitAllCamp {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Gets whether the "hit_all_camp" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHitAllCampDirty {
      get { return (_dirtyBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "hit_all_camp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHitAllCamp() {
      _hasBits0 &= ~1024;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlyItemSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlyItemSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EffectGroup.Equals(other.EffectGroup)) return false;
      if (!object.Equals(AttackBoxSize, other.AttackBoxSize)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(During, other.During)) return false;
      if (DestoryOnHit != other.DestoryOnHit) return false;
      if(!attackTagList_.Equals(other.attackTagList_)) return false;
      if(!entityTypeList_.Equals(other.entityTypeList_)) return false;
      if (OwnerId != other.OwnerId) return false;
      if (IsInfinityTime != other.IsInfinityTime) return false;
      if (HitForAll != other.HitForAll) return false;
      if (Type != other.Type) return false;
      if (!EnvEffectGroup.Equals(other.EnvEffectGroup)) return false;
      if (DestoryOnHitEntity != other.DestoryOnHitEntity) return false;
      if (DestoryOnHitEnv != other.DestoryOnHitEnv) return false;
      if (DestoryOnHitTagEntity != other.DestoryOnHitTagEntity) return false;
      if (HitMyself != other.HitMyself) return false;
      if (HitAllCamp != other.HitAllCamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EffectGroup.GetHashCode();
      if (HasAttackBoxSize) hash ^= AttackBoxSize.GetHashCode();
      if (HasDuring) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(During);
      if (HasDestoryOnHit) hash ^= DestoryOnHit.GetHashCode();
      hash ^= attackTagList_.GetHashCode();
      hash ^= entityTypeList_.GetHashCode();
      if (HasOwnerId) hash ^= OwnerId.GetHashCode();
      if (HasIsInfinityTime) hash ^= IsInfinityTime.GetHashCode();
      if (HasHitForAll) hash ^= HitForAll.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      hash ^= EnvEffectGroup.GetHashCode();
      if (HasDestoryOnHitEntity) hash ^= DestoryOnHitEntity.GetHashCode();
      if (HasDestoryOnHitEnv) hash ^= DestoryOnHitEnv.GetHashCode();
      if (HasDestoryOnHitTagEntity) hash ^= DestoryOnHitTagEntity.GetHashCode();
      if (HasHitMyself) hash ^= HitMyself.GetHashCode();
      if (HasHitAllCamp) hash ^= HitAllCamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEffectGroupDirty)) {
        effectGroup_.WriteTo(output, _map_effectGroup_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAttackBoxSize)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAttackBoxSizeDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(AttackBoxSize);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDuring)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDuringDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(During);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDestoryOnHit)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDestoryOnHitDirty)) {
        output.WriteRawTag(40);
        output.WriteBool(DestoryOnHit);
      }
      attackTagList_.WriteTo(output, _repeated_attackTagList_codec);
      entityTypeList_.WriteTo(output, _repeated_entityTypeList_codec);
      if ((output.writeScope == pb.WriteScope.FULL && HasOwnerId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOwnerIdDirty)) {
        output.WriteRawTag(64);
        output.WriteUInt32(OwnerId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsInfinityTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsInfinityTimeDirty)) {
        output.WriteRawTag(72);
        output.WriteBool(IsInfinityTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHitForAll)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHitForAllDirty)) {
        output.WriteRawTag(80);
        output.WriteBool(HitForAll);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTypeDirty)) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Type);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEnvEffectGroupDirty)) {
        envEffectGroup_.WriteTo(output, _map_envEffectGroup_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDestoryOnHitEntity)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDestoryOnHitEntityDirty)) {
        output.WriteRawTag(104);
        output.WriteBool(DestoryOnHitEntity);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDestoryOnHitEnv)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDestoryOnHitEnvDirty)) {
        output.WriteRawTag(112);
        output.WriteBool(DestoryOnHitEnv);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDestoryOnHitTagEntity)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDestoryOnHitTagEntityDirty)) {
        output.WriteRawTag(120);
        output.WriteBool(DestoryOnHitTagEntity);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHitMyself)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHitMyselfDirty)) {
        output.WriteRawTag(128, 1);
        output.WriteBool(HitMyself);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHitAllCamp)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHitAllCampDirty)) {
        output.WriteRawTag(136, 1);
        output.WriteBool(HitAllCamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEffectGroupDirty)) {
        effectGroup_.WriteTo(ref output, _map_effectGroup_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAttackBoxSize)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAttackBoxSizeDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(AttackBoxSize);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDuring)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDuringDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(During);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDestoryOnHit)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDestoryOnHitDirty)) {
        output.WriteRawTag(40);
        output.WriteBool(DestoryOnHit);
      }
      attackTagList_.WriteTo(ref output, _repeated_attackTagList_codec);
      entityTypeList_.WriteTo(ref output, _repeated_entityTypeList_codec);
      if ((output.writeScope == pb.WriteScope.FULL && HasOwnerId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOwnerIdDirty)) {
        output.WriteRawTag(64);
        output.WriteUInt32(OwnerId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsInfinityTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsInfinityTimeDirty)) {
        output.WriteRawTag(72);
        output.WriteBool(IsInfinityTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHitForAll)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHitForAllDirty)) {
        output.WriteRawTag(80);
        output.WriteBool(HitForAll);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTypeDirty)) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Type);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEnvEffectGroupDirty)) {
        envEffectGroup_.WriteTo(ref output, _map_envEffectGroup_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDestoryOnHitEntity)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDestoryOnHitEntityDirty)) {
        output.WriteRawTag(104);
        output.WriteBool(DestoryOnHitEntity);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDestoryOnHitEnv)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDestoryOnHitEnvDirty)) {
        output.WriteRawTag(112);
        output.WriteBool(DestoryOnHitEnv);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDestoryOnHitTagEntity)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDestoryOnHitTagEntityDirty)) {
        output.WriteRawTag(120);
        output.WriteBool(DestoryOnHitTagEntity);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHitMyself)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHitMyselfDirty)) {
        output.WriteRawTag(128, 1);
        output.WriteBool(HitMyself);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHitAllCamp)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHitAllCampDirty)) {
        output.WriteRawTag(136, 1);
        output.WriteBool(HitAllCamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if (EffectGroup != null) {
        int msgSize = effectGroup_.CalculateSize(_map_effectGroup_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 1;
        } else {
          _dirtyBits0 &= ~1;
        }
      }
      if (HasAttackBoxSize) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(AttackBoxSize, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 2;
        } else {
          _dirtyBits0 &= ~2;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasDuring)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsDuringDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasDestoryOnHit)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsDestoryOnHitDirty)) {
        size += 1 + 1;
      }
      size += attackTagList_.CalculateSize(_repeated_attackTagList_codec);
      size += entityTypeList_.CalculateSize(_repeated_entityTypeList_codec);
      if ((scope == pb.WriteScope.FULL && HasOwnerId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsOwnerIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OwnerId);
      }
      if ((scope == pb.WriteScope.FULL && HasIsInfinityTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIsInfinityTimeDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasHitForAll)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsHitForAllDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasType)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTypeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (EnvEffectGroup != null) {
        int msgSize = envEffectGroup_.CalculateSize(_map_envEffectGroup_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 1024;
        } else {
          _dirtyBits0 &= ~1024;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasDestoryOnHitEntity)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsDestoryOnHitEntityDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasDestoryOnHitEnv)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsDestoryOnHitEnvDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasDestoryOnHitTagEntity)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsDestoryOnHitTagEntityDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasHitMyself)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsHitMyselfDirty)) {
        size += 2 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasHitAllCamp)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsHitAllCampDirty)) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlyItemSyncData other) {
      if (other == null) {
        return;
      }
      foreach (var key in other.effectGroup_.DeleteList) {
        effectGroup_.Remove(key);
      }
      foreach (var pair in other.effectGroup_) {
        effectGroup_[pair.Key] = pair.Value;
      }
      if (other.HasAttackBoxSize) {
        if (!HasAttackBoxSize) {
          AttackBoxSize = new global::Protocol.Float3();
        }
        AttackBoxSize.MergeFrom(other.AttackBoxSize);
      }
      if (other.HasDuring) {
        During = other.During;
      }
      if (other.HasDestoryOnHit) {
        DestoryOnHit = other.DestoryOnHit;
      }
      attackTagList_.Add(other.attackTagList_);
      entityTypeList_.Add(other.entityTypeList_);
      if (other.HasOwnerId) {
        OwnerId = other.OwnerId;
      }
      if (other.HasIsInfinityTime) {
        IsInfinityTime = other.IsInfinityTime;
      }
      if (other.HasHitForAll) {
        HitForAll = other.HitForAll;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      foreach (var key in other.envEffectGroup_.DeleteList) {
        envEffectGroup_.Remove(key);
      }
      foreach (var pair in other.envEffectGroup_) {
        envEffectGroup_[pair.Key] = pair.Value;
      }
      if (other.HasDestoryOnHitEntity) {
        DestoryOnHitEntity = other.DestoryOnHitEntity;
      }
      if (other.HasDestoryOnHitEnv) {
        DestoryOnHitEnv = other.DestoryOnHitEnv;
      }
      if (other.HasDestoryOnHitTagEntity) {
        DestoryOnHitTagEntity = other.DestoryOnHitTagEntity;
      }
      if (other.HasHitMyself) {
        HitMyself = other.HitMyself;
      }
      if (other.HasHitAllCamp) {
        HitAllCamp = other.HitAllCamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            effectGroup_.AddEntriesFrom(input, _map_effectGroup_codec);
            break;
          }
          case 18: {
            if (!HasAttackBoxSize) {
              AttackBoxSize = new global::Protocol.Float3();
            }
            input.ReadMessage(AttackBoxSize);
            break;
          }
          case 37: {
            During = input.ReadFloat();
            break;
          }
          case 40: {
            DestoryOnHit = input.ReadBool();
            break;
          }
          case 50:
          case 48: {
            attackTagList_.AddEntriesFrom(input, _repeated_attackTagList_codec);
            break;
          }
          case 58:
          case 56: {
            entityTypeList_.AddEntriesFrom(input, _repeated_entityTypeList_codec);
            break;
          }
          case 64: {
            OwnerId = input.ReadUInt32();
            break;
          }
          case 72: {
            IsInfinityTime = input.ReadBool();
            break;
          }
          case 80: {
            HitForAll = input.ReadBool();
            break;
          }
          case 88: {
            Type = (global::Protocol.FlyEntityType) input.ReadEnum();
            break;
          }
          case 98: {
            envEffectGroup_.AddEntriesFrom(input, _map_envEffectGroup_codec);
            break;
          }
          case 104: {
            DestoryOnHitEntity = input.ReadBool();
            break;
          }
          case 112: {
            DestoryOnHitEnv = input.ReadBool();
            break;
          }
          case 120: {
            DestoryOnHitTagEntity = input.ReadBool();
            break;
          }
          case 128: {
            HitMyself = input.ReadBool();
            break;
          }
          case 136: {
            HitAllCamp = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            effectGroup_.AddEntriesFrom(ref input, _map_effectGroup_codec);
            break;
          }
          case 18: {
            if (!HasAttackBoxSize) {
              AttackBoxSize = new global::Protocol.Float3();
            }
            input.ReadMessage(AttackBoxSize);
            break;
          }
          case 37: {
            During = input.ReadFloat();
            break;
          }
          case 40: {
            DestoryOnHit = input.ReadBool();
            break;
          }
          case 50:
          case 48: {
            attackTagList_.AddEntriesFrom(ref input, _repeated_attackTagList_codec);
            break;
          }
          case 58:
          case 56: {
            entityTypeList_.AddEntriesFrom(ref input, _repeated_entityTypeList_codec);
            break;
          }
          case 64: {
            OwnerId = input.ReadUInt32();
            break;
          }
          case 72: {
            IsInfinityTime = input.ReadBool();
            break;
          }
          case 80: {
            HitForAll = input.ReadBool();
            break;
          }
          case 88: {
            Type = (global::Protocol.FlyEntityType) input.ReadEnum();
            break;
          }
          case 98: {
            envEffectGroup_.AddEntriesFrom(ref input, _map_envEffectGroup_codec);
            break;
          }
          case 104: {
            DestoryOnHitEntity = input.ReadBool();
            break;
          }
          case 112: {
            DestoryOnHitEnv = input.ReadBool();
            break;
          }
          case 120: {
            DestoryOnHitTagEntity = input.ReadBool();
            break;
          }
          case 128: {
            HitMyself = input.ReadBool();
            break;
          }
          case 136: {
            HitAllCamp = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CustomEntitySyncData : pb::IMessage<CustomEntitySyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CustomEntitySyncData> _parser = new pb::MessageParser<CustomEntitySyncData>(() => new CustomEntitySyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CustomEntitySyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[121]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomEntitySyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomEntitySyncData(CustomEntitySyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      during_ = other.during_;
      ownerId_ = other.ownerId_;
      damageId_ = other.damageId_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomEntitySyncData Clone() {
      return new CustomEntitySyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "during" field.</summary>
    public const int DuringFieldNumber = 2;
    private float during_;
    /// <summary>
    ///持续时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float During {
      get { if ((_hasBits0 & 1) != 0) { return during_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        during_ = value;
      }
    }
    /// <summary>Gets whether the "during" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDuring {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "during" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDuringDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "during" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDuring() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "owner_id" field.</summary>
    public const int OwnerIdFieldNumber = 3;
    private uint ownerId_;
    /// <summary>
    ///从属人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OwnerId {
      get { if ((_hasBits0 & 2) != 0) { return ownerId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        ownerId_ = value;
      }
    }
    /// <summary>Gets whether the "owner_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOwnerId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "owner_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOwnerIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "owner_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOwnerId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "damage_id" field.</summary>
    public const int DamageIdFieldNumber = 4;
    private uint damageId_;
    /// <summary>
    ///伤害来源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DamageId {
      get { if ((_hasBits0 & 4) != 0) { return damageId_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        damageId_ = value;
      }
    }
    /// <summary>Gets whether the "damage_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDamageId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "damage_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDamageIdDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "damage_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDamageId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::Protocol.CustomEntityType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.CustomEntityType Type {
      get { if ((_hasBits0 & 8) != 0) { return type_; } else { return global::Protocol.CustomEntityType.CeEmpty; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "type" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTypeDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CustomEntitySyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CustomEntitySyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(During, other.During)) return false;
      if (OwnerId != other.OwnerId) return false;
      if (DamageId != other.DamageId) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDuring) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(During);
      if (HasOwnerId) hash ^= OwnerId.GetHashCode();
      if (HasDamageId) hash ^= DamageId.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasDuring)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDuringDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(During);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOwnerId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOwnerIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(OwnerId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDamageId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDamageIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(DamageId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTypeDirty)) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasDuring)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDuringDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(During);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOwnerId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOwnerIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(OwnerId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDamageId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDamageIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(DamageId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTypeDirty)) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasDuring)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsDuringDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasOwnerId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsOwnerIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OwnerId);
      }
      if ((scope == pb.WriteScope.FULL && HasDamageId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsDamageIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DamageId);
      }
      if ((scope == pb.WriteScope.FULL && HasType)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTypeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CustomEntitySyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasDuring) {
        During = other.During;
      }
      if (other.HasOwnerId) {
        OwnerId = other.OwnerId;
      }
      if (other.HasDamageId) {
        DamageId = other.DamageId;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 21: {
            During = input.ReadFloat();
            break;
          }
          case 24: {
            OwnerId = input.ReadUInt32();
            break;
          }
          case 32: {
            DamageId = input.ReadUInt32();
            break;
          }
          case 40: {
            Type = (global::Protocol.CustomEntityType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 21: {
            During = input.ReadFloat();
            break;
          }
          case 24: {
            OwnerId = input.ReadUInt32();
            break;
          }
          case 32: {
            DamageId = input.ReadUInt32();
            break;
          }
          case 40: {
            Type = (global::Protocol.CustomEntityType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NestSyncData : pb::IMessage<NestSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NestSyncData> _parser = new pb::MessageParser<NestSyncData>(() => new NestSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NestSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[122]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NestSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NestSyncData(NestSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      sourceId_ = other.sourceId_;
      nestCfgId_ = other.nestCfgId_;
      nestHp_ = other.nestHp_;
      nestMaxHp_ = other.nestMaxHp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NestSyncData Clone() {
      return new NestSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "source_id" field.</summary>
    public const int SourceIdFieldNumber = 1;
    private uint sourceId_;
    /// <summary>
    ///施法者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SourceId {
      get { if ((_hasBits0 & 1) != 0) { return sourceId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        sourceId_ = value;
      }
    }
    /// <summary>Gets whether the "source_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourceId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "source_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSourceIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "source_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourceId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "nest_cfg_id" field.</summary>
    public const int NestCfgIdFieldNumber = 3;
    private uint nestCfgId_;
    /// <summary>
    ///巢穴ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NestCfgId {
      get { if ((_hasBits0 & 2) != 0) { return nestCfgId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        nestCfgId_ = value;
      }
    }
    /// <summary>Gets whether the "nest_cfg_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNestCfgId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "nest_cfg_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNestCfgIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "nest_cfg_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNestCfgId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "nest_hp" field.</summary>
    public const int NestHpFieldNumber = 4;
    private float nestHp_;
    /// <summary>
    ///巢穴Hp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NestHp {
      get { if ((_hasBits0 & 4) != 0) { return nestHp_; } else { return 0F; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        nestHp_ = value;
      }
    }
    /// <summary>Gets whether the "nest_hp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNestHp {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "nest_hp" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNestHpDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "nest_hp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNestHp() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "nest_max_hp" field.</summary>
    public const int NestMaxHpFieldNumber = 5;
    private float nestMaxHp_;
    /// <summary>
    ///巢穴MaxHp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NestMaxHp {
      get { if ((_hasBits0 & 8) != 0) { return nestMaxHp_; } else { return 0F; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        nestMaxHp_ = value;
      }
    }
    /// <summary>Gets whether the "nest_max_hp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNestMaxHp {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "nest_max_hp" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNestMaxHpDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "nest_max_hp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNestMaxHp() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NestSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NestSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceId != other.SourceId) return false;
      if (NestCfgId != other.NestCfgId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NestHp, other.NestHp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NestMaxHp, other.NestMaxHp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSourceId) hash ^= SourceId.GetHashCode();
      if (HasNestCfgId) hash ^= NestCfgId.GetHashCode();
      if (HasNestHp) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NestHp);
      if (HasNestMaxHp) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NestMaxHp);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasSourceId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSourceIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(SourceId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNestCfgId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNestCfgIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(NestCfgId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNestHp)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNestHpDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(NestHp);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNestMaxHp)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNestMaxHpDirty)) {
        output.WriteRawTag(45);
        output.WriteFloat(NestMaxHp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasSourceId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSourceIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(SourceId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNestCfgId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNestCfgIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(NestCfgId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNestHp)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNestHpDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(NestHp);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNestMaxHp)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNestMaxHpDirty)) {
        output.WriteRawTag(45);
        output.WriteFloat(NestMaxHp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasSourceId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSourceIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceId);
      }
      if ((scope == pb.WriteScope.FULL && HasNestCfgId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNestCfgIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NestCfgId);
      }
      if ((scope == pb.WriteScope.FULL && HasNestHp)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNestHpDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasNestMaxHp)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNestMaxHpDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NestSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasSourceId) {
        SourceId = other.SourceId;
      }
      if (other.HasNestCfgId) {
        NestCfgId = other.NestCfgId;
      }
      if (other.HasNestHp) {
        NestHp = other.NestHp;
      }
      if (other.HasNestMaxHp) {
        NestMaxHp = other.NestMaxHp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourceId = input.ReadUInt32();
            break;
          }
          case 24: {
            NestCfgId = input.ReadUInt32();
            break;
          }
          case 37: {
            NestHp = input.ReadFloat();
            break;
          }
          case 45: {
            NestMaxHp = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SourceId = input.ReadUInt32();
            break;
          }
          case 24: {
            NestCfgId = input.ReadUInt32();
            break;
          }
          case 37: {
            NestHp = input.ReadFloat();
            break;
          }
          case 45: {
            NestMaxHp = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///连接点控制
  /// </summary>
  public sealed partial class LadderSyncData : pb::IMessage<LadderSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LadderSyncData> _parser = new pb::MessageParser<LadderSyncData>(() => new LadderSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LadderSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[123]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LadderSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LadderSyncData(LadderSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      ladderId_ = other.ladderId_;
      startPostion_ = other.startPostion_.Clone();
      endPostion_ = other.endPostion_.Clone();
      during_ = other.during_;
      collider_ = other.HasCollider ? other.collider_.Clone() : null;
      subType_ = other.subType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LadderSyncData Clone() {
      return new LadderSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "ladder_id" field.</summary>
    public const int LadderIdFieldNumber = 1;
    private uint ladderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LadderId {
      get { if ((_hasBits0 & 1) != 0) { return ladderId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        ladderId_ = value;
      }
    }
    /// <summary>Gets whether the "ladder_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLadderId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "ladder_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLadderIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ladder_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLadderId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "start_postion" field.</summary>
    public const int StartPostionFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.Float4> _repeated_startPostion_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.Float4.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Float4> startPostion_ = new pbc::RepeatedField<global::Protocol.Float4>();
    /// <summary>
    ///开始坐标（本地）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Float4> StartPostion {
      get { return startPostion_; }
    }

    /// <summary>Field number for the "end_postion" field.</summary>
    public const int EndPostionFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.Float4> _repeated_endPostion_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.Float4.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Float4> endPostion_ = new pbc::RepeatedField<global::Protocol.Float4>();
    /// <summary>
    ///结束坐标（本地）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Float4> EndPostion {
      get { return endPostion_; }
    }

    /// <summary>Field number for the "during" field.</summary>
    public const int DuringFieldNumber = 4;
    private float during_;
    /// <summary>
    ///角度（世界）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float During {
      get { if ((_hasBits0 & 2) != 0) { return during_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 8;
        during_ = value;
      }
    }
    /// <summary>Gets whether the "during" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDuring {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "during" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDuringDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "during" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDuring() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "collider" field.</summary>
    public const int ColliderFieldNumber = 5;
    private global::Protocol.BoxColliderData collider_;
    /// <summary>
    ///碰撞盒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.BoxColliderData Collider {
      get { return collider_; }
      set {
        collider_ = value;
      }
    }
    /// <summary>Gets whether the collider field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCollider {
      get { return collider_ != null; }
    }
    /// <summary>Clears the value of the collider field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCollider() {
      collider_ = null;
    }
    /// <summary>Gets whether the "collider" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsColliderDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }

    /// <summary>Field number for the "subType" field.</summary>
    public const int SubTypeFieldNumber = 6;
    private global::Protocol.LadderSubType subType_;
    /// <summary>
    ///连接点子类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.LadderSubType SubType {
      get { if ((_hasBits0 & 4) != 0) { return subType_; } else { return global::Protocol.LadderSubType.LstUnknow; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 32;
        subType_ = value;
      }
    }
    /// <summary>Gets whether the "subType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "subType" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSubTypeDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "subType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubType() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LadderSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LadderSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LadderId != other.LadderId) return false;
      if(!startPostion_.Equals(other.startPostion_)) return false;
      if(!endPostion_.Equals(other.endPostion_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(During, other.During)) return false;
      if (!object.Equals(Collider, other.Collider)) return false;
      if (SubType != other.SubType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLadderId) hash ^= LadderId.GetHashCode();
      hash ^= startPostion_.GetHashCode();
      hash ^= endPostion_.GetHashCode();
      if (HasDuring) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(During);
      if (HasCollider) hash ^= Collider.GetHashCode();
      if (HasSubType) hash ^= SubType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasLadderId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLadderIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(LadderId);
      }
      startPostion_.WriteTo(output, _repeated_startPostion_codec);
      endPostion_.WriteTo(output, _repeated_endPostion_codec);
      if ((output.writeScope == pb.WriteScope.FULL && HasDuring)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDuringDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(During);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCollider)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsColliderDirty)) {
        output.WriteRawTag(42);
        output.WriteMessage(Collider);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSubType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSubTypeDirty)) {
        output.WriteRawTag(48);
        output.WriteEnum((int) SubType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasLadderId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLadderIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(LadderId);
      }
      startPostion_.WriteTo(ref output, _repeated_startPostion_codec);
      endPostion_.WriteTo(ref output, _repeated_endPostion_codec);
      if ((output.writeScope == pb.WriteScope.FULL && HasDuring)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDuringDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(During);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCollider)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsColliderDirty)) {
        output.WriteRawTag(42);
        output.WriteMessage(Collider);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSubType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSubTypeDirty)) {
        output.WriteRawTag(48);
        output.WriteEnum((int) SubType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasLadderId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsLadderIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LadderId);
      }
      size += startPostion_.CalculateSize(_repeated_startPostion_codec);
      size += endPostion_.CalculateSize(_repeated_endPostion_codec);
      if ((scope == pb.WriteScope.FULL && HasDuring)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsDuringDirty)) {
        size += 1 + 4;
      }
      if (HasCollider) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Collider, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 16;
        } else {
          _dirtyBits0 &= ~16;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasSubType)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSubTypeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SubType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LadderSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasLadderId) {
        LadderId = other.LadderId;
      }
      startPostion_.Add(other.startPostion_);
      endPostion_.Add(other.endPostion_);
      if (other.HasDuring) {
        During = other.During;
      }
      if (other.HasCollider) {
        if (!HasCollider) {
          Collider = new global::Protocol.BoxColliderData();
        }
        Collider.MergeFrom(other.Collider);
      }
      if (other.HasSubType) {
        SubType = other.SubType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LadderId = input.ReadUInt32();
            break;
          }
          case 18: {
            startPostion_.AddEntriesFrom(input, _repeated_startPostion_codec);
            break;
          }
          case 26: {
            endPostion_.AddEntriesFrom(input, _repeated_endPostion_codec);
            break;
          }
          case 37: {
            During = input.ReadFloat();
            break;
          }
          case 42: {
            if (!HasCollider) {
              Collider = new global::Protocol.BoxColliderData();
            }
            input.ReadMessage(Collider);
            break;
          }
          case 48: {
            SubType = (global::Protocol.LadderSubType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LadderId = input.ReadUInt32();
            break;
          }
          case 18: {
            startPostion_.AddEntriesFrom(ref input, _repeated_startPostion_codec);
            break;
          }
          case 26: {
            endPostion_.AddEntriesFrom(ref input, _repeated_endPostion_codec);
            break;
          }
          case 37: {
            During = input.ReadFloat();
            break;
          }
          case 42: {
            if (!HasCollider) {
              Collider = new global::Protocol.BoxColliderData();
            }
            input.ReadMessage(Collider);
            break;
          }
          case 48: {
            SubType = (global::Protocol.LadderSubType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///连接点check
  /// </summary>
  public sealed partial class LadderCheckSyncData : pb::IMessage<LadderCheckSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LadderCheckSyncData> _parser = new pb::MessageParser<LadderCheckSyncData>(() => new LadderCheckSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LadderCheckSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[124]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LadderCheckSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LadderCheckSyncData(LadderCheckSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      useTimes_ = other.useTimes_;
      needProp_ = other.needProp_.Clone();
      hotAreaId_ = other.hotAreaId_;
      hotAreaNpcId_ = other.hotAreaNpcId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LadderCheckSyncData Clone() {
      return new LadderCheckSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "use_times" field.</summary>
    public const int UseTimesFieldNumber = 1;
    private int useTimes_;
    /// <summary>
    ///使用次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UseTimes {
      get { if ((_hasBits0 & 1) != 0) { return useTimes_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        useTimes_ = value;
      }
    }
    /// <summary>Gets whether the "use_times" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUseTimes {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "use_times" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUseTimesDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "use_times" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUseTimes() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "need_prop" field.</summary>
    public const int NeedPropFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_needProp_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> needProp_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///所需物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> NeedProp {
      get { return needProp_; }
    }

    /// <summary>Field number for the "hot_area_id" field.</summary>
    public const int HotAreaIdFieldNumber = 3;
    private uint hotAreaId_;
    /// <summary>
    ///热点区域ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HotAreaId {
      get { if ((_hasBits0 & 2) != 0) { return hotAreaId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 4;
        hotAreaId_ = value;
      }
    }
    /// <summary>Gets whether the "hot_area_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHotAreaId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "hot_area_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHotAreaIdDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "hot_area_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHotAreaId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "hot_area_npc_id" field.</summary>
    public const int HotAreaNpcIdFieldNumber = 4;
    private uint hotAreaNpcId_;
    /// <summary>
    ///热点区域 NPC ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HotAreaNpcId {
      get { if ((_hasBits0 & 4) != 0) { return hotAreaNpcId_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 8;
        hotAreaNpcId_ = value;
      }
    }
    /// <summary>Gets whether the "hot_area_npc_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHotAreaNpcId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "hot_area_npc_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHotAreaNpcIdDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "hot_area_npc_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHotAreaNpcId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LadderCheckSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LadderCheckSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UseTimes != other.UseTimes) return false;
      if(!needProp_.Equals(other.needProp_)) return false;
      if (HotAreaId != other.HotAreaId) return false;
      if (HotAreaNpcId != other.HotAreaNpcId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUseTimes) hash ^= UseTimes.GetHashCode();
      hash ^= needProp_.GetHashCode();
      if (HasHotAreaId) hash ^= HotAreaId.GetHashCode();
      if (HasHotAreaNpcId) hash ^= HotAreaNpcId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasUseTimes)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUseTimesDirty)) {
        output.WriteRawTag(8);
        output.WriteInt32(UseTimes);
      }
      needProp_.WriteTo(output, _repeated_needProp_codec);
      if ((output.writeScope == pb.WriteScope.FULL && HasHotAreaId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHotAreaIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(HotAreaId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHotAreaNpcId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHotAreaNpcIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(HotAreaNpcId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasUseTimes)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUseTimesDirty)) {
        output.WriteRawTag(8);
        output.WriteInt32(UseTimes);
      }
      needProp_.WriteTo(ref output, _repeated_needProp_codec);
      if ((output.writeScope == pb.WriteScope.FULL && HasHotAreaId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHotAreaIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(HotAreaId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHotAreaNpcId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHotAreaNpcIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(HotAreaNpcId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasUseTimes)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsUseTimesDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UseTimes);
      }
      size += needProp_.CalculateSize(_repeated_needProp_codec);
      if ((scope == pb.WriteScope.FULL && HasHotAreaId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsHotAreaIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HotAreaId);
      }
      if ((scope == pb.WriteScope.FULL && HasHotAreaNpcId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsHotAreaNpcIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HotAreaNpcId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LadderCheckSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasUseTimes) {
        UseTimes = other.UseTimes;
      }
      needProp_.Add(other.needProp_);
      if (other.HasHotAreaId) {
        HotAreaId = other.HotAreaId;
      }
      if (other.HasHotAreaNpcId) {
        HotAreaNpcId = other.HotAreaNpcId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UseTimes = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            needProp_.AddEntriesFrom(input, _repeated_needProp_codec);
            break;
          }
          case 24: {
            HotAreaId = input.ReadUInt32();
            break;
          }
          case 32: {
            HotAreaNpcId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UseTimes = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            needProp_.AddEntriesFrom(ref input, _repeated_needProp_codec);
            break;
          }
          case 24: {
            HotAreaId = input.ReadUInt32();
            break;
          }
          case 32: {
            HotAreaNpcId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ThingSyncData : pb::IMessage<ThingSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ThingSyncData> _parser = new pb::MessageParser<ThingSyncData>(() => new ThingSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ThingSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[125]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThingSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThingSyncData(ThingSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      thingId_ = other.thingId_;
      id_ = other.id_;
      collider_ = other.HasCollider ? other.collider_.Clone() : null;
      propDataDic_ = other.propDataDic_.Clone();
      virtualPropDic_ = other.virtualPropDic_.Clone();
      count_ = other.count_;
      dropTime_ = other.dropTime_;
      bornStartTime_ = other.bornStartTime_;
      ownerId_ = other.ownerId_;
      offsetPosition_ = other.HasOffsetPosition ? other.offsetPosition_.Clone() : null;
      subType_ = other.subType_;
      followTargetId_ = other.followTargetId_;
      stateId_ = other.stateId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThingSyncData Clone() {
      return new ThingSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "thing_id" field.</summary>
    public const int ThingIdFieldNumber = 1;
    private ulong thingId_;
    /// <summary>
    ///instanceId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ThingId {
      get { if ((_hasBits0 & 1) != 0) { return thingId_; } else { return 0UL; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        thingId_ = value;
      }
    }
    /// <summary>Gets whether the "thing_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasThingId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "thing_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsThingIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "thing_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearThingId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    /// <summary>
    ///奖励的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 2) != 0) { return id_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "collider" field.</summary>
    public const int ColliderFieldNumber = 3;
    private global::Protocol.BoxColliderData collider_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.BoxColliderData Collider {
      get { return collider_; }
      set {
        collider_ = value;
      }
    }
    /// <summary>Gets whether the collider field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCollider {
      get { return collider_ != null; }
    }
    /// <summary>Clears the value of the collider field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCollider() {
      collider_ = null;
    }
    /// <summary>Gets whether the "collider" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsColliderDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    /// <summary>Field number for the "prop_data_dic" field.</summary>
    public const int PropDataDicFieldNumber = 4;
    private static readonly pbc::MapField<ulong, global::Protocol.PropData>.Codec _map_propDataDic_codec
        = new pbc::MapField<ulong, global::Protocol.PropData>.Codec(pb::FieldCodec.ForUInt64(8, 0UL), pb::FieldCodec.ForMessage(18, global::Protocol.PropData.Parser), 34);
    private readonly pbc::MapField<ulong, global::Protocol.PropData> propDataDic_ = new pbc::MapField<ulong, global::Protocol.PropData>();
    /// <summary>
    ///物件包含的物品列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, global::Protocol.PropData> PropDataDic {
      get { return propDataDic_; }
    }
    /// <summary>Gets whether the "prop_data_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPropDataDicDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }

    /// <summary>Field number for the "virtual_prop_dic" field.</summary>
    public const int VirtualPropDicFieldNumber = 5;
    private static readonly pbc::MapField<ulong, global::Protocol.VirtualPropData>.Codec _map_virtualPropDic_codec
        = new pbc::MapField<ulong, global::Protocol.VirtualPropData>.Codec(pb::FieldCodec.ForUInt64(8, 0UL), pb::FieldCodec.ForMessage(18, global::Protocol.VirtualPropData.Parser), 42);
    private readonly pbc::MapField<ulong, global::Protocol.VirtualPropData> virtualPropDic_ = new pbc::MapField<ulong, global::Protocol.VirtualPropData>();
    /// <summary>
    ///线索数据，虚拟的物品，放入背包，但是不在背包中显示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, global::Protocol.VirtualPropData> VirtualPropDic {
      get { return virtualPropDic_; }
    }
    /// <summary>Gets whether the "virtual_prop_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVirtualPropDicDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 6;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { if ((_hasBits0 & 4) != 0) { return count_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 32;
        count_ = value;
      }
    }
    /// <summary>Gets whether the "count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCount {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "count" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCountDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCount() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "drop_time" field.</summary>
    public const int DropTimeFieldNumber = 7;
    private float dropTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DropTime {
      get { if ((_hasBits0 & 8) != 0) { return dropTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 64;
        dropTime_ = value;
      }
    }
    /// <summary>Gets whether the "drop_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDropTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "drop_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDropTimeDirty {
      get { return (_dirtyBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "drop_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDropTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "born_start_time" field.</summary>
    public const int BornStartTimeFieldNumber = 8;
    private float bornStartTime_;
    /// <summary>
    ///物件出生时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BornStartTime {
      get { if ((_hasBits0 & 16) != 0) { return bornStartTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 128;
        bornStartTime_ = value;
      }
    }
    /// <summary>Gets whether the "born_start_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBornStartTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "born_start_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBornStartTimeDirty {
      get { return (_dirtyBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "born_start_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBornStartTime() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "owner_id" field.</summary>
    public const int OwnerIdFieldNumber = 9;
    private uint ownerId_;
    /// <summary>
    ///释放者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OwnerId {
      get { if ((_hasBits0 & 32) != 0) { return ownerId_; } else { return 0; } }
      set {
        _hasBits0 |= 32;
        _dirtyBits0 |= 256;
        ownerId_ = value;
      }
    }
    /// <summary>Gets whether the "owner_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOwnerId {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Gets whether the "owner_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOwnerIdDirty {
      get { return (_dirtyBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "owner_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOwnerId() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "offset_position" field.</summary>
    public const int OffsetPositionFieldNumber = 10;
    private global::Protocol.Float3 offsetPosition_;
    /// <summary>
    ///偏移坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 OffsetPosition {
      get { return offsetPosition_; }
      set {
        offsetPosition_ = value;
      }
    }
    /// <summary>Gets whether the offset_position field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOffsetPosition {
      get { return offsetPosition_ != null; }
    }
    /// <summary>Clears the value of the offset_position field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOffsetPosition() {
      offsetPosition_ = null;
    }
    /// <summary>Gets whether the "offset_position" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOffsetPositionDirty {
      get { return (_dirtyBits0 & 512) != 0; }
    }

    /// <summary>Field number for the "sub_type" field.</summary>
    public const int SubTypeFieldNumber = 11;
    private global::Protocol.ThingSubType subType_;
    /// <summary>
    ///子类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ThingSubType SubType {
      get { if ((_hasBits0 & 64) != 0) { return subType_; } else { return global::Protocol.ThingSubType.ThingUnkown; } }
      set {
        _hasBits0 |= 64;
        _dirtyBits0 |= 1024;
        subType_ = value;
      }
    }
    /// <summary>Gets whether the "sub_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubType {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Gets whether the "sub_type" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSubTypeDirty {
      get { return (_dirtyBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "sub_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubType() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "follow_target_id" field.</summary>
    public const int FollowTargetIdFieldNumber = 12;
    private uint followTargetId_;
    /// <summary>
    ///追踪Entity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FollowTargetId {
      get { if ((_hasBits0 & 128) != 0) { return followTargetId_; } else { return 0; } }
      set {
        _hasBits0 |= 128;
        _dirtyBits0 |= 2048;
        followTargetId_ = value;
      }
    }
    /// <summary>Gets whether the "follow_target_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFollowTargetId {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Gets whether the "follow_target_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFollowTargetIdDirty {
      get { return (_dirtyBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "follow_target_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFollowTargetId() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "state_id" field.</summary>
    public const int StateIdFieldNumber = 13;
    private uint stateId_;
    /// <summary>
    ///物品状态id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StateId {
      get { if ((_hasBits0 & 256) != 0) { return stateId_; } else { return 0; } }
      set {
        _hasBits0 |= 256;
        _dirtyBits0 |= 4096;
        stateId_ = value;
      }
    }
    /// <summary>Gets whether the "state_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStateId {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Gets whether the "state_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStateIdDirty {
      get { return (_dirtyBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "state_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStateId() {
      _hasBits0 &= ~256;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ThingSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ThingSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ThingId != other.ThingId) return false;
      if (Id != other.Id) return false;
      if (!object.Equals(Collider, other.Collider)) return false;
      if (!PropDataDic.Equals(other.PropDataDic)) return false;
      if (!VirtualPropDic.Equals(other.VirtualPropDic)) return false;
      if (Count != other.Count) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DropTime, other.DropTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BornStartTime, other.BornStartTime)) return false;
      if (OwnerId != other.OwnerId) return false;
      if (!object.Equals(OffsetPosition, other.OffsetPosition)) return false;
      if (SubType != other.SubType) return false;
      if (FollowTargetId != other.FollowTargetId) return false;
      if (StateId != other.StateId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasThingId) hash ^= ThingId.GetHashCode();
      if (HasId) hash ^= Id.GetHashCode();
      if (HasCollider) hash ^= Collider.GetHashCode();
      hash ^= PropDataDic.GetHashCode();
      hash ^= VirtualPropDic.GetHashCode();
      if (HasCount) hash ^= Count.GetHashCode();
      if (HasDropTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DropTime);
      if (HasBornStartTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BornStartTime);
      if (HasOwnerId) hash ^= OwnerId.GetHashCode();
      if (HasOffsetPosition) hash ^= OffsetPosition.GetHashCode();
      if (HasSubType) hash ^= SubType.GetHashCode();
      if (HasFollowTargetId) hash ^= FollowTargetId.GetHashCode();
      if (HasStateId) hash ^= StateId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasThingId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsThingIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(ThingId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCollider)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsColliderDirty)) {
        output.WriteRawTag(26);
        output.WriteMessage(Collider);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropDataDicDirty)) {
        propDataDic_.WriteTo(output, _map_propDataDic_codec);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsVirtualPropDicDirty)) {
        virtualPropDic_.WriteTo(output, _map_virtualPropDic_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCountDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(Count);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDropTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDropTimeDirty)) {
        output.WriteRawTag(61);
        output.WriteFloat(DropTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBornStartTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBornStartTimeDirty)) {
        output.WriteRawTag(69);
        output.WriteFloat(BornStartTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOwnerId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOwnerIdDirty)) {
        output.WriteRawTag(72);
        output.WriteUInt32(OwnerId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOffsetPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOffsetPositionDirty)) {
        output.WriteRawTag(82);
        output.WriteMessage(OffsetPosition);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSubType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSubTypeDirty)) {
        output.WriteRawTag(88);
        output.WriteEnum((int) SubType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFollowTargetId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFollowTargetIdDirty)) {
        output.WriteRawTag(96);
        output.WriteUInt32(FollowTargetId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStateId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStateIdDirty)) {
        output.WriteRawTag(104);
        output.WriteUInt32(StateId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasThingId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsThingIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(ThingId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCollider)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsColliderDirty)) {
        output.WriteRawTag(26);
        output.WriteMessage(Collider);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropDataDicDirty)) {
        propDataDic_.WriteTo(ref output, _map_propDataDic_codec);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsVirtualPropDicDirty)) {
        virtualPropDic_.WriteTo(ref output, _map_virtualPropDic_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCountDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(Count);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDropTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDropTimeDirty)) {
        output.WriteRawTag(61);
        output.WriteFloat(DropTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBornStartTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBornStartTimeDirty)) {
        output.WriteRawTag(69);
        output.WriteFloat(BornStartTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOwnerId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOwnerIdDirty)) {
        output.WriteRawTag(72);
        output.WriteUInt32(OwnerId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOffsetPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOffsetPositionDirty)) {
        output.WriteRawTag(82);
        output.WriteMessage(OffsetPosition);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSubType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSubTypeDirty)) {
        output.WriteRawTag(88);
        output.WriteEnum((int) SubType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFollowTargetId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFollowTargetIdDirty)) {
        output.WriteRawTag(96);
        output.WriteUInt32(FollowTargetId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStateId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStateIdDirty)) {
        output.WriteRawTag(104);
        output.WriteUInt32(StateId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasThingId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsThingIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ThingId);
      }
      if ((scope == pb.WriteScope.FULL && HasId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (HasCollider) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Collider, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 4;
        } else {
          _dirtyBits0 &= ~4;
        }
      }
      if (PropDataDic != null) {
        int msgSize = propDataDic_.CalculateSize(_map_propDataDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 8;
        } else {
          _dirtyBits0 &= ~8;
        }
      }
      if (VirtualPropDic != null) {
        int msgSize = virtualPropDic_.CalculateSize(_map_virtualPropDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 16;
        } else {
          _dirtyBits0 &= ~16;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasCount)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCountDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if ((scope == pb.WriteScope.FULL && HasDropTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsDropTimeDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasBornStartTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsBornStartTimeDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasOwnerId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsOwnerIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OwnerId);
      }
      if (HasOffsetPosition) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(OffsetPosition, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 512;
        } else {
          _dirtyBits0 &= ~512;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasSubType)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSubTypeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SubType);
      }
      if ((scope == pb.WriteScope.FULL && HasFollowTargetId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsFollowTargetIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FollowTargetId);
      }
      if ((scope == pb.WriteScope.FULL && HasStateId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsStateIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StateId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ThingSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasThingId) {
        ThingId = other.ThingId;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasCollider) {
        if (!HasCollider) {
          Collider = new global::Protocol.BoxColliderData();
        }
        Collider.MergeFrom(other.Collider);
      }
      foreach (var key in other.propDataDic_.DeleteList) {
        propDataDic_.Remove(key);
      }
      foreach (var pair in other.propDataDic_) {
        global::Protocol.PropData value;
        if(propDataDic_.TryGetValue(pair.Key, out value)) {
          value.MergeFrom(pair.Value);
        }else{
          propDataDic_.Add(pair.Key, pair.Value);
        }
      }
      foreach (var key in other.virtualPropDic_.DeleteList) {
        virtualPropDic_.Remove(key);
      }
      foreach (var pair in other.virtualPropDic_) {
        global::Protocol.VirtualPropData value;
        if(virtualPropDic_.TryGetValue(pair.Key, out value)) {
          value.MergeFrom(pair.Value);
        }else{
          virtualPropDic_.Add(pair.Key, pair.Value);
        }
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      if (other.HasDropTime) {
        DropTime = other.DropTime;
      }
      if (other.HasBornStartTime) {
        BornStartTime = other.BornStartTime;
      }
      if (other.HasOwnerId) {
        OwnerId = other.OwnerId;
      }
      if (other.HasOffsetPosition) {
        if (!HasOffsetPosition) {
          OffsetPosition = new global::Protocol.Float3();
        }
        OffsetPosition.MergeFrom(other.OffsetPosition);
      }
      if (other.HasSubType) {
        SubType = other.SubType;
      }
      if (other.HasFollowTargetId) {
        FollowTargetId = other.FollowTargetId;
      }
      if (other.HasStateId) {
        StateId = other.StateId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ThingId = input.ReadUInt64();
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 26: {
            if (!HasCollider) {
              Collider = new global::Protocol.BoxColliderData();
            }
            input.ReadMessage(Collider);
            break;
          }
          case 34: {
            propDataDic_.AddEntriesFrom(input, _map_propDataDic_codec);
            break;
          }
          case 42: {
            virtualPropDic_.AddEntriesFrom(input, _map_virtualPropDic_codec);
            break;
          }
          case 48: {
            Count = input.ReadUInt32();
            break;
          }
          case 61: {
            DropTime = input.ReadFloat();
            break;
          }
          case 69: {
            BornStartTime = input.ReadFloat();
            break;
          }
          case 72: {
            OwnerId = input.ReadUInt32();
            break;
          }
          case 82: {
            if (!HasOffsetPosition) {
              OffsetPosition = new global::Protocol.Float3();
            }
            input.ReadMessage(OffsetPosition);
            break;
          }
          case 88: {
            SubType = (global::Protocol.ThingSubType) input.ReadEnum();
            break;
          }
          case 96: {
            FollowTargetId = input.ReadUInt32();
            break;
          }
          case 104: {
            StateId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ThingId = input.ReadUInt64();
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 26: {
            if (!HasCollider) {
              Collider = new global::Protocol.BoxColliderData();
            }
            input.ReadMessage(Collider);
            break;
          }
          case 34: {
            propDataDic_.AddEntriesFrom(ref input, _map_propDataDic_codec);
            break;
          }
          case 42: {
            virtualPropDic_.AddEntriesFrom(ref input, _map_virtualPropDic_codec);
            break;
          }
          case 48: {
            Count = input.ReadUInt32();
            break;
          }
          case 61: {
            DropTime = input.ReadFloat();
            break;
          }
          case 69: {
            BornStartTime = input.ReadFloat();
            break;
          }
          case 72: {
            OwnerId = input.ReadUInt32();
            break;
          }
          case 82: {
            if (!HasOffsetPosition) {
              OffsetPosition = new global::Protocol.Float3();
            }
            input.ReadMessage(OffsetPosition);
            break;
          }
          case 88: {
            SubType = (global::Protocol.ThingSubType) input.ReadEnum();
            break;
          }
          case 96: {
            FollowTargetId = input.ReadUInt32();
            break;
          }
          case 104: {
            StateId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HeroSyncData : pb::IMessage<HeroSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HeroSyncData> _parser = new pb::MessageParser<HeroSyncData>(() => new HeroSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[126]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroSyncData(HeroSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      heroId_ = other.heroId_;
      skinId_ = other.skinId_;
      shouhua_ = other.shouhua_;
      shouhuaEndTime_ = other.shouhuaEndTime_;
      attackCombo_ = other.attackCombo_;
      isPhantom_ = other.isPhantom_;
      masterId_ = other.masterId_;
      gulingId_ = other.gulingId_;
      heroLevel_ = other.heroLevel_;
      heroExp_ = other.heroExp_;
      shootTime_ = other.shootTime_;
      vaStateDic_ = other.vaStateDic_.Clone();
      shotTargetId_ = other.shotTargetId_;
      isAi_ = other.isAi_;
      debugVaDic_ = other.debugVaDic_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroSyncData Clone() {
      return new HeroSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private uint heroId_;
    /// <summary>
    ///英雄id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { if ((_hasBits0 & 1) != 0) { return heroId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "hero_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHeroIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "hero_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "skin_id" field.</summary>
    public const int SkinIdFieldNumber = 2;
    private uint skinId_;
    /// <summary>
    ///皮肤id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkinId {
      get { if ((_hasBits0 & 2) != 0) { return skinId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        skinId_ = value;
      }
    }
    /// <summary>Gets whether the "skin_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSkinId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "skin_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkinIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "skin_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSkinId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "shouhua" field.</summary>
    public const int ShouhuaFieldNumber = 4;
    private bool shouhua_;
    /// <summary>
    ///是否处于兽化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Shouhua {
      get { if ((_hasBits0 & 4) != 0) { return shouhua_; } else { return false; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        shouhua_ = value;
      }
    }
    /// <summary>Gets whether the "shouhua" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShouhua {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "shouhua" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShouhuaDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "shouhua" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShouhua() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "shouhua_end_time" field.</summary>
    public const int ShouhuaEndTimeFieldNumber = 5;
    private float shouhuaEndTime_;
    /// <summary>
    ///兽化结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShouhuaEndTime {
      get { if ((_hasBits0 & 8) != 0) { return shouhuaEndTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        shouhuaEndTime_ = value;
      }
    }
    /// <summary>Gets whether the "shouhua_end_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShouhuaEndTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "shouhua_end_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShouhuaEndTimeDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "shouhua_end_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShouhuaEndTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "attack_combo" field.</summary>
    public const int AttackComboFieldNumber = 6;
    private uint attackCombo_;
    /// <summary>
    ///连击数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttackCombo {
      get { if ((_hasBits0 & 16) != 0) { return attackCombo_; } else { return 0; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 16;
        attackCombo_ = value;
      }
    }
    /// <summary>Gets whether the "attack_combo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAttackCombo {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "attack_combo" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttackComboDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "attack_combo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAttackCombo() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "is_phantom" field.</summary>
    public const int IsPhantomFieldNumber = 7;
    private bool isPhantom_;
    /// <summary>
    ///是否是幻象
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPhantom {
      get { if ((_hasBits0 & 32) != 0) { return isPhantom_; } else { return false; } }
      set {
        _hasBits0 |= 32;
        _dirtyBits0 |= 32;
        isPhantom_ = value;
      }
    }
    /// <summary>Gets whether the "is_phantom" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsPhantom {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Gets whether the "is_phantom" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIsPhantomDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "is_phantom" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsPhantom() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "master_id" field.</summary>
    public const int MasterIdFieldNumber = 8;
    private uint masterId_;
    /// <summary>
    ///召唤师ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MasterId {
      get { if ((_hasBits0 & 64) != 0) { return masterId_; } else { return 0; } }
      set {
        _hasBits0 |= 64;
        _dirtyBits0 |= 64;
        masterId_ = value;
      }
    }
    /// <summary>Gets whether the "master_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMasterId {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Gets whether the "master_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMasterIdDirty {
      get { return (_dirtyBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "master_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMasterId() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "guling_id" field.</summary>
    public const int GulingIdFieldNumber = 9;
    private uint gulingId_;
    /// <summary>
    ///蛊灵ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GulingId {
      get { if ((_hasBits0 & 128) != 0) { return gulingId_; } else { return 0; } }
      set {
        _hasBits0 |= 128;
        _dirtyBits0 |= 128;
        gulingId_ = value;
      }
    }
    /// <summary>Gets whether the "guling_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGulingId {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Gets whether the "guling_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGulingIdDirty {
      get { return (_dirtyBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "guling_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGulingId() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "heroLevel" field.</summary>
    public const int HeroLevelFieldNumber = 10;
    private uint heroLevel_;
    /// <summary>
    ///英雄等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroLevel {
      get { if ((_hasBits0 & 256) != 0) { return heroLevel_; } else { return 0; } }
      set {
        _hasBits0 |= 256;
        _dirtyBits0 |= 256;
        heroLevel_ = value;
      }
    }
    /// <summary>Gets whether the "heroLevel" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroLevel {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Gets whether the "heroLevel" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHeroLevelDirty {
      get { return (_dirtyBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "heroLevel" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroLevel() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "heroExp" field.</summary>
    public const int HeroExpFieldNumber = 11;
    private uint heroExp_;
    /// <summary>
    ///英雄经验值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroExp {
      get { if ((_hasBits0 & 512) != 0) { return heroExp_; } else { return 0; } }
      set {
        _hasBits0 |= 512;
        _dirtyBits0 |= 512;
        heroExp_ = value;
      }
    }
    /// <summary>Gets whether the "heroExp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeroExp {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Gets whether the "heroExp" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHeroExpDirty {
      get { return (_dirtyBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "heroExp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeroExp() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "shoot_time" field.</summary>
    public const int ShootTimeFieldNumber = 12;
    private float shootTime_;
    /// <summary>
    ///上次射箭时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShootTime {
      get { if ((_hasBits0 & 1024) != 0) { return shootTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 1024;
        _dirtyBits0 |= 1024;
        shootTime_ = value;
      }
    }
    /// <summary>Gets whether the "shoot_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShootTime {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Gets whether the "shoot_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShootTimeDirty {
      get { return (_dirtyBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "shoot_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShootTime() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "va_state_dic" field.</summary>
    public const int VaStateDicFieldNumber = 13;
    private static readonly pbc::MapField<uint, int>.Codec _map_vaStateDic_codec
        = new pbc::MapField<uint, int>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 106);
    private readonly pbc::MapField<uint, int> vaStateDic_ = new pbc::MapField<uint, int>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, int> VaStateDic {
      get { return vaStateDic_; }
    }
    /// <summary>Gets whether the "va_state_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVaStateDicDirty {
      get { return (_dirtyBits0 & 2048) != 0; }
    }

    /// <summary>Field number for the "shot_target_id" field.</summary>
    public const int ShotTargetIdFieldNumber = 15;
    private uint shotTargetId_;
    /// <summary>
    ///optional float shot_val									= 14;//拉弓蓄力进度（0~1）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShotTargetId {
      get { if ((_hasBits0 & 2048) != 0) { return shotTargetId_; } else { return 0; } }
      set {
        _hasBits0 |= 2048;
        _dirtyBits0 |= 4096;
        shotTargetId_ = value;
      }
    }
    /// <summary>Gets whether the "shot_target_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShotTargetId {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Gets whether the "shot_target_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShotTargetIdDirty {
      get { return (_dirtyBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "shot_target_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShotTargetId() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "is_ai" field.</summary>
    public const int IsAiFieldNumber = 16;
    private bool isAi_;
    /// <summary>
    ///是否为AI
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAi {
      get { if ((_hasBits0 & 4096) != 0) { return isAi_; } else { return false; } }
      set {
        _hasBits0 |= 4096;
        _dirtyBits0 |= 8192;
        isAi_ = value;
      }
    }
    /// <summary>Gets whether the "is_ai" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsAi {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Gets whether the "is_ai" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIsAiDirty {
      get { return (_dirtyBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "is_ai" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsAi() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "debug_va_dic" field.</summary>
    public const int DebugVaDicFieldNumber = 17;
    private static readonly pbc::MapField<uint, int>.Codec _map_debugVaDic_codec
        = new pbc::MapField<uint, int>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 138);
    private readonly pbc::MapField<uint, int> debugVaDic_ = new pbc::MapField<uint, int>();
    /// <summary>
    ///展示VA信息，打印在客户端
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, int> DebugVaDic {
      get { return debugVaDic_; }
    }
    /// <summary>Gets whether the "debug_va_dic" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDebugVaDicDirty {
      get { return (_dirtyBits0 & 16384) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroId != other.HeroId) return false;
      if (SkinId != other.SkinId) return false;
      if (Shouhua != other.Shouhua) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ShouhuaEndTime, other.ShouhuaEndTime)) return false;
      if (AttackCombo != other.AttackCombo) return false;
      if (IsPhantom != other.IsPhantom) return false;
      if (MasterId != other.MasterId) return false;
      if (GulingId != other.GulingId) return false;
      if (HeroLevel != other.HeroLevel) return false;
      if (HeroExp != other.HeroExp) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ShootTime, other.ShootTime)) return false;
      if (!VaStateDic.Equals(other.VaStateDic)) return false;
      if (ShotTargetId != other.ShotTargetId) return false;
      if (IsAi != other.IsAi) return false;
      if (!DebugVaDic.Equals(other.DebugVaDic)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHeroId) hash ^= HeroId.GetHashCode();
      if (HasSkinId) hash ^= SkinId.GetHashCode();
      if (HasShouhua) hash ^= Shouhua.GetHashCode();
      if (HasShouhuaEndTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ShouhuaEndTime);
      if (HasAttackCombo) hash ^= AttackCombo.GetHashCode();
      if (HasIsPhantom) hash ^= IsPhantom.GetHashCode();
      if (HasMasterId) hash ^= MasterId.GetHashCode();
      if (HasGulingId) hash ^= GulingId.GetHashCode();
      if (HasHeroLevel) hash ^= HeroLevel.GetHashCode();
      if (HasHeroExp) hash ^= HeroExp.GetHashCode();
      if (HasShootTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ShootTime);
      hash ^= VaStateDic.GetHashCode();
      if (HasShotTargetId) hash ^= ShotTargetId.GetHashCode();
      if (HasIsAi) hash ^= IsAi.GetHashCode();
      hash ^= DebugVaDic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasHeroId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(HeroId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkinId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkinIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkinId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasShouhua)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsShouhuaDirty)) {
        output.WriteRawTag(32);
        output.WriteBool(Shouhua);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasShouhuaEndTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsShouhuaEndTimeDirty)) {
        output.WriteRawTag(45);
        output.WriteFloat(ShouhuaEndTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAttackCombo)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAttackComboDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(AttackCombo);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsPhantom)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsPhantomDirty)) {
        output.WriteRawTag(56);
        output.WriteBool(IsPhantom);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMasterId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMasterIdDirty)) {
        output.WriteRawTag(64);
        output.WriteUInt32(MasterId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasGulingId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsGulingIdDirty)) {
        output.WriteRawTag(72);
        output.WriteUInt32(GulingId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHeroLevel)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeroLevelDirty)) {
        output.WriteRawTag(80);
        output.WriteUInt32(HeroLevel);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHeroExp)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeroExpDirty)) {
        output.WriteRawTag(88);
        output.WriteUInt32(HeroExp);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasShootTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsShootTimeDirty)) {
        output.WriteRawTag(101);
        output.WriteFloat(ShootTime);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsVaStateDicDirty)) {
        vaStateDic_.WriteTo(output, _map_vaStateDic_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasShotTargetId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsShotTargetIdDirty)) {
        output.WriteRawTag(120);
        output.WriteUInt32(ShotTargetId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsAi)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsAiDirty)) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsAi);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDebugVaDicDirty)) {
        debugVaDic_.WriteTo(output, _map_debugVaDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasHeroId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(HeroId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSkinId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkinIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkinId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasShouhua)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsShouhuaDirty)) {
        output.WriteRawTag(32);
        output.WriteBool(Shouhua);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasShouhuaEndTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsShouhuaEndTimeDirty)) {
        output.WriteRawTag(45);
        output.WriteFloat(ShouhuaEndTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAttackCombo)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAttackComboDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(AttackCombo);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsPhantom)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsPhantomDirty)) {
        output.WriteRawTag(56);
        output.WriteBool(IsPhantom);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMasterId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMasterIdDirty)) {
        output.WriteRawTag(64);
        output.WriteUInt32(MasterId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasGulingId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsGulingIdDirty)) {
        output.WriteRawTag(72);
        output.WriteUInt32(GulingId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHeroLevel)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeroLevelDirty)) {
        output.WriteRawTag(80);
        output.WriteUInt32(HeroLevel);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHeroExp)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeroExpDirty)) {
        output.WriteRawTag(88);
        output.WriteUInt32(HeroExp);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasShootTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsShootTimeDirty)) {
        output.WriteRawTag(101);
        output.WriteFloat(ShootTime);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsVaStateDicDirty)) {
        vaStateDic_.WriteTo(ref output, _map_vaStateDic_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasShotTargetId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsShotTargetIdDirty)) {
        output.WriteRawTag(120);
        output.WriteUInt32(ShotTargetId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsAi)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsAiDirty)) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsAi);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDebugVaDicDirty)) {
        debugVaDic_.WriteTo(ref output, _map_debugVaDic_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasHeroId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if ((scope == pb.WriteScope.FULL && HasSkinId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSkinIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkinId);
      }
      if ((scope == pb.WriteScope.FULL && HasShouhua)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsShouhuaDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasShouhuaEndTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsShouhuaEndTimeDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasAttackCombo)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsAttackComboDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttackCombo);
      }
      if ((scope == pb.WriteScope.FULL && HasIsPhantom)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIsPhantomDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasMasterId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsMasterIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MasterId);
      }
      if ((scope == pb.WriteScope.FULL && HasGulingId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsGulingIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GulingId);
      }
      if ((scope == pb.WriteScope.FULL && HasHeroLevel)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsHeroLevelDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroLevel);
      }
      if ((scope == pb.WriteScope.FULL && HasHeroExp)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsHeroExpDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroExp);
      }
      if ((scope == pb.WriteScope.FULL && HasShootTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsShootTimeDirty)) {
        size += 1 + 4;
      }
      if (VaStateDic != null) {
        int msgSize = vaStateDic_.CalculateSize(_map_vaStateDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 2048;
        } else {
          _dirtyBits0 &= ~2048;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasShotTargetId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsShotTargetIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShotTargetId);
      }
      if ((scope == pb.WriteScope.FULL && HasIsAi)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIsAiDirty)) {
        size += 2 + 1;
      }
      if (DebugVaDic != null) {
        int msgSize = debugVaDic_.CalculateSize(_map_debugVaDic_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 16384;
        } else {
          _dirtyBits0 &= ~16384;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      if (other.HasSkinId) {
        SkinId = other.SkinId;
      }
      if (other.HasShouhua) {
        Shouhua = other.Shouhua;
      }
      if (other.HasShouhuaEndTime) {
        ShouhuaEndTime = other.ShouhuaEndTime;
      }
      if (other.HasAttackCombo) {
        AttackCombo = other.AttackCombo;
      }
      if (other.HasIsPhantom) {
        IsPhantom = other.IsPhantom;
      }
      if (other.HasMasterId) {
        MasterId = other.MasterId;
      }
      if (other.HasGulingId) {
        GulingId = other.GulingId;
      }
      if (other.HasHeroLevel) {
        HeroLevel = other.HeroLevel;
      }
      if (other.HasHeroExp) {
        HeroExp = other.HeroExp;
      }
      if (other.HasShootTime) {
        ShootTime = other.ShootTime;
      }
      foreach (var key in other.vaStateDic_.DeleteList) {
        vaStateDic_.Remove(key);
      }
      foreach (var pair in other.vaStateDic_) {
        vaStateDic_[pair.Key] = pair.Value;
      }
      if (other.HasShotTargetId) {
        ShotTargetId = other.ShotTargetId;
      }
      if (other.HasIsAi) {
        IsAi = other.IsAi;
      }
      foreach (var key in other.debugVaDic_.DeleteList) {
        debugVaDic_.Remove(key);
      }
      foreach (var pair in other.debugVaDic_) {
        debugVaDic_[pair.Key] = pair.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 16: {
            SkinId = input.ReadUInt32();
            break;
          }
          case 32: {
            Shouhua = input.ReadBool();
            break;
          }
          case 45: {
            ShouhuaEndTime = input.ReadFloat();
            break;
          }
          case 48: {
            AttackCombo = input.ReadUInt32();
            break;
          }
          case 56: {
            IsPhantom = input.ReadBool();
            break;
          }
          case 64: {
            MasterId = input.ReadUInt32();
            break;
          }
          case 72: {
            GulingId = input.ReadUInt32();
            break;
          }
          case 80: {
            HeroLevel = input.ReadUInt32();
            break;
          }
          case 88: {
            HeroExp = input.ReadUInt32();
            break;
          }
          case 101: {
            ShootTime = input.ReadFloat();
            break;
          }
          case 106: {
            vaStateDic_.AddEntriesFrom(input, _map_vaStateDic_codec);
            break;
          }
          case 120: {
            ShotTargetId = input.ReadUInt32();
            break;
          }
          case 128: {
            IsAi = input.ReadBool();
            break;
          }
          case 138: {
            debugVaDic_.AddEntriesFrom(input, _map_debugVaDic_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 16: {
            SkinId = input.ReadUInt32();
            break;
          }
          case 32: {
            Shouhua = input.ReadBool();
            break;
          }
          case 45: {
            ShouhuaEndTime = input.ReadFloat();
            break;
          }
          case 48: {
            AttackCombo = input.ReadUInt32();
            break;
          }
          case 56: {
            IsPhantom = input.ReadBool();
            break;
          }
          case 64: {
            MasterId = input.ReadUInt32();
            break;
          }
          case 72: {
            GulingId = input.ReadUInt32();
            break;
          }
          case 80: {
            HeroLevel = input.ReadUInt32();
            break;
          }
          case 88: {
            HeroExp = input.ReadUInt32();
            break;
          }
          case 101: {
            ShootTime = input.ReadFloat();
            break;
          }
          case 106: {
            vaStateDic_.AddEntriesFrom(ref input, _map_vaStateDic_codec);
            break;
          }
          case 120: {
            ShotTargetId = input.ReadUInt32();
            break;
          }
          case 128: {
            IsAi = input.ReadBool();
            break;
          }
          case 138: {
            debugVaDic_.AddEntriesFrom(ref input, _map_debugVaDic_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WarningSyncData : pb::IMessage<WarningSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WarningSyncData> _parser = new pb::MessageParser<WarningSyncData>(() => new WarningSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WarningSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[127]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarningSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarningSyncData(WarningSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      noticeEId_ = other.noticeEId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WarningSyncData Clone() {
      return new WarningSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "notice_eId" field.</summary>
    public const int NoticeEIdFieldNumber = 1;
    private uint noticeEId_;
    /// <summary>
    ///警示目标								 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NoticeEId {
      get { if ((_hasBits0 & 1) != 0) { return noticeEId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        noticeEId_ = value;
      }
    }
    /// <summary>Gets whether the "notice_eId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNoticeEId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "notice_eId" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNoticeEIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "notice_eId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNoticeEId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WarningSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WarningSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NoticeEId != other.NoticeEId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNoticeEId) hash ^= NoticeEId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasNoticeEId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNoticeEIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(NoticeEId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasNoticeEId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNoticeEIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(NoticeEId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasNoticeEId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNoticeEIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NoticeEId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WarningSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasNoticeEId) {
        NoticeEId = other.NoticeEId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NoticeEId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NoticeEId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BallSyncData : pb::IMessage<BallSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BallSyncData> _parser = new pb::MessageParser<BallSyncData>(() => new BallSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BallSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[128]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallSyncData(BallSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      propId_ = other.propId_;
      power_ = other.power_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallSyncData Clone() {
      return new BallSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "prop_id" field.</summary>
    public const int PropIdFieldNumber = 2;
    private uint propId_;
    /// <summary>
    ///prop ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PropId {
      get { if ((_hasBits0 & 1) != 0) { return propId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        propId_ = value;
      }
    }
    /// <summary>Gets whether the "prop_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPropId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "prop_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPropIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "prop_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPropId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 3;
    private float power_;
    /// <summary>
    ///使用的力气
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Power {
      get { if ((_hasBits0 & 2) != 0) { return power_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        power_ = value;
      }
    }
    /// <summary>Gets whether the "power" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPower {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "power" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPowerDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "power" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPower() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BallSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BallSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropId != other.PropId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Power, other.Power)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPropId) hash ^= PropId.GetHashCode();
      if (HasPower) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Power);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasPropId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(PropId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPower)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPowerDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(Power);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasPropId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(PropId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPower)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPowerDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(Power);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasPropId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsPropIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PropId);
      }
      if ((scope == pb.WriteScope.FULL && HasPower)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsPowerDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BallSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasPropId) {
        PropId = other.PropId;
      }
      if (other.HasPower) {
        Power = other.Power;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            PropId = input.ReadUInt32();
            break;
          }
          case 29: {
            Power = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 16: {
            PropId = input.ReadUInt32();
            break;
          }
          case 29: {
            Power = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SmokeSyncData : pb::IMessage<SmokeSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SmokeSyncData> _parser = new pb::MessageParser<SmokeSyncData>(() => new SmokeSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SmokeSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[129]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmokeSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmokeSyncData(SmokeSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      sourceEId_ = other.sourceEId_;
      voiceRange_ = other.voiceRange_;
      affectTime_ = other.affectTime_;
      affectRange_ = other.affectRange_;
      effectName_ = other.effectName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmokeSyncData Clone() {
      return new SmokeSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "source_eId" field.</summary>
    public const int SourceEIdFieldNumber = 1;
    private uint sourceEId_;
    /// <summary>
    ///释放者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SourceEId {
      get { if ((_hasBits0 & 1) != 0) { return sourceEId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        sourceEId_ = value;
      }
    }
    /// <summary>Gets whether the "source_eId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourceEId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "source_eId" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSourceEIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "source_eId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourceEId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "voice_range" field.</summary>
    public const int VoiceRangeFieldNumber = 2;
    private float voiceRange_;
    /// <summary>
    ///声音范围
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VoiceRange {
      get { if ((_hasBits0 & 2) != 0) { return voiceRange_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        voiceRange_ = value;
      }
    }
    /// <summary>Gets whether the "voice_range" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVoiceRange {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "voice_range" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVoiceRangeDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "voice_range" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVoiceRange() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "affect_time" field.</summary>
    public const int AffectTimeFieldNumber = 3;
    private float affectTime_;
    /// <summary>
    ///作用时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AffectTime {
      get { if ((_hasBits0 & 4) != 0) { return affectTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        affectTime_ = value;
      }
    }
    /// <summary>Gets whether the "affect_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAffectTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "affect_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAffectTimeDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "affect_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAffectTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "affect_range" field.</summary>
    public const int AffectRangeFieldNumber = 4;
    private float affectRange_;
    /// <summary>
    ///作用范围
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AffectRange {
      get { if ((_hasBits0 & 8) != 0) { return affectRange_; } else { return 0F; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        affectRange_ = value;
      }
    }
    /// <summary>Gets whether the "affect_range" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAffectRange {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "affect_range" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAffectRangeDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "affect_range" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAffectRange() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "effect_name" field.</summary>
    public const int EffectNameFieldNumber = 5;
    private string effectName_;
    /// <summary>
    ///特效名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EffectName {
      get { return effectName_ ?? ""; }
      set {
        effectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "effect_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEffectName {
      get { return effectName_ != null; }
    }
    /// <summary>Gets whether the "effect_name" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEffectNameDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "effect_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEffectName() {
      effectName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SmokeSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SmokeSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceEId != other.SourceEId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VoiceRange, other.VoiceRange)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AffectTime, other.AffectTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AffectRange, other.AffectRange)) return false;
      if (EffectName != other.EffectName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSourceEId) hash ^= SourceEId.GetHashCode();
      if (HasVoiceRange) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VoiceRange);
      if (HasAffectTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AffectTime);
      if (HasAffectRange) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AffectRange);
      if (HasEffectName) hash ^= EffectName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasSourceEId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSourceEIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(SourceEId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasVoiceRange)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsVoiceRangeDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(VoiceRange);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAffectTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAffectTimeDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(AffectTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAffectRange)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAffectRangeDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(AffectRange);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEffectName)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEffectNameDirty)) {
        output.WriteRawTag(42);
        output.WriteString(EffectName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasSourceEId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSourceEIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(SourceEId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasVoiceRange)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsVoiceRangeDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(VoiceRange);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAffectTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAffectTimeDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(AffectTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAffectRange)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAffectRangeDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(AffectRange);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEffectName)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEffectNameDirty)) {
        output.WriteRawTag(42);
        output.WriteString(EffectName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasSourceEId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSourceEIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceEId);
      }
      if ((scope == pb.WriteScope.FULL && HasVoiceRange)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsVoiceRangeDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasAffectTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsAffectTimeDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasAffectRange)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsAffectRangeDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasEffectName)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEffectNameDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EffectName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SmokeSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasSourceEId) {
        SourceEId = other.SourceEId;
      }
      if (other.HasVoiceRange) {
        VoiceRange = other.VoiceRange;
      }
      if (other.HasAffectTime) {
        AffectTime = other.AffectTime;
      }
      if (other.HasAffectRange) {
        AffectRange = other.AffectRange;
      }
      if (other.HasEffectName) {
        EffectName = other.EffectName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourceEId = input.ReadUInt32();
            break;
          }
          case 21: {
            VoiceRange = input.ReadFloat();
            break;
          }
          case 29: {
            AffectTime = input.ReadFloat();
            break;
          }
          case 37: {
            AffectRange = input.ReadFloat();
            break;
          }
          case 42: {
            EffectName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SourceEId = input.ReadUInt32();
            break;
          }
          case 21: {
            VoiceRange = input.ReadFloat();
            break;
          }
          case 29: {
            AffectTime = input.ReadFloat();
            break;
          }
          case 37: {
            AffectRange = input.ReadFloat();
            break;
          }
          case 42: {
            EffectName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JumpPointSyncData : pb::IMessage<JumpPointSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JumpPointSyncData> _parser = new pb::MessageParser<JumpPointSyncData>(() => new JumpPointSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JumpPointSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[130]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JumpPointSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JumpPointSyncData(JumpPointSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      width_ = other.width_;
      height_ = other.height_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JumpPointSyncData Clone() {
      return new JumpPointSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private float width_;
    /// <summary>
    ///宽度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Width {
      get { if ((_hasBits0 & 1) != 0) { return width_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        width_ = value;
      }
    }
    /// <summary>Gets whether the "width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWidth {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "width" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWidthDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWidth() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private float height_;
    /// <summary>
    ///高度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Height {
      get { if ((_hasBits0 & 2) != 0) { return height_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        height_ = value;
      }
    }
    /// <summary>Gets whether the "height" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeight {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "height" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHeightDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "height" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeight() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    ///类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { if ((_hasBits0 & 4) != 0) { return type_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "type" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTypeDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JumpPointSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JumpPointSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Width, other.Width)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Height, other.Height)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasWidth) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Width);
      if (HasHeight) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Height);
      if (HasType) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasWidth)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsWidthDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(Width);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHeight)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeightDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(Height);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTypeDirty)) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasWidth)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsWidthDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(Width);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHeight)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeightDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(Height);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTypeDirty)) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasWidth)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsWidthDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasHeight)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsHeightDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasType)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTypeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JumpPointSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasWidth) {
        Width = other.Width;
      }
      if (other.HasHeight) {
        Height = other.Height;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Width = input.ReadFloat();
            break;
          }
          case 21: {
            Height = input.ReadFloat();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Width = input.ReadFloat();
            break;
          }
          case 21: {
            Height = input.ReadFloat();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HideStateSyncData : pb::IMessage<HideStateSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HideStateSyncData> _parser = new pb::MessageParser<HideStateSyncData>(() => new HideStateSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HideStateSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[131]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HideStateSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HideStateSyncData(HideStateSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      isHide_ = other.isHide_;
      hideStartTime_ = other.hideStartTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HideStateSyncData Clone() {
      return new HideStateSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "is_hide" field.</summary>
    public const int IsHideFieldNumber = 1;
    private bool isHide_;
    /// <summary>
    ///是否隐藏状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHide {
      get { if ((_hasBits0 & 1) != 0) { return isHide_; } else { return false; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        isHide_ = value;
      }
    }
    /// <summary>Gets whether the "is_hide" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsHide {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "is_hide" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIsHideDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_hide" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsHide() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "hide_start_time" field.</summary>
    public const int HideStartTimeFieldNumber = 2;
    private float hideStartTime_;
    /// <summary>
    ///进入隐藏状态的时间点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HideStartTime {
      get { if ((_hasBits0 & 2) != 0) { return hideStartTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        hideStartTime_ = value;
      }
    }
    /// <summary>Gets whether the "hide_start_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHideStartTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "hide_start_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHideStartTimeDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "hide_start_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHideStartTime() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HideStateSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HideStateSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsHide != other.IsHide) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HideStartTime, other.HideStartTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIsHide) hash ^= IsHide.GetHashCode();
      if (HasHideStartTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HideStartTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasIsHide)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsHideDirty)) {
        output.WriteRawTag(8);
        output.WriteBool(IsHide);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHideStartTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHideStartTimeDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(HideStartTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasIsHide)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsHideDirty)) {
        output.WriteRawTag(8);
        output.WriteBool(IsHide);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHideStartTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHideStartTimeDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(HideStartTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasIsHide)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIsHideDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasHideStartTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsHideStartTimeDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HideStateSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasIsHide) {
        IsHide = other.IsHide;
      }
      if (other.HasHideStartTime) {
        HideStartTime = other.HideStartTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsHide = input.ReadBool();
            break;
          }
          case 21: {
            HideStartTime = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsHide = input.ReadBool();
            break;
          }
          case 21: {
            HideStartTime = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MonsterSyncData : pb::IMessage<MonsterSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MonsterSyncData> _parser = new pb::MessageParser<MonsterSyncData>(() => new MonsterSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[132]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterSyncData(MonsterSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      npcId_ = other.npcId_;
      btState_ = other.btState_;
      originPoint_ = other.HasOriginPoint ? other.originPoint_.Clone() : null;
      attackRadius_ = other.attackRadius_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterSyncData Clone() {
      return new MonsterSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "npc_id" field.</summary>
    public const int NpcIdFieldNumber = 1;
    private uint npcId_;
    /// <summary>
    ///NPC的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NpcId {
      get { if ((_hasBits0 & 1) != 0) { return npcId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        npcId_ = value;
      }
    }
    /// <summary>Gets whether the "npc_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNpcId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "npc_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNpcIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "npc_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNpcId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "bt_state" field.</summary>
    public const int BtStateFieldNumber = 2;
    private uint btState_;
    /// <summary>
    ///行为树所处状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BtState {
      get { if ((_hasBits0 & 2) != 0) { return btState_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        btState_ = value;
      }
    }
    /// <summary>Gets whether the "bt_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBtState {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "bt_state" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBtStateDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "bt_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBtState() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "origin_point" field.</summary>
    public const int OriginPointFieldNumber = 3;
    private global::Protocol.Float3 originPoint_;
    /// <summary>
    ///出生点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 OriginPoint {
      get { return originPoint_; }
      set {
        originPoint_ = value;
      }
    }
    /// <summary>Gets whether the origin_point field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginPoint {
      get { return originPoint_ != null; }
    }
    /// <summary>Clears the value of the origin_point field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginPoint() {
      originPoint_ = null;
    }
    /// <summary>Gets whether the "origin_point" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOriginPointDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    /// <summary>Field number for the "attack_radius" field.</summary>
    public const int AttackRadiusFieldNumber = 4;
    private float attackRadius_;
    /// <summary>
    ///最大攻击范围
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackRadius {
      get { if ((_hasBits0 & 4) != 0) { return attackRadius_; } else { return 0F; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 8;
        attackRadius_ = value;
      }
    }
    /// <summary>Gets whether the "attack_radius" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAttackRadius {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "attack_radius" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttackRadiusDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "attack_radius" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAttackRadius() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonsterSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonsterSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NpcId != other.NpcId) return false;
      if (BtState != other.BtState) return false;
      if (!object.Equals(OriginPoint, other.OriginPoint)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackRadius, other.AttackRadius)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNpcId) hash ^= NpcId.GetHashCode();
      if (HasBtState) hash ^= BtState.GetHashCode();
      if (HasOriginPoint) hash ^= OriginPoint.GetHashCode();
      if (HasAttackRadius) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackRadius);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasNpcId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNpcIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(NpcId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBtState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBtStateDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(BtState);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOriginPoint)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOriginPointDirty)) {
        output.WriteRawTag(26);
        output.WriteMessage(OriginPoint);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAttackRadius)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAttackRadiusDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(AttackRadius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasNpcId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNpcIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(NpcId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasBtState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBtStateDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(BtState);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOriginPoint)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOriginPointDirty)) {
        output.WriteRawTag(26);
        output.WriteMessage(OriginPoint);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAttackRadius)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAttackRadiusDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(AttackRadius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasNpcId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNpcIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcId);
      }
      if ((scope == pb.WriteScope.FULL && HasBtState)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsBtStateDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BtState);
      }
      if (HasOriginPoint) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(OriginPoint, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 4;
        } else {
          _dirtyBits0 &= ~4;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasAttackRadius)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsAttackRadiusDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonsterSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasNpcId) {
        NpcId = other.NpcId;
      }
      if (other.HasBtState) {
        BtState = other.BtState;
      }
      if (other.HasOriginPoint) {
        if (!HasOriginPoint) {
          OriginPoint = new global::Protocol.Float3();
        }
        OriginPoint.MergeFrom(other.OriginPoint);
      }
      if (other.HasAttackRadius) {
        AttackRadius = other.AttackRadius;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NpcId = input.ReadUInt32();
            break;
          }
          case 16: {
            BtState = input.ReadUInt32();
            break;
          }
          case 26: {
            if (!HasOriginPoint) {
              OriginPoint = new global::Protocol.Float3();
            }
            input.ReadMessage(OriginPoint);
            break;
          }
          case 37: {
            AttackRadius = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NpcId = input.ReadUInt32();
            break;
          }
          case 16: {
            BtState = input.ReadUInt32();
            break;
          }
          case 26: {
            if (!HasOriginPoint) {
              OriginPoint = new global::Protocol.Float3();
            }
            input.ReadMessage(OriginPoint);
            break;
          }
          case 37: {
            AttackRadius = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PhyscialSyncData : pb::IMessage<PhyscialSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PhyscialSyncData> _parser = new pb::MessageParser<PhyscialSyncData>(() => new PhyscialSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PhyscialSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[133]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhyscialSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhyscialSyncData(PhyscialSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      disable_ = other.disable_;
      isGround_ = other.isGround_;
      mass_ = other.mass_;
      speed_ = other.HasSpeed ? other.speed_.Clone() : null;
      loseMomentumXZOnHit_ = other.loseMomentumXZOnHit_;
      loseMomentumYOnHit_ = other.loseMomentumYOnHit_;
      forwardFollowMove_ = other.forwardFollowMove_;
      acceleration_ = other.acceleration_;
      minGravityFactor_ = other.minGravityFactor_;
      groupId_ = other.groupId_;
      disableCollision_ = other.disableCollision_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhyscialSyncData Clone() {
      return new PhyscialSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "disable" field.</summary>
    public const int DisableFieldNumber = 1;
    private bool disable_;
    /// <summary>
    ///禁用物理
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Disable {
      get { if ((_hasBits0 & 1) != 0) { return disable_; } else { return false; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        disable_ = value;
      }
    }
    /// <summary>Gets whether the "disable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDisable {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "disable" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDisableDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "disable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDisable() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "is_ground" field.</summary>
    public const int IsGroundFieldNumber = 2;
    private bool isGround_;
    /// <summary>
    ///处理地面摩擦力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGround {
      get { if ((_hasBits0 & 2) != 0) { return isGround_; } else { return false; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        isGround_ = value;
      }
    }
    /// <summary>Gets whether the "is_ground" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsGround {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "is_ground" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIsGroundDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "is_ground" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsGround() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "mass" field.</summary>
    public const int MassFieldNumber = 3;
    private float mass_;
    /// <summary>
    ///重量，处理重力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Mass {
      get { if ((_hasBits0 & 4) != 0) { return mass_; } else { return 0F; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        mass_ = value;
      }
    }
    /// <summary>Gets whether the "mass" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMass {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "mass" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMassDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "mass" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMass() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 4;
    private global::Protocol.Float3 speed_;
    /// <summary>
    ///速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }
    /// <summary>Gets whether the speed field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSpeed {
      get { return speed_ != null; }
    }
    /// <summary>Clears the value of the speed field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSpeed() {
      speed_ = null;
    }
    /// <summary>Gets whether the "speed" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSpeedDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }

    /// <summary>Field number for the "lose_momentumXZ_on_hit" field.</summary>
    public const int LoseMomentumXZOnHitFieldNumber = 5;
    private uint loseMomentumXZOnHit_;
    /// <summary>
    ///水平动量损失（0~100）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LoseMomentumXZOnHit {
      get { if ((_hasBits0 & 8) != 0) { return loseMomentumXZOnHit_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 16;
        loseMomentumXZOnHit_ = value;
      }
    }
    /// <summary>Gets whether the "lose_momentumXZ_on_hit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLoseMomentumXZOnHit {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "lose_momentumXZ_on_hit" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLoseMomentumXZOnHitDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "lose_momentumXZ_on_hit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLoseMomentumXZOnHit() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "lose_momentumY_on_hit" field.</summary>
    public const int LoseMomentumYOnHitFieldNumber = 6;
    private uint loseMomentumYOnHit_;
    /// <summary>
    ///垂直动量损失（0~100）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LoseMomentumYOnHit {
      get { if ((_hasBits0 & 16) != 0) { return loseMomentumYOnHit_; } else { return 0; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 32;
        loseMomentumYOnHit_ = value;
      }
    }
    /// <summary>Gets whether the "lose_momentumY_on_hit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLoseMomentumYOnHit {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "lose_momentumY_on_hit" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLoseMomentumYOnHitDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "lose_momentumY_on_hit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLoseMomentumYOnHit() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "forward_follow_move" field.</summary>
    public const int ForwardFollowMoveFieldNumber = 7;
    private bool forwardFollowMove_;
    /// <summary>
    ///朝向向着移动方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForwardFollowMove {
      get { if ((_hasBits0 & 32) != 0) { return forwardFollowMove_; } else { return false; } }
      set {
        _hasBits0 |= 32;
        _dirtyBits0 |= 64;
        forwardFollowMove_ = value;
      }
    }
    /// <summary>Gets whether the "forward_follow_move" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasForwardFollowMove {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Gets whether the "forward_follow_move" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsForwardFollowMoveDirty {
      get { return (_dirtyBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "forward_follow_move" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearForwardFollowMove() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "acceleration" field.</summary>
    public const int AccelerationFieldNumber = 8;
    private float acceleration_;
    /// <summary>
    ///重力加速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Acceleration {
      get { if ((_hasBits0 & 64) != 0) { return acceleration_; } else { return 0F; } }
      set {
        _hasBits0 |= 64;
        _dirtyBits0 |= 128;
        acceleration_ = value;
      }
    }
    /// <summary>Gets whether the "acceleration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAcceleration {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Gets whether the "acceleration" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAccelerationDirty {
      get { return (_dirtyBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "acceleration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAcceleration() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "min_gravity_factor" field.</summary>
    public const int MinGravityFactorFieldNumber = 9;
    private uint minGravityFactor_;
    /// <summary>
    ///最小的重力值（取反默认100）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinGravityFactor {
      get { if ((_hasBits0 & 128) != 0) { return minGravityFactor_; } else { return 0; } }
      set {
        _hasBits0 |= 128;
        _dirtyBits0 |= 256;
        minGravityFactor_ = value;
      }
    }
    /// <summary>Gets whether the "min_gravity_factor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMinGravityFactor {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Gets whether the "min_gravity_factor" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMinGravityFactorDirty {
      get { return (_dirtyBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "min_gravity_factor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMinGravityFactor() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 10;
    private uint groupId_;
    /// <summary>
    ///同组不碰撞
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { if ((_hasBits0 & 256) != 0) { return groupId_; } else { return 0; } }
      set {
        _hasBits0 |= 256;
        _dirtyBits0 |= 512;
        groupId_ = value;
      }
    }
    /// <summary>Gets whether the "group_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Gets whether the "group_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGroupIdDirty {
      get { return (_dirtyBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "group_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "disable_collision" field.</summary>
    public const int DisableCollisionFieldNumber = 11;
    private bool disableCollision_;
    /// <summary>
    ///禁用碰撞反弹
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableCollision {
      get { if ((_hasBits0 & 512) != 0) { return disableCollision_; } else { return false; } }
      set {
        _hasBits0 |= 512;
        _dirtyBits0 |= 1024;
        disableCollision_ = value;
      }
    }
    /// <summary>Gets whether the "disable_collision" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDisableCollision {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Gets whether the "disable_collision" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDisableCollisionDirty {
      get { return (_dirtyBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "disable_collision" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDisableCollision() {
      _hasBits0 &= ~512;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PhyscialSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PhyscialSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Disable != other.Disable) return false;
      if (IsGround != other.IsGround) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Mass, other.Mass)) return false;
      if (!object.Equals(Speed, other.Speed)) return false;
      if (LoseMomentumXZOnHit != other.LoseMomentumXZOnHit) return false;
      if (LoseMomentumYOnHit != other.LoseMomentumYOnHit) return false;
      if (ForwardFollowMove != other.ForwardFollowMove) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Acceleration, other.Acceleration)) return false;
      if (MinGravityFactor != other.MinGravityFactor) return false;
      if (GroupId != other.GroupId) return false;
      if (DisableCollision != other.DisableCollision) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDisable) hash ^= Disable.GetHashCode();
      if (HasIsGround) hash ^= IsGround.GetHashCode();
      if (HasMass) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Mass);
      if (HasSpeed) hash ^= Speed.GetHashCode();
      if (HasLoseMomentumXZOnHit) hash ^= LoseMomentumXZOnHit.GetHashCode();
      if (HasLoseMomentumYOnHit) hash ^= LoseMomentumYOnHit.GetHashCode();
      if (HasForwardFollowMove) hash ^= ForwardFollowMove.GetHashCode();
      if (HasAcceleration) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Acceleration);
      if (HasMinGravityFactor) hash ^= MinGravityFactor.GetHashCode();
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (HasDisableCollision) hash ^= DisableCollision.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasDisable)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDisableDirty)) {
        output.WriteRawTag(8);
        output.WriteBool(Disable);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsGround)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsGroundDirty)) {
        output.WriteRawTag(16);
        output.WriteBool(IsGround);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMass)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMassDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(Mass);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSpeed)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSpeedDirty)) {
        output.WriteRawTag(34);
        output.WriteMessage(Speed);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLoseMomentumXZOnHit)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLoseMomentumXZOnHitDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(LoseMomentumXZOnHit);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLoseMomentumYOnHit)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLoseMomentumYOnHitDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(LoseMomentumYOnHit);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasForwardFollowMove)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsForwardFollowMoveDirty)) {
        output.WriteRawTag(56);
        output.WriteBool(ForwardFollowMove);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAcceleration)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAccelerationDirty)) {
        output.WriteRawTag(69);
        output.WriteFloat(Acceleration);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMinGravityFactor)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMinGravityFactorDirty)) {
        output.WriteRawTag(72);
        output.WriteUInt32(MinGravityFactor);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasGroupId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsGroupIdDirty)) {
        output.WriteRawTag(80);
        output.WriteUInt32(GroupId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDisableCollision)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDisableCollisionDirty)) {
        output.WriteRawTag(88);
        output.WriteBool(DisableCollision);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasDisable)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDisableDirty)) {
        output.WriteRawTag(8);
        output.WriteBool(Disable);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsGround)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsGroundDirty)) {
        output.WriteRawTag(16);
        output.WriteBool(IsGround);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMass)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMassDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(Mass);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSpeed)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSpeedDirty)) {
        output.WriteRawTag(34);
        output.WriteMessage(Speed);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLoseMomentumXZOnHit)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLoseMomentumXZOnHitDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(LoseMomentumXZOnHit);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasLoseMomentumYOnHit)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLoseMomentumYOnHitDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(LoseMomentumYOnHit);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasForwardFollowMove)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsForwardFollowMoveDirty)) {
        output.WriteRawTag(56);
        output.WriteBool(ForwardFollowMove);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAcceleration)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAccelerationDirty)) {
        output.WriteRawTag(69);
        output.WriteFloat(Acceleration);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMinGravityFactor)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMinGravityFactorDirty)) {
        output.WriteRawTag(72);
        output.WriteUInt32(MinGravityFactor);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasGroupId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsGroupIdDirty)) {
        output.WriteRawTag(80);
        output.WriteUInt32(GroupId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasDisableCollision)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDisableCollisionDirty)) {
        output.WriteRawTag(88);
        output.WriteBool(DisableCollision);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasDisable)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsDisableDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasIsGround)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIsGroundDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasMass)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsMassDirty)) {
        size += 1 + 4;
      }
      if (HasSpeed) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Speed, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 8;
        } else {
          _dirtyBits0 &= ~8;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasLoseMomentumXZOnHit)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsLoseMomentumXZOnHitDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoseMomentumXZOnHit);
      }
      if ((scope == pb.WriteScope.FULL && HasLoseMomentumYOnHit)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsLoseMomentumYOnHitDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoseMomentumYOnHit);
      }
      if ((scope == pb.WriteScope.FULL && HasForwardFollowMove)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsForwardFollowMoveDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasAcceleration)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsAccelerationDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasMinGravityFactor)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsMinGravityFactorDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinGravityFactor);
      }
      if ((scope == pb.WriteScope.FULL && HasGroupId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsGroupIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if ((scope == pb.WriteScope.FULL && HasDisableCollision)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsDisableCollisionDirty)) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PhyscialSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasDisable) {
        Disable = other.Disable;
      }
      if (other.HasIsGround) {
        IsGround = other.IsGround;
      }
      if (other.HasMass) {
        Mass = other.Mass;
      }
      if (other.HasSpeed) {
        if (!HasSpeed) {
          Speed = new global::Protocol.Float3();
        }
        Speed.MergeFrom(other.Speed);
      }
      if (other.HasLoseMomentumXZOnHit) {
        LoseMomentumXZOnHit = other.LoseMomentumXZOnHit;
      }
      if (other.HasLoseMomentumYOnHit) {
        LoseMomentumYOnHit = other.LoseMomentumYOnHit;
      }
      if (other.HasForwardFollowMove) {
        ForwardFollowMove = other.ForwardFollowMove;
      }
      if (other.HasAcceleration) {
        Acceleration = other.Acceleration;
      }
      if (other.HasMinGravityFactor) {
        MinGravityFactor = other.MinGravityFactor;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      if (other.HasDisableCollision) {
        DisableCollision = other.DisableCollision;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Disable = input.ReadBool();
            break;
          }
          case 16: {
            IsGround = input.ReadBool();
            break;
          }
          case 29: {
            Mass = input.ReadFloat();
            break;
          }
          case 34: {
            if (!HasSpeed) {
              Speed = new global::Protocol.Float3();
            }
            input.ReadMessage(Speed);
            break;
          }
          case 40: {
            LoseMomentumXZOnHit = input.ReadUInt32();
            break;
          }
          case 48: {
            LoseMomentumYOnHit = input.ReadUInt32();
            break;
          }
          case 56: {
            ForwardFollowMove = input.ReadBool();
            break;
          }
          case 69: {
            Acceleration = input.ReadFloat();
            break;
          }
          case 72: {
            MinGravityFactor = input.ReadUInt32();
            break;
          }
          case 80: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 88: {
            DisableCollision = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Disable = input.ReadBool();
            break;
          }
          case 16: {
            IsGround = input.ReadBool();
            break;
          }
          case 29: {
            Mass = input.ReadFloat();
            break;
          }
          case 34: {
            if (!HasSpeed) {
              Speed = new global::Protocol.Float3();
            }
            input.ReadMessage(Speed);
            break;
          }
          case 40: {
            LoseMomentumXZOnHit = input.ReadUInt32();
            break;
          }
          case 48: {
            LoseMomentumYOnHit = input.ReadUInt32();
            break;
          }
          case 56: {
            ForwardFollowMove = input.ReadBool();
            break;
          }
          case 69: {
            Acceleration = input.ReadFloat();
            break;
          }
          case 72: {
            MinGravityFactor = input.ReadUInt32();
            break;
          }
          case 80: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 88: {
            DisableCollision = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///-----单局数据
  /// </summary>
  public sealed partial class BattleSyncData : pb::IMessage<BattleSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BattleSyncData> _parser = new pb::MessageParser<BattleSyncData>(() => new BattleSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[134]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSyncData(BattleSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      battleState_ = other.battleState_;
      twoVtwo_ = other.HasTwoVtwo ? other.twoVtwo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSyncData Clone() {
      return new BattleSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "battle_state" field.</summary>
    public const int BattleStateFieldNumber = 1;
    private uint battleState_;
    /// <summary>
    ///战斗阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleState {
      get { if ((_hasBits0 & 1) != 0) { return battleState_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        battleState_ = value;
      }
    }
    /// <summary>Gets whether the "battle_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBattleState {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "battle_state" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBattleStateDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "battle_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBattleState() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "twoVtwo" field.</summary>
    public const int TwoVtwoFieldNumber = 10;
    private global::Protocol.TwoVsTwoSyncData twoVtwo_;
    /// <summary>
    ///2v2v2v2玩法数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.TwoVsTwoSyncData TwoVtwo {
      get { return twoVtwo_; }
      set {
        twoVtwo_ = value;
      }
    }
    /// <summary>Gets whether the twoVtwo field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTwoVtwo {
      get { return twoVtwo_ != null; }
    }
    /// <summary>Clears the value of the twoVtwo field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTwoVtwo() {
      twoVtwo_ = null;
    }
    /// <summary>Gets whether the "twoVtwo" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTwoVtwoDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleState != other.BattleState) return false;
      if (!object.Equals(TwoVtwo, other.TwoVtwo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBattleState) hash ^= BattleState.GetHashCode();
      if (HasTwoVtwo) hash ^= TwoVtwo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasBattleState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBattleStateDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattleState);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTwoVtwo)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTwoVtwoDirty)) {
        output.WriteRawTag(82);
        output.WriteMessage(TwoVtwo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasBattleState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBattleStateDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattleState);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTwoVtwo)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTwoVtwoDirty)) {
        output.WriteRawTag(82);
        output.WriteMessage(TwoVtwo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasBattleState)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsBattleStateDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleState);
      }
      if (HasTwoVtwo) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(TwoVtwo, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 2;
        } else {
          _dirtyBits0 &= ~2;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasBattleState) {
        BattleState = other.BattleState;
      }
      if (other.HasTwoVtwo) {
        if (!HasTwoVtwo) {
          TwoVtwo = new global::Protocol.TwoVsTwoSyncData();
        }
        TwoVtwo.MergeFrom(other.TwoVtwo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleState = input.ReadUInt32();
            break;
          }
          case 82: {
            if (!HasTwoVtwo) {
              TwoVtwo = new global::Protocol.TwoVsTwoSyncData();
            }
            input.ReadMessage(TwoVtwo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BattleState = input.ReadUInt32();
            break;
          }
          case 82: {
            if (!HasTwoVtwo) {
              TwoVtwo = new global::Protocol.TwoVsTwoSyncData();
            }
            input.ReadMessage(TwoVtwo);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// </summary>
  public sealed partial class TwoVsTwoSyncData : pb::IMessage<TwoVsTwoSyncData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TwoVsTwoSyncData> _parser = new pb::MessageParser<TwoVsTwoSyncData>(() => new TwoVsTwoSyncData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TwoVsTwoSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[135]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoVsTwoSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoVsTwoSyncData(TwoVsTwoSyncData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      roundCount_ = other.roundCount_;
      endTime_ = other.endTime_;
      teamDatas_ = other.teamDatas_.Clone();
      winPointRebornTime_ = other.winPointRebornTime_.Clone();
      winTeam_ = other.winTeam_.Clone();
      killerId_ = other.killerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoVsTwoSyncData Clone() {
      return new TwoVsTwoSyncData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "round_count" field.</summary>
    public const int RoundCountFieldNumber = 1;
    private int roundCount_;
    /// <summary>
    ///回合数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundCount {
      get { if ((_hasBits0 & 1) != 0) { return roundCount_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        roundCount_ = value;
      }
    }
    /// <summary>Gets whether the "round_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRoundCount {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "round_count" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRoundCountDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "round_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRoundCount() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private float endTime_;
    /// <summary>
    ///回合结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EndTime {
      get { if ((_hasBits0 & 2) != 0) { return endTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        endTime_ = value;
      }
    }
    /// <summary>Gets whether the "end_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEndTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "end_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEndTimeDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "end_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEndTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "team_datas" field.</summary>
    public const int TeamDatasFieldNumber = 3;
    private static readonly pbc::MapField<uint, global::Protocol.TwoVsTwoTeamData>.Codec _map_teamDatas_codec
        = new pbc::MapField<uint, global::Protocol.TwoVsTwoTeamData>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Protocol.TwoVsTwoTeamData.Parser), 26);
    private readonly pbc::MapField<uint, global::Protocol.TwoVsTwoTeamData> teamDatas_ = new pbc::MapField<uint, global::Protocol.TwoVsTwoTeamData>();
    /// <summary>
    ///队伍信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Protocol.TwoVsTwoTeamData> TeamDatas {
      get { return teamDatas_; }
    }
    /// <summary>Gets whether the "team_datas" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTeamDatasDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    /// <summary>Field number for the "win_point_reborn_time" field.</summary>
    public const int WinPointRebornTimeFieldNumber = 4;
    private static readonly pbc::MapField<int, float>.Codec _map_winPointRebornTime_codec
        = new pbc::MapField<int, float>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForFloat(21, 0F), 34);
    private readonly pbc::MapField<int, float> winPointRebornTime_ = new pbc::MapField<int, float>();
    /// <summary>
    ///胜利点重生时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, float> WinPointRebornTime {
      get { return winPointRebornTime_; }
    }
    /// <summary>Gets whether the "win_point_reborn_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWinPointRebornTimeDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }

    /// <summary>Field number for the "win_team" field.</summary>
    public const int WinTeamFieldNumber = 5;
    private static readonly pbc::MapField<int, uint>.Codec _map_winTeam_codec
        = new pbc::MapField<int, uint>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForUInt32(16, 0), 42);
    private readonly pbc::MapField<int, uint> winTeam_ = new pbc::MapField<int, uint>();
    /// <summary>
    ///上回合胜利的队伍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, uint> WinTeam {
      get { return winTeam_; }
    }
    /// <summary>Gets whether the "win_team" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWinTeamDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }

    /// <summary>Field number for the "killer_id" field.</summary>
    public const int KillerIdFieldNumber = 6;
    private uint killerId_;
    /// <summary>
    ///淘汰其他队伍的entityId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KillerId {
      get { if ((_hasBits0 & 4) != 0) { return killerId_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 32;
        killerId_ = value;
      }
    }
    /// <summary>Gets whether the "killer_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKillerId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "killer_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsKillerIdDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "killer_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKillerId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TwoVsTwoSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TwoVsTwoSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoundCount != other.RoundCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EndTime, other.EndTime)) return false;
      if (!TeamDatas.Equals(other.TeamDatas)) return false;
      if (!WinPointRebornTime.Equals(other.WinPointRebornTime)) return false;
      if (!WinTeam.Equals(other.WinTeam)) return false;
      if (KillerId != other.KillerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRoundCount) hash ^= RoundCount.GetHashCode();
      if (HasEndTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EndTime);
      hash ^= TeamDatas.GetHashCode();
      hash ^= WinPointRebornTime.GetHashCode();
      hash ^= WinTeam.GetHashCode();
      if (HasKillerId) hash ^= KillerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasRoundCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRoundCountDirty)) {
        output.WriteRawTag(8);
        output.WriteInt32(RoundCount);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEndTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEndTimeDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(EndTime);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTeamDatasDirty)) {
        teamDatas_.WriteTo(output, _map_teamDatas_codec);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsWinPointRebornTimeDirty)) {
        winPointRebornTime_.WriteTo(output, _map_winPointRebornTime_codec);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsWinTeamDirty)) {
        winTeam_.WriteTo(output, _map_winTeam_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasKillerId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsKillerIdDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(KillerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasRoundCount)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRoundCountDirty)) {
        output.WriteRawTag(8);
        output.WriteInt32(RoundCount);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEndTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEndTimeDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(EndTime);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTeamDatasDirty)) {
        teamDatas_.WriteTo(ref output, _map_teamDatas_codec);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsWinPointRebornTimeDirty)) {
        winPointRebornTime_.WriteTo(ref output, _map_winPointRebornTime_codec);
      }
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsWinTeamDirty)) {
        winTeam_.WriteTo(ref output, _map_winTeam_codec);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasKillerId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsKillerIdDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(KillerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasRoundCount)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsRoundCountDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundCount);
      }
      if ((scope == pb.WriteScope.FULL && HasEndTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEndTimeDirty)) {
        size += 1 + 4;
      }
      if (TeamDatas != null) {
        int msgSize = teamDatas_.CalculateSize(_map_teamDatas_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 4;
        } else {
          _dirtyBits0 &= ~4;
        }
      }
      if (WinPointRebornTime != null) {
        int msgSize = winPointRebornTime_.CalculateSize(_map_winPointRebornTime_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 8;
        } else {
          _dirtyBits0 &= ~8;
        }
      }
      if (WinTeam != null) {
        int msgSize = winTeam_.CalculateSize(_map_winTeam_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 16;
        } else {
          _dirtyBits0 &= ~16;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasKillerId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsKillerIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KillerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TwoVsTwoSyncData other) {
      if (other == null) {
        return;
      }
      if (other.HasRoundCount) {
        RoundCount = other.RoundCount;
      }
      if (other.HasEndTime) {
        EndTime = other.EndTime;
      }
      foreach (var key in other.teamDatas_.DeleteList) {
        teamDatas_.Remove(key);
      }
      foreach (var pair in other.teamDatas_) {
        global::Protocol.TwoVsTwoTeamData value;
        if(teamDatas_.TryGetValue(pair.Key, out value)) {
          value.MergeFrom(pair.Value);
        }else{
          teamDatas_.Add(pair.Key, pair.Value);
        }
      }
      foreach (var key in other.winPointRebornTime_.DeleteList) {
        winPointRebornTime_.Remove(key);
      }
      foreach (var pair in other.winPointRebornTime_) {
        winPointRebornTime_[pair.Key] = pair.Value;
      }
      foreach (var key in other.winTeam_.DeleteList) {
        winTeam_.Remove(key);
      }
      foreach (var pair in other.winTeam_) {
        winTeam_[pair.Key] = pair.Value;
      }
      if (other.HasKillerId) {
        KillerId = other.KillerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoundCount = input.ReadInt32();
            break;
          }
          case 21: {
            EndTime = input.ReadFloat();
            break;
          }
          case 26: {
            teamDatas_.AddEntriesFrom(input, _map_teamDatas_codec);
            break;
          }
          case 34: {
            winPointRebornTime_.AddEntriesFrom(input, _map_winPointRebornTime_codec);
            break;
          }
          case 42: {
            winTeam_.AddEntriesFrom(input, _map_winTeam_codec);
            break;
          }
          case 48: {
            KillerId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RoundCount = input.ReadInt32();
            break;
          }
          case 21: {
            EndTime = input.ReadFloat();
            break;
          }
          case 26: {
            teamDatas_.AddEntriesFrom(ref input, _map_teamDatas_codec);
            break;
          }
          case 34: {
            winPointRebornTime_.AddEntriesFrom(ref input, _map_winPointRebornTime_codec);
            break;
          }
          case 42: {
            winTeam_.AddEntriesFrom(ref input, _map_winTeam_codec);
            break;
          }
          case 48: {
            KillerId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TwoVsTwoTeamData : pb::IMessage<TwoVsTwoTeamData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TwoVsTwoTeamData> _parser = new pb::MessageParser<TwoVsTwoTeamData>(() => new TwoVsTwoTeamData());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TwoVsTwoTeamData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[136]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoVsTwoTeamData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoVsTwoTeamData(TwoVsTwoTeamData other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      roundScores_ = other.roundScores_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwoVsTwoTeamData Clone() {
      return new TwoVsTwoTeamData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "round_scores" field.</summary>
    public const int RoundScoresFieldNumber = 1;
    private static readonly pbc::MapField<int, int>.Codec _map_roundScores_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 10);
    private readonly pbc::MapField<int, int> roundScores_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> RoundScores {
      get { return roundScores_; }
    }
    /// <summary>Gets whether the "round_scores" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRoundScoresDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TwoVsTwoTeamData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TwoVsTwoTeamData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!RoundScores.Equals(other.RoundScores)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= RoundScores.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRoundScoresDirty)) {
        roundScores_.WriteTo(output, _map_roundScores_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (output.writeScope == pb.WriteScope.FULL||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRoundScoresDirty)) {
        roundScores_.WriteTo(ref output, _map_roundScores_codec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if (RoundScores != null) {
        int msgSize = roundScores_.CalculateSize(_map_roundScores_codec, scope);
        if (msgSize>0) {
          size += msgSize;
          _dirtyBits0 |= 1;
        } else {
          _dirtyBits0 &= ~1;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TwoVsTwoTeamData other) {
      if (other == null) {
        return;
      }
      foreach (var key in other.roundScores_.DeleteList) {
        roundScores_.Remove(key);
      }
      foreach (var pair in other.roundScores_) {
        roundScores_[pair.Key] = pair.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            roundScores_.AddEntriesFrom(input, _map_roundScores_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            roundScores_.AddEntriesFrom(ref input, _map_roundScores_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// --------------------state---------------------------------
  ///发送GM命令	
  /// </summary>
  public sealed partial class GMCommandReq : pb::IMessage<GMCommandReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GMCommandReq> _parser = new pb::MessageParser<GMCommandReq>(() => new GMCommandReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMCommandReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[137]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMCommandReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMCommandReq(GMCommandReq other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      commands_ = other.commands_.Clone();
      sendId_ = other.sendId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMCommandReq Clone() {
      return new GMCommandReq(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "commands" field.</summary>
    public const int CommandsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_commands_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> commands_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Commands {
      get { return commands_; }
    }

    /// <summary>Field number for the "send_id" field.</summary>
    public const int SendIdFieldNumber = 2;
    private uint sendId_;
    /// <summary>
    ///当没有控制角色的时候sendID为空	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SendId {
      get { if ((_hasBits0 & 1) != 0) { return sendId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 2;
        sendId_ = value;
      }
    }
    /// <summary>Gets whether the "send_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSendId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "send_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSendIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "send_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSendId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GMCommandReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GMCommandReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!commands_.Equals(other.commands_)) return false;
      if (SendId != other.SendId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= commands_.GetHashCode();
      if (HasSendId) hash ^= SendId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      commands_.WriteTo(output, _repeated_commands_codec);
      if ((output.writeScope == pb.WriteScope.FULL && HasSendId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSendIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SendId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      commands_.WriteTo(ref output, _repeated_commands_codec);
      if ((output.writeScope == pb.WriteScope.FULL && HasSendId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSendIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(SendId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      size += commands_.CalculateSize(_repeated_commands_codec);
      if ((scope == pb.WriteScope.FULL && HasSendId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSendIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SendId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GMCommandReq other) {
      if (other == null) {
        return;
      }
      commands_.Add(other.commands_);
      if (other.HasSendId) {
        SendId = other.SendId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            commands_.AddEntriesFrom(input, _repeated_commands_codec);
            break;
          }
          case 16: {
            SendId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            commands_.AddEntriesFrom(ref input, _repeated_commands_codec);
            break;
          }
          case 16: {
            SendId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AttackBoxDebugMsg : pb::IMessage<AttackBoxDebugMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AttackBoxDebugMsg> _parser = new pb::MessageParser<AttackBoxDebugMsg>(() => new AttackBoxDebugMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttackBoxDebugMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[138]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackBoxDebugMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackBoxDebugMsg(AttackBoxDebugMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      attackPos_ = other.HasAttackPos ? other.attackPos_.Clone() : null;
      attackRot_ = other.HasAttackRot ? other.attackRot_.Clone() : null;
      attackCenter_ = other.HasAttackCenter ? other.attackCenter_.Clone() : null;
      attackSize_ = other.HasAttackSize ? other.attackSize_.Clone() : null;
      hitPos_ = other.HasHitPos ? other.hitPos_.Clone() : null;
      hitRot_ = other.HasHitRot ? other.hitRot_.Clone() : null;
      hitCenter_ = other.HasHitCenter ? other.hitCenter_.Clone() : null;
      hitSize_ = other.HasHitSize ? other.hitSize_.Clone() : null;
      hitRadius_ = other.hitRadius_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackBoxDebugMsg Clone() {
      return new AttackBoxDebugMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "attack_pos" field.</summary>
    public const int AttackPosFieldNumber = 1;
    private global::Protocol.Float3 attackPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 AttackPos {
      get { return attackPos_; }
      set {
        attackPos_ = value;
      }
    }
    /// <summary>Gets whether the attack_pos field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAttackPos {
      get { return attackPos_ != null; }
    }
    /// <summary>Clears the value of the attack_pos field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAttackPos() {
      attackPos_ = null;
    }
    /// <summary>Gets whether the "attack_pos" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttackPosDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "attack_rot" field.</summary>
    public const int AttackRotFieldNumber = 2;
    private global::Protocol.Float3 attackRot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 AttackRot {
      get { return attackRot_; }
      set {
        attackRot_ = value;
      }
    }
    /// <summary>Gets whether the attack_rot field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAttackRot {
      get { return attackRot_ != null; }
    }
    /// <summary>Clears the value of the attack_rot field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAttackRot() {
      attackRot_ = null;
    }
    /// <summary>Gets whether the "attack_rot" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttackRotDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    /// <summary>Field number for the "attack_center" field.</summary>
    public const int AttackCenterFieldNumber = 3;
    private global::Protocol.Float3 attackCenter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 AttackCenter {
      get { return attackCenter_; }
      set {
        attackCenter_ = value;
      }
    }
    /// <summary>Gets whether the attack_center field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAttackCenter {
      get { return attackCenter_ != null; }
    }
    /// <summary>Clears the value of the attack_center field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAttackCenter() {
      attackCenter_ = null;
    }
    /// <summary>Gets whether the "attack_center" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttackCenterDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    /// <summary>Field number for the "attack_size" field.</summary>
    public const int AttackSizeFieldNumber = 4;
    private global::Protocol.Float3 attackSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 AttackSize {
      get { return attackSize_; }
      set {
        attackSize_ = value;
      }
    }
    /// <summary>Gets whether the attack_size field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAttackSize {
      get { return attackSize_ != null; }
    }
    /// <summary>Clears the value of the attack_size field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAttackSize() {
      attackSize_ = null;
    }
    /// <summary>Gets whether the "attack_size" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttackSizeDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }

    /// <summary>Field number for the "hit_pos" field.</summary>
    public const int HitPosFieldNumber = 5;
    private global::Protocol.Float3 hitPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 HitPos {
      get { return hitPos_; }
      set {
        hitPos_ = value;
      }
    }
    /// <summary>Gets whether the hit_pos field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHitPos {
      get { return hitPos_ != null; }
    }
    /// <summary>Clears the value of the hit_pos field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHitPos() {
      hitPos_ = null;
    }
    /// <summary>Gets whether the "hit_pos" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHitPosDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }

    /// <summary>Field number for the "hit_rot" field.</summary>
    public const int HitRotFieldNumber = 6;
    private global::Protocol.Float3 hitRot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 HitRot {
      get { return hitRot_; }
      set {
        hitRot_ = value;
      }
    }
    /// <summary>Gets whether the hit_rot field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHitRot {
      get { return hitRot_ != null; }
    }
    /// <summary>Clears the value of the hit_rot field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHitRot() {
      hitRot_ = null;
    }
    /// <summary>Gets whether the "hit_rot" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHitRotDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }

    /// <summary>Field number for the "hit_center" field.</summary>
    public const int HitCenterFieldNumber = 7;
    private global::Protocol.Float3 hitCenter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 HitCenter {
      get { return hitCenter_; }
      set {
        hitCenter_ = value;
      }
    }
    /// <summary>Gets whether the hit_center field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHitCenter {
      get { return hitCenter_ != null; }
    }
    /// <summary>Clears the value of the hit_center field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHitCenter() {
      hitCenter_ = null;
    }
    /// <summary>Gets whether the "hit_center" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHitCenterDirty {
      get { return (_dirtyBits0 & 64) != 0; }
    }

    /// <summary>Field number for the "hit_size" field.</summary>
    public const int HitSizeFieldNumber = 8;
    private global::Protocol.Float3 hitSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 HitSize {
      get { return hitSize_; }
      set {
        hitSize_ = value;
      }
    }
    /// <summary>Gets whether the hit_size field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHitSize {
      get { return hitSize_ != null; }
    }
    /// <summary>Clears the value of the hit_size field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHitSize() {
      hitSize_ = null;
    }
    /// <summary>Gets whether the "hit_size" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHitSizeDirty {
      get { return (_dirtyBits0 & 128) != 0; }
    }

    /// <summary>Field number for the "hit_radius" field.</summary>
    public const int HitRadiusFieldNumber = 9;
    private float hitRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HitRadius {
      get { if ((_hasBits0 & 1) != 0) { return hitRadius_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 256;
        hitRadius_ = value;
      }
    }
    /// <summary>Gets whether the "hit_radius" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHitRadius {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "hit_radius" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHitRadiusDirty {
      get { return (_dirtyBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "hit_radius" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHitRadius() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttackBoxDebugMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttackBoxDebugMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AttackPos, other.AttackPos)) return false;
      if (!object.Equals(AttackRot, other.AttackRot)) return false;
      if (!object.Equals(AttackCenter, other.AttackCenter)) return false;
      if (!object.Equals(AttackSize, other.AttackSize)) return false;
      if (!object.Equals(HitPos, other.HitPos)) return false;
      if (!object.Equals(HitRot, other.HitRot)) return false;
      if (!object.Equals(HitCenter, other.HitCenter)) return false;
      if (!object.Equals(HitSize, other.HitSize)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HitRadius, other.HitRadius)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAttackPos) hash ^= AttackPos.GetHashCode();
      if (HasAttackRot) hash ^= AttackRot.GetHashCode();
      if (HasAttackCenter) hash ^= AttackCenter.GetHashCode();
      if (HasAttackSize) hash ^= AttackSize.GetHashCode();
      if (HasHitPos) hash ^= HitPos.GetHashCode();
      if (HasHitRot) hash ^= HitRot.GetHashCode();
      if (HasHitCenter) hash ^= HitCenter.GetHashCode();
      if (HasHitSize) hash ^= HitSize.GetHashCode();
      if (HasHitRadius) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HitRadius);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasAttackPos)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAttackPosDirty)) {
        output.WriteRawTag(10);
        output.WriteMessage(AttackPos);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAttackRot)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAttackRotDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(AttackRot);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAttackCenter)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAttackCenterDirty)) {
        output.WriteRawTag(26);
        output.WriteMessage(AttackCenter);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAttackSize)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAttackSizeDirty)) {
        output.WriteRawTag(34);
        output.WriteMessage(AttackSize);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHitPos)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHitPosDirty)) {
        output.WriteRawTag(42);
        output.WriteMessage(HitPos);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHitRot)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHitRotDirty)) {
        output.WriteRawTag(50);
        output.WriteMessage(HitRot);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHitCenter)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHitCenterDirty)) {
        output.WriteRawTag(58);
        output.WriteMessage(HitCenter);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHitSize)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHitSizeDirty)) {
        output.WriteRawTag(66);
        output.WriteMessage(HitSize);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHitRadius)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHitRadiusDirty)) {
        output.WriteRawTag(77);
        output.WriteFloat(HitRadius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasAttackPos)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAttackPosDirty)) {
        output.WriteRawTag(10);
        output.WriteMessage(AttackPos);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAttackRot)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAttackRotDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(AttackRot);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAttackCenter)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAttackCenterDirty)) {
        output.WriteRawTag(26);
        output.WriteMessage(AttackCenter);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasAttackSize)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsAttackSizeDirty)) {
        output.WriteRawTag(34);
        output.WriteMessage(AttackSize);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHitPos)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHitPosDirty)) {
        output.WriteRawTag(42);
        output.WriteMessage(HitPos);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHitRot)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHitRotDirty)) {
        output.WriteRawTag(50);
        output.WriteMessage(HitRot);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHitCenter)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHitCenterDirty)) {
        output.WriteRawTag(58);
        output.WriteMessage(HitCenter);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHitSize)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHitSizeDirty)) {
        output.WriteRawTag(66);
        output.WriteMessage(HitSize);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasHitRadius)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHitRadiusDirty)) {
        output.WriteRawTag(77);
        output.WriteFloat(HitRadius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if (HasAttackPos) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(AttackPos, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 1;
        } else {
          _dirtyBits0 &= ~1;
        }
      }
      if (HasAttackRot) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(AttackRot, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 2;
        } else {
          _dirtyBits0 &= ~2;
        }
      }
      if (HasAttackCenter) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(AttackCenter, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 4;
        } else {
          _dirtyBits0 &= ~4;
        }
      }
      if (HasAttackSize) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(AttackSize, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 8;
        } else {
          _dirtyBits0 &= ~8;
        }
      }
      if (HasHitPos) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(HitPos, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 16;
        } else {
          _dirtyBits0 &= ~16;
        }
      }
      if (HasHitRot) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(HitRot, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 32;
        } else {
          _dirtyBits0 &= ~32;
        }
      }
      if (HasHitCenter) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(HitCenter, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 64;
        } else {
          _dirtyBits0 &= ~64;
        }
      }
      if (HasHitSize) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(HitSize, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 128;
        } else {
          _dirtyBits0 &= ~128;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasHitRadius)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsHitRadiusDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttackBoxDebugMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasAttackPos) {
        if (!HasAttackPos) {
          AttackPos = new global::Protocol.Float3();
        }
        AttackPos.MergeFrom(other.AttackPos);
      }
      if (other.HasAttackRot) {
        if (!HasAttackRot) {
          AttackRot = new global::Protocol.Float3();
        }
        AttackRot.MergeFrom(other.AttackRot);
      }
      if (other.HasAttackCenter) {
        if (!HasAttackCenter) {
          AttackCenter = new global::Protocol.Float3();
        }
        AttackCenter.MergeFrom(other.AttackCenter);
      }
      if (other.HasAttackSize) {
        if (!HasAttackSize) {
          AttackSize = new global::Protocol.Float3();
        }
        AttackSize.MergeFrom(other.AttackSize);
      }
      if (other.HasHitPos) {
        if (!HasHitPos) {
          HitPos = new global::Protocol.Float3();
        }
        HitPos.MergeFrom(other.HitPos);
      }
      if (other.HasHitRot) {
        if (!HasHitRot) {
          HitRot = new global::Protocol.Float3();
        }
        HitRot.MergeFrom(other.HitRot);
      }
      if (other.HasHitCenter) {
        if (!HasHitCenter) {
          HitCenter = new global::Protocol.Float3();
        }
        HitCenter.MergeFrom(other.HitCenter);
      }
      if (other.HasHitSize) {
        if (!HasHitSize) {
          HitSize = new global::Protocol.Float3();
        }
        HitSize.MergeFrom(other.HitSize);
      }
      if (other.HasHitRadius) {
        HitRadius = other.HitRadius;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasAttackPos) {
              AttackPos = new global::Protocol.Float3();
            }
            input.ReadMessage(AttackPos);
            break;
          }
          case 18: {
            if (!HasAttackRot) {
              AttackRot = new global::Protocol.Float3();
            }
            input.ReadMessage(AttackRot);
            break;
          }
          case 26: {
            if (!HasAttackCenter) {
              AttackCenter = new global::Protocol.Float3();
            }
            input.ReadMessage(AttackCenter);
            break;
          }
          case 34: {
            if (!HasAttackSize) {
              AttackSize = new global::Protocol.Float3();
            }
            input.ReadMessage(AttackSize);
            break;
          }
          case 42: {
            if (!HasHitPos) {
              HitPos = new global::Protocol.Float3();
            }
            input.ReadMessage(HitPos);
            break;
          }
          case 50: {
            if (!HasHitRot) {
              HitRot = new global::Protocol.Float3();
            }
            input.ReadMessage(HitRot);
            break;
          }
          case 58: {
            if (!HasHitCenter) {
              HitCenter = new global::Protocol.Float3();
            }
            input.ReadMessage(HitCenter);
            break;
          }
          case 66: {
            if (!HasHitSize) {
              HitSize = new global::Protocol.Float3();
            }
            input.ReadMessage(HitSize);
            break;
          }
          case 77: {
            HitRadius = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (!HasAttackPos) {
              AttackPos = new global::Protocol.Float3();
            }
            input.ReadMessage(AttackPos);
            break;
          }
          case 18: {
            if (!HasAttackRot) {
              AttackRot = new global::Protocol.Float3();
            }
            input.ReadMessage(AttackRot);
            break;
          }
          case 26: {
            if (!HasAttackCenter) {
              AttackCenter = new global::Protocol.Float3();
            }
            input.ReadMessage(AttackCenter);
            break;
          }
          case 34: {
            if (!HasAttackSize) {
              AttackSize = new global::Protocol.Float3();
            }
            input.ReadMessage(AttackSize);
            break;
          }
          case 42: {
            if (!HasHitPos) {
              HitPos = new global::Protocol.Float3();
            }
            input.ReadMessage(HitPos);
            break;
          }
          case 50: {
            if (!HasHitRot) {
              HitRot = new global::Protocol.Float3();
            }
            input.ReadMessage(HitRot);
            break;
          }
          case 58: {
            if (!HasHitCenter) {
              HitCenter = new global::Protocol.Float3();
            }
            input.ReadMessage(HitCenter);
            break;
          }
          case 66: {
            if (!HasHitSize) {
              HitSize = new global::Protocol.Float3();
            }
            input.ReadMessage(HitSize);
            break;
          }
          case 77: {
            HitRadius = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TakeBoxPropMsg : pb::IMessage<TakeBoxPropMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TakeBoxPropMsg> _parser = new pb::MessageParser<TakeBoxPropMsg>(() => new TakeBoxPropMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TakeBoxPropMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[139]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeBoxPropMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeBoxPropMsg(TakeBoxPropMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      thingId_ = other.thingId_;
      propId_ = other.propId_;
      toId_ = other.toId_;
      toSlotId_ = other.toSlotId_;
      time_ = other.time_;
      propDataMergeList_ = other.propDataMergeList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeBoxPropMsg Clone() {
      return new TakeBoxPropMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "thing_id" field.</summary>
    public const int ThingIdFieldNumber = 1;
    private uint thingId_;
    /// <summary>
    ///宝箱id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ThingId {
      get { if ((_hasBits0 & 1) != 0) { return thingId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        thingId_ = value;
      }
    }
    /// <summary>Gets whether the "thing_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasThingId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "thing_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsThingIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "thing_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearThingId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "prop_id" field.</summary>
    public const int PropIdFieldNumber = 2;
    private ulong propId_;
    /// <summary>
    ///宝箱里的道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PropId {
      get { if ((_hasBits0 & 2) != 0) { return propId_; } else { return 0UL; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        propId_ = value;
      }
    }
    /// <summary>Gets whether the "prop_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPropId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "prop_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPropIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "prop_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPropId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "to_id" field.</summary>
    public const int ToIdFieldNumber = 3;
    private uint toId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ToId {
      get { if ((_hasBits0 & 4) != 0) { return toId_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        toId_ = value;
      }
    }
    /// <summary>Gets whether the "to_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasToId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "to_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsToIdDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "to_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearToId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "to_slot_id" field.</summary>
    public const int ToSlotIdFieldNumber = 4;
    private uint toSlotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ToSlotId {
      get { if ((_hasBits0 & 8) != 0) { return toSlotId_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        toSlotId_ = value;
      }
    }
    /// <summary>Gets whether the "to_slot_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasToSlotId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "to_slot_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsToSlotIdDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "to_slot_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearToSlotId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 5;
    private float time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { if ((_hasBits0 & 16) != 0) { return time_; } else { return 0F; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 16;
        time_ = value;
      }
    }
    /// <summary>Gets whether the "time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTimeDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTime() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "prop_data_merge_list" field.</summary>
    public const int PropDataMergeListFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Protocol.PropData> _repeated_propDataMergeList_codec
        = pb::FieldCodec.ForMessage(82, global::Protocol.PropData.Parser);
    private readonly pbc::RepeatedField<global::Protocol.PropData> propDataMergeList_ = new pbc::RepeatedField<global::Protocol.PropData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.PropData> PropDataMergeList {
      get { return propDataMergeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TakeBoxPropMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TakeBoxPropMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ThingId != other.ThingId) return false;
      if (PropId != other.PropId) return false;
      if (ToId != other.ToId) return false;
      if (ToSlotId != other.ToSlotId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Time, other.Time)) return false;
      if(!propDataMergeList_.Equals(other.propDataMergeList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasThingId) hash ^= ThingId.GetHashCode();
      if (HasPropId) hash ^= PropId.GetHashCode();
      if (HasToId) hash ^= ToId.GetHashCode();
      if (HasToSlotId) hash ^= ToSlotId.GetHashCode();
      if (HasTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Time);
      hash ^= propDataMergeList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasThingId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsThingIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(ThingId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPropId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt64(PropId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasToId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsToIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(ToId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasToSlotId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsToSlotIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(ToSlotId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTimeDirty)) {
        output.WriteRawTag(45);
        output.WriteFloat(Time);
      }
      propDataMergeList_.WriteTo(output, _repeated_propDataMergeList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasThingId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsThingIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(ThingId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPropId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPropIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt64(PropId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasToId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsToIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(ToId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasToSlotId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsToSlotIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(ToSlotId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTimeDirty)) {
        output.WriteRawTag(45);
        output.WriteFloat(Time);
      }
      propDataMergeList_.WriteTo(ref output, _repeated_propDataMergeList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasThingId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsThingIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ThingId);
      }
      if ((scope == pb.WriteScope.FULL && HasPropId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsPropIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PropId);
      }
      if ((scope == pb.WriteScope.FULL && HasToId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsToIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToId);
      }
      if ((scope == pb.WriteScope.FULL && HasToSlotId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsToSlotIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToSlotId);
      }
      if ((scope == pb.WriteScope.FULL && HasTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTimeDirty)) {
        size += 1 + 4;
      }
      size += propDataMergeList_.CalculateSize(_repeated_propDataMergeList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TakeBoxPropMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasThingId) {
        ThingId = other.ThingId;
      }
      if (other.HasPropId) {
        PropId = other.PropId;
      }
      if (other.HasToId) {
        ToId = other.ToId;
      }
      if (other.HasToSlotId) {
        ToSlotId = other.ToSlotId;
      }
      if (other.HasTime) {
        Time = other.Time;
      }
      propDataMergeList_.Add(other.propDataMergeList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ThingId = input.ReadUInt32();
            break;
          }
          case 16: {
            PropId = input.ReadUInt64();
            break;
          }
          case 24: {
            ToId = input.ReadUInt32();
            break;
          }
          case 32: {
            ToSlotId = input.ReadUInt32();
            break;
          }
          case 45: {
            Time = input.ReadFloat();
            break;
          }
          case 82: {
            propDataMergeList_.AddEntriesFrom(input, _repeated_propDataMergeList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ThingId = input.ReadUInt32();
            break;
          }
          case 16: {
            PropId = input.ReadUInt64();
            break;
          }
          case 24: {
            ToId = input.ReadUInt32();
            break;
          }
          case 32: {
            ToSlotId = input.ReadUInt32();
            break;
          }
          case 45: {
            Time = input.ReadFloat();
            break;
          }
          case 82: {
            propDataMergeList_.AddEntriesFrom(ref input, _repeated_propDataMergeList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CloseBoxMsg : pb::IMessage<CloseBoxMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CloseBoxMsg> _parser = new pb::MessageParser<CloseBoxMsg>(() => new CloseBoxMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseBoxMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[140]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseBoxMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseBoxMsg(CloseBoxMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      thingId_ = other.thingId_;
      toId_ = other.toId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseBoxMsg Clone() {
      return new CloseBoxMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "thing_id" field.</summary>
    public const int ThingIdFieldNumber = 1;
    private uint thingId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ThingId {
      get { if ((_hasBits0 & 1) != 0) { return thingId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        thingId_ = value;
      }
    }
    /// <summary>Gets whether the "thing_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasThingId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "thing_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsThingIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "thing_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearThingId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "to_id" field.</summary>
    public const int ToIdFieldNumber = 2;
    private uint toId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ToId {
      get { if ((_hasBits0 & 2) != 0) { return toId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        toId_ = value;
      }
    }
    /// <summary>Gets whether the "to_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasToId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "to_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsToIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "to_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearToId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseBoxMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseBoxMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ThingId != other.ThingId) return false;
      if (ToId != other.ToId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasThingId) hash ^= ThingId.GetHashCode();
      if (HasToId) hash ^= ToId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasThingId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsThingIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(ThingId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasToId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsToIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(ToId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasThingId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsThingIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(ThingId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasToId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsToIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(ToId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasThingId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsThingIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ThingId);
      }
      if ((scope == pb.WriteScope.FULL && HasToId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsToIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseBoxMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasThingId) {
        ThingId = other.ThingId;
      }
      if (other.HasToId) {
        ToId = other.ToId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ThingId = input.ReadUInt32();
            break;
          }
          case 16: {
            ToId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ThingId = input.ReadUInt32();
            break;
          }
          case 16: {
            ToId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PickTalentMsg : pb::IMessage<PickTalentMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PickTalentMsg> _parser = new pb::MessageParser<PickTalentMsg>(() => new PickTalentMsg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PickTalentMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoBattleReflection.Descriptor.MessageTypes[141]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickTalentMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickTalentMsg(PickTalentMsg other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      talentId_ = other.talentId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickTalentMsg Clone() {
      return new PickTalentMsg(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "talent_id" field.</summary>
    public const int TalentIdFieldNumber = 2;
    private uint talentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TalentId {
      get { if ((_hasBits0 & 2) != 0) { return talentId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        talentId_ = value;
      }
    }
    /// <summary>Gets whether the "talent_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTalentId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "talent_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTalentIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "talent_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTalentId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PickTalentMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PickTalentMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (TalentId != other.TalentId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasTalentId) hash ^= TalentId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTalentId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTalentIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(TalentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTalentId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTalentIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(TalentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasTalentId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTalentIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TalentId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PickTalentMsg other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasTalentId) {
        TalentId = other.TalentId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            TalentId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            TalentId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
