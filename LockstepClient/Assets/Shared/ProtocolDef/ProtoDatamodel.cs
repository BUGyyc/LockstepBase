// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Protocol {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class ProtoDatamodel {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Protocol_DataModel__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.DataModel, global::Protocol.DataModel.Builder> internal__static_Protocol_DataModel__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_User__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.User, global::Protocol.User.Builder> internal__static_Protocol_User__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_PlayerUserInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.PlayerUserInfo, global::Protocol.PlayerUserInfo.Builder> internal__static_Protocol_PlayerUserInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_Room__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.Room, global::Protocol.Room.Builder> internal__static_Protocol_Room__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_RoomDesc__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.RoomDesc, global::Protocol.RoomDesc.Builder> internal__static_Protocol_RoomDesc__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_SettlementResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.SettlementResult, global::Protocol.SettlementResult.Builder> internal__static_Protocol_SettlementResult__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static ProtoDatamodel() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVwcm90b19kYXRhbW9kZWwucHJvdG8SCFByb3RvY29sGh1pbmNsdWRlL3lk", 
            "X2ZpZWxkb3B0aW9ucy5wcm90bxoScHJvdG9fY29tbW9uLnByb3RvGhJwcm90", 
            "b19iYXR0bGUucHJvdG8iGwoJRGF0YU1vZGVsEg4KAmlkGAEgASgEUgJpZCLW", 
            "AQoEVXNlchIOCgJpZBgBIAEoBFICaWQSEAoDdWlkGAIgASgJUgN1aWQSEgoE", 
            "bmFtZRgDIAEoCVIEbmFtZRISCgRoZWFkGAQgASgJUgRoZWFkEhcKB2hlcm9f", 
            "aWQYBSABKA1SBmhlcm9JZBIXCgdza2luX2lkGAYgASgNUgZza2luSWQSEAoD", 
            "ZWxvGAogASgFUgNlbG8SEAoDZXhwGBQgASgFUgNleHASEgoEY29pbhgVIAEo", 
            "BVIEY29pbhIaCghnYW1lX3ZlchjGASABKAlSB2dhbWVWZXIigwMKDlBsYXll", 
            "clVzZXJJbmZvEg4KAmlkGAEgASgEUgJpZBIQCgN1aWQYAiABKAlSA3VpZBIS", 
            "CgRuYW1lGAMgASgJUgRuYW1lEhIKBGhlYWQYBCABKAlSBGhlYWQSFwoHaGVy", 
            "b19pZBgFIAEoDVIGaGVyb0lkEhcKB3NraW5faWQYBiABKA1SBnNraW5JZBIQ", 
            "CgNlbG8YCiABKAVSA2VsbxI1CgtwbGF5ZXJfdHlwZRgLIAEoDjIULlByb3Rv", 
            "Y29sLlBsYXllclR5cGVSCnBsYXllclR5cGUSEAoDZXhwGBQgASgFUgNleHAS", 
            "EgoEY29pbhgVIAEoBVIEY29pbhI5Cg1iYWdfc3luY19kYXRhGDUgASgLMhUu", 
            "UHJvdG9jb2wuQmFnU3luY0RhdGFSC2JhZ1N5bmNEYXRhEhoKCGdhbWVfdmVy", 
            "GMYBIAEoCVIHZ2FtZVZlchIYCgdjb25uX2lkGMcBIAEoDVIGY29ubklkEhUK", 
            "BXJlYWR5GP8BIAEoCFIFcmVhZHki4gIKBFJvb20SDgoCaWQYASABKARSAmlk", 
            "EhIKBG5hbWUYAyABKAlSBG5hbWUSHwoLY3JlYXRlX3RpbWUYBCABKANSCmNy", 
            "ZWF0ZVRpbWUSGwoJb3duZXJfdWlkGAUgASgJUghvd25lclVpZBIdCgpsZXZl", 
            "bF9uYW1lGAYgASgJUglsZXZlbE5hbWUSGQoIZ2FtZV92ZXIYCiABKAlSB2dh", 
            "bWVWZXISMgoKbWF0Y2hfbW9kZRgyIAEoDjITLlByb3RvY29sLk1hdGNoTW9k", 
            "ZVIJbWF0Y2hNb2RlEiwKBnN0YXR1cxhkIAEoDjIULlByb3RvY29sLkdhbWVT", 
            "dGF0dXNSBnN0YXR1cxIiCg1jdXJfYmF0dGxlX2lkGGUgASgJUgtjdXJCYXR0", 
            "bGVJZBI4Cgp1c2VyX2luZm9zGP8BIAMoCzIYLlByb3RvY29sLlBsYXllclVz", 
            "ZXJJbmZvUgl1c2VySW5mb3MivQEKCFJvb21EZXNjEg4KAmlkGAEgASgEUgJp", 
            "ZBISCgRuYW1lGAMgASgJUgRuYW1lEh8KC2NyZWF0ZV90aW1lGAQgASgDUgpj", 
            "cmVhdGVUaW1lEhsKCW93bmVyX3VpZBgFIAEoCVIIb3duZXJVaWQSGAoHcGVy", 
            "Y2VudBgUIAEoCVIHcGVyY2VudBIdCgptYXRjaF9tb2RlGDIgASgFUgltYXRj", 
            "aE1vZGUSFgoGc3RhdHVzGGQgASgFUgZzdGF0dXMiqwEKEFNldHRsZW1lbnRS", 
            "ZXN1bHQSEAoDdWlkGAEgASgJUgN1aWQSIQoMcmVzdWx0X3N0YXRlGAIgASgN", 
            "UgtyZXN1bHRTdGF0ZRIdCgpraWxsX2NvdW50GAMgASgNUglraWxsQ291bnQS", 
            "HQoKY2x1ZV9jb3VudBgEIAEoDVIJY2x1ZUNvdW50EhAKA2V4cBgKIAEoBVID", 
            "ZXhwEhIKBGNvaW4YCyABKAVSBGNvaW4qQAoKR2FtZVN0YXR1cxILCgdHU19J", 
            "RExFEAASCwoHR1NfSU5JVBABEgwKCEdTX1NUQVJUEAISCgoGR1NfRU5EEAMq", 
            "MgoIVGVzdEVudW0SBgoCRDAQABIGCgJEMRABEgYKAkQyEAISBgoCRDMQAxIG", 
            "CgJENBAEKkgKCU1hdGNoTW9kZRIKCgZTSU5HTEUQARIJCgVNVUxUSRACEggK", 
          "BFRFQU0QAxIJCgVMT0NBTBAEEg8KC01VTFRJX0xPQ0FMEAU="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Protocol_DataModel__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Protocol_DataModel__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.DataModel, global::Protocol.DataModel.Builder>(internal__static_Protocol_DataModel__Descriptor,
                new string[] { "Id", });
        internal__static_Protocol_User__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Protocol_User__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.User, global::Protocol.User.Builder>(internal__static_Protocol_User__Descriptor,
                new string[] { "Id", "Uid", "Name", "Head", "HeroId", "SkinId", "Elo", "Exp", "Coin", "GameVer", });
        internal__static_Protocol_PlayerUserInfo__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Protocol_PlayerUserInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.PlayerUserInfo, global::Protocol.PlayerUserInfo.Builder>(internal__static_Protocol_PlayerUserInfo__Descriptor,
                new string[] { "Id", "Uid", "Name", "Head", "HeroId", "SkinId", "Elo", "PlayerType", "Exp", "Coin", "BagSyncData", "GameVer", "ConnId", "Ready", });
        internal__static_Protocol_Room__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Protocol_Room__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.Room, global::Protocol.Room.Builder>(internal__static_Protocol_Room__Descriptor,
                new string[] { "Id", "Name", "CreateTime", "OwnerUid", "LevelName", "GameVer", "MatchMode", "Status", "CurBattleId", "UserInfos", });
        internal__static_Protocol_RoomDesc__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Protocol_RoomDesc__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.RoomDesc, global::Protocol.RoomDesc.Builder>(internal__static_Protocol_RoomDesc__Descriptor,
                new string[] { "Id", "Name", "CreateTime", "OwnerUid", "Percent", "MatchMode", "Status", });
        internal__static_Protocol_SettlementResult__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Protocol_SettlementResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.SettlementResult, global::Protocol.SettlementResult.Builder>(internal__static_Protocol_SettlementResult__Descriptor,
                new string[] { "Uid", "ResultState", "KillCount", "ClueCount", "Exp", "Coin", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::yd_fieldoptions.YdFieldoptions.RegisterAllExtensions(registry);
        global::Protocol.ProtoCommon.RegisterAllExtensions(registry);
        global::Protocol.ProtoBattle.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::yd_fieldoptions.YdFieldoptions.Descriptor, 
          global::Protocol.ProtoCommon.Descriptor, 
          global::Protocol.ProtoBattle.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum GameStatus {
    GS_IDLE = 0,
    GS_INIT = 1,
    GS_START = 2,
    GS_END = 3,
  }
  
  public enum TestEnum {
    D0 = 0,
    D1 = 1,
    D2 = 2,
    D3 = 3,
    D4 = 4,
  }
  
  public enum MatchMode {
    SINGLE = 1,
    MULTI = 2,
    TEAM = 3,
    LOCAL = 4,
    MULTI_LOCAL = 5,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DataModel : pb::GeneratedMessage<DataModel, DataModel.Builder> {
    public DataModel() { }
    private static readonly DataModel defaultInstance = new DataModel().MakeReadOnly();
    private static readonly string[] _dataModelFieldNames = new string[] { "id" };
    private static readonly uint[] _dataModelFieldTags = new uint[] { 8 };
    public static DataModel DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DataModel DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DataModel ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoDatamodel.internal__static_Protocol_DataModel__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DataModel, DataModel.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoDatamodel.internal__static_Protocol_DataModel__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private bool isIdChanged = true;
    private ulong id_;
    public bool HasId {
      get { return hasId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Id {
      get { return id_; }
      set { hasId = true;
        isIdChanged = true;
        id_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _dataModelFieldNames;
      if (hasId) {
        output.WriteUInt64(1, field_names[0], Id);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Id);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public DataModel CommitChange() {
      DataModel other = new DataModel();
      bool isChange = false;
      if (isIdChanged) {
        isChange = true;
        other.Id = Id;
        isIdChanged = false;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(DataModel other, bool isFull = false) {
      if (other == global::Protocol.DataModel.DefaultInstance) return;
      if (other.HasId) {
        Id = other.Id;
      }
    }
    
    public static DataModel ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DataModel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DataModel ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DataModel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DataModel ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DataModel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DataModel ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DataModel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DataModel ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DataModel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DataModel MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DataModel prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DataModel, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DataModel cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DataModel result;
      
      private DataModel PrepareBuilder() {
        if (resultIsReadOnly) {
          DataModel original = result;
          result = new DataModel();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DataModel MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.DataModel.Descriptor; }
      }
      
      public override DataModel DefaultInstanceForType {
        get { return global::Protocol.DataModel.DefaultInstance; }
      }
      
      public override DataModel BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DataModel) {
          return MergeFrom((DataModel) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DataModel other) {
        if (other == global::Protocol.DataModel.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dataModelFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dataModelFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt64(ref result.id_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetId(ulong value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0UL;
        return this;
      }
    }
    static DataModel() {
      object.ReferenceEquals(global::Protocol.ProtoDatamodel.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class User : pb::GeneratedMessage<User, User.Builder> {
    public User() { }
    private static readonly User defaultInstance = new User().MakeReadOnly();
    private static readonly string[] _userFieldNames = new string[] { "coin", "elo", "exp", "game_ver", "head", "hero_id", "id", "name", "skin_id", "uid" };
    private static readonly uint[] _userFieldTags = new uint[] { 168, 80, 160, 1586, 34, 40, 8, 26, 48, 18 };
    public static User DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override User DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override User ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoDatamodel.internal__static_Protocol_User__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<User, User.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoDatamodel.internal__static_Protocol_User__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private bool isIdChanged = true;
    private ulong id_;
    public bool HasId {
      get { return hasId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Id {
      get { return id_; }
      set { hasId = true;
        isIdChanged = true;
        id_ = value;}
    }
    
    public const int UidFieldNumber = 2;
    private bool hasUid;
    private bool isUidChanged = true;
    private string uid_ = "";
    public bool HasUid {
      get { return hasUid; }
    }
    public string Uid {
      get { return uid_; }
      set { hasUid = true;
        isUidChanged = true;
        uid_ = value;}
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private bool isNameChanged = true;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
      set { hasName = true;
        isNameChanged = true;
        name_ = value;}
    }
    
    public const int HeadFieldNumber = 4;
    private bool hasHead;
    private bool isHeadChanged = true;
    private string head_ = "";
    public bool HasHead {
      get { return hasHead; }
    }
    public string Head {
      get { return head_; }
      set { hasHead = true;
        isHeadChanged = true;
        head_ = value;}
    }
    
    public const int HeroIdFieldNumber = 5;
    private bool hasHeroId;
    private bool isHeroIdChanged = true;
    private uint heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    [global::System.CLSCompliant(false)]
    public uint HeroId {
      get { return heroId_; }
      set { hasHeroId = true;
        isHeroIdChanged = true;
        heroId_ = value;}
    }
    
    public const int SkinIdFieldNumber = 6;
    private bool hasSkinId;
    private bool isSkinIdChanged = true;
    private uint skinId_;
    public bool HasSkinId {
      get { return hasSkinId; }
    }
    [global::System.CLSCompliant(false)]
    public uint SkinId {
      get { return skinId_; }
      set { hasSkinId = true;
        isSkinIdChanged = true;
        skinId_ = value;}
    }
    
    public const int EloFieldNumber = 10;
    private bool hasElo;
    private bool isEloChanged = true;
    private int elo_;
    public bool HasElo {
      get { return hasElo; }
    }
    public int Elo {
      get { return elo_; }
      set { hasElo = true;
        isEloChanged = true;
        elo_ = value;}
    }
    
    public const int ExpFieldNumber = 20;
    private bool hasExp;
    private bool isExpChanged = true;
    private int exp_;
    public bool HasExp {
      get { return hasExp; }
    }
    public int Exp {
      get { return exp_; }
      set { hasExp = true;
        isExpChanged = true;
        exp_ = value;}
    }
    
    public const int CoinFieldNumber = 21;
    private bool hasCoin;
    private bool isCoinChanged = true;
    private int coin_;
    public bool HasCoin {
      get { return hasCoin; }
    }
    public int Coin {
      get { return coin_; }
      set { hasCoin = true;
        isCoinChanged = true;
        coin_ = value;}
    }
    
    public const int GameVerFieldNumber = 198;
    private bool hasGameVer;
    private bool isGameVerChanged = true;
    private string gameVer_ = "";
    public bool HasGameVer {
      get { return hasGameVer; }
    }
    public string GameVer {
      get { return gameVer_; }
      set { hasGameVer = true;
        isGameVerChanged = true;
        gameVer_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _userFieldNames;
      if (hasId) {
        output.WriteUInt64(1, field_names[6], Id);
      }
      if (hasUid) {
        output.WriteString(2, field_names[9], Uid);
      }
      if (hasName) {
        output.WriteString(3, field_names[7], Name);
      }
      if (hasHead) {
        output.WriteString(4, field_names[4], Head);
      }
      if (hasHeroId) {
        output.WriteUInt32(5, field_names[5], HeroId);
      }
      if (hasSkinId) {
        output.WriteUInt32(6, field_names[8], SkinId);
      }
      if (hasElo) {
        output.WriteInt32(10, field_names[1], Elo);
      }
      if (hasExp) {
        output.WriteInt32(20, field_names[2], Exp);
      }
      if (hasCoin) {
        output.WriteInt32(21, field_names[0], Coin);
      }
      if (hasGameVer) {
        output.WriteString(198, field_names[3], GameVer);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Id);
      }
      if (hasUid) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Uid);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Name);
      }
      if (hasHead) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Head);
      }
      if (hasHeroId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, HeroId);
      }
      if (hasSkinId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, SkinId);
      }
      if (hasElo) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, Elo);
      }
      if (hasExp) {
        size += pb::CodedOutputStream.ComputeInt32Size(20, Exp);
      }
      if (hasCoin) {
        size += pb::CodedOutputStream.ComputeInt32Size(21, Coin);
      }
      if (hasGameVer) {
        size += pb::CodedOutputStream.ComputeStringSize(198, GameVer);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public User CommitChange() {
      User other = new User();
      bool isChange = false;
      if (isIdChanged) {
        isChange = true;
        other.Id = Id;
        isIdChanged = false;
      }
      if (isUidChanged) {
        isChange = true;
        other.Uid = Uid;
        isUidChanged = false;
      }
      if (isNameChanged) {
        isChange = true;
        other.Name = Name;
        isNameChanged = false;
      }
      if (isHeadChanged) {
        isChange = true;
        other.Head = Head;
        isHeadChanged = false;
      }
      if (isHeroIdChanged) {
        isChange = true;
        other.HeroId = HeroId;
        isHeroIdChanged = false;
      }
      if (isSkinIdChanged) {
        isChange = true;
        other.SkinId = SkinId;
        isSkinIdChanged = false;
      }
      if (isEloChanged) {
        isChange = true;
        other.Elo = Elo;
        isEloChanged = false;
      }
      if (isExpChanged) {
        isChange = true;
        other.Exp = Exp;
        isExpChanged = false;
      }
      if (isCoinChanged) {
        isChange = true;
        other.Coin = Coin;
        isCoinChanged = false;
      }
      if (isGameVerChanged) {
        isChange = true;
        other.GameVer = GameVer;
        isGameVerChanged = false;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(User other, bool isFull = false) {
      if (other == global::Protocol.User.DefaultInstance) return;
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasHead) {
        Head = other.Head;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      if (other.HasSkinId) {
        SkinId = other.SkinId;
      }
      if (other.HasElo) {
        Elo = other.Elo;
      }
      if (other.HasExp) {
        Exp = other.Exp;
      }
      if (other.HasCoin) {
        Coin = other.Coin;
      }
      if (other.HasGameVer) {
        GameVer = other.GameVer;
      }
    }
    
    public static User ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static User ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static User ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static User ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static User ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static User ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static User ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static User ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static User ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static User ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private User MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(User prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<User, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(User cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private User result;
      
      private User PrepareBuilder() {
        if (resultIsReadOnly) {
          User original = result;
          result = new User();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override User MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.User.Descriptor; }
      }
      
      public override User DefaultInstanceForType {
        get { return global::Protocol.User.DefaultInstance; }
      }
      
      public override User BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is User) {
          return MergeFrom((User) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(User other) {
        if (other == global::Protocol.User.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasUid) {
          Uid = other.Uid;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasHead) {
          Head = other.Head;
        }
        if (other.HasHeroId) {
          HeroId = other.HeroId;
        }
        if (other.HasSkinId) {
          SkinId = other.SkinId;
        }
        if (other.HasElo) {
          Elo = other.Elo;
        }
        if (other.HasExp) {
          Exp = other.Exp;
        }
        if (other.HasCoin) {
          Coin = other.Coin;
        }
        if (other.HasGameVer) {
          GameVer = other.GameVer;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_userFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _userFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt64(ref result.id_);
              break;
            }
            case 18: {
              result.hasUid = input.ReadString(ref result.uid_);
              break;
            }
            case 26: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 34: {
              result.hasHead = input.ReadString(ref result.head_);
              break;
            }
            case 40: {
              result.hasHeroId = input.ReadUInt32(ref result.heroId_);
              break;
            }
            case 48: {
              result.hasSkinId = input.ReadUInt32(ref result.skinId_);
              break;
            }
            case 80: {
              result.hasElo = input.ReadInt32(ref result.elo_);
              break;
            }
            case 160: {
              result.hasExp = input.ReadInt32(ref result.exp_);
              break;
            }
            case 168: {
              result.hasCoin = input.ReadInt32(ref result.coin_);
              break;
            }
            case 1586: {
              result.hasGameVer = input.ReadString(ref result.gameVer_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetId(ulong value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0UL;
        return this;
      }
      
      public bool HasUid {
        get { return result.hasUid; }
      }
      public string Uid {
        get { return result.Uid; }
        set { SetUid(value); }
      }
      public Builder SetUid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUid = true;
        result.uid_ = value;
        return this;
      }
      public Builder ClearUid() {
        PrepareBuilder();
        result.hasUid = false;
        result.uid_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasHead {
        get { return result.hasHead; }
      }
      public string Head {
        get { return result.Head; }
        set { SetHead(value); }
      }
      public Builder SetHead(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHead = true;
        result.head_ = value;
        return this;
      }
      public Builder ClearHead() {
        PrepareBuilder();
        result.hasHead = false;
        result.head_ = "";
        return this;
      }
      
      public bool HasHeroId {
        get { return result.hasHeroId; }
      }
      [global::System.CLSCompliant(false)]
      public uint HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHeroId(uint value) {
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = 0;
        return this;
      }
      
      public bool HasSkinId {
        get { return result.hasSkinId; }
      }
      [global::System.CLSCompliant(false)]
      public uint SkinId {
        get { return result.SkinId; }
        set { SetSkinId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSkinId(uint value) {
        PrepareBuilder();
        result.hasSkinId = true;
        result.skinId_ = value;
        return this;
      }
      public Builder ClearSkinId() {
        PrepareBuilder();
        result.hasSkinId = false;
        result.skinId_ = 0;
        return this;
      }
      
      public bool HasElo {
        get { return result.hasElo; }
      }
      public int Elo {
        get { return result.Elo; }
        set { SetElo(value); }
      }
      public Builder SetElo(int value) {
        PrepareBuilder();
        result.hasElo = true;
        result.elo_ = value;
        return this;
      }
      public Builder ClearElo() {
        PrepareBuilder();
        result.hasElo = false;
        result.elo_ = 0;
        return this;
      }
      
      public bool HasExp {
        get { return result.hasExp; }
      }
      public int Exp {
        get { return result.Exp; }
        set { SetExp(value); }
      }
      public Builder SetExp(int value) {
        PrepareBuilder();
        result.hasExp = true;
        result.exp_ = value;
        return this;
      }
      public Builder ClearExp() {
        PrepareBuilder();
        result.hasExp = false;
        result.exp_ = 0;
        return this;
      }
      
      public bool HasCoin {
        get { return result.hasCoin; }
      }
      public int Coin {
        get { return result.Coin; }
        set { SetCoin(value); }
      }
      public Builder SetCoin(int value) {
        PrepareBuilder();
        result.hasCoin = true;
        result.coin_ = value;
        return this;
      }
      public Builder ClearCoin() {
        PrepareBuilder();
        result.hasCoin = false;
        result.coin_ = 0;
        return this;
      }
      
      public bool HasGameVer {
        get { return result.hasGameVer; }
      }
      public string GameVer {
        get { return result.GameVer; }
        set { SetGameVer(value); }
      }
      public Builder SetGameVer(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameVer = true;
        result.gameVer_ = value;
        return this;
      }
      public Builder ClearGameVer() {
        PrepareBuilder();
        result.hasGameVer = false;
        result.gameVer_ = "";
        return this;
      }
    }
    static User() {
      object.ReferenceEquals(global::Protocol.ProtoDatamodel.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PlayerUserInfo : pb::GeneratedMessage<PlayerUserInfo, PlayerUserInfo.Builder> {
    public PlayerUserInfo() { }
    private static readonly PlayerUserInfo defaultInstance = new PlayerUserInfo().MakeReadOnly();
    private static readonly string[] _playerUserInfoFieldNames = new string[] { "bag_sync_data", "coin", "conn_id", "elo", "exp", "game_ver", "head", "hero_id", "id", "name", "player_type", "ready", "skin_id", "uid" };
    private static readonly uint[] _playerUserInfoFieldTags = new uint[] { 426, 168, 1592, 80, 160, 1586, 34, 40, 8, 26, 88, 2040, 48, 18 };
    public static PlayerUserInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PlayerUserInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerUserInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoDatamodel.internal__static_Protocol_PlayerUserInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PlayerUserInfo, PlayerUserInfo.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoDatamodel.internal__static_Protocol_PlayerUserInfo__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private bool isIdChanged = true;
    private ulong id_;
    public bool HasId {
      get { return hasId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Id {
      get { return id_; }
      set { hasId = true;
        isIdChanged = true;
        id_ = value;}
    }
    
    public const int UidFieldNumber = 2;
    private bool hasUid;
    private bool isUidChanged = true;
    private string uid_ = "";
    public bool HasUid {
      get { return hasUid; }
    }
    public string Uid {
      get { return uid_; }
      set { hasUid = true;
        isUidChanged = true;
        uid_ = value;}
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private bool isNameChanged = true;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
      set { hasName = true;
        isNameChanged = true;
        name_ = value;}
    }
    
    public const int HeadFieldNumber = 4;
    private bool hasHead;
    private bool isHeadChanged = true;
    private string head_ = "";
    public bool HasHead {
      get { return hasHead; }
    }
    public string Head {
      get { return head_; }
      set { hasHead = true;
        isHeadChanged = true;
        head_ = value;}
    }
    
    public const int HeroIdFieldNumber = 5;
    private bool hasHeroId;
    private bool isHeroIdChanged = true;
    private uint heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    [global::System.CLSCompliant(false)]
    public uint HeroId {
      get { return heroId_; }
      set { hasHeroId = true;
        isHeroIdChanged = true;
        heroId_ = value;}
    }
    
    public const int SkinIdFieldNumber = 6;
    private bool hasSkinId;
    private bool isSkinIdChanged = true;
    private uint skinId_;
    public bool HasSkinId {
      get { return hasSkinId; }
    }
    [global::System.CLSCompliant(false)]
    public uint SkinId {
      get { return skinId_; }
      set { hasSkinId = true;
        isSkinIdChanged = true;
        skinId_ = value;}
    }
    
    public const int EloFieldNumber = 10;
    private bool hasElo;
    private bool isEloChanged = true;
    private int elo_;
    public bool HasElo {
      get { return hasElo; }
    }
    public int Elo {
      get { return elo_; }
      set { hasElo = true;
        isEloChanged = true;
        elo_ = value;}
    }
    
    public const int PlayerTypeFieldNumber = 11;
    private bool hasPlayerType;
    private global::Protocol.PlayerType playerType_ = global::Protocol.PlayerType.PT_Player;
    private bool isPlayerTypeChanged = true;
    public bool HasPlayerType {
      get { return hasPlayerType; }
    }
    public global::Protocol.PlayerType PlayerType {
      get { return playerType_; }
      set { hasPlayerType = true;
        isPlayerTypeChanged = true;
        playerType_ = value;}
    }
    
    public const int ExpFieldNumber = 20;
    private bool hasExp;
    private bool isExpChanged = true;
    private int exp_;
    public bool HasExp {
      get { return hasExp; }
    }
    public int Exp {
      get { return exp_; }
      set { hasExp = true;
        isExpChanged = true;
        exp_ = value;}
    }
    
    public const int CoinFieldNumber = 21;
    private bool hasCoin;
    private bool isCoinChanged = true;
    private int coin_;
    public bool HasCoin {
      get { return hasCoin; }
    }
    public int Coin {
      get { return coin_; }
      set { hasCoin = true;
        isCoinChanged = true;
        coin_ = value;}
    }
    
    public const int BagSyncDataFieldNumber = 53;
    private bool hasBagSyncData;
    private global::Protocol.BagSyncData bagSyncData_;
    public bool HasBagSyncData {
      get { return hasBagSyncData; }
    }
    public global::Protocol.BagSyncData BagSyncData {
      get { return bagSyncData_; }
      set { hasBagSyncData = true;
        bagSyncData_ = value;}
    }
    public void MergeBagSyncData(global::Protocol.BagSyncData value, bool isFull = false) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (HasBagSyncData &&
        bagSyncData_ != global::Protocol.BagSyncData.DefaultInstance) {
        bagSyncData_.MergeFrom(value, isFull);
      } else {
        bagSyncData_ = value;
      }
    }
    
    public const int GameVerFieldNumber = 198;
    private bool hasGameVer;
    private bool isGameVerChanged = true;
    private string gameVer_ = "";
    public bool HasGameVer {
      get { return hasGameVer; }
    }
    public string GameVer {
      get { return gameVer_; }
      set { hasGameVer = true;
        isGameVerChanged = true;
        gameVer_ = value;}
    }
    
    public const int ConnIdFieldNumber = 199;
    private bool hasConnId;
    private bool isConnIdChanged = true;
    private uint connId_;
    public bool HasConnId {
      get { return hasConnId; }
    }
    [global::System.CLSCompliant(false)]
    public uint ConnId {
      get { return connId_; }
      set { hasConnId = true;
        isConnIdChanged = true;
        connId_ = value;}
    }
    
    public const int ReadyFieldNumber = 255;
    private bool hasReady;
    private bool isReadyChanged = true;
    private bool ready_;
    public bool HasReady {
      get { return hasReady; }
    }
    public bool Ready {
      get { return ready_; }
      set { hasReady = true;
        isReadyChanged = true;
        ready_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        if (HasBagSyncData) {
          if (!BagSyncData.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _playerUserInfoFieldNames;
      if (hasId) {
        output.WriteUInt64(1, field_names[8], Id);
      }
      if (hasUid) {
        output.WriteString(2, field_names[13], Uid);
      }
      if (hasName) {
        output.WriteString(3, field_names[9], Name);
      }
      if (hasHead) {
        output.WriteString(4, field_names[6], Head);
      }
      if (hasHeroId) {
        output.WriteUInt32(5, field_names[7], HeroId);
      }
      if (hasSkinId) {
        output.WriteUInt32(6, field_names[12], SkinId);
      }
      if (hasElo) {
        output.WriteInt32(10, field_names[3], Elo);
      }
      if (hasPlayerType) {
        output.WriteEnum(11, field_names[10], (int) PlayerType, PlayerType);
      }
      if (hasExp) {
        output.WriteInt32(20, field_names[4], Exp);
      }
      if (hasCoin) {
        output.WriteInt32(21, field_names[1], Coin);
      }
      if (hasBagSyncData) {
        output.WriteMessage(53, field_names[0], BagSyncData);
      }
      if (hasGameVer) {
        output.WriteString(198, field_names[5], GameVer);
      }
      if (hasConnId) {
        output.WriteUInt32(199, field_names[2], ConnId);
      }
      if (hasReady) {
        output.WriteBool(255, field_names[11], Ready);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Id);
      }
      if (hasUid) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Uid);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Name);
      }
      if (hasHead) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Head);
      }
      if (hasHeroId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, HeroId);
      }
      if (hasSkinId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, SkinId);
      }
      if (hasElo) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, Elo);
      }
      if (hasPlayerType) {
        size += pb::CodedOutputStream.ComputeEnumSize(11, (int) PlayerType);
      }
      if (hasExp) {
        size += pb::CodedOutputStream.ComputeInt32Size(20, Exp);
      }
      if (hasCoin) {
        size += pb::CodedOutputStream.ComputeInt32Size(21, Coin);
      }
      if (hasBagSyncData) {
        size += pb::CodedOutputStream.ComputeMessageSize(53, BagSyncData);
      }
      if (hasGameVer) {
        size += pb::CodedOutputStream.ComputeStringSize(198, GameVer);
      }
      if (hasConnId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(199, ConnId);
      }
      if (hasReady) {
        size += pb::CodedOutputStream.ComputeBoolSize(255, Ready);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public PlayerUserInfo CommitChange() {
      PlayerUserInfo other = new PlayerUserInfo();
      bool isChange = false;
      if (isIdChanged) {
        isChange = true;
        other.Id = Id;
        isIdChanged = false;
      }
      if (isUidChanged) {
        isChange = true;
        other.Uid = Uid;
        isUidChanged = false;
      }
      if (isNameChanged) {
        isChange = true;
        other.Name = Name;
        isNameChanged = false;
      }
      if (isHeadChanged) {
        isChange = true;
        other.Head = Head;
        isHeadChanged = false;
      }
      if (isHeroIdChanged) {
        isChange = true;
        other.HeroId = HeroId;
        isHeroIdChanged = false;
      }
      if (isSkinIdChanged) {
        isChange = true;
        other.SkinId = SkinId;
        isSkinIdChanged = false;
      }
      if (isEloChanged) {
        isChange = true;
        other.Elo = Elo;
        isEloChanged = false;
      }
      if (isPlayerTypeChanged) {
        isChange = true;
        other.PlayerType = PlayerType;
        isPlayerTypeChanged = false;
      }
      if (isExpChanged) {
        isChange = true;
        other.Exp = Exp;
        isExpChanged = false;
      }
      if (isCoinChanged) {
        isChange = true;
        other.Coin = Coin;
        isCoinChanged = false;
      }
      
      var BagSyncDatacommit = BagSyncData?.CommitChange();
      if(BagSyncDatacommit!=null)
      {
          isChange = true;
          other.BagSyncData = BagSyncDatacommit;
      }
      if (isGameVerChanged) {
        isChange = true;
        other.GameVer = GameVer;
        isGameVerChanged = false;
      }
      if (isConnIdChanged) {
        isChange = true;
        other.ConnId = ConnId;
        isConnIdChanged = false;
      }
      if (isReadyChanged) {
        isChange = true;
        other.Ready = Ready;
        isReadyChanged = false;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(PlayerUserInfo other, bool isFull = false) {
      if (other == global::Protocol.PlayerUserInfo.DefaultInstance) return;
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasHead) {
        Head = other.Head;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      if (other.HasSkinId) {
        SkinId = other.SkinId;
      }
      if (other.HasElo) {
        Elo = other.Elo;
      }
      if (other.HasPlayerType) {
        PlayerType = other.PlayerType;
      }
      if (other.HasExp) {
        Exp = other.Exp;
      }
      if (other.HasCoin) {
        Coin = other.Coin;
      }
      
      if (other.HasBagSyncData)
      {
        MergeBagSyncData(other.BagSyncData, isFull);
      }
      if (other.HasGameVer) {
        GameVer = other.GameVer;
      }
      if (other.HasConnId) {
        ConnId = other.ConnId;
      }
      if (other.HasReady) {
        Ready = other.Ready;
      }
    }
    
    public static PlayerUserInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerUserInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerUserInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerUserInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerUserInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerUserInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PlayerUserInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PlayerUserInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PlayerUserInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerUserInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerUserInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PlayerUserInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PlayerUserInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerUserInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerUserInfo result;
      
      private PlayerUserInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerUserInfo original = result;
          result = new PlayerUserInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerUserInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.PlayerUserInfo.Descriptor; }
      }
      
      public override PlayerUserInfo DefaultInstanceForType {
        get { return global::Protocol.PlayerUserInfo.DefaultInstance; }
      }
      
      public override PlayerUserInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PlayerUserInfo) {
          return MergeFrom((PlayerUserInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerUserInfo other) {
        if (other == global::Protocol.PlayerUserInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasUid) {
          Uid = other.Uid;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasHead) {
          Head = other.Head;
        }
        if (other.HasHeroId) {
          HeroId = other.HeroId;
        }
        if (other.HasSkinId) {
          SkinId = other.SkinId;
        }
        if (other.HasElo) {
          Elo = other.Elo;
        }
        if (other.HasPlayerType) {
          PlayerType = other.PlayerType;
        }
        if (other.HasExp) {
          Exp = other.Exp;
        }
        if (other.HasCoin) {
          Coin = other.Coin;
        }
        if (other.HasBagSyncData) {
          MergeBagSyncData(other.BagSyncData);
        }
        if (other.HasGameVer) {
          GameVer = other.GameVer;
        }
        if (other.HasConnId) {
          ConnId = other.ConnId;
        }
        if (other.HasReady) {
          Ready = other.Ready;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerUserInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerUserInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt64(ref result.id_);
              break;
            }
            case 18: {
              result.hasUid = input.ReadString(ref result.uid_);
              break;
            }
            case 26: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 34: {
              result.hasHead = input.ReadString(ref result.head_);
              break;
            }
            case 40: {
              result.hasHeroId = input.ReadUInt32(ref result.heroId_);
              break;
            }
            case 48: {
              result.hasSkinId = input.ReadUInt32(ref result.skinId_);
              break;
            }
            case 80: {
              result.hasElo = input.ReadInt32(ref result.elo_);
              break;
            }
            case 88: {
              object unknown;
              if(input.ReadEnum(ref result.playerType_, out unknown)) {
                result.hasPlayerType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(11, (ulong)(int)unknown);
              }
              break;
            }
            case 160: {
              result.hasExp = input.ReadInt32(ref result.exp_);
              break;
            }
            case 168: {
              result.hasCoin = input.ReadInt32(ref result.coin_);
              break;
            }
            case 426: {
              global::Protocol.BagSyncData.Builder subBuilder = global::Protocol.BagSyncData.CreateBuilder();
              if (result.hasBagSyncData) {
                subBuilder.MergeFrom(BagSyncData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BagSyncData = subBuilder.BuildPartial();
              break;
            }
            case 1586: {
              result.hasGameVer = input.ReadString(ref result.gameVer_);
              break;
            }
            case 1592: {
              result.hasConnId = input.ReadUInt32(ref result.connId_);
              break;
            }
            case 2040: {
              result.hasReady = input.ReadBool(ref result.ready_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetId(ulong value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0UL;
        return this;
      }
      
      public bool HasUid {
        get { return result.hasUid; }
      }
      public string Uid {
        get { return result.Uid; }
        set { SetUid(value); }
      }
      public Builder SetUid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUid = true;
        result.uid_ = value;
        return this;
      }
      public Builder ClearUid() {
        PrepareBuilder();
        result.hasUid = false;
        result.uid_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasHead {
        get { return result.hasHead; }
      }
      public string Head {
        get { return result.Head; }
        set { SetHead(value); }
      }
      public Builder SetHead(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHead = true;
        result.head_ = value;
        return this;
      }
      public Builder ClearHead() {
        PrepareBuilder();
        result.hasHead = false;
        result.head_ = "";
        return this;
      }
      
      public bool HasHeroId {
        get { return result.hasHeroId; }
      }
      [global::System.CLSCompliant(false)]
      public uint HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHeroId(uint value) {
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = 0;
        return this;
      }
      
      public bool HasSkinId {
        get { return result.hasSkinId; }
      }
      [global::System.CLSCompliant(false)]
      public uint SkinId {
        get { return result.SkinId; }
        set { SetSkinId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSkinId(uint value) {
        PrepareBuilder();
        result.hasSkinId = true;
        result.skinId_ = value;
        return this;
      }
      public Builder ClearSkinId() {
        PrepareBuilder();
        result.hasSkinId = false;
        result.skinId_ = 0;
        return this;
      }
      
      public bool HasElo {
        get { return result.hasElo; }
      }
      public int Elo {
        get { return result.Elo; }
        set { SetElo(value); }
      }
      public Builder SetElo(int value) {
        PrepareBuilder();
        result.hasElo = true;
        result.elo_ = value;
        return this;
      }
      public Builder ClearElo() {
        PrepareBuilder();
        result.hasElo = false;
        result.elo_ = 0;
        return this;
      }
      
      public bool HasPlayerType {
       get { return result.hasPlayerType; }
      }
      public global::Protocol.PlayerType PlayerType {
        get { return result.PlayerType; }
        set { SetPlayerType(value); }
      }
      public Builder SetPlayerType(global::Protocol.PlayerType value) {
        PrepareBuilder();
        result.hasPlayerType = true;
        result.playerType_ = value;
        return this;
      }
      public Builder ClearPlayerType() {
        PrepareBuilder();
        result.hasPlayerType = false;
        result.playerType_ = global::Protocol.PlayerType.PT_Player;
        return this;
      }
      
      public bool HasExp {
        get { return result.hasExp; }
      }
      public int Exp {
        get { return result.Exp; }
        set { SetExp(value); }
      }
      public Builder SetExp(int value) {
        PrepareBuilder();
        result.hasExp = true;
        result.exp_ = value;
        return this;
      }
      public Builder ClearExp() {
        PrepareBuilder();
        result.hasExp = false;
        result.exp_ = 0;
        return this;
      }
      
      public bool HasCoin {
        get { return result.hasCoin; }
      }
      public int Coin {
        get { return result.Coin; }
        set { SetCoin(value); }
      }
      public Builder SetCoin(int value) {
        PrepareBuilder();
        result.hasCoin = true;
        result.coin_ = value;
        return this;
      }
      public Builder ClearCoin() {
        PrepareBuilder();
        result.hasCoin = false;
        result.coin_ = 0;
        return this;
      }
      
      public bool HasBagSyncData {
       get { return result.hasBagSyncData; }
      }
      public global::Protocol.BagSyncData BagSyncData {
        get { return result.BagSyncData; }
        set { SetBagSyncData(value); }
      }
      public Builder SetBagSyncData(global::Protocol.BagSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBagSyncData = true;
        result.bagSyncData_ = value;
        return this;
      }
      public Builder SetBagSyncData(global::Protocol.BagSyncData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBagSyncData = true;
        result.bagSyncData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBagSyncData(global::Protocol.BagSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.HasBagSyncData &&
            result.bagSyncData_ != global::Protocol.BagSyncData.DefaultInstance) {
            result.bagSyncData_ = global::Protocol.BagSyncData.CreateBuilder(result.bagSyncData_).MergeFrom(value).BuildPartial();
        } else {
          result.bagSyncData_ = value;
          result.hasBagSyncData = true;
        }
        return this;
      }
      public Builder ClearBagSyncData() {
        PrepareBuilder();
        result.hasBagSyncData = false;
        result.bagSyncData_ = null;
        return this;
      }
      
      public bool HasGameVer {
        get { return result.hasGameVer; }
      }
      public string GameVer {
        get { return result.GameVer; }
        set { SetGameVer(value); }
      }
      public Builder SetGameVer(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameVer = true;
        result.gameVer_ = value;
        return this;
      }
      public Builder ClearGameVer() {
        PrepareBuilder();
        result.hasGameVer = false;
        result.gameVer_ = "";
        return this;
      }
      
      public bool HasConnId {
        get { return result.hasConnId; }
      }
      [global::System.CLSCompliant(false)]
      public uint ConnId {
        get { return result.ConnId; }
        set { SetConnId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetConnId(uint value) {
        PrepareBuilder();
        result.hasConnId = true;
        result.connId_ = value;
        return this;
      }
      public Builder ClearConnId() {
        PrepareBuilder();
        result.hasConnId = false;
        result.connId_ = 0;
        return this;
      }
      
      public bool HasReady {
        get { return result.hasReady; }
      }
      public bool Ready {
        get { return result.Ready; }
        set { SetReady(value); }
      }
      public Builder SetReady(bool value) {
        PrepareBuilder();
        result.hasReady = true;
        result.ready_ = value;
        return this;
      }
      public Builder ClearReady() {
        PrepareBuilder();
        result.hasReady = false;
        result.ready_ = false;
        return this;
      }
    }
    static PlayerUserInfo() {
      object.ReferenceEquals(global::Protocol.ProtoDatamodel.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Room : pb::GeneratedMessage<Room, Room.Builder> {
    public Room() { }
    private static readonly Room defaultInstance = new Room().MakeReadOnly();
    private static readonly string[] _roomFieldNames = new string[] { "create_time", "cur_battle_id", "game_ver", "id", "level_name", "match_mode", "name", "owner_uid", "status", "user_infos" };
    private static readonly uint[] _roomFieldTags = new uint[] { 32, 810, 82, 8, 50, 400, 26, 42, 800, 2042 };
    public static Room DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Room DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Room ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoDatamodel.internal__static_Protocol_Room__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Room, Room.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoDatamodel.internal__static_Protocol_Room__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private bool isIdChanged = true;
    private ulong id_;
    public bool HasId {
      get { return hasId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Id {
      get { return id_; }
      set { hasId = true;
        isIdChanged = true;
        id_ = value;}
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private bool isNameChanged = true;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
      set { hasName = true;
        isNameChanged = true;
        name_ = value;}
    }
    
    public const int CreateTimeFieldNumber = 4;
    private bool hasCreateTime;
    private bool isCreateTimeChanged = true;
    private long createTime_;
    public bool HasCreateTime {
      get { return hasCreateTime; }
    }
    public long CreateTime {
      get { return createTime_; }
      set { hasCreateTime = true;
        isCreateTimeChanged = true;
        createTime_ = value;}
    }
    
    public const int OwnerUidFieldNumber = 5;
    private bool hasOwnerUid;
    private bool isOwnerUidChanged = true;
    private string ownerUid_ = "";
    public bool HasOwnerUid {
      get { return hasOwnerUid; }
    }
    public string OwnerUid {
      get { return ownerUid_; }
      set { hasOwnerUid = true;
        isOwnerUidChanged = true;
        ownerUid_ = value;}
    }
    
    public const int LevelNameFieldNumber = 6;
    private bool hasLevelName;
    private bool isLevelNameChanged = true;
    private string levelName_ = "";
    public bool HasLevelName {
      get { return hasLevelName; }
    }
    public string LevelName {
      get { return levelName_; }
      set { hasLevelName = true;
        isLevelNameChanged = true;
        levelName_ = value;}
    }
    
    public const int GameVerFieldNumber = 10;
    private bool hasGameVer;
    private bool isGameVerChanged = true;
    private string gameVer_ = "";
    public bool HasGameVer {
      get { return hasGameVer; }
    }
    public string GameVer {
      get { return gameVer_; }
      set { hasGameVer = true;
        isGameVerChanged = true;
        gameVer_ = value;}
    }
    
    public const int MatchModeFieldNumber = 50;
    private bool hasMatchMode;
    private global::Protocol.MatchMode matchMode_ = global::Protocol.MatchMode.SINGLE;
    private bool isMatchModeChanged = true;
    public bool HasMatchMode {
      get { return hasMatchMode; }
    }
    public global::Protocol.MatchMode MatchMode {
      get { return matchMode_; }
      set { hasMatchMode = true;
        isMatchModeChanged = true;
        matchMode_ = value;}
    }
    
    public const int StatusFieldNumber = 100;
    private bool hasStatus;
    private global::Protocol.GameStatus status_ = global::Protocol.GameStatus.GS_IDLE;
    private bool isStatusChanged = true;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public global::Protocol.GameStatus Status {
      get { return status_; }
      set { hasStatus = true;
        isStatusChanged = true;
        status_ = value;}
    }
    
    public const int CurBattleIdFieldNumber = 101;
    private bool hasCurBattleId;
    private bool isCurBattleIdChanged = true;
    private string curBattleId_ = "";
    public bool HasCurBattleId {
      get { return hasCurBattleId; }
    }
    public string CurBattleId {
      get { return curBattleId_; }
      set { hasCurBattleId = true;
        isCurBattleIdChanged = true;
        curBattleId_ = value;}
    }
    
    public const int UserInfosFieldNumber = 255;
    private pbc::PopsicleList<global::Protocol.PlayerUserInfo> userInfos_ = new pbc::PopsicleList<global::Protocol.PlayerUserInfo>();
    public scg::IList<global::Protocol.PlayerUserInfo> UserInfos {
      get { return pbc::Lists.AsReadOnly(userInfos_); }
    }
    public int UserInfosCount {
      get { return userInfos_.Count; }
    }
    public global::Protocol.PlayerUserInfo GetUserInfos(int index) {
      return userInfos_[index];
    }
    public global::Protocol.PlayerUserInfo FindUserInfos(System.Predicate<global::Protocol.PlayerUserInfo> match) {
      return userInfos_.Find(match);
    }
    public System.Collections.Generic.IList<global::Protocol.PlayerUserInfo> FindAllUserInfos(System.Predicate<global::Protocol.PlayerUserInfo> match) {
      return userInfos_.FindAll(match);
    }
    public void SetUserInfos(int index, global::Protocol.PlayerUserInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (index < 0 || index >= userInfos_.Count) return;
      userInfos_[index] = value;
    }
    public void AddUserInfos(global::Protocol.PlayerUserInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      userInfos_.Add(value);
    }
    public void AddRangeUserInfos(scg::IEnumerable<global::Protocol.PlayerUserInfo> values) {
      userInfos_.Add(values);
    }
    public void RemoveUserInfos(global::Protocol.PlayerUserInfo value) {
      if (!userInfos_.Contains(value)) return;
      userInfos_.Remove(value);
    }
    public void RemoveAtUserInfos(int index) {
      if (index < 0 || index >= userInfos_.Count) return;
      userInfos_.RemoveAt(index);
    }
    public void ClearUserInfos() {
      if (userInfos_.Count <= 0) return;
      userInfos_.Clear();
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Protocol.PlayerUserInfo element in UserInfos) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _roomFieldNames;
      if (hasId) {
        output.WriteUInt64(1, field_names[3], Id);
      }
      if (hasName) {
        output.WriteString(3, field_names[6], Name);
      }
      if (hasCreateTime) {
        output.WriteInt64(4, field_names[0], CreateTime);
      }
      if (hasOwnerUid) {
        output.WriteString(5, field_names[7], OwnerUid);
      }
      if (hasLevelName) {
        output.WriteString(6, field_names[4], LevelName);
      }
      if (hasGameVer) {
        output.WriteString(10, field_names[2], GameVer);
      }
      if (hasMatchMode) {
        output.WriteEnum(50, field_names[5], (int) MatchMode, MatchMode);
      }
      if (hasStatus) {
        output.WriteEnum(100, field_names[8], (int) Status, Status);
      }
      if (hasCurBattleId) {
        output.WriteString(101, field_names[1], CurBattleId);
      }
      if (userInfos_.Count > 0) {
        output.WriteMessageArray(255, field_names[9], userInfos_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Id);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Name);
      }
      if (hasCreateTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(4, CreateTime);
      }
      if (hasOwnerUid) {
        size += pb::CodedOutputStream.ComputeStringSize(5, OwnerUid);
      }
      if (hasLevelName) {
        size += pb::CodedOutputStream.ComputeStringSize(6, LevelName);
      }
      if (hasGameVer) {
        size += pb::CodedOutputStream.ComputeStringSize(10, GameVer);
      }
      if (hasMatchMode) {
        size += pb::CodedOutputStream.ComputeEnumSize(50, (int) MatchMode);
      }
      if (hasStatus) {
        size += pb::CodedOutputStream.ComputeEnumSize(100, (int) Status);
      }
      if (hasCurBattleId) {
        size += pb::CodedOutputStream.ComputeStringSize(101, CurBattleId);
      }
      foreach (global::Protocol.PlayerUserInfo element in UserInfos) {
        size += pb::CodedOutputStream.ComputeMessageSize(255, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public Room CommitChange() {
      Room other = new Room();
      bool isChange = false;
      if (isIdChanged) {
        isChange = true;
        other.Id = Id;
        isIdChanged = false;
      }
      if (isNameChanged) {
        isChange = true;
        other.Name = Name;
        isNameChanged = false;
      }
      if (isCreateTimeChanged) {
        isChange = true;
        other.CreateTime = CreateTime;
        isCreateTimeChanged = false;
      }
      if (isOwnerUidChanged) {
        isChange = true;
        other.OwnerUid = OwnerUid;
        isOwnerUidChanged = false;
      }
      if (isLevelNameChanged) {
        isChange = true;
        other.LevelName = LevelName;
        isLevelNameChanged = false;
      }
      if (isGameVerChanged) {
        isChange = true;
        other.GameVer = GameVer;
        isGameVerChanged = false;
      }
      if (isMatchModeChanged) {
        isChange = true;
        other.MatchMode = MatchMode;
        isMatchModeChanged = false;
      }
      if (isStatusChanged) {
        isChange = true;
        other.Status = Status;
        isStatusChanged = false;
      }
      if (isCurBattleIdChanged) {
        isChange = true;
        other.CurBattleId = CurBattleId;
        isCurBattleIdChanged = false;
      }
      isChange = true;
      other.userInfos_.Add(userInfos_);
      return isChange?other:null;
    }
    
    public void MergeFrom(Room other, bool isFull = false) {
      if (other == global::Protocol.Room.DefaultInstance) return;
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasCreateTime) {
        CreateTime = other.CreateTime;
      }
      if (other.HasOwnerUid) {
        OwnerUid = other.OwnerUid;
      }
      if (other.HasLevelName) {
        LevelName = other.LevelName;
      }
      if (other.HasGameVer) {
        GameVer = other.GameVer;
      }
      if (other.HasMatchMode) {
        MatchMode = other.MatchMode;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasCurBattleId) {
        CurBattleId = other.CurBattleId;
      }
        userInfos_.Clear();
        userInfos_.Add(other.userInfos_);
    }
    
    public static Room ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Room ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Room ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Room ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Room ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Room ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Room ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Room ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Room ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Room ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Room MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Room prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Room, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Room cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Room result;
      
      private Room PrepareBuilder() {
        if (resultIsReadOnly) {
          Room original = result;
          result = new Room();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Room MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.Room.Descriptor; }
      }
      
      public override Room DefaultInstanceForType {
        get { return global::Protocol.Room.DefaultInstance; }
      }
      
      public override Room BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Room) {
          return MergeFrom((Room) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Room other) {
        if (other == global::Protocol.Room.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasCreateTime) {
          CreateTime = other.CreateTime;
        }
        if (other.HasOwnerUid) {
          OwnerUid = other.OwnerUid;
        }
        if (other.HasLevelName) {
          LevelName = other.LevelName;
        }
        if (other.HasGameVer) {
          GameVer = other.GameVer;
        }
        if (other.HasMatchMode) {
          MatchMode = other.MatchMode;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasCurBattleId) {
          CurBattleId = other.CurBattleId;
        }
        if (other.userInfos_.Count != 0) {
          result.userInfos_.Add(other.userInfos_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_roomFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _roomFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt64(ref result.id_);
              break;
            }
            case 26: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 32: {
              result.hasCreateTime = input.ReadInt64(ref result.createTime_);
              break;
            }
            case 42: {
              result.hasOwnerUid = input.ReadString(ref result.ownerUid_);
              break;
            }
            case 50: {
              result.hasLevelName = input.ReadString(ref result.levelName_);
              break;
            }
            case 82: {
              result.hasGameVer = input.ReadString(ref result.gameVer_);
              break;
            }
            case 400: {
              object unknown;
              if(input.ReadEnum(ref result.matchMode_, out unknown)) {
                result.hasMatchMode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(50, (ulong)(int)unknown);
              }
              break;
            }
            case 800: {
              object unknown;
              if(input.ReadEnum(ref result.status_, out unknown)) {
                result.hasStatus = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(100, (ulong)(int)unknown);
              }
              break;
            }
            case 810: {
              result.hasCurBattleId = input.ReadString(ref result.curBattleId_);
              break;
            }
            case 2042: {
              input.ReadMessageArray(tag, field_name, result.userInfos_, global::Protocol.PlayerUserInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetId(ulong value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0UL;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasCreateTime {
        get { return result.hasCreateTime; }
      }
      public long CreateTime {
        get { return result.CreateTime; }
        set { SetCreateTime(value); }
      }
      public Builder SetCreateTime(long value) {
        PrepareBuilder();
        result.hasCreateTime = true;
        result.createTime_ = value;
        return this;
      }
      public Builder ClearCreateTime() {
        PrepareBuilder();
        result.hasCreateTime = false;
        result.createTime_ = 0L;
        return this;
      }
      
      public bool HasOwnerUid {
        get { return result.hasOwnerUid; }
      }
      public string OwnerUid {
        get { return result.OwnerUid; }
        set { SetOwnerUid(value); }
      }
      public Builder SetOwnerUid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOwnerUid = true;
        result.ownerUid_ = value;
        return this;
      }
      public Builder ClearOwnerUid() {
        PrepareBuilder();
        result.hasOwnerUid = false;
        result.ownerUid_ = "";
        return this;
      }
      
      public bool HasLevelName {
        get { return result.hasLevelName; }
      }
      public string LevelName {
        get { return result.LevelName; }
        set { SetLevelName(value); }
      }
      public Builder SetLevelName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLevelName = true;
        result.levelName_ = value;
        return this;
      }
      public Builder ClearLevelName() {
        PrepareBuilder();
        result.hasLevelName = false;
        result.levelName_ = "";
        return this;
      }
      
      public bool HasGameVer {
        get { return result.hasGameVer; }
      }
      public string GameVer {
        get { return result.GameVer; }
        set { SetGameVer(value); }
      }
      public Builder SetGameVer(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameVer = true;
        result.gameVer_ = value;
        return this;
      }
      public Builder ClearGameVer() {
        PrepareBuilder();
        result.hasGameVer = false;
        result.gameVer_ = "";
        return this;
      }
      
      public bool HasMatchMode {
       get { return result.hasMatchMode; }
      }
      public global::Protocol.MatchMode MatchMode {
        get { return result.MatchMode; }
        set { SetMatchMode(value); }
      }
      public Builder SetMatchMode(global::Protocol.MatchMode value) {
        PrepareBuilder();
        result.hasMatchMode = true;
        result.matchMode_ = value;
        return this;
      }
      public Builder ClearMatchMode() {
        PrepareBuilder();
        result.hasMatchMode = false;
        result.matchMode_ = global::Protocol.MatchMode.SINGLE;
        return this;
      }
      
      public bool HasStatus {
       get { return result.hasStatus; }
      }
      public global::Protocol.GameStatus Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(global::Protocol.GameStatus value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = global::Protocol.GameStatus.GS_IDLE;
        return this;
      }
      
      public bool HasCurBattleId {
        get { return result.hasCurBattleId; }
      }
      public string CurBattleId {
        get { return result.CurBattleId; }
        set { SetCurBattleId(value); }
      }
      public Builder SetCurBattleId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCurBattleId = true;
        result.curBattleId_ = value;
        return this;
      }
      public Builder ClearCurBattleId() {
        PrepareBuilder();
        result.hasCurBattleId = false;
        result.curBattleId_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::Protocol.PlayerUserInfo> UserInfos {
        get { return PrepareBuilder().userInfos_; }
      }
      public int UserInfosCount {
        get { return result.UserInfosCount; }
      }
      public global::Protocol.PlayerUserInfo GetUserInfos(int index) {
        return result.GetUserInfos(index);
      }
      public Builder SetUserInfos(int index, global::Protocol.PlayerUserInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.userInfos_[index] = value;
        return this;
      }
      public Builder SetUserInfos(int index, global::Protocol.PlayerUserInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.userInfos_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUserInfos(global::Protocol.PlayerUserInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.userInfos_.Add(value);
        return this;
      }
      public Builder AddUserInfos(global::Protocol.PlayerUserInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.userInfos_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUserInfos(scg::IEnumerable<global::Protocol.PlayerUserInfo> values) {
        PrepareBuilder();
        result.userInfos_.Add(values);
        return this;
      }
      public Builder ClearUserInfos() {
        PrepareBuilder();
        result.userInfos_.Clear();
        return this;
      }
    }
    static Room() {
      object.ReferenceEquals(global::Protocol.ProtoDatamodel.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RoomDesc : pb::GeneratedMessage<RoomDesc, RoomDesc.Builder> {
    public RoomDesc() { }
    private static readonly RoomDesc defaultInstance = new RoomDesc().MakeReadOnly();
    private static readonly string[] _roomDescFieldNames = new string[] { "create_time", "id", "match_mode", "name", "owner_uid", "percent", "status" };
    private static readonly uint[] _roomDescFieldTags = new uint[] { 32, 8, 400, 26, 42, 162, 800 };
    public static RoomDesc DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RoomDesc DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RoomDesc ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoDatamodel.internal__static_Protocol_RoomDesc__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RoomDesc, RoomDesc.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoDatamodel.internal__static_Protocol_RoomDesc__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private bool isIdChanged = true;
    private ulong id_;
    public bool HasId {
      get { return hasId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Id {
      get { return id_; }
      set { hasId = true;
        isIdChanged = true;
        id_ = value;}
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private bool isNameChanged = true;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
      set { hasName = true;
        isNameChanged = true;
        name_ = value;}
    }
    
    public const int CreateTimeFieldNumber = 4;
    private bool hasCreateTime;
    private bool isCreateTimeChanged = true;
    private long createTime_;
    public bool HasCreateTime {
      get { return hasCreateTime; }
    }
    public long CreateTime {
      get { return createTime_; }
      set { hasCreateTime = true;
        isCreateTimeChanged = true;
        createTime_ = value;}
    }
    
    public const int OwnerUidFieldNumber = 5;
    private bool hasOwnerUid;
    private bool isOwnerUidChanged = true;
    private string ownerUid_ = "";
    public bool HasOwnerUid {
      get { return hasOwnerUid; }
    }
    public string OwnerUid {
      get { return ownerUid_; }
      set { hasOwnerUid = true;
        isOwnerUidChanged = true;
        ownerUid_ = value;}
    }
    
    public const int PercentFieldNumber = 20;
    private bool hasPercent;
    private bool isPercentChanged = true;
    private string percent_ = "";
    public bool HasPercent {
      get { return hasPercent; }
    }
    public string Percent {
      get { return percent_; }
      set { hasPercent = true;
        isPercentChanged = true;
        percent_ = value;}
    }
    
    public const int MatchModeFieldNumber = 50;
    private bool hasMatchMode;
    private bool isMatchModeChanged = true;
    private int matchMode_;
    public bool HasMatchMode {
      get { return hasMatchMode; }
    }
    public int MatchMode {
      get { return matchMode_; }
      set { hasMatchMode = true;
        isMatchModeChanged = true;
        matchMode_ = value;}
    }
    
    public const int StatusFieldNumber = 100;
    private bool hasStatus;
    private bool isStatusChanged = true;
    private int status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public int Status {
      get { return status_; }
      set { hasStatus = true;
        isStatusChanged = true;
        status_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _roomDescFieldNames;
      if (hasId) {
        output.WriteUInt64(1, field_names[1], Id);
      }
      if (hasName) {
        output.WriteString(3, field_names[3], Name);
      }
      if (hasCreateTime) {
        output.WriteInt64(4, field_names[0], CreateTime);
      }
      if (hasOwnerUid) {
        output.WriteString(5, field_names[4], OwnerUid);
      }
      if (hasPercent) {
        output.WriteString(20, field_names[5], Percent);
      }
      if (hasMatchMode) {
        output.WriteInt32(50, field_names[2], MatchMode);
      }
      if (hasStatus) {
        output.WriteInt32(100, field_names[6], Status);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Id);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Name);
      }
      if (hasCreateTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(4, CreateTime);
      }
      if (hasOwnerUid) {
        size += pb::CodedOutputStream.ComputeStringSize(5, OwnerUid);
      }
      if (hasPercent) {
        size += pb::CodedOutputStream.ComputeStringSize(20, Percent);
      }
      if (hasMatchMode) {
        size += pb::CodedOutputStream.ComputeInt32Size(50, MatchMode);
      }
      if (hasStatus) {
        size += pb::CodedOutputStream.ComputeInt32Size(100, Status);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public RoomDesc CommitChange() {
      RoomDesc other = new RoomDesc();
      bool isChange = false;
      if (isIdChanged) {
        isChange = true;
        other.Id = Id;
        isIdChanged = false;
      }
      if (isNameChanged) {
        isChange = true;
        other.Name = Name;
        isNameChanged = false;
      }
      if (isCreateTimeChanged) {
        isChange = true;
        other.CreateTime = CreateTime;
        isCreateTimeChanged = false;
      }
      if (isOwnerUidChanged) {
        isChange = true;
        other.OwnerUid = OwnerUid;
        isOwnerUidChanged = false;
      }
      if (isPercentChanged) {
        isChange = true;
        other.Percent = Percent;
        isPercentChanged = false;
      }
      if (isMatchModeChanged) {
        isChange = true;
        other.MatchMode = MatchMode;
        isMatchModeChanged = false;
      }
      if (isStatusChanged) {
        isChange = true;
        other.Status = Status;
        isStatusChanged = false;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(RoomDesc other, bool isFull = false) {
      if (other == global::Protocol.RoomDesc.DefaultInstance) return;
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasCreateTime) {
        CreateTime = other.CreateTime;
      }
      if (other.HasOwnerUid) {
        OwnerUid = other.OwnerUid;
      }
      if (other.HasPercent) {
        Percent = other.Percent;
      }
      if (other.HasMatchMode) {
        MatchMode = other.MatchMode;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
    }
    
    public static RoomDesc ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RoomDesc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RoomDesc ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RoomDesc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RoomDesc ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RoomDesc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RoomDesc ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RoomDesc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RoomDesc ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RoomDesc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RoomDesc MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RoomDesc prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<RoomDesc, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RoomDesc cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RoomDesc result;
      
      private RoomDesc PrepareBuilder() {
        if (resultIsReadOnly) {
          RoomDesc original = result;
          result = new RoomDesc();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RoomDesc MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.RoomDesc.Descriptor; }
      }
      
      public override RoomDesc DefaultInstanceForType {
        get { return global::Protocol.RoomDesc.DefaultInstance; }
      }
      
      public override RoomDesc BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RoomDesc) {
          return MergeFrom((RoomDesc) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RoomDesc other) {
        if (other == global::Protocol.RoomDesc.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasCreateTime) {
          CreateTime = other.CreateTime;
        }
        if (other.HasOwnerUid) {
          OwnerUid = other.OwnerUid;
        }
        if (other.HasPercent) {
          Percent = other.Percent;
        }
        if (other.HasMatchMode) {
          MatchMode = other.MatchMode;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_roomDescFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _roomDescFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt64(ref result.id_);
              break;
            }
            case 26: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 32: {
              result.hasCreateTime = input.ReadInt64(ref result.createTime_);
              break;
            }
            case 42: {
              result.hasOwnerUid = input.ReadString(ref result.ownerUid_);
              break;
            }
            case 162: {
              result.hasPercent = input.ReadString(ref result.percent_);
              break;
            }
            case 400: {
              result.hasMatchMode = input.ReadInt32(ref result.matchMode_);
              break;
            }
            case 800: {
              result.hasStatus = input.ReadInt32(ref result.status_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetId(ulong value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0UL;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasCreateTime {
        get { return result.hasCreateTime; }
      }
      public long CreateTime {
        get { return result.CreateTime; }
        set { SetCreateTime(value); }
      }
      public Builder SetCreateTime(long value) {
        PrepareBuilder();
        result.hasCreateTime = true;
        result.createTime_ = value;
        return this;
      }
      public Builder ClearCreateTime() {
        PrepareBuilder();
        result.hasCreateTime = false;
        result.createTime_ = 0L;
        return this;
      }
      
      public bool HasOwnerUid {
        get { return result.hasOwnerUid; }
      }
      public string OwnerUid {
        get { return result.OwnerUid; }
        set { SetOwnerUid(value); }
      }
      public Builder SetOwnerUid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOwnerUid = true;
        result.ownerUid_ = value;
        return this;
      }
      public Builder ClearOwnerUid() {
        PrepareBuilder();
        result.hasOwnerUid = false;
        result.ownerUid_ = "";
        return this;
      }
      
      public bool HasPercent {
        get { return result.hasPercent; }
      }
      public string Percent {
        get { return result.Percent; }
        set { SetPercent(value); }
      }
      public Builder SetPercent(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPercent = true;
        result.percent_ = value;
        return this;
      }
      public Builder ClearPercent() {
        PrepareBuilder();
        result.hasPercent = false;
        result.percent_ = "";
        return this;
      }
      
      public bool HasMatchMode {
        get { return result.hasMatchMode; }
      }
      public int MatchMode {
        get { return result.MatchMode; }
        set { SetMatchMode(value); }
      }
      public Builder SetMatchMode(int value) {
        PrepareBuilder();
        result.hasMatchMode = true;
        result.matchMode_ = value;
        return this;
      }
      public Builder ClearMatchMode() {
        PrepareBuilder();
        result.hasMatchMode = false;
        result.matchMode_ = 0;
        return this;
      }
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      public int Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(int value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
    }
    static RoomDesc() {
      object.ReferenceEquals(global::Protocol.ProtoDatamodel.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SettlementResult : pb::GeneratedMessage<SettlementResult, SettlementResult.Builder> {
    public SettlementResult() { }
    private static readonly SettlementResult defaultInstance = new SettlementResult().MakeReadOnly();
    private static readonly string[] _settlementResultFieldNames = new string[] { "clue_count", "coin", "exp", "kill_count", "result_state", "uid" };
    private static readonly uint[] _settlementResultFieldTags = new uint[] { 32, 88, 80, 24, 16, 10 };
    public static SettlementResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SettlementResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SettlementResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoDatamodel.internal__static_Protocol_SettlementResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SettlementResult, SettlementResult.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoDatamodel.internal__static_Protocol_SettlementResult__FieldAccessorTable; }
    }
    
    public const int UidFieldNumber = 1;
    private bool hasUid;
    private bool isUidChanged = true;
    private string uid_ = "";
    public bool HasUid {
      get { return hasUid; }
    }
    public string Uid {
      get { return uid_; }
      set { hasUid = true;
        isUidChanged = true;
        uid_ = value;}
    }
    
    public const int ResultStateFieldNumber = 2;
    private bool hasResultState;
    private bool isResultStateChanged = true;
    private uint resultState_;
    public bool HasResultState {
      get { return hasResultState; }
    }
    [global::System.CLSCompliant(false)]
    public uint ResultState {
      get { return resultState_; }
      set { hasResultState = true;
        isResultStateChanged = true;
        resultState_ = value;}
    }
    
    public const int KillCountFieldNumber = 3;
    private bool hasKillCount;
    private bool isKillCountChanged = true;
    private uint killCount_;
    public bool HasKillCount {
      get { return hasKillCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint KillCount {
      get { return killCount_; }
      set { hasKillCount = true;
        isKillCountChanged = true;
        killCount_ = value;}
    }
    
    public const int ClueCountFieldNumber = 4;
    private bool hasClueCount;
    private bool isClueCountChanged = true;
    private uint clueCount_;
    public bool HasClueCount {
      get { return hasClueCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint ClueCount {
      get { return clueCount_; }
      set { hasClueCount = true;
        isClueCountChanged = true;
        clueCount_ = value;}
    }
    
    public const int ExpFieldNumber = 10;
    private bool hasExp;
    private bool isExpChanged = true;
    private int exp_;
    public bool HasExp {
      get { return hasExp; }
    }
    public int Exp {
      get { return exp_; }
      set { hasExp = true;
        isExpChanged = true;
        exp_ = value;}
    }
    
    public const int CoinFieldNumber = 11;
    private bool hasCoin;
    private bool isCoinChanged = true;
    private int coin_;
    public bool HasCoin {
      get { return hasCoin; }
    }
    public int Coin {
      get { return coin_; }
      set { hasCoin = true;
        isCoinChanged = true;
        coin_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _settlementResultFieldNames;
      if (hasUid) {
        output.WriteString(1, field_names[5], Uid);
      }
      if (hasResultState) {
        output.WriteUInt32(2, field_names[4], ResultState);
      }
      if (hasKillCount) {
        output.WriteUInt32(3, field_names[3], KillCount);
      }
      if (hasClueCount) {
        output.WriteUInt32(4, field_names[0], ClueCount);
      }
      if (hasExp) {
        output.WriteInt32(10, field_names[2], Exp);
      }
      if (hasCoin) {
        output.WriteInt32(11, field_names[1], Coin);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasUid) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Uid);
      }
      if (hasResultState) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ResultState);
      }
      if (hasKillCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, KillCount);
      }
      if (hasClueCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, ClueCount);
      }
      if (hasExp) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, Exp);
      }
      if (hasCoin) {
        size += pb::CodedOutputStream.ComputeInt32Size(11, Coin);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public SettlementResult CommitChange() {
      SettlementResult other = new SettlementResult();
      bool isChange = false;
      if (isUidChanged) {
        isChange = true;
        other.Uid = Uid;
        isUidChanged = false;
      }
      if (isResultStateChanged) {
        isChange = true;
        other.ResultState = ResultState;
        isResultStateChanged = false;
      }
      if (isKillCountChanged) {
        isChange = true;
        other.KillCount = KillCount;
        isKillCountChanged = false;
      }
      if (isClueCountChanged) {
        isChange = true;
        other.ClueCount = ClueCount;
        isClueCountChanged = false;
      }
      if (isExpChanged) {
        isChange = true;
        other.Exp = Exp;
        isExpChanged = false;
      }
      if (isCoinChanged) {
        isChange = true;
        other.Coin = Coin;
        isCoinChanged = false;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(SettlementResult other, bool isFull = false) {
      if (other == global::Protocol.SettlementResult.DefaultInstance) return;
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasResultState) {
        ResultState = other.ResultState;
      }
      if (other.HasKillCount) {
        KillCount = other.KillCount;
      }
      if (other.HasClueCount) {
        ClueCount = other.ClueCount;
      }
      if (other.HasExp) {
        Exp = other.Exp;
      }
      if (other.HasCoin) {
        Coin = other.Coin;
      }
    }
    
    public static SettlementResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SettlementResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SettlementResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SettlementResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SettlementResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SettlementResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SettlementResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SettlementResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SettlementResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SettlementResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SettlementResult MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SettlementResult prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SettlementResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SettlementResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SettlementResult result;
      
      private SettlementResult PrepareBuilder() {
        if (resultIsReadOnly) {
          SettlementResult original = result;
          result = new SettlementResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SettlementResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.SettlementResult.Descriptor; }
      }
      
      public override SettlementResult DefaultInstanceForType {
        get { return global::Protocol.SettlementResult.DefaultInstance; }
      }
      
      public override SettlementResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SettlementResult) {
          return MergeFrom((SettlementResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SettlementResult other) {
        if (other == global::Protocol.SettlementResult.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUid) {
          Uid = other.Uid;
        }
        if (other.HasResultState) {
          ResultState = other.ResultState;
        }
        if (other.HasKillCount) {
          KillCount = other.KillCount;
        }
        if (other.HasClueCount) {
          ClueCount = other.ClueCount;
        }
        if (other.HasExp) {
          Exp = other.Exp;
        }
        if (other.HasCoin) {
          Coin = other.Coin;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_settlementResultFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _settlementResultFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUid = input.ReadString(ref result.uid_);
              break;
            }
            case 16: {
              result.hasResultState = input.ReadUInt32(ref result.resultState_);
              break;
            }
            case 24: {
              result.hasKillCount = input.ReadUInt32(ref result.killCount_);
              break;
            }
            case 32: {
              result.hasClueCount = input.ReadUInt32(ref result.clueCount_);
              break;
            }
            case 80: {
              result.hasExp = input.ReadInt32(ref result.exp_);
              break;
            }
            case 88: {
              result.hasCoin = input.ReadInt32(ref result.coin_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUid {
        get { return result.hasUid; }
      }
      public string Uid {
        get { return result.Uid; }
        set { SetUid(value); }
      }
      public Builder SetUid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUid = true;
        result.uid_ = value;
        return this;
      }
      public Builder ClearUid() {
        PrepareBuilder();
        result.hasUid = false;
        result.uid_ = "";
        return this;
      }
      
      public bool HasResultState {
        get { return result.hasResultState; }
      }
      [global::System.CLSCompliant(false)]
      public uint ResultState {
        get { return result.ResultState; }
        set { SetResultState(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetResultState(uint value) {
        PrepareBuilder();
        result.hasResultState = true;
        result.resultState_ = value;
        return this;
      }
      public Builder ClearResultState() {
        PrepareBuilder();
        result.hasResultState = false;
        result.resultState_ = 0;
        return this;
      }
      
      public bool HasKillCount {
        get { return result.hasKillCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint KillCount {
        get { return result.KillCount; }
        set { SetKillCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetKillCount(uint value) {
        PrepareBuilder();
        result.hasKillCount = true;
        result.killCount_ = value;
        return this;
      }
      public Builder ClearKillCount() {
        PrepareBuilder();
        result.hasKillCount = false;
        result.killCount_ = 0;
        return this;
      }
      
      public bool HasClueCount {
        get { return result.hasClueCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint ClueCount {
        get { return result.ClueCount; }
        set { SetClueCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetClueCount(uint value) {
        PrepareBuilder();
        result.hasClueCount = true;
        result.clueCount_ = value;
        return this;
      }
      public Builder ClearClueCount() {
        PrepareBuilder();
        result.hasClueCount = false;
        result.clueCount_ = 0;
        return this;
      }
      
      public bool HasExp {
        get { return result.hasExp; }
      }
      public int Exp {
        get { return result.Exp; }
        set { SetExp(value); }
      }
      public Builder SetExp(int value) {
        PrepareBuilder();
        result.hasExp = true;
        result.exp_ = value;
        return this;
      }
      public Builder ClearExp() {
        PrepareBuilder();
        result.hasExp = false;
        result.exp_ = 0;
        return this;
      }
      
      public bool HasCoin {
        get { return result.hasCoin; }
      }
      public int Coin {
        get { return result.Coin; }
        set { SetCoin(value); }
      }
      public Builder SetCoin(int value) {
        PrepareBuilder();
        result.hasCoin = true;
        result.coin_ = value;
        return this;
      }
      public Builder ClearCoin() {
        PrepareBuilder();
        result.hasCoin = false;
        result.coin_ = 0;
        return this;
      }
    }
    static SettlementResult() {
      object.ReferenceEquals(global::Protocol.ProtoDatamodel.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
