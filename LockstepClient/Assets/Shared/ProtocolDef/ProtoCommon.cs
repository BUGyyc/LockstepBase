// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Protocol {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class ProtoCommon {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Protocol_Float3__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.Float3, global::Protocol.Float3.Builder> internal__static_Protocol_Float3__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_Float4__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.Float4, global::Protocol.Float4.Builder> internal__static_Protocol_Float4__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_Int3__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.Int3, global::Protocol.Int3.Builder> internal__static_Protocol_Int3__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_Int4__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.Int4, global::Protocol.Int4.Builder> internal__static_Protocol_Int4__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_BoxColliderData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.BoxColliderData, global::Protocol.BoxColliderData.Builder> internal__static_Protocol_BoxColliderData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_EntityEvent__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.EntityEvent, global::Protocol.EntityEvent.Builder> internal__static_Protocol_EntityEvent__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static ProtoCommon() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJwcm90b19jb21tb24ucHJvdG8SCFByb3RvY29sIjIKBkZsb2F0MxIMCgF4", 
            "GAEgASgCUgF4EgwKAXkYAiABKAJSAXkSDAoBehgDIAEoAlIBeiJACgZGbG9h", 
            "dDQSDAoBeBgBIAEoAlIBeBIMCgF5GAIgASgCUgF5EgwKAXoYAyABKAJSAXoS", 
            "DAoBdxgEIAEoAlIBdyIwCgRJbnQzEgwKAXgYASABKAVSAXgSDAoBeRgCIAEo", 
            "BVIBeRIMCgF6GAMgASgFUgF6Ij4KBEludDQSDAoBeBgBIAEoBVIBeBIMCgF5", 
            "GAIgASgFUgF5EgwKAXoYAyABKAVSAXoSDAoBdxgEIAEoBVIBdyJhCg9Cb3hD", 
            "b2xsaWRlckRhdGESKAoGY2VudGVyGAEgAigLMhAuUHJvdG9jb2wuRmxvYXQz", 
            "UgZjZW50ZXISJAoEc2l6ZRgCIAIoCzIQLlByb3RvY29sLkZsb2F0M1IEc2l6", 
            "ZSKiAQoLRW50aXR5RXZlbnQSGwoJZW50aXR5X2lkGAEgAigNUghlbnRpdHlJ", 
            "ZBIZCghldmVudF9pZBgCIAIoDVIHZXZlbnRJZBIfCgtzdHJpbmdfZGF0YRgD", 
            "IAEoCVIKc3RyaW5nRGF0YRIbCgl1aW50X2RhdGEYBCABKA1SCHVpbnREYXRh", 
            "Eh0KCmZsb2F0X2RhdGEYBSABKAJSCWZsb2F0RGF0YSpnCgtUZXJyYWluVHlw", 
            "ZRINCglUVF9EZWVwXzUQABINCglUVF9EZWVwXzQQARINCglUVF9EZWVwXzMQ", 
            "AhINCglUVF9EZWVwXzIQAxINCglUVF9EZWVwXzEQBBINCglUVF9Ob3JtYWwQ", 
            "BSomCgpQbGF5ZXJUeXBlEg0KCVBUX1BsYXllchAAEgkKBVBUX0FJEAEqLgoL", 
            "UGFzc2VyU3RhdGUSCAoESWRsZRAAEggKBFdhbEsQARILCgdTaG9ja2VkEAIq", 
            "GwoHVGFnVHlwZRIQCgxUYWdfSGlkZUFyZWEQACoVCglUaGluZ1R5cGUSCAoE", 
            "Tm9uZRAAKiUKCEJvcm5UeXBlEgwKCFJpZ2h0Tm93EAASCwoHRHluYW1pYxAB", 
            "KjwKDEhleERpcmVjdGlvbhIGCgJORRAAEgUKAUUQARIGCgJTRRACEgYKAlNX", 
            "EAMSBQoBVxAEEgYKAk5XEAUqNAoNSG90RWZmZWN0VHlwZRIPCgtIRVRfQURE", 
            "QlVGRhAAEhIKDkhFVF9SRU1PVkVCVUZGEAEqVwoNSGVyb1Bvd2VyVHlwZRIM", 
            "CghOb1dlYXBvbhAAEgcKA0JvdxABEgoKBkRvdWJsZRACEgkKBU1hZ2ljEAMS", 
          "DQoJU2luZ2xlVHdvEAQSCQoFU3dvcmQQBQ=="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Protocol_Float3__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Protocol_Float3__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.Float3, global::Protocol.Float3.Builder>(internal__static_Protocol_Float3__Descriptor,
                new string[] { "X", "Y", "Z", });
        internal__static_Protocol_Float4__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Protocol_Float4__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.Float4, global::Protocol.Float4.Builder>(internal__static_Protocol_Float4__Descriptor,
                new string[] { "X", "Y", "Z", "W", });
        internal__static_Protocol_Int3__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Protocol_Int3__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.Int3, global::Protocol.Int3.Builder>(internal__static_Protocol_Int3__Descriptor,
                new string[] { "X", "Y", "Z", });
        internal__static_Protocol_Int4__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Protocol_Int4__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.Int4, global::Protocol.Int4.Builder>(internal__static_Protocol_Int4__Descriptor,
                new string[] { "X", "Y", "Z", "W", });
        internal__static_Protocol_BoxColliderData__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Protocol_BoxColliderData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.BoxColliderData, global::Protocol.BoxColliderData.Builder>(internal__static_Protocol_BoxColliderData__Descriptor,
                new string[] { "Center", "Size", });
        internal__static_Protocol_EntityEvent__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Protocol_EntityEvent__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.EntityEvent, global::Protocol.EntityEvent.Builder>(internal__static_Protocol_EntityEvent__Descriptor,
                new string[] { "EntityId", "EventId", "StringData", "UintData", "FloatData", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum TerrainType {
    TT_Deep_5 = 0,
    TT_Deep_4 = 1,
    TT_Deep_3 = 2,
    TT_Deep_2 = 3,
    TT_Deep_1 = 4,
    TT_Normal = 5,
  }
  
  public enum PlayerType {
    PT_Player = 0,
    PT_AI = 1,
  }
  
  public enum PasserState {
    Idle = 0,
    WalK = 1,
    Shocked = 2,
  }
  
  public enum TagType {
    Tag_HideArea = 0,
  }
  
  public enum ThingType {
    None = 0,
  }
  
  public enum BornType {
    RightNow = 0,
    Dynamic = 1,
  }
  
  public enum HexDirection {
    NE = 0,
    E = 1,
    SE = 2,
    SW = 3,
    W = 4,
    NW = 5,
  }
  
  public enum HotEffectType {
    HET_ADDBUFF = 0,
    HET_REMOVEBUFF = 1,
  }
  
  public enum HeroPowerType {
    NoWeapon = 0,
    Bow = 1,
    Double = 2,
    Magic = 3,
    SingleTwo = 4,
    Sword = 5,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Float3 : pb::GeneratedMessage<Float3, Float3.Builder> {
    public Float3() { }
    private static readonly Float3 defaultInstance = new Float3().MakeReadOnly();
    private static readonly string[] _float3FieldNames = new string[] { "x", "y", "z" };
    private static readonly uint[] _float3FieldTags = new uint[] { 13, 21, 29 };
    public static Float3 DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Float3 DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Float3 ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoCommon.internal__static_Protocol_Float3__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Float3, Float3.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoCommon.internal__static_Protocol_Float3__FieldAccessorTable; }
    }
    
    public const int XFieldNumber = 1;
    private bool hasX;
    private bool isXChanged = true;
    private float x_;
    public bool HasX {
      get { return hasX; }
    }
    public float X {
      get { return x_; }
      set { hasX = true;
        isXChanged = true;
        x_ = value;}
    }
    
    public const int YFieldNumber = 2;
    private bool hasY;
    private bool isYChanged = true;
    private float y_;
    public bool HasY {
      get { return hasY; }
    }
    public float Y {
      get { return y_; }
      set { hasY = true;
        isYChanged = true;
        y_ = value;}
    }
    
    public const int ZFieldNumber = 3;
    private bool hasZ;
    private bool isZChanged = true;
    private float z_;
    public bool HasZ {
      get { return hasZ; }
    }
    public float Z {
      get { return z_; }
      set { hasZ = true;
        isZChanged = true;
        z_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _float3FieldNames;
      if (hasX) {
        output.WriteFloat(1, field_names[0], X);
      }
      if (hasY) {
        output.WriteFloat(2, field_names[1], Y);
      }
      if (hasZ) {
        output.WriteFloat(3, field_names[2], Z);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasX) {
        size += pb::CodedOutputStream.ComputeFloatSize(1, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, Y);
      }
      if (hasZ) {
        size += pb::CodedOutputStream.ComputeFloatSize(3, Z);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public Float3 CommitChange() {
      Float3 other = new Float3();
      bool isChange = false;
      if (isXChanged) {
        isChange = true;
        other.X = X;
        isXChanged = false;
      }
      if (isYChanged) {
        isChange = true;
        other.Y = Y;
        isYChanged = false;
      }
      if (isZChanged) {
        isChange = true;
        other.Z = Z;
        isZChanged = false;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(Float3 other, bool isFull = false) {
      if (other == global::Protocol.Float3.DefaultInstance) return;
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasZ) {
        Z = other.Z;
      }
    }
    
    public static Float3 ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Float3 ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Float3 ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Float3 ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Float3 ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Float3 ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Float3 ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Float3 ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Float3 ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Float3 ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Float3 MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Float3 prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Float3, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Float3 cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Float3 result;
      
      private Float3 PrepareBuilder() {
        if (resultIsReadOnly) {
          Float3 original = result;
          result = new Float3();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Float3 MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.Float3.Descriptor; }
      }
      
      public override Float3 DefaultInstanceForType {
        get { return global::Protocol.Float3.DefaultInstance; }
      }
      
      public override Float3 BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Float3) {
          return MergeFrom((Float3) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Float3 other) {
        if (other == global::Protocol.Float3.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        if (other.HasZ) {
          Z = other.Z;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_float3FieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _float3FieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasX = input.ReadFloat(ref result.x_);
              break;
            }
            case 21: {
              result.hasY = input.ReadFloat(ref result.y_);
              break;
            }
            case 29: {
              result.hasZ = input.ReadFloat(ref result.z_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasX {
        get { return result.hasX; }
      }
      public float X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(float value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0F;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public float Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(float value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0F;
        return this;
      }
      
      public bool HasZ {
        get { return result.hasZ; }
      }
      public float Z {
        get { return result.Z; }
        set { SetZ(value); }
      }
      public Builder SetZ(float value) {
        PrepareBuilder();
        result.hasZ = true;
        result.z_ = value;
        return this;
      }
      public Builder ClearZ() {
        PrepareBuilder();
        result.hasZ = false;
        result.z_ = 0F;
        return this;
      }
    }
    static Float3() {
      object.ReferenceEquals(global::Protocol.ProtoCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Float4 : pb::GeneratedMessage<Float4, Float4.Builder> {
    public Float4() { }
    private static readonly Float4 defaultInstance = new Float4().MakeReadOnly();
    private static readonly string[] _float4FieldNames = new string[] { "w", "x", "y", "z" };
    private static readonly uint[] _float4FieldTags = new uint[] { 37, 13, 21, 29 };
    public static Float4 DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Float4 DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Float4 ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoCommon.internal__static_Protocol_Float4__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Float4, Float4.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoCommon.internal__static_Protocol_Float4__FieldAccessorTable; }
    }
    
    public const int XFieldNumber = 1;
    private bool hasX;
    private bool isXChanged = true;
    private float x_;
    public bool HasX {
      get { return hasX; }
    }
    public float X {
      get { return x_; }
      set { hasX = true;
        isXChanged = true;
        x_ = value;}
    }
    
    public const int YFieldNumber = 2;
    private bool hasY;
    private bool isYChanged = true;
    private float y_;
    public bool HasY {
      get { return hasY; }
    }
    public float Y {
      get { return y_; }
      set { hasY = true;
        isYChanged = true;
        y_ = value;}
    }
    
    public const int ZFieldNumber = 3;
    private bool hasZ;
    private bool isZChanged = true;
    private float z_;
    public bool HasZ {
      get { return hasZ; }
    }
    public float Z {
      get { return z_; }
      set { hasZ = true;
        isZChanged = true;
        z_ = value;}
    }
    
    public const int WFieldNumber = 4;
    private bool hasW;
    private bool isWChanged = true;
    private float w_;
    public bool HasW {
      get { return hasW; }
    }
    public float W {
      get { return w_; }
      set { hasW = true;
        isWChanged = true;
        w_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _float4FieldNames;
      if (hasX) {
        output.WriteFloat(1, field_names[1], X);
      }
      if (hasY) {
        output.WriteFloat(2, field_names[2], Y);
      }
      if (hasZ) {
        output.WriteFloat(3, field_names[3], Z);
      }
      if (hasW) {
        output.WriteFloat(4, field_names[0], W);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasX) {
        size += pb::CodedOutputStream.ComputeFloatSize(1, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, Y);
      }
      if (hasZ) {
        size += pb::CodedOutputStream.ComputeFloatSize(3, Z);
      }
      if (hasW) {
        size += pb::CodedOutputStream.ComputeFloatSize(4, W);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public Float4 CommitChange() {
      Float4 other = new Float4();
      bool isChange = false;
      if (isXChanged) {
        isChange = true;
        other.X = X;
        isXChanged = false;
      }
      if (isYChanged) {
        isChange = true;
        other.Y = Y;
        isYChanged = false;
      }
      if (isZChanged) {
        isChange = true;
        other.Z = Z;
        isZChanged = false;
      }
      if (isWChanged) {
        isChange = true;
        other.W = W;
        isWChanged = false;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(Float4 other, bool isFull = false) {
      if (other == global::Protocol.Float4.DefaultInstance) return;
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasZ) {
        Z = other.Z;
      }
      if (other.HasW) {
        W = other.W;
      }
    }
    
    public static Float4 ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Float4 ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Float4 ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Float4 ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Float4 ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Float4 ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Float4 ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Float4 ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Float4 ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Float4 ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Float4 MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Float4 prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Float4, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Float4 cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Float4 result;
      
      private Float4 PrepareBuilder() {
        if (resultIsReadOnly) {
          Float4 original = result;
          result = new Float4();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Float4 MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.Float4.Descriptor; }
      }
      
      public override Float4 DefaultInstanceForType {
        get { return global::Protocol.Float4.DefaultInstance; }
      }
      
      public override Float4 BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Float4) {
          return MergeFrom((Float4) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Float4 other) {
        if (other == global::Protocol.Float4.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        if (other.HasZ) {
          Z = other.Z;
        }
        if (other.HasW) {
          W = other.W;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_float4FieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _float4FieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasX = input.ReadFloat(ref result.x_);
              break;
            }
            case 21: {
              result.hasY = input.ReadFloat(ref result.y_);
              break;
            }
            case 29: {
              result.hasZ = input.ReadFloat(ref result.z_);
              break;
            }
            case 37: {
              result.hasW = input.ReadFloat(ref result.w_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasX {
        get { return result.hasX; }
      }
      public float X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(float value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0F;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public float Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(float value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0F;
        return this;
      }
      
      public bool HasZ {
        get { return result.hasZ; }
      }
      public float Z {
        get { return result.Z; }
        set { SetZ(value); }
      }
      public Builder SetZ(float value) {
        PrepareBuilder();
        result.hasZ = true;
        result.z_ = value;
        return this;
      }
      public Builder ClearZ() {
        PrepareBuilder();
        result.hasZ = false;
        result.z_ = 0F;
        return this;
      }
      
      public bool HasW {
        get { return result.hasW; }
      }
      public float W {
        get { return result.W; }
        set { SetW(value); }
      }
      public Builder SetW(float value) {
        PrepareBuilder();
        result.hasW = true;
        result.w_ = value;
        return this;
      }
      public Builder ClearW() {
        PrepareBuilder();
        result.hasW = false;
        result.w_ = 0F;
        return this;
      }
    }
    static Float4() {
      object.ReferenceEquals(global::Protocol.ProtoCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Int3 : pb::GeneratedMessage<Int3, Int3.Builder> {
    public Int3() { }
    private static readonly Int3 defaultInstance = new Int3().MakeReadOnly();
    private static readonly string[] _int3FieldNames = new string[] { "x", "y", "z" };
    private static readonly uint[] _int3FieldTags = new uint[] { 8, 16, 24 };
    public static Int3 DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Int3 DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Int3 ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoCommon.internal__static_Protocol_Int3__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Int3, Int3.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoCommon.internal__static_Protocol_Int3__FieldAccessorTable; }
    }
    
    public const int XFieldNumber = 1;
    private bool hasX;
    private bool isXChanged = true;
    private int x_;
    public bool HasX {
      get { return hasX; }
    }
    public int X {
      get { return x_; }
      set { hasX = true;
        isXChanged = true;
        x_ = value;}
    }
    
    public const int YFieldNumber = 2;
    private bool hasY;
    private bool isYChanged = true;
    private int y_;
    public bool HasY {
      get { return hasY; }
    }
    public int Y {
      get { return y_; }
      set { hasY = true;
        isYChanged = true;
        y_ = value;}
    }
    
    public const int ZFieldNumber = 3;
    private bool hasZ;
    private bool isZChanged = true;
    private int z_;
    public bool HasZ {
      get { return hasZ; }
    }
    public int Z {
      get { return z_; }
      set { hasZ = true;
        isZChanged = true;
        z_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _int3FieldNames;
      if (hasX) {
        output.WriteInt32(1, field_names[0], X);
      }
      if (hasY) {
        output.WriteInt32(2, field_names[1], Y);
      }
      if (hasZ) {
        output.WriteInt32(3, field_names[2], Z);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasX) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Y);
      }
      if (hasZ) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Z);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public Int3 CommitChange() {
      Int3 other = new Int3();
      bool isChange = false;
      if (isXChanged) {
        isChange = true;
        other.X = X;
        isXChanged = false;
      }
      if (isYChanged) {
        isChange = true;
        other.Y = Y;
        isYChanged = false;
      }
      if (isZChanged) {
        isChange = true;
        other.Z = Z;
        isZChanged = false;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(Int3 other, bool isFull = false) {
      if (other == global::Protocol.Int3.DefaultInstance) return;
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasZ) {
        Z = other.Z;
      }
    }
    
    public static Int3 ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Int3 ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Int3 ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Int3 ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Int3 ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Int3 ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Int3 ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Int3 ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Int3 ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Int3 ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Int3 MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Int3 prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Int3, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Int3 cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Int3 result;
      
      private Int3 PrepareBuilder() {
        if (resultIsReadOnly) {
          Int3 original = result;
          result = new Int3();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Int3 MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.Int3.Descriptor; }
      }
      
      public override Int3 DefaultInstanceForType {
        get { return global::Protocol.Int3.DefaultInstance; }
      }
      
      public override Int3 BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Int3) {
          return MergeFrom((Int3) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Int3 other) {
        if (other == global::Protocol.Int3.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        if (other.HasZ) {
          Z = other.Z;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_int3FieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _int3FieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasX = input.ReadInt32(ref result.x_);
              break;
            }
            case 16: {
              result.hasY = input.ReadInt32(ref result.y_);
              break;
            }
            case 24: {
              result.hasZ = input.ReadInt32(ref result.z_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasX {
        get { return result.hasX; }
      }
      public int X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(int value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public int Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(int value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0;
        return this;
      }
      
      public bool HasZ {
        get { return result.hasZ; }
      }
      public int Z {
        get { return result.Z; }
        set { SetZ(value); }
      }
      public Builder SetZ(int value) {
        PrepareBuilder();
        result.hasZ = true;
        result.z_ = value;
        return this;
      }
      public Builder ClearZ() {
        PrepareBuilder();
        result.hasZ = false;
        result.z_ = 0;
        return this;
      }
    }
    static Int3() {
      object.ReferenceEquals(global::Protocol.ProtoCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Int4 : pb::GeneratedMessage<Int4, Int4.Builder> {
    public Int4() { }
    private static readonly Int4 defaultInstance = new Int4().MakeReadOnly();
    private static readonly string[] _int4FieldNames = new string[] { "w", "x", "y", "z" };
    private static readonly uint[] _int4FieldTags = new uint[] { 32, 8, 16, 24 };
    public static Int4 DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Int4 DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Int4 ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoCommon.internal__static_Protocol_Int4__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Int4, Int4.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoCommon.internal__static_Protocol_Int4__FieldAccessorTable; }
    }
    
    public const int XFieldNumber = 1;
    private bool hasX;
    private bool isXChanged = true;
    private int x_;
    public bool HasX {
      get { return hasX; }
    }
    public int X {
      get { return x_; }
      set { hasX = true;
        isXChanged = true;
        x_ = value;}
    }
    
    public const int YFieldNumber = 2;
    private bool hasY;
    private bool isYChanged = true;
    private int y_;
    public bool HasY {
      get { return hasY; }
    }
    public int Y {
      get { return y_; }
      set { hasY = true;
        isYChanged = true;
        y_ = value;}
    }
    
    public const int ZFieldNumber = 3;
    private bool hasZ;
    private bool isZChanged = true;
    private int z_;
    public bool HasZ {
      get { return hasZ; }
    }
    public int Z {
      get { return z_; }
      set { hasZ = true;
        isZChanged = true;
        z_ = value;}
    }
    
    public const int WFieldNumber = 4;
    private bool hasW;
    private bool isWChanged = true;
    private int w_;
    public bool HasW {
      get { return hasW; }
    }
    public int W {
      get { return w_; }
      set { hasW = true;
        isWChanged = true;
        w_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _int4FieldNames;
      if (hasX) {
        output.WriteInt32(1, field_names[1], X);
      }
      if (hasY) {
        output.WriteInt32(2, field_names[2], Y);
      }
      if (hasZ) {
        output.WriteInt32(3, field_names[3], Z);
      }
      if (hasW) {
        output.WriteInt32(4, field_names[0], W);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasX) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Y);
      }
      if (hasZ) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Z);
      }
      if (hasW) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, W);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public Int4 CommitChange() {
      Int4 other = new Int4();
      bool isChange = false;
      if (isXChanged) {
        isChange = true;
        other.X = X;
        isXChanged = false;
      }
      if (isYChanged) {
        isChange = true;
        other.Y = Y;
        isYChanged = false;
      }
      if (isZChanged) {
        isChange = true;
        other.Z = Z;
        isZChanged = false;
      }
      if (isWChanged) {
        isChange = true;
        other.W = W;
        isWChanged = false;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(Int4 other, bool isFull = false) {
      if (other == global::Protocol.Int4.DefaultInstance) return;
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasZ) {
        Z = other.Z;
      }
      if (other.HasW) {
        W = other.W;
      }
    }
    
    public static Int4 ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Int4 ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Int4 ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Int4 ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Int4 ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Int4 ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Int4 ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Int4 ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Int4 ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Int4 ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Int4 MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Int4 prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Int4, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Int4 cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Int4 result;
      
      private Int4 PrepareBuilder() {
        if (resultIsReadOnly) {
          Int4 original = result;
          result = new Int4();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Int4 MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.Int4.Descriptor; }
      }
      
      public override Int4 DefaultInstanceForType {
        get { return global::Protocol.Int4.DefaultInstance; }
      }
      
      public override Int4 BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Int4) {
          return MergeFrom((Int4) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Int4 other) {
        if (other == global::Protocol.Int4.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        if (other.HasZ) {
          Z = other.Z;
        }
        if (other.HasW) {
          W = other.W;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_int4FieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _int4FieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasX = input.ReadInt32(ref result.x_);
              break;
            }
            case 16: {
              result.hasY = input.ReadInt32(ref result.y_);
              break;
            }
            case 24: {
              result.hasZ = input.ReadInt32(ref result.z_);
              break;
            }
            case 32: {
              result.hasW = input.ReadInt32(ref result.w_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasX {
        get { return result.hasX; }
      }
      public int X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(int value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public int Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(int value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0;
        return this;
      }
      
      public bool HasZ {
        get { return result.hasZ; }
      }
      public int Z {
        get { return result.Z; }
        set { SetZ(value); }
      }
      public Builder SetZ(int value) {
        PrepareBuilder();
        result.hasZ = true;
        result.z_ = value;
        return this;
      }
      public Builder ClearZ() {
        PrepareBuilder();
        result.hasZ = false;
        result.z_ = 0;
        return this;
      }
      
      public bool HasW {
        get { return result.hasW; }
      }
      public int W {
        get { return result.W; }
        set { SetW(value); }
      }
      public Builder SetW(int value) {
        PrepareBuilder();
        result.hasW = true;
        result.w_ = value;
        return this;
      }
      public Builder ClearW() {
        PrepareBuilder();
        result.hasW = false;
        result.w_ = 0;
        return this;
      }
    }
    static Int4() {
      object.ReferenceEquals(global::Protocol.ProtoCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BoxColliderData : pb::GeneratedMessage<BoxColliderData, BoxColliderData.Builder> {
    public BoxColliderData() { }
    private static readonly BoxColliderData defaultInstance = new BoxColliderData().MakeReadOnly();
    private static readonly string[] _boxColliderDataFieldNames = new string[] { "center", "size" };
    private static readonly uint[] _boxColliderDataFieldTags = new uint[] { 10, 18 };
    public static BoxColliderData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BoxColliderData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BoxColliderData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoCommon.internal__static_Protocol_BoxColliderData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BoxColliderData, BoxColliderData.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoCommon.internal__static_Protocol_BoxColliderData__FieldAccessorTable; }
    }
    
    public const int CenterFieldNumber = 1;
    private bool hasCenter;
    private global::Protocol.Float3 center_;
    public bool HasCenter {
      get { return hasCenter; }
    }
    public global::Protocol.Float3 Center {
      get { return center_; }
      set { hasCenter = true;
        center_ = value;}
    }
    public void MergeCenter(global::Protocol.Float3 value, bool isFull = false) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (HasCenter &&
        center_ != global::Protocol.Float3.DefaultInstance) {
        center_.MergeFrom(value, isFull);
      } else {
        center_ = value;
      }
    }
    
    public const int SizeFieldNumber = 2;
    private bool hasSize;
    private global::Protocol.Float3 size_;
    public bool HasSize {
      get { return hasSize; }
    }
    public global::Protocol.Float3 Size {
      get { return size_; }
      set { hasSize = true;
        size_ = value;}
    }
    public void MergeSize(global::Protocol.Float3 value, bool isFull = false) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (HasSize &&
        size_ != global::Protocol.Float3.DefaultInstance) {
        size_.MergeFrom(value, isFull);
      } else {
        size_ = value;
      }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCenter) return false;
        if (!hasSize) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _boxColliderDataFieldNames;
      if (hasCenter) {
        output.WriteMessage(1, field_names[0], Center);
      }
      if (hasSize) {
        output.WriteMessage(2, field_names[1], Size);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasCenter) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Center);
      }
      if (hasSize) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Size);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public BoxColliderData CommitChange() {
      BoxColliderData other = new BoxColliderData();
      bool isChange = false;
      
      var Centercommit = Center?.CommitChange();
      if(Centercommit!=null)
      {
          isChange = true;
          other.Center = Centercommit;
      }
      
      var Sizecommit = Size?.CommitChange();
      if(Sizecommit!=null)
      {
          isChange = true;
          other.Size = Sizecommit;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(BoxColliderData other, bool isFull = false) {
      if (other == global::Protocol.BoxColliderData.DefaultInstance) return;
      
      if (other.HasCenter)
      {
        MergeCenter(other.Center, isFull);
      }
      
      if (other.HasSize)
      {
        MergeSize(other.Size, isFull);
      }
    }
    
    public static BoxColliderData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BoxColliderData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BoxColliderData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BoxColliderData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BoxColliderData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BoxColliderData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BoxColliderData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BoxColliderData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BoxColliderData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BoxColliderData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BoxColliderData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BoxColliderData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BoxColliderData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BoxColliderData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BoxColliderData result;
      
      private BoxColliderData PrepareBuilder() {
        if (resultIsReadOnly) {
          BoxColliderData original = result;
          result = new BoxColliderData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BoxColliderData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.BoxColliderData.Descriptor; }
      }
      
      public override BoxColliderData DefaultInstanceForType {
        get { return global::Protocol.BoxColliderData.DefaultInstance; }
      }
      
      public override BoxColliderData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BoxColliderData) {
          return MergeFrom((BoxColliderData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BoxColliderData other) {
        if (other == global::Protocol.BoxColliderData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCenter) {
          MergeCenter(other.Center);
        }
        if (other.HasSize) {
          MergeSize(other.Size);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_boxColliderDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _boxColliderDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Protocol.Float3.Builder subBuilder = global::Protocol.Float3.CreateBuilder();
              if (result.hasCenter) {
                subBuilder.MergeFrom(Center);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Center = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::Protocol.Float3.Builder subBuilder = global::Protocol.Float3.CreateBuilder();
              if (result.hasSize) {
                subBuilder.MergeFrom(Size);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Size = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCenter {
       get { return result.hasCenter; }
      }
      public global::Protocol.Float3 Center {
        get { return result.Center; }
        set { SetCenter(value); }
      }
      public Builder SetCenter(global::Protocol.Float3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCenter = true;
        result.center_ = value;
        return this;
      }
      public Builder SetCenter(global::Protocol.Float3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCenter = true;
        result.center_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCenter(global::Protocol.Float3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.HasCenter &&
            result.center_ != global::Protocol.Float3.DefaultInstance) {
            result.center_ = global::Protocol.Float3.CreateBuilder(result.center_).MergeFrom(value).BuildPartial();
        } else {
          result.center_ = value;
          result.hasCenter = true;
        }
        return this;
      }
      public Builder ClearCenter() {
        PrepareBuilder();
        result.hasCenter = false;
        result.center_ = null;
        return this;
      }
      
      public bool HasSize {
       get { return result.hasSize; }
      }
      public global::Protocol.Float3 Size {
        get { return result.Size; }
        set { SetSize(value); }
      }
      public Builder SetSize(global::Protocol.Float3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSize = true;
        result.size_ = value;
        return this;
      }
      public Builder SetSize(global::Protocol.Float3.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSize = true;
        result.size_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSize(global::Protocol.Float3 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.HasSize &&
            result.size_ != global::Protocol.Float3.DefaultInstance) {
            result.size_ = global::Protocol.Float3.CreateBuilder(result.size_).MergeFrom(value).BuildPartial();
        } else {
          result.size_ = value;
          result.hasSize = true;
        }
        return this;
      }
      public Builder ClearSize() {
        PrepareBuilder();
        result.hasSize = false;
        result.size_ = null;
        return this;
      }
    }
    static BoxColliderData() {
      object.ReferenceEquals(global::Protocol.ProtoCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EntityEvent : pb::GeneratedMessage<EntityEvent, EntityEvent.Builder> {
    public EntityEvent() { }
    private static readonly EntityEvent defaultInstance = new EntityEvent().MakeReadOnly();
    private static readonly string[] _entityEventFieldNames = new string[] { "entity_id", "event_id", "float_data", "string_data", "uint_data" };
    private static readonly uint[] _entityEventFieldTags = new uint[] { 8, 16, 45, 26, 32 };
    public static EntityEvent DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EntityEvent DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EntityEvent ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoCommon.internal__static_Protocol_EntityEvent__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EntityEvent, EntityEvent.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoCommon.internal__static_Protocol_EntityEvent__FieldAccessorTable; }
    }
    
    public const int EntityIdFieldNumber = 1;
    private bool hasEntityId;
    private uint entityId_;
    public bool HasEntityId {
      get { return hasEntityId; }
    }
    [global::System.CLSCompliant(false)]
    public uint EntityId {
      get { return entityId_; }
      set { hasEntityId = true;
        entityId_ = value;}
    }
    
    public const int EventIdFieldNumber = 2;
    private bool hasEventId;
    private uint eventId_;
    public bool HasEventId {
      get { return hasEventId; }
    }
    [global::System.CLSCompliant(false)]
    public uint EventId {
      get { return eventId_; }
      set { hasEventId = true;
        eventId_ = value;}
    }
    
    public const int StringDataFieldNumber = 3;
    private bool hasStringData;
    private bool isStringDataChanged = true;
    private string stringData_ = "";
    public bool HasStringData {
      get { return hasStringData; }
    }
    public string StringData {
      get { return stringData_; }
      set { hasStringData = true;
        isStringDataChanged = true;
        stringData_ = value;}
    }
    
    public const int UintDataFieldNumber = 4;
    private bool hasUintData;
    private bool isUintDataChanged = true;
    private uint uintData_;
    public bool HasUintData {
      get { return hasUintData; }
    }
    [global::System.CLSCompliant(false)]
    public uint UintData {
      get { return uintData_; }
      set { hasUintData = true;
        isUintDataChanged = true;
        uintData_ = value;}
    }
    
    public const int FloatDataFieldNumber = 5;
    private bool hasFloatData;
    private bool isFloatDataChanged = true;
    private float floatData_;
    public bool HasFloatData {
      get { return hasFloatData; }
    }
    public float FloatData {
      get { return floatData_; }
      set { hasFloatData = true;
        isFloatDataChanged = true;
        floatData_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEntityId) return false;
        if (!hasEventId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _entityEventFieldNames;
      if (hasEntityId) {
        output.WriteUInt32(1, field_names[0], EntityId);
      }
      if (hasEventId) {
        output.WriteUInt32(2, field_names[1], EventId);
      }
      if (hasStringData) {
        output.WriteString(3, field_names[3], StringData);
      }
      if (hasUintData) {
        output.WriteUInt32(4, field_names[4], UintData);
      }
      if (hasFloatData) {
        output.WriteFloat(5, field_names[2], FloatData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasEntityId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, EntityId);
      }
      if (hasEventId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, EventId);
      }
      if (hasStringData) {
        size += pb::CodedOutputStream.ComputeStringSize(3, StringData);
      }
      if (hasUintData) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, UintData);
      }
      if (hasFloatData) {
        size += pb::CodedOutputStream.ComputeFloatSize(5, FloatData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public EntityEvent CommitChange() {
      EntityEvent other = new EntityEvent();
      bool isChange = false;
      other.EntityId = EntityId;
      other.EventId = EventId;
      if (isStringDataChanged) {
        isChange = true;
        other.StringData = StringData;
        isStringDataChanged = false;
      }
      if (isUintDataChanged) {
        isChange = true;
        other.UintData = UintData;
        isUintDataChanged = false;
      }
      if (isFloatDataChanged) {
        isChange = true;
        other.FloatData = FloatData;
        isFloatDataChanged = false;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(EntityEvent other, bool isFull = false) {
      if (other == global::Protocol.EntityEvent.DefaultInstance) return;
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasStringData) {
        StringData = other.StringData;
      }
      if (other.HasUintData) {
        UintData = other.UintData;
      }
      if (other.HasFloatData) {
        FloatData = other.FloatData;
      }
    }
    
    public static EntityEvent ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EntityEvent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EntityEvent ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EntityEvent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EntityEvent ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EntityEvent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EntityEvent ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EntityEvent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EntityEvent ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EntityEvent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EntityEvent MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EntityEvent prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EntityEvent, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EntityEvent cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EntityEvent result;
      
      private EntityEvent PrepareBuilder() {
        if (resultIsReadOnly) {
          EntityEvent original = result;
          result = new EntityEvent();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EntityEvent MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.EntityEvent.Descriptor; }
      }
      
      public override EntityEvent DefaultInstanceForType {
        get { return global::Protocol.EntityEvent.DefaultInstance; }
      }
      
      public override EntityEvent BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EntityEvent) {
          return MergeFrom((EntityEvent) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EntityEvent other) {
        if (other == global::Protocol.EntityEvent.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEntityId) {
          EntityId = other.EntityId;
        }
        if (other.HasEventId) {
          EventId = other.EventId;
        }
        if (other.HasStringData) {
          StringData = other.StringData;
        }
        if (other.HasUintData) {
          UintData = other.UintData;
        }
        if (other.HasFloatData) {
          FloatData = other.FloatData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_entityEventFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _entityEventFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEntityId = input.ReadUInt32(ref result.entityId_);
              break;
            }
            case 16: {
              result.hasEventId = input.ReadUInt32(ref result.eventId_);
              break;
            }
            case 26: {
              result.hasStringData = input.ReadString(ref result.stringData_);
              break;
            }
            case 32: {
              result.hasUintData = input.ReadUInt32(ref result.uintData_);
              break;
            }
            case 45: {
              result.hasFloatData = input.ReadFloat(ref result.floatData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEntityId {
        get { return result.hasEntityId; }
      }
      [global::System.CLSCompliant(false)]
      public uint EntityId {
        get { return result.EntityId; }
        set { SetEntityId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetEntityId(uint value) {
        PrepareBuilder();
        result.hasEntityId = true;
        result.entityId_ = value;
        return this;
      }
      public Builder ClearEntityId() {
        PrepareBuilder();
        result.hasEntityId = false;
        result.entityId_ = 0;
        return this;
      }
      
      public bool HasEventId {
        get { return result.hasEventId; }
      }
      [global::System.CLSCompliant(false)]
      public uint EventId {
        get { return result.EventId; }
        set { SetEventId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetEventId(uint value) {
        PrepareBuilder();
        result.hasEventId = true;
        result.eventId_ = value;
        return this;
      }
      public Builder ClearEventId() {
        PrepareBuilder();
        result.hasEventId = false;
        result.eventId_ = 0;
        return this;
      }
      
      public bool HasStringData {
        get { return result.hasStringData; }
      }
      public string StringData {
        get { return result.StringData; }
        set { SetStringData(value); }
      }
      public Builder SetStringData(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStringData = true;
        result.stringData_ = value;
        return this;
      }
      public Builder ClearStringData() {
        PrepareBuilder();
        result.hasStringData = false;
        result.stringData_ = "";
        return this;
      }
      
      public bool HasUintData {
        get { return result.hasUintData; }
      }
      [global::System.CLSCompliant(false)]
      public uint UintData {
        get { return result.UintData; }
        set { SetUintData(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUintData(uint value) {
        PrepareBuilder();
        result.hasUintData = true;
        result.uintData_ = value;
        return this;
      }
      public Builder ClearUintData() {
        PrepareBuilder();
        result.hasUintData = false;
        result.uintData_ = 0;
        return this;
      }
      
      public bool HasFloatData {
        get { return result.hasFloatData; }
      }
      public float FloatData {
        get { return result.FloatData; }
        set { SetFloatData(value); }
      }
      public Builder SetFloatData(float value) {
        PrepareBuilder();
        result.hasFloatData = true;
        result.floatData_ = value;
        return this;
      }
      public Builder ClearFloatData() {
        PrepareBuilder();
        result.hasFloatData = false;
        result.floatData_ = 0F;
        return this;
      }
    }
    static EntityEvent() {
      object.ReferenceEquals(global::Protocol.ProtoCommon.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
