// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto_common.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protocol {

  /// <summary>Holder for reflection information generated from proto_common.proto</summary>
  public static partial class ProtoCommonReflection {

    #region Descriptor
    /// <summary>File descriptor for proto_common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtoCommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJwcm90b19jb21tb24ucHJvdG8SCFByb3RvY29sIkoKBkZsb2F0MxIOCgF4",
            "GAEgASgCSACIAQESDgoBeRgCIAEoAkgBiAEBEg4KAXoYAyABKAJIAogBAUIE",
            "CgJfeEIECgJfeUIECgJfeiJgCgZGbG9hdDQSDgoBeBgBIAEoAkgAiAEBEg4K",
            "AXkYAiABKAJIAYgBARIOCgF6GAMgASgCSAKIAQESDgoBdxgEIAEoAkgDiAEB",
            "QgQKAl94QgQKAl95QgQKAl96QgQKAl93IkgKBEludDMSDgoBeBgBIAEoBUgA",
            "iAEBEg4KAXkYAiABKAVIAYgBARIOCgF6GAMgASgFSAKIAQFCBAoCX3hCBAoC",
            "X3lCBAoCX3oiXgoESW50NBIOCgF4GAEgASgFSACIAQESDgoBeRgCIAEoBUgB",
            "iAEBEg4KAXoYAyABKAVIAogBARIOCgF3GAQgASgFSAOIAQFCBAoCX3hCBAoC",
            "X3lCBAoCX3pCBAoCX3cilgEKCFByb3BEYXRhEg8KAmlkGAEgASgESACIAQES",
            "EwoGY2ZnX2lkGAIgASgNSAGIAQESOwoSY3VycmVuY3lfcHJvcF9kYXRhGAwg",
            "ASgLMhouUHJvdG9jb2wuQ3VycmVuY3lQcm9wRGF0YUgCiAEBQgUKA19pZEIJ",
            "CgdfY2ZnX2lkQhUKE19jdXJyZW5jeV9wcm9wX2RhdGEihAEKEEN1cnJlbmN5",
            "UHJvcERhdGESMgoNY3VycmVuY3lfdHlwZRgBIAEoDjIWLlByb3RvY29sLkN1",
            "cnJlbmN5VHlwZUgAiAEBEhkKDGN1cnJlbmN5X251bRgCIAEoBUgBiAEBQhAK",
            "Dl9jdXJyZW5jeV90eXBlQg8KDV9jdXJyZW5jeV9udW0ikQEKD1ZpcnR1YWxQ",
            "cm9wRGF0YRIPCgJpZBgBIAEoBEgAiAEBEhMKBmNmZ19pZBgCIAEoDUgBiAEB",
            "EjMKDmNsdWVfcHJvcF9kYXRhGAogASgLMhYuUHJvdG9jb2wuQ2x1ZVByb3BE",
            "YXRhSAKIAQFCBQoDX2lkQgkKB19jZmdfaWRCEQoPX2NsdWVfcHJvcF9kYXRh",
            "IlYKDENsdWVQcm9wRGF0YRIPCgJpZBgBIAEoDUgAiAEBEhsKDmZyb21fZW50",
            "aXR5X2lkGAIgASgESAGIAQFCBQoDX2lkQhEKD19mcm9tX2VudGl0eV9pZCJG",
            "Cg5DbHVlQmlnQm94RGF0YRIeChFiaWdfYm94X2VudGl0eV9pZBgBIAEoBEgA",
            "iAEBQhQKEl9iaWdfYm94X2VudGl0eV9pZCLkAgoOQXJlYVN0YW5kUG9pbnQS",
            "DwoCaWQYASABKA1IAIgBARInCghwb3NpdGlvbhgCIAEoCzIQLlByb3RvY29s",
            "LkZsb2F0M0gBiAEBEiYKB2ZvcndhcmQYAyABKAsyEC5Qcm90b2NvbC5GbG9h",
            "dDNIAogBARIVCghwZW9wbGVJZBgEIAEoDUgDiAEBEhkKDG1pblN0YW5kVGlt",
            "ZRgFIAEoAkgEiAEBEhkKDG1heFN0YW5kVGltZRgGIAEoAkgFiAEBEhgKC25l",
            "ZWRfb2Zmc2V0GAcgASgISAaIAQESGQoMb2Zmc2V0X3ZhbHVlGAggASgCSAeI",
            "AQFCBQoDX2lkQgsKCV9wb3NpdGlvbkIKCghfZm9yd2FyZEILCglfcGVvcGxl",
            "SWRCDwoNX21pblN0YW5kVGltZUIPCg1fbWF4U3RhbmRUaW1lQg4KDF9uZWVk",
            "X29mZnNldEIPCg1fb2Zmc2V0X3ZhbHVlIpkBCg9Cb3hDb2xsaWRlckRhdGES",
            "JQoGY2VudGVyGAEgASgLMhAuUHJvdG9jb2wuRmxvYXQzSACIAQESIwoEc2l6",
            "ZRgCIAEoCzIQLlByb3RvY29sLkZsb2F0M0gBiAEBEhcKCmlzX3RyaWdnZXIY",
            "AyABKAhIAogBAUIJCgdfY2VudGVyQgcKBV9zaXplQg0KC19pc190cmlnZ2Vy",
            "Is8BCgtFbnRpdHlFdmVudBIWCgllbnRpdHlfaWQYASABKA1IAIgBARIVCghl",
            "dmVudF9pZBgCIAEoDUgBiAEBEhgKC3N0cmluZ19kYXRhGAMgASgJSAKIAQES",
            "FgoJdWludF9kYXRhGAQgASgNSAOIAQESFwoKZmxvYXRfZGF0YRgFIAEoAkgE",
            "iAEBQgwKCl9lbnRpdHlfaWRCCwoJX2V2ZW50X2lkQg4KDF9zdHJpbmdfZGF0",
            "YUIMCgpfdWludF9kYXRhQg0KC19mbG9hdF9kYXRhIpwEChBTa2lsbFN1YkRh",
            "dGFJdGVtEhAKA2RlcxgBIAEoCUgAiAEBEhUKCG5lZWRfdGFnGAIgASgJSAGI",
            "AQESFgoJc3RhcnRfa2V5GAMgASgJSAKIAQESHQoQc3RhcnRfaW5wdXRfdHlw",
            "ZRgEIAEoDUgDiAEBEiEKFHN0YXJ0X2xvbmdfZG93bl90aW1lGAUgASgCSASI",
            "AQESGAoLaW50ZXJhY3Rpb24YBiABKA1IBYgBARIWCgl0YWdfdmFsdWUYByAB",
            "KAlIBogBARIWCglrZWVwX3RpbWUYCCABKAJIB4gBARIUCgdlbmRfa2V5GAkg",
            "ASgJSAiIAQESHwoSZW5kX2tleV9pbnB1dF90eXBlGAogASgNSAmIAQESFwoK",
            "Y2FuY2VsX2tleRgLIAEoCUgKiAEBEiIKFWNhbmNlbF9rZXlfaW5wdXRfdHlw",
            "ZRgMIAEoDUgLiAEBQgYKBF9kZXNCCwoJX25lZWRfdGFnQgwKCl9zdGFydF9r",
            "ZXlCEwoRX3N0YXJ0X2lucHV0X3R5cGVCFwoVX3N0YXJ0X2xvbmdfZG93bl90",
            "aW1lQg4KDF9pbnRlcmFjdGlvbkIMCgpfdGFnX3ZhbHVlQgwKCl9rZWVwX3Rp",
            "bWVCCgoIX2VuZF9rZXlCFQoTX2VuZF9rZXlfaW5wdXRfdHlwZUINCgtfY2Fu",
            "Y2VsX2tleUIYChZfY2FuY2VsX2tleV9pbnB1dF90eXBlKioKCE1vdmVUeXBl",
            "EggKBFN0b3AQABIJCgVMb2NhbBABEgkKBVdvcmxkEAIqFgoJU2tpbGxUeXBl",
            "EgkKBVNob290EAAqzAEKClNraWxsU3RhdGUSEwoPUkVMRUFTRV9TVUNDRVNT",
            "EAASEAoMUkVMRUFTRV9GQUlMEAESBwoDRU5EEAMSEgoOQVJSRVNUX1NVQ0NF",
            "U1MQBBIPCgtBUlJFU1RfRkFJTBAFEhgKFEFSUklWRURfRUZGRUNUX1JBTkdF",
            "EAYSFwoTQVJSSVZFRF9CTE9DS19SQU5HRRAHEhEKDUJMT0NLX1NVQ0NFU1MQ",
            "CBISCg5EVU9CQU9fU1VDQ0VTUxAJEg8KC0JSRUFLX1NLSUxMEAoqYAoIUHJv",
            "cFR5cGUSCwoHUFRfTm9uZRAAEg0KCVBUX1dlYXBvbhABEgsKB1BUX0FucWkQ",
            "AhIOCgpQVF9Hcm9jZXJ5EAMSDwoLUFRfQ3VycmVuY3kQBhIKCgZQVF9NYXgQ",
            "CioYCgxDdXJyZW5jeVR5cGUSCAoEQ09JThAAKiQKDEhpZGVBcmVhVHlwZRII",
            "CgRDdWJlEAASCgoGU3BoZXJlEAEqNQoJSW5wdXRUeXBlEggKBE5vbmUQABII",
            "CgREb3duEAESBgoCVXAQAhIMCghMb25nRG9udxADKi4KC1Bhc3NlclN0YXRl",
            "EggKBElkbGUQABIICgRXYWxLEAESCwoHU2hvY2tlZBACKkoKCkd1YXJkU3Rh",
            "dGUSCwoHR1NfSWRsZRAAEgsKB0dTX1dhbEsQARIOCgpHU19TaG9ja2VkEAIS",
            "EgoOR1NfQ2F0Y2hQbGF5ZXIQAyo4CgxQZWRkbGVyU3RhdGUSCwoHUFNfSWRs",
            "ZRAAEgsKB1BTX1dhbEsQARIOCgpQU19TaG9ja2VkEAIqKAoMU3BlY2lhbFN0",
            "YXRlEgsKB1NTX0lkbGUQABILCgdTU19XYWxrEAEqJQoJQm9hdFN0YXRlEgsK",
            "B0JTX0lkbGUQABILCgdCU19XYWxrEAEqVwoJVGhpbmdUeXBlEg4KClRoaW5n",
            "X05vbmUQABIOCgpUaGluZ19Qcm9wEAESDQoJVGhpbmdfQm94EAISCAoEQ2x1",
            "ZRADEhEKDVRoaW5nX0JvbmZpcmUQBCpWCghCb3JuVHlwZRIPCgtCVF9SaWdo",
            "dE5vdxAAEg4KCkJUX0R5bmFtaWMQARIXChNCVF9BZnRlck1vbnN0ZXJEZWFk",
            "EAISEAoMQlRfT25Cb25maXJlEAMqNgoOQXJlYUFjdGlvblR5cGUSCAoEVGFs",
            "axAAEgkKBVdhdGNoEAESDwoLQUFUX0JvbmZpcmUQAipcCg1Ib3RFZmZlY3RU",
            "eXBlEgwKCEhFVF9Ob25lEAASGAoUUGFzc2FnZV9UcmlnZ2VyX0FyZWEQARIQ",
            "CgxIb3RfQWRkX0J1ZmYQAhIRCg1MYW5kbWluZV9ib21iEAMqXQoKTnBjU3Vi",
            "VHlwZRIOCgpOU1RfVW5rb3duEAASDgoKTlNUX05vcm1hbBABEg0KCU5TVF9H",
            "VUFSRBACEg8KC05TVF9QRURETEVSEAMSDwoLTlNUX01PTlNURVIQBCq7AgoM",
            "VGhpbmdTdWJUeXBlEhAKDFRoaW5nX1Vua293bhAAEgwKCFRoaW5nX01wEAES",
            "FwoTVGhpbmdfTWlhblNoYW5nSHVhbhACEhgKFFRoaW5nX01pYW5TaGFuZ1N0",
            "b25lEAMSFgoSVGhpbmdfV2FuZ1RpYW5BcmVhEAQSFAoQVGhpbmdfUWluZ1J1",
            "YW5ZdRAFEhQKEFRoaW5nX0RpWXVaaGlIdW8QBhIWChJUaGluZ19TaGVuWXVu",
            "WmhhbmcQBxIWChJUaGluZ19MaWVGZW5nWmhhbmcQCBISCg5UaGluZ19TbWFs",
            "bEJveBAJEhMKD1RoaW5nX01pZGRsZUJveBAKEhAKDFRoaW5nX0JpZ0JveBAL",
            "EhEKDVRoaW5nX0V4cEJvb2sQDBIWChJUaGluZ19UaHVuZGVyQ2hhaW4QDSpQ",
            "Cg1MYWRkZXJTdWJUeXBlEg4KCkxTVF9Vbmtub3cQABIOCgpMU1RfTm9ybWFs",
            "EAESDAoITFNUX1dlbGwQAhIRCg1MU1RfUXVpY2tfV2F5EAMqSwoMQm9uZmly",
            "ZVN0YXRlEgwKCEJGU19Ob25lEAASDwoLQkZTX0NvbGxlY3QQARIOCgpCRlNf",
            "SWduaXRlEAISDAoIQkZTX0J1cm4QAypOCgxTY2F0dGVyU3RhdGUSCwoHU1Nf",
            "Tm9uZRAAEhAKDFNTX1VuU2NhdHRlZBABEg8KC1NTX1NjYXR0aW5nEAISDgoK",
            "U1NfU2NhdHRlZBADKkEKD0hlYWRFZmZlY3RTdGF0ZRIMCghIRVNfTm9uZRAA",
            "Eg0KCUhFU19FbXB0eRABEhEKDUhFU19EaXp6aW5lc3MQAipaCg9GaXJlRGlh",
            "bW9uZFR5cGUSCwoHRkRfTm9uZRAAEg8KC0ZEX1Bvd2VyaW5nEAESDgoKRkRf",
            "QmVDYXRjaBACEgsKB0ZEX0JvbWIQAxIMCghGRF9TbGVlcBAEKjcKDkVmZmVj",
            "dEJpbmRUeXBlEhYKEkJpbmRfV29ybGRQb3NpdGlvbhAAEg0KCUJpbmRfUm9v",
            "dBABKq4CChJFZmZlY3RCaW5kUm9vdFR5cGUSEgoOQmluZFJvb3RfTG9naWMQ",
            "ABIVChFCaW5kUm9vdF9MZWZ0SGFuZBABEhYKEkJpbmRSb290X1JpZ2h0SGFu",
            "ZBACEhUKEUJpbmRSb290X0xlZnRGb290EAMSFgoSQmluZFJvb3RfUmlnaHRG",
            "b290EAQSEQoNQmluZFJvb3RfSGVhZBAFEhYKEkVsYm93X1JfZW5kU2xpZGVy",
            "MBAGEhYKEkVsYm93X0xfZW5kU2xpZGVyMBAHEg0KCUJSX1dlYXBvbhAIEg4K",
            "CkJpcDAwMUhlYWQQCRISCg5CaXAwMDFMRm9yZWFybRAKEhIKDkJpcDAwMVJG",
            "b3JlYXJtEAsSEAoMQmlwMDAxU3BpbmUyEAwSCgoGQmlwMDAxEA1iBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Protocol.MoveType), typeof(global::Protocol.SkillType), typeof(global::Protocol.SkillState), typeof(global::Protocol.PropType), typeof(global::Protocol.CurrencyType), typeof(global::Protocol.HideAreaType), typeof(global::Protocol.InputType), typeof(global::Protocol.PasserState), typeof(global::Protocol.GuardState), typeof(global::Protocol.PeddlerState), typeof(global::Protocol.SpecialState), typeof(global::Protocol.BoatState), typeof(global::Protocol.ThingType), typeof(global::Protocol.BornType), typeof(global::Protocol.AreaActionType), typeof(global::Protocol.HotEffectType), typeof(global::Protocol.NpcSubType), typeof(global::Protocol.ThingSubType), typeof(global::Protocol.LadderSubType), typeof(global::Protocol.BonfireState), typeof(global::Protocol.ScatterState), typeof(global::Protocol.HeadEffectState), typeof(global::Protocol.FireDiamondType), typeof(global::Protocol.EffectBindType), typeof(global::Protocol.EffectBindRootType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Float3), global::Protocol.Float3.Parser, new[]{ "X", "Y", "Z" }, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Float4), global::Protocol.Float4.Parser, new[]{ "X", "Y", "Z", "W" }, new[]{ "X", "Y", "Z", "W" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Int3), global::Protocol.Int3.Parser, new[]{ "X", "Y", "Z" }, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Int4), global::Protocol.Int4.Parser, new[]{ "X", "Y", "Z", "W" }, new[]{ "X", "Y", "Z", "W" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.PropData), global::Protocol.PropData.Parser, new[]{ "Id", "CfgId", "CurrencyPropData" }, new[]{ "Id", "CfgId", "CurrencyPropData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.CurrencyPropData), global::Protocol.CurrencyPropData.Parser, new[]{ "CurrencyType", "CurrencyNum" }, new[]{ "CurrencyType", "CurrencyNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.VirtualPropData), global::Protocol.VirtualPropData.Parser, new[]{ "Id", "CfgId", "CluePropData" }, new[]{ "Id", "CfgId", "CluePropData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.CluePropData), global::Protocol.CluePropData.Parser, new[]{ "Id", "FromEntityId" }, new[]{ "Id", "FromEntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ClueBigBoxData), global::Protocol.ClueBigBoxData.Parser, new[]{ "BigBoxEntityId" }, new[]{ "BigBoxEntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.AreaStandPoint), global::Protocol.AreaStandPoint.Parser, new[]{ "Id", "Position", "Forward", "PeopleId", "MinStandTime", "MaxStandTime", "NeedOffset", "OffsetValue" }, new[]{ "Id", "Position", "Forward", "PeopleId", "MinStandTime", "MaxStandTime", "NeedOffset", "OffsetValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BoxColliderData), global::Protocol.BoxColliderData.Parser, new[]{ "Center", "Size", "IsTrigger" }, new[]{ "Center", "Size", "IsTrigger" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.EntityEvent), global::Protocol.EntityEvent.Parser, new[]{ "EntityId", "EventId", "StringData", "UintData", "FloatData" }, new[]{ "EntityId", "EventId", "StringData", "UintData", "FloatData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SkillSubDataItem), global::Protocol.SkillSubDataItem.Parser, new[]{ "Des", "NeedTag", "StartKey", "StartInputType", "StartLongDownTime", "Interaction", "TagValue", "KeepTime", "EndKey", "EndKeyInputType", "CancelKey", "CancelKeyInputType" }, new[]{ "Des", "NeedTag", "StartKey", "StartInputType", "StartLongDownTime", "Interaction", "TagValue", "KeepTime", "EndKey", "EndKeyInputType", "CancelKey", "CancelKeyInputType" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MoveType {
    /// <summary>
    ///停止移动
    /// </summary>
    [pbr::OriginalName("Stop")] Stop = 0,
    /// <summary>
    ///本地坐标系
    /// </summary>
    [pbr::OriginalName("Local")] Local = 1,
    /// <summary>
    ///世界坐标系
    /// </summary>
    [pbr::OriginalName("World")] World = 2,
  }

  public enum SkillType {
    [pbr::OriginalName("Shoot")] Shoot = 0,
  }

  public enum SkillState {
    /// <summary>
    ///技能成功释放状态
    /// </summary>
    [pbr::OriginalName("RELEASE_SUCCESS")] ReleaseSuccess = 0,
    /// <summary>
    ///技能失败释放状态
    /// </summary>
    [pbr::OriginalName("RELEASE_FAIL")] ReleaseFail = 1,
    /// <summary>
    ///技能释放结束状态
    /// </summary>
    [pbr::OriginalName("END")] End = 3,
    /// <summary>
    ///被警卫逮捕
    /// </summary>
    [pbr::OriginalName("ARREST_SUCCESS")] ArrestSuccess = 4,
    /// <summary>
    ///没有被警卫发现
    /// </summary>
    [pbr::OriginalName("ARREST_FAIL")] ArrestFail = 5,
    /// <summary>
    ///走到了攻击范围
    /// </summary>
    [pbr::OriginalName("ARRIVED_EFFECT_RANGE")] ArrivedEffectRange = 6,
    /// <summary>
    ///走到了格挡范围
    /// </summary>
    [pbr::OriginalName("ARRIVED_BLOCK_RANGE")] ArrivedBlockRange = 7,
    /// <summary>
    ///开始播放格挡动画
    /// </summary>
    [pbr::OriginalName("BLOCK_SUCCESS")] BlockSuccess = 8,
    /// <summary>
    ///夺宝成功
    /// </summary>
    [pbr::OriginalName("DUOBAO_SUCCESS")] DuobaoSuccess = 9,
    /// <summary>
    ///技能释放中断
    /// </summary>
    [pbr::OriginalName("BREAK_SKILL")] BreakSkill = 10,
  }

  public enum PropType {
    [pbr::OriginalName("PT_None")] PtNone = 0,
    [pbr::OriginalName("PT_Weapon")] PtWeapon = 1,
    [pbr::OriginalName("PT_Anqi")] PtAnqi = 2,
    [pbr::OriginalName("PT_Grocery")] PtGrocery = 3,
    [pbr::OriginalName("PT_Currency")] PtCurrency = 6,
    [pbr::OriginalName("PT_Max")] PtMax = 10,
  }

  public enum CurrencyType {
    [pbr::OriginalName("COIN")] Coin = 0,
  }

  public enum HideAreaType {
    [pbr::OriginalName("Cube")] Cube = 0,
    [pbr::OriginalName("Sphere")] Sphere = 1,
  }

  /// <summary>
  ///输入类型
  /// </summary>
  public enum InputType {
    [pbr::OriginalName("None")] None = 0,
    /// <summary>
    ///按下
    /// </summary>
    [pbr::OriginalName("Down")] Down = 1,
    /// <summary>
    ///抬起
    /// </summary>
    [pbr::OriginalName("Up")] Up = 2,
    /// <summary>
    ///长按
    /// </summary>
    [pbr::OriginalName("LongDonw")] LongDonw = 3,
  }

  /// <summary>
  ///路人状态
  /// </summary>
  public enum PasserState {
    [pbr::OriginalName("Idle")] Idle = 0,
    [pbr::OriginalName("WalK")] WalK = 1,
    [pbr::OriginalName("Shocked")] Shocked = 2,
  }

  /// <summary>
  ///警卫状态
  /// </summary>
  public enum GuardState {
    [pbr::OriginalName("GS_Idle")] GsIdle = 0,
    [pbr::OriginalName("GS_WalK")] GsWalK = 1,
    [pbr::OriginalName("GS_Shocked")] GsShocked = 2,
    /// <summary>
    /// 逮捕玩家状态
    /// </summary>
    [pbr::OriginalName("GS_CatchPlayer")] GsCatchPlayer = 3,
  }

  /// <summary>
  ///摊贩状态
  /// </summary>
  public enum PeddlerState {
    [pbr::OriginalName("PS_Idle")] PsIdle = 0,
    [pbr::OriginalName("PS_WalK")] PsWalK = 1,
    [pbr::OriginalName("PS_Shocked")] PsShocked = 2,
  }

  /// <summary>
  ///特殊npc状态
  /// </summary>
  public enum SpecialState {
    [pbr::OriginalName("SS_Idle")] SsIdle = 0,
    [pbr::OriginalName("SS_Walk")] SsWalk = 1,
  }

  /// <summary>
  ///船npc状态
  /// </summary>
  public enum BoatState {
    [pbr::OriginalName("BS_Idle")] BsIdle = 0,
    [pbr::OriginalName("BS_Walk")] BsWalk = 1,
  }

  /// <summary>
  ///物件类型
  /// </summary>
  public enum ThingType {
    /// <summary>
    ///非物件类型
    /// </summary>
    [pbr::OriginalName("Thing_None")] ThingNone = 0,
    /// <summary>
    ///物品
    /// </summary>
    [pbr::OriginalName("Thing_Prop")] ThingProp = 1,
    /// <summary>
    ///宝箱
    /// </summary>
    [pbr::OriginalName("Thing_Box")] ThingBox = 2,
    /// <summary>
    ///线索
    /// </summary>
    [pbr::OriginalName("Clue")] Clue = 3,
    /// <summary>
    ///火堆
    /// </summary>
    [pbr::OriginalName("Thing_Bonfire")] ThingBonfire = 4,
  }

  /// <summary>
  ///出生类型
  /// </summary>
  public enum BornType {
    /// <summary>
    ///立即出生
    /// </summary>
    [pbr::OriginalName("BT_RightNow")] BtRightNow = 0,
    /// <summary>
    ///动态出生
    /// </summary>
    [pbr::OriginalName("BT_Dynamic")] BtDynamic = 1,
    /// <summary>
    ///指定怪物死亡之后
    /// </summary>
    [pbr::OriginalName("BT_AfterMonsterDead")] BtAfterMonsterDead = 2,
    /// <summary>
    ///篝火被点燃
    /// </summary>
    [pbr::OriginalName("BT_OnBonfire")] BtOnBonfire = 3,
  }

  /// <summary>
  ///藏匿区域的类型
  /// </summary>
  public enum AreaActionType {
    /// <summary>
    ///交谈
    /// </summary>
    [pbr::OriginalName("Talk")] Talk = 0,
    /// <summary>
    ///看货
    /// </summary>
    [pbr::OriginalName("Watch")] Watch = 1,
    /// <summary>
    ///篝火
    /// </summary>
    [pbr::OriginalName("AAT_Bonfire")] AatBonfire = 2,
  }

  /// <summary>
  ///热点作用效果类型
  /// </summary>
  public enum HotEffectType {
    [pbr::OriginalName("HET_None")] HetNone = 0,
    /// <summary>
    ///管道触发区域
    /// </summary>
    [pbr::OriginalName("Passage_Trigger_Area")] PassageTriggerArea = 1,
    /// <summary>
    ///添加Buff
    /// </summary>
    [pbr::OriginalName("Hot_Add_Buff")] HotAddBuff = 2,
    /// <summary>
    ///引爆地雷
    /// </summary>
    [pbr::OriginalName("Landmine_bomb")] LandmineBomb = 3,
  }

  /// <summary>
  ///角色子类型
  /// </summary>
  public enum NpcSubType {
    [pbr::OriginalName("NST_Unkown")] NstUnkown = 0,
    /// <summary>
    ///普通路人
    /// </summary>
    [pbr::OriginalName("NST_Normal")] NstNormal = 1,
    /// <summary>
    ///警卫
    /// </summary>
    [pbr::OriginalName("NST_GUARD")] NstGuard = 2,
    /// <summary>
    ///摊贩
    /// </summary>
    [pbr::OriginalName("NST_PEDDLER")] NstPeddler = 3,
    /// <summary>
    ///怪物
    /// </summary>
    [pbr::OriginalName("NST_MONSTER")] NstMonster = 4,
  }

  /// <summary>
  ///物件子类型
  /// </summary>
  public enum ThingSubType {
    [pbr::OriginalName("Thing_Unkown")] ThingUnkown = 0,
    /// <summary>
    ///神源球
    /// </summary>
    [pbr::OriginalName("Thing_Mp")] ThingMp = 1,
    /// <summary>
    ///免伤环 
    /// </summary>
    [pbr::OriginalName("Thing_MianShangHuan")] ThingMianShangHuan = 2,
    /// <summary>
    ///免伤环水晶石
    /// </summary>
    [pbr::OriginalName("Thing_MianShangStone")] ThingMianShangStone = 3,
    /// <summary>
    ///望天区域
    /// </summary>
    [pbr::OriginalName("Thing_WangTianArea")] ThingWangTianArea = 4,
    /// <summary>
    ///青鸾羽
    /// </summary>
    [pbr::OriginalName("Thing_QingRuanYu")] ThingQingRuanYu = 5,
    /// <summary>
    ///地狱之火
    /// </summary>
    [pbr::OriginalName("Thing_DiYuZhiHuo")] ThingDiYuZhiHuo = 6,
    /// <summary>
    ///升云杖
    /// </summary>
    [pbr::OriginalName("Thing_ShenYunZhang")] ThingShenYunZhang = 7,
    /// <summary>
    ///烈风杖
    /// </summary>
    [pbr::OriginalName("Thing_LieFengZhang")] ThingLieFengZhang = 8,
    /// <summary>
    ///小宝箱
    /// </summary>
    [pbr::OriginalName("Thing_SmallBox")] ThingSmallBox = 9,
    /// <summary>
    ///中宝箱
    /// </summary>
    [pbr::OriginalName("Thing_MiddleBox")] ThingMiddleBox = 10,
    /// <summary>
    ///大宝箱
    /// </summary>
    [pbr::OriginalName("Thing_BigBox")] ThingBigBox = 11,
    /// <summary>
    ///经验书
    /// </summary>
    [pbr::OriginalName("Thing_ExpBook")] ThingExpBook = 12,
    /// <summary>
    ///雷链
    /// </summary>
    [pbr::OriginalName("Thing_ThunderChain")] ThingThunderChain = 13,
  }

  /// <summary>
  ///连接点子类型
  /// </summary>
  public enum LadderSubType {
    [pbr::OriginalName("LST_Unknow")] LstUnknow = 0,
    [pbr::OriginalName("LST_Normal")] LstNormal = 1,
    /// <summary>
    ///藏匿井 
    /// </summary>
    [pbr::OriginalName("LST_Well")] LstWell = 2,
    /// <summary>
    ///快速通道
    /// </summary>
    [pbr::OriginalName("LST_Quick_Way")] LstQuickWay = 3,
  }

  public enum BonfireState {
    [pbr::OriginalName("BFS_None")] BfsNone = 0,
    /// <summary>
    /// 收集材料阶段
    /// </summary>
    [pbr::OriginalName("BFS_Collect")] BfsCollect = 1,
    /// <summary>
    /// 正在点火
    /// </summary>
    [pbr::OriginalName("BFS_Ignite")] BfsIgnite = 2,
    /// <summary>
    /// 正在燃烧   
    /// </summary>
    [pbr::OriginalName("BFS_Burn")] BfsBurn = 3,
  }

  public enum ScatterState {
    [pbr::OriginalName("SS_None")] SsNone = 0,
    /// <summary>
    /// 收集材料阶段
    /// </summary>
    [pbr::OriginalName("SS_UnScatted")] SsUnScatted = 1,
    /// <summary>
    /// 正在点火
    /// </summary>
    [pbr::OriginalName("SS_Scatting")] SsScatting = 2,
    /// <summary>
    /// 正在燃烧   
    /// </summary>
    [pbr::OriginalName("SS_Scatted")] SsScatted = 3,
  }

  /// <summary>
  ///头顶状态
  /// </summary>
  public enum HeadEffectState {
    [pbr::OriginalName("HES_None")] HesNone = 0,
    /// <summary>
    ///空
    /// </summary>
    [pbr::OriginalName("HES_Empty")] HesEmpty = 1,
    /// <summary>
    ///眩晕
    /// </summary>
    [pbr::OriginalName("HES_Dizziness")] HesDizziness = 2,
  }

  /// <summary>
  ///炎玉的状态
  /// </summary>
  public enum FireDiamondType {
    [pbr::OriginalName("FD_None")] FdNone = 0,
    /// <summary>
    ///吸收能量状态
    /// </summary>
    [pbr::OriginalName("FD_Powering")] FdPowering = 1,
    /// <summary>
    ///被拾取状态
    /// </summary>
    [pbr::OriginalName("FD_BeCatch")] FdBeCatch = 2,
    /// <summary>
    ///达到能量，引爆状态
    /// </summary>
    [pbr::OriginalName("FD_Bomb")] FdBomb = 3,
    /// <summary>
    ///效果结束，休眠
    /// </summary>
    [pbr::OriginalName("FD_Sleep")] FdSleep = 4,
  }

  public enum EffectBindType {
    [pbr::OriginalName("Bind_WorldPosition")] BindWorldPosition = 0,
    [pbr::OriginalName("Bind_Root")] BindRoot = 1,
  }

  public enum EffectBindRootType {
    [pbr::OriginalName("BindRoot_Logic")] BindRootLogic = 0,
    [pbr::OriginalName("BindRoot_LeftHand")] BindRootLeftHand = 1,
    [pbr::OriginalName("BindRoot_RightHand")] BindRootRightHand = 2,
    [pbr::OriginalName("BindRoot_LeftFoot")] BindRootLeftFoot = 3,
    [pbr::OriginalName("BindRoot_RightFoot")] BindRootRightFoot = 4,
    [pbr::OriginalName("BindRoot_Head")] BindRootHead = 5,
    [pbr::OriginalName("Elbow_R_endSlider0")] ElbowREndSlider0 = 6,
    [pbr::OriginalName("Elbow_L_endSlider0")] ElbowLEndSlider0 = 7,
    [pbr::OriginalName("BR_Weapon")] BrWeapon = 8,
    [pbr::OriginalName("Bip001Head")] Bip001Head = 9,
    [pbr::OriginalName("Bip001LForearm")] Bip001Lforearm = 10,
    [pbr::OriginalName("Bip001RForearm")] Bip001Rforearm = 11,
    [pbr::OriginalName("Bip001Spine2")] Bip001Spine2 = 12,
    [pbr::OriginalName("Bip001")] Bip001 = 13,
  }

  #endregion

  #region Messages
  public sealed partial class Float3 : pb::IMessage<Float3>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Float3> _parser = new pb::MessageParser<Float3>(() => new Float3());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Float3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoCommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Float3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Float3(Float3 other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Float3 Clone() {
      return new Float3(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { if ((_hasBits0 & 1) != 0) { return x_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasX {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "x" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsXDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearX() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { if ((_hasBits0 & 2) != 0) { return y_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "y" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsYDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearY() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { if ((_hasBits0 & 4) != 0) { return z_; } else { return 0F; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        z_ = value;
      }
    }
    /// <summary>Gets whether the "z" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasZ {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "z" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsZDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "z" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearZ() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Float3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Float3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (HasZ) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasX)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsXDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasY)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsYDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasZ)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsZDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasX)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsXDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasY)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsYDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasZ)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsZDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasX)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsXDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasY)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsYDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasZ)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsZDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Float3 other) {
      if (other == null) {
        return;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasZ) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Float4 : pb::IMessage<Float4>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Float4> _parser = new pb::MessageParser<Float4>(() => new Float4());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Float4> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoCommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Float4() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Float4(Float4 other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      w_ = other.w_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Float4 Clone() {
      return new Float4(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { if ((_hasBits0 & 1) != 0) { return x_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasX {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "x" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsXDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearX() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { if ((_hasBits0 & 2) != 0) { return y_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "y" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsYDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearY() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { if ((_hasBits0 & 4) != 0) { return z_; } else { return 0F; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        z_ = value;
      }
    }
    /// <summary>Gets whether the "z" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasZ {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "z" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsZDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "z" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearZ() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 4;
    private float w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float W {
      get { if ((_hasBits0 & 8) != 0) { return w_; } else { return 0F; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        w_ = value;
      }
    }
    /// <summary>Gets whether the "w" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasW {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "w" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "w" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearW() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Float4);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Float4 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(W, other.W)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (HasZ) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (HasW) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(W);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasX)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsXDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasY)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsYDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasZ)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsZDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasW)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsWDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(W);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasX)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsXDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasY)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsYDirty)) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasZ)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsZDirty)) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasW)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsWDirty)) {
        output.WriteRawTag(37);
        output.WriteFloat(W);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasX)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsXDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasY)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsYDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasZ)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsZDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasW)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsWDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Float4 other) {
      if (other == null) {
        return;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasZ) {
        Z = other.Z;
      }
      if (other.HasW) {
        W = other.W;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            W = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            W = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///保留三位小数，即实际值为 value / 1000
  /// </summary>
  public sealed partial class Int3 : pb::IMessage<Int3>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Int3> _parser = new pb::MessageParser<Int3>(() => new Int3());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Int3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoCommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int3(Int3 other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int3 Clone() {
      return new Int3(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { if ((_hasBits0 & 1) != 0) { return x_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasX {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "x" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsXDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearX() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { if ((_hasBits0 & 2) != 0) { return y_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "y" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsYDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearY() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private int z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Z {
      get { if ((_hasBits0 & 4) != 0) { return z_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        z_ = value;
      }
    }
    /// <summary>Gets whether the "z" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasZ {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "z" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsZDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "z" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearZ() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Int3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Int3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasX) hash ^= X.GetHashCode();
      if (HasY) hash ^= Y.GetHashCode();
      if (HasZ) hash ^= Z.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasX)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsXDirty)) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasY)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsYDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasZ)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsZDirty)) {
        output.WriteRawTag(24);
        output.WriteInt32(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasX)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsXDirty)) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasY)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsYDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasZ)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsZDirty)) {
        output.WriteRawTag(24);
        output.WriteInt32(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasX)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsXDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if ((scope == pb.WriteScope.FULL && HasY)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsYDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if ((scope == pb.WriteScope.FULL && HasZ)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsZDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Int3 other) {
      if (other == null) {
        return;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasZ) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Z = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Z = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// </summary>
  public sealed partial class Int4 : pb::IMessage<Int4>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Int4> _parser = new pb::MessageParser<Int4>(() => new Int4());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Int4> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoCommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int4() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int4(Int4 other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      w_ = other.w_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int4 Clone() {
      return new Int4(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { if ((_hasBits0 & 1) != 0) { return x_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasX {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "x" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsXDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearX() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { if ((_hasBits0 & 2) != 0) { return y_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "y" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsYDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearY() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private int z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Z {
      get { if ((_hasBits0 & 4) != 0) { return z_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 4;
        z_ = value;
      }
    }
    /// <summary>Gets whether the "z" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasZ {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "z" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsZDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "z" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearZ() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 4;
    private int w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int W {
      get { if ((_hasBits0 & 8) != 0) { return w_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 8;
        w_ = value;
      }
    }
    /// <summary>Gets whether the "w" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasW {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "w" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "w" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearW() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Int4);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Int4 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (W != other.W) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasX) hash ^= X.GetHashCode();
      if (HasY) hash ^= Y.GetHashCode();
      if (HasZ) hash ^= Z.GetHashCode();
      if (HasW) hash ^= W.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasX)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsXDirty)) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasY)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsYDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasZ)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsZDirty)) {
        output.WriteRawTag(24);
        output.WriteInt32(Z);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasW)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsWDirty)) {
        output.WriteRawTag(32);
        output.WriteInt32(W);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasX)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsXDirty)) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasY)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsYDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasZ)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsZDirty)) {
        output.WriteRawTag(24);
        output.WriteInt32(Z);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasW)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsWDirty)) {
        output.WriteRawTag(32);
        output.WriteInt32(W);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasX)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsXDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if ((scope == pb.WriteScope.FULL && HasY)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsYDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if ((scope == pb.WriteScope.FULL && HasZ)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsZDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
      }
      if ((scope == pb.WriteScope.FULL && HasW)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsWDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(W);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Int4 other) {
      if (other == null) {
        return;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasZ) {
        Z = other.Z;
      }
      if (other.HasW) {
        W = other.W;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Z = input.ReadInt32();
            break;
          }
          case 32: {
            W = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Z = input.ReadInt32();
            break;
          }
          case 32: {
            W = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PropData : pb::IMessage<PropData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PropData> _parser = new pb::MessageParser<PropData>(() => new PropData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoCommonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropData(PropData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      id_ = other.id_;
      cfgId_ = other.cfgId_;
      currencyPropData_ = other.HasCurrencyPropData ? other.currencyPropData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropData Clone() {
      return new PropData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    /// <summary>
    ///instanceID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return 0UL; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cfg_id" field.</summary>
    public const int CfgIdFieldNumber = 2;
    private uint cfgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CfgId {
      get { if ((_hasBits0 & 2) != 0) { return cfgId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        cfgId_ = value;
      }
    }
    /// <summary>Gets whether the "cfg_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCfgId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "cfg_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCfgIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cfg_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCfgId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "currency_prop_data" field.</summary>
    public const int CurrencyPropDataFieldNumber = 12;
    private global::Protocol.CurrencyPropData currencyPropData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.CurrencyPropData CurrencyPropData {
      get { return currencyPropData_; }
      set {
        currencyPropData_ = value;
      }
    }
    /// <summary>Gets whether the currency_prop_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrencyPropData {
      get { return currencyPropData_ != null; }
    }
    /// <summary>Clears the value of the currency_prop_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrencyPropData() {
      currencyPropData_ = null;
    }
    /// <summary>Gets whether the "currency_prop_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCurrencyPropDataDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CfgId != other.CfgId) return false;
      if (!object.Equals(CurrencyPropData, other.CurrencyPropData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasCfgId) hash ^= CfgId.GetHashCode();
      if (HasCurrencyPropData) hash ^= CurrencyPropData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCfgId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCfgIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(CfgId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCurrencyPropData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCurrencyPropDataDirty)) {
        output.WriteRawTag(98);
        output.WriteMessage(CurrencyPropData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCfgId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCfgIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(CfgId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCurrencyPropData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCurrencyPropDataDirty)) {
        output.WriteRawTag(98);
        output.WriteMessage(CurrencyPropData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if ((scope == pb.WriteScope.FULL && HasCfgId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCfgIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CfgId);
      }
      if (HasCurrencyPropData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(CurrencyPropData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 4;
        } else {
          _dirtyBits0 &= ~4;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PropData other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasCfgId) {
        CfgId = other.CfgId;
      }
      if (other.HasCurrencyPropData) {
        if (!HasCurrencyPropData) {
          CurrencyPropData = new global::Protocol.CurrencyPropData();
        }
        CurrencyPropData.MergeFrom(other.CurrencyPropData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            CfgId = input.ReadUInt32();
            break;
          }
          case 98: {
            if (!HasCurrencyPropData) {
              CurrencyPropData = new global::Protocol.CurrencyPropData();
            }
            input.ReadMessage(CurrencyPropData);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            CfgId = input.ReadUInt32();
            break;
          }
          case 98: {
            if (!HasCurrencyPropData) {
              CurrencyPropData = new global::Protocol.CurrencyPropData();
            }
            input.ReadMessage(CurrencyPropData);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CurrencyPropData : pb::IMessage<CurrencyPropData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CurrencyPropData> _parser = new pb::MessageParser<CurrencyPropData>(() => new CurrencyPropData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrencyPropData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoCommonReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyPropData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyPropData(CurrencyPropData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      currencyType_ = other.currencyType_;
      currencyNum_ = other.currencyNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyPropData Clone() {
      return new CurrencyPropData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "currency_type" field.</summary>
    public const int CurrencyTypeFieldNumber = 1;
    private global::Protocol.CurrencyType currencyType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.CurrencyType CurrencyType {
      get { if ((_hasBits0 & 1) != 0) { return currencyType_; } else { return global::Protocol.CurrencyType.Coin; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        currencyType_ = value;
      }
    }
    /// <summary>Gets whether the "currency_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrencyType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "currency_type" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCurrencyTypeDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "currency_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrencyType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "currency_num" field.</summary>
    public const int CurrencyNumFieldNumber = 2;
    private int currencyNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrencyNum {
      get { if ((_hasBits0 & 2) != 0) { return currencyNum_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        currencyNum_ = value;
      }
    }
    /// <summary>Gets whether the "currency_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrencyNum {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "currency_num" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCurrencyNumDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "currency_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrencyNum() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurrencyPropData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurrencyPropData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrencyType != other.CurrencyType) return false;
      if (CurrencyNum != other.CurrencyNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCurrencyType) hash ^= CurrencyType.GetHashCode();
      if (HasCurrencyNum) hash ^= CurrencyNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasCurrencyType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCurrencyTypeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CurrencyType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCurrencyNum)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCurrencyNumDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrencyNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasCurrencyType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCurrencyTypeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CurrencyType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCurrencyNum)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCurrencyNumDirty)) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrencyNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasCurrencyType)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCurrencyTypeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CurrencyType);
      }
      if ((scope == pb.WriteScope.FULL && HasCurrencyNum)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCurrencyNumDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrencyNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurrencyPropData other) {
      if (other == null) {
        return;
      }
      if (other.HasCurrencyType) {
        CurrencyType = other.CurrencyType;
      }
      if (other.HasCurrencyNum) {
        CurrencyNum = other.CurrencyNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurrencyType = (global::Protocol.CurrencyType) input.ReadEnum();
            break;
          }
          case 16: {
            CurrencyNum = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CurrencyType = (global::Protocol.CurrencyType) input.ReadEnum();
            break;
          }
          case 16: {
            CurrencyNum = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class VirtualPropData : pb::IMessage<VirtualPropData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VirtualPropData> _parser = new pb::MessageParser<VirtualPropData>(() => new VirtualPropData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VirtualPropData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoCommonReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VirtualPropData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VirtualPropData(VirtualPropData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      id_ = other.id_;
      cfgId_ = other.cfgId_;
      cluePropData_ = other.HasCluePropData ? other.cluePropData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VirtualPropData Clone() {
      return new VirtualPropData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    /// <summary>
    ///instanceID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return 0UL; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cfg_id" field.</summary>
    public const int CfgIdFieldNumber = 2;
    private uint cfgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CfgId {
      get { if ((_hasBits0 & 2) != 0) { return cfgId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        cfgId_ = value;
      }
    }
    /// <summary>Gets whether the "cfg_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCfgId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "cfg_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCfgIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cfg_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCfgId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "clue_prop_data" field.</summary>
    public const int CluePropDataFieldNumber = 10;
    private global::Protocol.CluePropData cluePropData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.CluePropData CluePropData {
      get { return cluePropData_; }
      set {
        cluePropData_ = value;
      }
    }
    /// <summary>Gets whether the clue_prop_data field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCluePropData {
      get { return cluePropData_ != null; }
    }
    /// <summary>Clears the value of the clue_prop_data field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCluePropData() {
      cluePropData_ = null;
    }
    /// <summary>Gets whether the "clue_prop_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCluePropDataDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VirtualPropData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VirtualPropData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CfgId != other.CfgId) return false;
      if (!object.Equals(CluePropData, other.CluePropData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasCfgId) hash ^= CfgId.GetHashCode();
      if (HasCluePropData) hash ^= CluePropData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCfgId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCfgIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(CfgId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCluePropData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCluePropDataDirty)) {
        output.WriteRawTag(82);
        output.WriteMessage(CluePropData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCfgId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCfgIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(CfgId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCluePropData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCluePropDataDirty)) {
        output.WriteRawTag(82);
        output.WriteMessage(CluePropData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if ((scope == pb.WriteScope.FULL && HasCfgId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCfgIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CfgId);
      }
      if (HasCluePropData) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(CluePropData, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 4;
        } else {
          _dirtyBits0 &= ~4;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VirtualPropData other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasCfgId) {
        CfgId = other.CfgId;
      }
      if (other.HasCluePropData) {
        if (!HasCluePropData) {
          CluePropData = new global::Protocol.CluePropData();
        }
        CluePropData.MergeFrom(other.CluePropData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            CfgId = input.ReadUInt32();
            break;
          }
          case 82: {
            if (!HasCluePropData) {
              CluePropData = new global::Protocol.CluePropData();
            }
            input.ReadMessage(CluePropData);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            CfgId = input.ReadUInt32();
            break;
          }
          case 82: {
            if (!HasCluePropData) {
              CluePropData = new global::Protocol.CluePropData();
            }
            input.ReadMessage(CluePropData);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///线索物品
  /// </summary>
  public sealed partial class CluePropData : pb::IMessage<CluePropData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CluePropData> _parser = new pb::MessageParser<CluePropData>(() => new CluePropData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CluePropData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoCommonReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CluePropData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CluePropData(CluePropData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      id_ = other.id_;
      fromEntityId_ = other.fromEntityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CluePropData Clone() {
      return new CluePropData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "from_entity_id" field.</summary>
    public const int FromEntityIdFieldNumber = 2;
    private ulong fromEntityId_;
    /// <summary>
    ///线索来源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FromEntityId {
      get { if ((_hasBits0 & 2) != 0) { return fromEntityId_; } else { return 0UL; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        fromEntityId_ = value;
      }
    }
    /// <summary>Gets whether the "from_entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFromEntityId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "from_entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFromEntityIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "from_entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFromEntityId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CluePropData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CluePropData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (FromEntityId != other.FromEntityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasFromEntityId) hash ^= FromEntityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFromEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFromEntityIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt64(FromEntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFromEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFromEntityIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt64(FromEntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if ((scope == pb.WriteScope.FULL && HasFromEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsFromEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FromEntityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CluePropData other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasFromEntityId) {
        FromEntityId = other.FromEntityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            FromEntityId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            FromEntityId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///线索至宝
  /// </summary>
  public sealed partial class ClueBigBoxData : pb::IMessage<ClueBigBoxData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClueBigBoxData> _parser = new pb::MessageParser<ClueBigBoxData>(() => new ClueBigBoxData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClueBigBoxData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoCommonReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClueBigBoxData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClueBigBoxData(ClueBigBoxData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      bigBoxEntityId_ = other.bigBoxEntityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClueBigBoxData Clone() {
      return new ClueBigBoxData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "big_box_entity_id" field.</summary>
    public const int BigBoxEntityIdFieldNumber = 1;
    private ulong bigBoxEntityId_;
    /// <summary>
    ///宝箱InstanceId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BigBoxEntityId {
      get { if ((_hasBits0 & 1) != 0) { return bigBoxEntityId_; } else { return 0UL; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        bigBoxEntityId_ = value;
      }
    }
    /// <summary>Gets whether the "big_box_entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBigBoxEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "big_box_entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBigBoxEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "big_box_entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBigBoxEntityId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClueBigBoxData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClueBigBoxData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BigBoxEntityId != other.BigBoxEntityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBigBoxEntityId) hash ^= BigBoxEntityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasBigBoxEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBigBoxEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(BigBoxEntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasBigBoxEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBigBoxEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(BigBoxEntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasBigBoxEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsBigBoxEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BigBoxEntityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClueBigBoxData other) {
      if (other == null) {
        return;
      }
      if (other.HasBigBoxEntityId) {
        BigBoxEntityId = other.BigBoxEntityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BigBoxEntityId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BigBoxEntityId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///藏匿区上的停留点
  /// </summary>
  public sealed partial class AreaStandPoint : pb::IMessage<AreaStandPoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AreaStandPoint> _parser = new pb::MessageParser<AreaStandPoint>(() => new AreaStandPoint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AreaStandPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoCommonReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AreaStandPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AreaStandPoint(AreaStandPoint other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      id_ = other.id_;
      position_ = other.HasPosition ? other.position_.Clone() : null;
      forward_ = other.HasForward ? other.forward_.Clone() : null;
      peopleId_ = other.peopleId_;
      minStandTime_ = other.minStandTime_;
      maxStandTime_ = other.maxStandTime_;
      needOffset_ = other.needOffset_;
      offsetValue_ = other.offsetValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AreaStandPoint Clone() {
      return new AreaStandPoint(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Protocol.Float3 position_;
    /// <summary>
    ///坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }
    /// <summary>Gets whether the position field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPosition {
      get { return position_ != null; }
    }
    /// <summary>Clears the value of the position field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPosition() {
      position_ = null;
    }
    /// <summary>Gets whether the "position" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPositionDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    /// <summary>Field number for the "forward" field.</summary>
    public const int ForwardFieldNumber = 3;
    private global::Protocol.Float3 forward_;
    /// <summary>
    ///朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 Forward {
      get { return forward_; }
      set {
        forward_ = value;
      }
    }
    /// <summary>Gets whether the forward field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasForward {
      get { return forward_ != null; }
    }
    /// <summary>Clears the value of the forward field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearForward() {
      forward_ = null;
    }
    /// <summary>Gets whether the "forward" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsForwardDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    /// <summary>Field number for the "peopleId" field.</summary>
    public const int PeopleIdFieldNumber = 4;
    private uint peopleId_;
    /// <summary>
    ///占用者ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PeopleId {
      get { if ((_hasBits0 & 2) != 0) { return peopleId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 8;
        peopleId_ = value;
      }
    }
    /// <summary>Gets whether the "peopleId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPeopleId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "peopleId" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPeopleIdDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "peopleId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPeopleId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "minStandTime" field.</summary>
    public const int MinStandTimeFieldNumber = 5;
    private float minStandTime_;
    /// <summary>
    ///最小停留时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinStandTime {
      get { if ((_hasBits0 & 4) != 0) { return minStandTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 16;
        minStandTime_ = value;
      }
    }
    /// <summary>Gets whether the "minStandTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMinStandTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "minStandTime" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMinStandTimeDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "minStandTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMinStandTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "maxStandTime" field.</summary>
    public const int MaxStandTimeFieldNumber = 6;
    private float maxStandTime_;
    /// <summary>
    ///最大停留时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxStandTime {
      get { if ((_hasBits0 & 8) != 0) { return maxStandTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 32;
        maxStandTime_ = value;
      }
    }
    /// <summary>Gets whether the "maxStandTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxStandTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "maxStandTime" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMaxStandTimeDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "maxStandTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxStandTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "need_offset" field.</summary>
    public const int NeedOffsetFieldNumber = 7;
    private bool needOffset_;
    /// <summary>
    ///是否需要偏移
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NeedOffset {
      get { if ((_hasBits0 & 16) != 0) { return needOffset_; } else { return false; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 64;
        needOffset_ = value;
      }
    }
    /// <summary>Gets whether the "need_offset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNeedOffset {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "need_offset" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNeedOffsetDirty {
      get { return (_dirtyBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "need_offset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNeedOffset() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "offset_value" field.</summary>
    public const int OffsetValueFieldNumber = 8;
    private float offsetValue_;
    /// <summary>
    ///偏移范围值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OffsetValue {
      get { if ((_hasBits0 & 32) != 0) { return offsetValue_; } else { return 0F; } }
      set {
        _hasBits0 |= 32;
        _dirtyBits0 |= 128;
        offsetValue_ = value;
      }
    }
    /// <summary>Gets whether the "offset_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOffsetValue {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Gets whether the "offset_value" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOffsetValueDirty {
      get { return (_dirtyBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "offset_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOffsetValue() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AreaStandPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AreaStandPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Forward, other.Forward)) return false;
      if (PeopleId != other.PeopleId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinStandTime, other.MinStandTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxStandTime, other.MaxStandTime)) return false;
      if (NeedOffset != other.NeedOffset) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OffsetValue, other.OffsetValue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasPosition) hash ^= Position.GetHashCode();
      if (HasForward) hash ^= Forward.GetHashCode();
      if (HasPeopleId) hash ^= PeopleId.GetHashCode();
      if (HasMinStandTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinStandTime);
      if (HasMaxStandTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxStandTime);
      if (HasNeedOffset) hash ^= NeedOffset.GetHashCode();
      if (HasOffsetValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OffsetValue);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPositionDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasForward)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsForwardDirty)) {
        output.WriteRawTag(26);
        output.WriteMessage(Forward);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPeopleId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPeopleIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(PeopleId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMinStandTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMinStandTimeDirty)) {
        output.WriteRawTag(45);
        output.WriteFloat(MinStandTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMaxStandTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMaxStandTimeDirty)) {
        output.WriteRawTag(53);
        output.WriteFloat(MaxStandTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNeedOffset)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNeedOffsetDirty)) {
        output.WriteRawTag(56);
        output.WriteBool(NeedOffset);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOffsetValue)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOffsetValueDirty)) {
        output.WriteRawTag(69);
        output.WriteFloat(OffsetValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPosition)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPositionDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasForward)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsForwardDirty)) {
        output.WriteRawTag(26);
        output.WriteMessage(Forward);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasPeopleId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPeopleIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(PeopleId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMinStandTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMinStandTimeDirty)) {
        output.WriteRawTag(45);
        output.WriteFloat(MinStandTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasMaxStandTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMaxStandTimeDirty)) {
        output.WriteRawTag(53);
        output.WriteFloat(MaxStandTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNeedOffset)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNeedOffsetDirty)) {
        output.WriteRawTag(56);
        output.WriteBool(NeedOffset);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasOffsetValue)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsOffsetValueDirty)) {
        output.WriteRawTag(69);
        output.WriteFloat(OffsetValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (HasPosition) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Position, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 2;
        } else {
          _dirtyBits0 &= ~2;
        }
      }
      if (HasForward) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Forward, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 4;
        } else {
          _dirtyBits0 &= ~4;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasPeopleId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsPeopleIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PeopleId);
      }
      if ((scope == pb.WriteScope.FULL && HasMinStandTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsMinStandTimeDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasMaxStandTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsMaxStandTimeDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasNeedOffset)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNeedOffsetDirty)) {
        size += 1 + 1;
      }
      if ((scope == pb.WriteScope.FULL && HasOffsetValue)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsOffsetValueDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AreaStandPoint other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasPosition) {
        if (!HasPosition) {
          Position = new global::Protocol.Float3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.HasForward) {
        if (!HasForward) {
          Forward = new global::Protocol.Float3();
        }
        Forward.MergeFrom(other.Forward);
      }
      if (other.HasPeopleId) {
        PeopleId = other.PeopleId;
      }
      if (other.HasMinStandTime) {
        MinStandTime = other.MinStandTime;
      }
      if (other.HasMaxStandTime) {
        MaxStandTime = other.MaxStandTime;
      }
      if (other.HasNeedOffset) {
        NeedOffset = other.NeedOffset;
      }
      if (other.HasOffsetValue) {
        OffsetValue = other.OffsetValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            if (!HasPosition) {
              Position = new global::Protocol.Float3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            if (!HasForward) {
              Forward = new global::Protocol.Float3();
            }
            input.ReadMessage(Forward);
            break;
          }
          case 32: {
            PeopleId = input.ReadUInt32();
            break;
          }
          case 45: {
            MinStandTime = input.ReadFloat();
            break;
          }
          case 53: {
            MaxStandTime = input.ReadFloat();
            break;
          }
          case 56: {
            NeedOffset = input.ReadBool();
            break;
          }
          case 69: {
            OffsetValue = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            if (!HasPosition) {
              Position = new global::Protocol.Float3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            if (!HasForward) {
              Forward = new global::Protocol.Float3();
            }
            input.ReadMessage(Forward);
            break;
          }
          case 32: {
            PeopleId = input.ReadUInt32();
            break;
          }
          case 45: {
            MinStandTime = input.ReadFloat();
            break;
          }
          case 53: {
            MaxStandTime = input.ReadFloat();
            break;
          }
          case 56: {
            NeedOffset = input.ReadBool();
            break;
          }
          case 69: {
            OffsetValue = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BoxColliderData : pb::IMessage<BoxColliderData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BoxColliderData> _parser = new pb::MessageParser<BoxColliderData>(() => new BoxColliderData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoxColliderData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoCommonReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoxColliderData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoxColliderData(BoxColliderData other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      center_ = other.HasCenter ? other.center_.Clone() : null;
      size_ = other.HasSize ? other.size_.Clone() : null;
      isTrigger_ = other.isTrigger_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoxColliderData Clone() {
      return new BoxColliderData(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "center" field.</summary>
    public const int CenterFieldNumber = 1;
    private global::Protocol.Float3 center_;
    /// <summary>
    ///中心点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 Center {
      get { return center_; }
      set {
        center_ = value;
      }
    }
    /// <summary>Gets whether the center field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCenter {
      get { return center_ != null; }
    }
    /// <summary>Clears the value of the center field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCenter() {
      center_ = null;
    }
    /// <summary>Gets whether the "center" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCenterDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 2;
    private global::Protocol.Float3 size_;
    /// <summary>
    ///大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Float3 Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }
    /// <summary>Gets whether the size field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSize {
      get { return size_ != null; }
    }
    /// <summary>Clears the value of the size field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSize() {
      size_ = null;
    }
    /// <summary>Gets whether the "size" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSizeDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    /// <summary>Field number for the "is_trigger" field.</summary>
    public const int IsTriggerFieldNumber = 3;
    private bool isTrigger_;
    /// <summary>
    ///是否trigger
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTrigger {
      get { if ((_hasBits0 & 1) != 0) { return isTrigger_; } else { return false; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 4;
        isTrigger_ = value;
      }
    }
    /// <summary>Gets whether the "is_trigger" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsTrigger {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "is_trigger" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIsTriggerDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "is_trigger" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsTrigger() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoxColliderData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoxColliderData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Center, other.Center)) return false;
      if (!object.Equals(Size, other.Size)) return false;
      if (IsTrigger != other.IsTrigger) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCenter) hash ^= Center.GetHashCode();
      if (HasSize) hash ^= Size.GetHashCode();
      if (HasIsTrigger) hash ^= IsTrigger.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasCenter)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCenterDirty)) {
        output.WriteRawTag(10);
        output.WriteMessage(Center);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSize)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSizeDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(Size);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsTrigger)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsTriggerDirty)) {
        output.WriteRawTag(24);
        output.WriteBool(IsTrigger);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasCenter)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCenterDirty)) {
        output.WriteRawTag(10);
        output.WriteMessage(Center);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasSize)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSizeDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(Size);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasIsTrigger)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIsTriggerDirty)) {
        output.WriteRawTag(24);
        output.WriteBool(IsTrigger);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if (HasCenter) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Center, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 1;
        } else {
          _dirtyBits0 &= ~1;
        }
      }
      if (HasSize) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Size, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 2;
        } else {
          _dirtyBits0 &= ~2;
        }
      }
      if ((scope == pb.WriteScope.FULL && HasIsTrigger)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIsTriggerDirty)) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoxColliderData other) {
      if (other == null) {
        return;
      }
      if (other.HasCenter) {
        if (!HasCenter) {
          Center = new global::Protocol.Float3();
        }
        Center.MergeFrom(other.Center);
      }
      if (other.HasSize) {
        if (!HasSize) {
          Size = new global::Protocol.Float3();
        }
        Size.MergeFrom(other.Size);
      }
      if (other.HasIsTrigger) {
        IsTrigger = other.IsTrigger;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasCenter) {
              Center = new global::Protocol.Float3();
            }
            input.ReadMessage(Center);
            break;
          }
          case 18: {
            if (!HasSize) {
              Size = new global::Protocol.Float3();
            }
            input.ReadMessage(Size);
            break;
          }
          case 24: {
            IsTrigger = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (!HasCenter) {
              Center = new global::Protocol.Float3();
            }
            input.ReadMessage(Center);
            break;
          }
          case 18: {
            if (!HasSize) {
              Size = new global::Protocol.Float3();
            }
            input.ReadMessage(Size);
            break;
          }
          case 24: {
            IsTrigger = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EntityEvent : pb::IMessage<EntityEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EntityEvent> _parser = new pb::MessageParser<EntityEvent>(() => new EntityEvent());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoCommonReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityEvent(EntityEvent other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      entityId_ = other.entityId_;
      eventId_ = other.eventId_;
      stringData_ = other.stringData_;
      uintData_ = other.uintData_;
      floatData_ = other.floatData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityEvent Clone() {
      return new EntityEvent(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private uint entityId_;
    /// <summary>
    ///Enity id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityId {
      get { if ((_hasBits0 & 1) != 0) { return entityId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        entityId_ = value;
      }
    }
    /// <summary>Gets whether the "entity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntityId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "entity_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEntityIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 2;
    private uint eventId_;
    /// <summary>
    ///事件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventId {
      get { if ((_hasBits0 & 2) != 0) { return eventId_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 2;
        eventId_ = value;
      }
    }
    /// <summary>Gets whether the "event_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "event_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEventIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "event_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "string_data" field.</summary>
    public const int StringDataFieldNumber = 3;
    private string stringData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringData {
      get { return stringData_ ?? ""; }
      set {
        stringData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "string_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStringData {
      get { return stringData_ != null; }
    }
    /// <summary>Gets whether the "string_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStringDataDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "string_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStringData() {
      stringData_ = null;
    }

    /// <summary>Field number for the "uint_data" field.</summary>
    public const int UintDataFieldNumber = 4;
    private uint uintData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UintData {
      get { if ((_hasBits0 & 4) != 0) { return uintData_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 8;
        uintData_ = value;
      }
    }
    /// <summary>Gets whether the "uint_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUintData {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "uint_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUintDataDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "uint_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUintData() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "float_data" field.</summary>
    public const int FloatDataFieldNumber = 5;
    private float floatData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FloatData {
      get { if ((_hasBits0 & 8) != 0) { return floatData_; } else { return 0F; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 16;
        floatData_ = value;
      }
    }
    /// <summary>Gets whether the "float_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFloatData {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "float_data" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFloatDataDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "float_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFloatData() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (EventId != other.EventId) return false;
      if (StringData != other.StringData) return false;
      if (UintData != other.UintData) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FloatData, other.FloatData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntityId) hash ^= EntityId.GetHashCode();
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (HasStringData) hash ^= StringData.GetHashCode();
      if (HasUintData) hash ^= UintData.GetHashCode();
      if (HasFloatData) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FloatData);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEventId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEventIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(EventId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStringData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStringDataDirty)) {
        output.WriteRawTag(26);
        output.WriteString(StringData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasUintData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUintDataDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(UintData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFloatData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFloatDataDirty)) {
        output.WriteRawTag(45);
        output.WriteFloat(FloatData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasEntityId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(EntityId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEventId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEventIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(EventId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStringData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStringDataDirty)) {
        output.WriteRawTag(26);
        output.WriteString(StringData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasUintData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUintDataDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(UintData);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasFloatData)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsFloatDataDirty)) {
        output.WriteRawTag(45);
        output.WriteFloat(FloatData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasEntityId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEntityIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityId);
      }
      if ((scope == pb.WriteScope.FULL && HasEventId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEventIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventId);
      }
      if ((scope == pb.WriteScope.FULL && HasStringData)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsStringDataDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringData);
      }
      if ((scope == pb.WriteScope.FULL && HasUintData)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsUintDataDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UintData);
      }
      if ((scope == pb.WriteScope.FULL && HasFloatData)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsFloatDataDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityEvent other) {
      if (other == null) {
        return;
      }
      if (other.HasEntityId) {
        EntityId = other.EntityId;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasStringData) {
        StringData = other.StringData;
      }
      if (other.HasUintData) {
        UintData = other.UintData;
      }
      if (other.HasFloatData) {
        FloatData = other.FloatData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            EventId = input.ReadUInt32();
            break;
          }
          case 26: {
            StringData = input.ReadString();
            break;
          }
          case 32: {
            UintData = input.ReadUInt32();
            break;
          }
          case 45: {
            FloatData = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadUInt32();
            break;
          }
          case 16: {
            EventId = input.ReadUInt32();
            break;
          }
          case 26: {
            StringData = input.ReadString();
            break;
          }
          case 32: {
            UintData = input.ReadUInt32();
            break;
          }
          case 45: {
            FloatData = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SkillSubDataItem : pb::IMessage<SkillSubDataItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SkillSubDataItem> _parser = new pb::MessageParser<SkillSubDataItem>(() => new SkillSubDataItem());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillSubDataItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoCommonReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillSubDataItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillSubDataItem(SkillSubDataItem other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      des_ = other.des_;
      needTag_ = other.needTag_;
      startKey_ = other.startKey_;
      startInputType_ = other.startInputType_;
      startLongDownTime_ = other.startLongDownTime_;
      interaction_ = other.interaction_;
      tagValue_ = other.tagValue_;
      keepTime_ = other.keepTime_;
      endKey_ = other.endKey_;
      endKeyInputType_ = other.endKeyInputType_;
      cancelKey_ = other.cancelKey_;
      cancelKeyInputType_ = other.cancelKeyInputType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillSubDataItem Clone() {
      return new SkillSubDataItem(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "des" field.</summary>
    public const int DesFieldNumber = 1;
    private string des_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Des {
      get { return des_ ?? ""; }
      set {
        des_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "des" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDes {
      get { return des_ != null; }
    }
    /// <summary>Gets whether the "des" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDesDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "des" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDes() {
      des_ = null;
    }

    /// <summary>Field number for the "need_tag" field.</summary>
    public const int NeedTagFieldNumber = 2;
    private string needTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NeedTag {
      get { return needTag_ ?? ""; }
      set {
        needTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "need_tag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNeedTag {
      get { return needTag_ != null; }
    }
    /// <summary>Gets whether the "need_tag" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNeedTagDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "need_tag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNeedTag() {
      needTag_ = null;
    }

    /// <summary>Field number for the "start_key" field.</summary>
    public const int StartKeyFieldNumber = 3;
    private string startKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartKey {
      get { return startKey_ ?? ""; }
      set {
        startKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "start_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStartKey {
      get { return startKey_ != null; }
    }
    /// <summary>Gets whether the "start_key" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStartKeyDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "start_key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStartKey() {
      startKey_ = null;
    }

    /// <summary>Field number for the "start_input_type" field.</summary>
    public const int StartInputTypeFieldNumber = 4;
    private uint startInputType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartInputType {
      get { if ((_hasBits0 & 1) != 0) { return startInputType_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 8;
        startInputType_ = value;
      }
    }
    /// <summary>Gets whether the "start_input_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStartInputType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "start_input_type" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStartInputTypeDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "start_input_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStartInputType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "start_long_down_time" field.</summary>
    public const int StartLongDownTimeFieldNumber = 5;
    private float startLongDownTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StartLongDownTime {
      get { if ((_hasBits0 & 2) != 0) { return startLongDownTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 16;
        startLongDownTime_ = value;
      }
    }
    /// <summary>Gets whether the "start_long_down_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStartLongDownTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "start_long_down_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStartLongDownTimeDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "start_long_down_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStartLongDownTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "interaction" field.</summary>
    public const int InteractionFieldNumber = 6;
    private uint interaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Interaction {
      get { if ((_hasBits0 & 4) != 0) { return interaction_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        _dirtyBits0 |= 32;
        interaction_ = value;
      }
    }
    /// <summary>Gets whether the "interaction" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInteraction {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Gets whether the "interaction" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInteractionDirty {
      get { return (_dirtyBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "interaction" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInteraction() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "tag_value" field.</summary>
    public const int TagValueFieldNumber = 7;
    private string tagValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TagValue {
      get { return tagValue_ ?? ""; }
      set {
        tagValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "tag_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTagValue {
      get { return tagValue_ != null; }
    }
    /// <summary>Gets whether the "tag_value" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTagValueDirty {
      get { return (_dirtyBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "tag_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTagValue() {
      tagValue_ = null;
    }

    /// <summary>Field number for the "keep_time" field.</summary>
    public const int KeepTimeFieldNumber = 8;
    private float keepTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float KeepTime {
      get { if ((_hasBits0 & 8) != 0) { return keepTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 8;
        _dirtyBits0 |= 128;
        keepTime_ = value;
      }
    }
    /// <summary>Gets whether the "keep_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKeepTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Gets whether the "keep_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsKeepTimeDirty {
      get { return (_dirtyBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "keep_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKeepTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "end_key" field.</summary>
    public const int EndKeyFieldNumber = 9;
    private string endKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndKey {
      get { return endKey_ ?? ""; }
      set {
        endKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "end_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEndKey {
      get { return endKey_ != null; }
    }
    /// <summary>Gets whether the "end_key" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEndKeyDirty {
      get { return (_dirtyBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "end_key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEndKey() {
      endKey_ = null;
    }

    /// <summary>Field number for the "end_key_input_type" field.</summary>
    public const int EndKeyInputTypeFieldNumber = 10;
    private uint endKeyInputType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndKeyInputType {
      get { if ((_hasBits0 & 16) != 0) { return endKeyInputType_; } else { return 0; } }
      set {
        _hasBits0 |= 16;
        _dirtyBits0 |= 512;
        endKeyInputType_ = value;
      }
    }
    /// <summary>Gets whether the "end_key_input_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEndKeyInputType {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Gets whether the "end_key_input_type" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEndKeyInputTypeDirty {
      get { return (_dirtyBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "end_key_input_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEndKeyInputType() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "cancel_key" field.</summary>
    public const int CancelKeyFieldNumber = 11;
    private string cancelKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CancelKey {
      get { return cancelKey_ ?? ""; }
      set {
        cancelKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cancel_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCancelKey {
      get { return cancelKey_ != null; }
    }
    /// <summary>Gets whether the "cancel_key" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCancelKeyDirty {
      get { return (_dirtyBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "cancel_key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCancelKey() {
      cancelKey_ = null;
    }

    /// <summary>Field number for the "cancel_key_input_type" field.</summary>
    public const int CancelKeyInputTypeFieldNumber = 12;
    private uint cancelKeyInputType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CancelKeyInputType {
      get { if ((_hasBits0 & 32) != 0) { return cancelKeyInputType_; } else { return 0; } }
      set {
        _hasBits0 |= 32;
        _dirtyBits0 |= 2048;
        cancelKeyInputType_ = value;
      }
    }
    /// <summary>Gets whether the "cancel_key_input_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCancelKeyInputType {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Gets whether the "cancel_key_input_type" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCancelKeyInputTypeDirty {
      get { return (_dirtyBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "cancel_key_input_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCancelKeyInputType() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillSubDataItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillSubDataItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Des != other.Des) return false;
      if (NeedTag != other.NeedTag) return false;
      if (StartKey != other.StartKey) return false;
      if (StartInputType != other.StartInputType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartLongDownTime, other.StartLongDownTime)) return false;
      if (Interaction != other.Interaction) return false;
      if (TagValue != other.TagValue) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(KeepTime, other.KeepTime)) return false;
      if (EndKey != other.EndKey) return false;
      if (EndKeyInputType != other.EndKeyInputType) return false;
      if (CancelKey != other.CancelKey) return false;
      if (CancelKeyInputType != other.CancelKeyInputType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDes) hash ^= Des.GetHashCode();
      if (HasNeedTag) hash ^= NeedTag.GetHashCode();
      if (HasStartKey) hash ^= StartKey.GetHashCode();
      if (HasStartInputType) hash ^= StartInputType.GetHashCode();
      if (HasStartLongDownTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartLongDownTime);
      if (HasInteraction) hash ^= Interaction.GetHashCode();
      if (HasTagValue) hash ^= TagValue.GetHashCode();
      if (HasKeepTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(KeepTime);
      if (HasEndKey) hash ^= EndKey.GetHashCode();
      if (HasEndKeyInputType) hash ^= EndKeyInputType.GetHashCode();
      if (HasCancelKey) hash ^= CancelKey.GetHashCode();
      if (HasCancelKeyInputType) hash ^= CancelKeyInputType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasDes)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDesDirty)) {
        output.WriteRawTag(10);
        output.WriteString(Des);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNeedTag)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNeedTagDirty)) {
        output.WriteRawTag(18);
        output.WriteString(NeedTag);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStartKey)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStartKeyDirty)) {
        output.WriteRawTag(26);
        output.WriteString(StartKey);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStartInputType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStartInputTypeDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(StartInputType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStartLongDownTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStartLongDownTimeDirty)) {
        output.WriteRawTag(45);
        output.WriteFloat(StartLongDownTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasInteraction)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsInteractionDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(Interaction);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTagValue)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTagValueDirty)) {
        output.WriteRawTag(58);
        output.WriteString(TagValue);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasKeepTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsKeepTimeDirty)) {
        output.WriteRawTag(69);
        output.WriteFloat(KeepTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEndKey)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEndKeyDirty)) {
        output.WriteRawTag(74);
        output.WriteString(EndKey);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEndKeyInputType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEndKeyInputTypeDirty)) {
        output.WriteRawTag(80);
        output.WriteUInt32(EndKeyInputType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCancelKey)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCancelKeyDirty)) {
        output.WriteRawTag(90);
        output.WriteString(CancelKey);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCancelKeyInputType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCancelKeyInputTypeDirty)) {
        output.WriteRawTag(96);
        output.WriteUInt32(CancelKeyInputType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasDes)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsDesDirty)) {
        output.WriteRawTag(10);
        output.WriteString(Des);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasNeedTag)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNeedTagDirty)) {
        output.WriteRawTag(18);
        output.WriteString(NeedTag);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStartKey)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStartKeyDirty)) {
        output.WriteRawTag(26);
        output.WriteString(StartKey);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStartInputType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStartInputTypeDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(StartInputType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasStartLongDownTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsStartLongDownTimeDirty)) {
        output.WriteRawTag(45);
        output.WriteFloat(StartLongDownTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasInteraction)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsInteractionDirty)) {
        output.WriteRawTag(48);
        output.WriteUInt32(Interaction);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasTagValue)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTagValueDirty)) {
        output.WriteRawTag(58);
        output.WriteString(TagValue);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasKeepTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsKeepTimeDirty)) {
        output.WriteRawTag(69);
        output.WriteFloat(KeepTime);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEndKey)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEndKeyDirty)) {
        output.WriteRawTag(74);
        output.WriteString(EndKey);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasEndKeyInputType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsEndKeyInputTypeDirty)) {
        output.WriteRawTag(80);
        output.WriteUInt32(EndKeyInputType);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCancelKey)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCancelKeyDirty)) {
        output.WriteRawTag(90);
        output.WriteString(CancelKey);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasCancelKeyInputType)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCancelKeyInputTypeDirty)) {
        output.WriteRawTag(96);
        output.WriteUInt32(CancelKeyInputType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasDes)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsDesDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Des);
      }
      if ((scope == pb.WriteScope.FULL && HasNeedTag)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNeedTagDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NeedTag);
      }
      if ((scope == pb.WriteScope.FULL && HasStartKey)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsStartKeyDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartKey);
      }
      if ((scope == pb.WriteScope.FULL && HasStartInputType)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsStartInputTypeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartInputType);
      }
      if ((scope == pb.WriteScope.FULL && HasStartLongDownTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsStartLongDownTimeDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasInteraction)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsInteractionDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Interaction);
      }
      if ((scope == pb.WriteScope.FULL && HasTagValue)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTagValueDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TagValue);
      }
      if ((scope == pb.WriteScope.FULL && HasKeepTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsKeepTimeDirty)) {
        size += 1 + 4;
      }
      if ((scope == pb.WriteScope.FULL && HasEndKey)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEndKeyDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndKey);
      }
      if ((scope == pb.WriteScope.FULL && HasEndKeyInputType)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsEndKeyInputTypeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndKeyInputType);
      }
      if ((scope == pb.WriteScope.FULL && HasCancelKey)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCancelKeyDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CancelKey);
      }
      if ((scope == pb.WriteScope.FULL && HasCancelKeyInputType)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCancelKeyInputTypeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CancelKeyInputType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillSubDataItem other) {
      if (other == null) {
        return;
      }
      if (other.HasDes) {
        Des = other.Des;
      }
      if (other.HasNeedTag) {
        NeedTag = other.NeedTag;
      }
      if (other.HasStartKey) {
        StartKey = other.StartKey;
      }
      if (other.HasStartInputType) {
        StartInputType = other.StartInputType;
      }
      if (other.HasStartLongDownTime) {
        StartLongDownTime = other.StartLongDownTime;
      }
      if (other.HasInteraction) {
        Interaction = other.Interaction;
      }
      if (other.HasTagValue) {
        TagValue = other.TagValue;
      }
      if (other.HasKeepTime) {
        KeepTime = other.KeepTime;
      }
      if (other.HasEndKey) {
        EndKey = other.EndKey;
      }
      if (other.HasEndKeyInputType) {
        EndKeyInputType = other.EndKeyInputType;
      }
      if (other.HasCancelKey) {
        CancelKey = other.CancelKey;
      }
      if (other.HasCancelKeyInputType) {
        CancelKeyInputType = other.CancelKeyInputType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Des = input.ReadString();
            break;
          }
          case 18: {
            NeedTag = input.ReadString();
            break;
          }
          case 26: {
            StartKey = input.ReadString();
            break;
          }
          case 32: {
            StartInputType = input.ReadUInt32();
            break;
          }
          case 45: {
            StartLongDownTime = input.ReadFloat();
            break;
          }
          case 48: {
            Interaction = input.ReadUInt32();
            break;
          }
          case 58: {
            TagValue = input.ReadString();
            break;
          }
          case 69: {
            KeepTime = input.ReadFloat();
            break;
          }
          case 74: {
            EndKey = input.ReadString();
            break;
          }
          case 80: {
            EndKeyInputType = input.ReadUInt32();
            break;
          }
          case 90: {
            CancelKey = input.ReadString();
            break;
          }
          case 96: {
            CancelKeyInputType = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Des = input.ReadString();
            break;
          }
          case 18: {
            NeedTag = input.ReadString();
            break;
          }
          case 26: {
            StartKey = input.ReadString();
            break;
          }
          case 32: {
            StartInputType = input.ReadUInt32();
            break;
          }
          case 45: {
            StartLongDownTime = input.ReadFloat();
            break;
          }
          case 48: {
            Interaction = input.ReadUInt32();
            break;
          }
          case 58: {
            TagValue = input.ReadString();
            break;
          }
          case 69: {
            KeepTime = input.ReadFloat();
            break;
          }
          case 74: {
            EndKey = input.ReadString();
            break;
          }
          case 80: {
            EndKeyInputType = input.ReadUInt32();
            break;
          }
          case 90: {
            CancelKey = input.ReadString();
            break;
          }
          case 96: {
            CancelKeyInputType = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
