// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: pbclils.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pbclils {

  /// <summary>Holder for reflection information generated from pbclils.proto</summary>
  public static partial class PbclilsReflection {

    #region Descriptor
    /// <summary>File descriptor for pbclils.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbclilsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1wYmNsaWxzLnByb3RvEgdwYmNsaWxzIg0KC0hlYXJiZWF0UmVxIg0KC0hl",
            "YXJiZWF0UnNwIjkKCFVzZXJJbmZvEgoKAmlkGAEgASgEEhAKCG5pY2tuYW1l",
            "GAIgASgJEg8KB2hlcm9faWQYBCABKA0iXgoMTG9naW5JbmZvUmVxEgwKBHB1",
            "aWQYASABKAMSDQoFdG9rZW4YAiABKAkSGQoRYnVuZGxlX2J1aWxkX2NvZGUY",
            "AyABKA0SFgoOcmVzX2J1aWxkX2NvZGUYBCABKA0iawoMTG9naW5JbmZvUnNw",
            "Eh4KBGNvZGUYASABKA4yEC5wYmNsaWxzLlJldENvZGUSFQoNcmVjb3Zlcl90",
            "b2tlbhgDIAEoCRIkCgl1c2VyX2luZm8YBCABKAsyES5wYmNsaWxzLlVzZXJJ",
            "bmZvInMKDk1hdGNoQmF0dGxlUmVxEiYKCm1hdGNoX21vZGUYASABKA4yEi5w",
            "YmNsaWxzLk1hdGNoTW9kZRIUCgxsZXZlbF9jZmdfaWQYAiABKA0SDwoHaGVy",
            "b19pZBgDIAEoDRISCgpza2luX2luZGV4GAQgASgNIpMBCg5NYXRjaEJhdHRs",
            "ZVJzcBIeCgRjb2RlGAEgASgOMhAucGJjbGlscy5SZXRDb2RlEiYKCm1hdGNo",
            "X21vZGUYAiABKA4yEi5wYmNsaWxzLk1hdGNoTW9kZRIUCgxsZXZlbF9jZmdf",
            "aWQYAyABKA0SDwoHaGVyb19pZBgEIAEoDRISCgpza2luX2luZGV4GAUgASgN",
            "IlIKGE1hdGNoQmF0dGxlU3VjY2Vzc05vdGlmeRITCgtzZXJ2ZXJfYWRkchgC",
            "IAEoCRIRCgliYXR0bGVfaWQYAyABKAQSDgoGdGlja2V0GAQgASgJIlYKElRl",
            "YW1NYXRjaEJhdHRsZVJlcRIqCgptYXRjaF9tb2RlGAEgASgOMhYucGJjbGls",
            "cy5UZWFtTWF0Y2hNb2RlEhQKDGxldmVsX2NmZ19pZBgCIAEoDSJ2ChJUZWFt",
            "TWF0Y2hCYXR0bGVSc3ASHgoEY29kZRgBIAEoDjIQLnBiY2xpbHMuUmV0Q29k",
            "ZRIqCgptYXRjaF9tb2RlGAIgASgOMhYucGJjbGlscy5UZWFtTWF0Y2hNb2Rl",
            "EhQKDGxldmVsX2NmZ19pZBgDIAEoDSIiCg9DaGFuZ2VIZXJvSURSZXESDwoH",
            "aGVyb19pZBgBIAEoDSJCCg9DaGFuZ2VIZXJvSURSc3ASHgoEY29kZRgBIAEo",
            "DjIQLnBiY2xpbHMuUmV0Q29kZRIPCgdoZXJvX2lkGAIgASgNIjoKGlRlYW1N",
            "ZW1iZXJDaGFuZ2VIZXJvTm90aWZ5EgsKA3VpZBgBIAEoBBIPCgdoZXJvX2lk",
            "GAIgASgNIhQKEkNoYW5nZVNraW5JbmRleFJlcSI0ChJDaGFuZ2VTa2luSW5k",
            "ZXhSc3ASHgoEY29kZRgBIAEoDjIQLnBiY2xpbHMuUmV0Q29kZSIwCg1DcmVh",
            "dGVUZWFtUmVxEh8KBG1vZGUYASABKA4yES5wYmNsaWxzLkdhbWVNb2RlIkAK",
            "DUNyZWF0ZVRlYW1Sc3ASHgoEY29kZRgBIAEoDjIQLnBiY2xpbHMuUmV0Q29k",
            "ZRIPCgd0ZWFtX2lkGAIgASgDIiEKDVRlYW1JbnZpdGVSZXESEAoIbmlja25h",
            "bWUYASABKAkiQQoNVGVhbUludml0ZVJzcBIeCgRjb2RlGAEgASgOMhAucGJj",
            "bGlscy5SZXRDb2RlEhAKCG5pY2tuYW1lGAIgASgJIk4KEFRlYW1JbnZpdGVO",
            "b3RpZnkSEwoLaW52aXRvcl91aWQYASABKAQSDwoHdGVhbV9pZBgCIAEoAxIU",
            "CgxpbnZpdG9yX25hbWUYAyABKAkiHgoLSm9pblRlYW1SZXESDwoHdGVhbV9p",
            "ZBgBIAEoAyJ4CgtKb2luVGVhbVJzcBIeCgRjb2RlGAEgASgOMhAucGJjbGls",
            "cy5SZXRDb2RlEg8KB3RlYW1faWQYAiABKAMSEgoKbGVhZGVyX3VpZBgDIAEo",
            "BBIkCgdtZW1iZXJzGAQgAygLMhMucGJjbGlscy5UZWFtTWVtYmVyIjgKClRl",
            "YW1NZW1iZXISCwoDdWlkGAEgASgEEgwKBG5hbWUYAiABKAkSDwoHaGVyb19p",
            "ZBgDIAEoDSI7ChRUZWFtTWVtYmVySm9pbk5vdGlmeRIjCgZtZW1iZXIYASAB",
            "KAsyEy5wYmNsaWxzLlRlYW1NZW1iZXIiDgoMTGVhdmVUZWFtUmVxIi4KDExl",
            "YXZlVGVhbVJzcBIeCgRjb2RlGAEgASgOMhAucGJjbGlscy5SZXRDb2RlIisK",
            "FVRlYW1NZW1iZXJMZWF2ZU5vdGlmeRISCgpsZWF2ZXJfdWlkGAEgASgEIicK",
            "EUtpY2tUZWFtTWVtYmVyUmVxEhIKCmtpY2tlZV91aWQYASABKAQiRwoRS2lj",
            "a1RlYW1NZW1iZXJSc3ASHgoEY29kZRgBIAEoDjIQLnBiY2xpbHMuUmV0Q29k",
            "ZRISCgpraWNrZWVfdWlkGAIgASgEIiwKFlRlYW1NZW1iZXJLaWNrZWROb3Rp",
            "ZnkSEgoKa2lja2VlX3VpZBgBIAEoBCIQCg5EaXNiYW5kVGVhbVJlcSIwCg5E",
            "aXNiYW5kVGVhbVJzcBIeCgRjb2RlGAEgASgOMhAucGJjbGlscy5SZXRDb2Rl",
            "IiQKEVRlYW1EaXNiYW5kTm90aWZ5Eg8KB3RlYW1faWQYASABKAMiLQoWVGVh",
            "bUxlYWRlckNoYW5nZU5vdGlmeRITCgtuZXdMZWFkZXJJRBgBIAEoBCqWBQoH",
            "UmV0Q29kZRIGCgJPSxAAEhoKFVNFUlZFUl9JTlRFUk5BTF9FUlJPUhDpBxIX",
            "ChJVU0VSX0FMUkVBRFlfTE9HSU4Q6gcSEwoOVVNFUl9OT1RfTE9HSU4Q6wcS",
            "GwoWVVNFUl9BTFJFQURZX0lOX0JBVFRMRRDsBxIVChBVU0VSX0lTX01BVENI",
            "SU5HEO0HEhgKE0lOVkFMSURfTE9HSU5fVE9LRU4Q7gcSFwoSSU5WQUxJRF9N",
            "QVRDSF9NT0RFEO8HEhkKFElOVkFMSURfTEVWRUxfQ0ZHX0lEEPAHEh4KGVRF",
            "QU1fVVNFUl9BTFJFQURZX0lOX1RFQU0Q8wcSEQoMVEVBTV9JU19GVUxMEPQH",
            "EhwKF1VTRVJfSVNfTk9UX1RFQU1fTEVBREVSEPUHEhMKDklOVkxJRF9URUFN",
            "X0lEEPYHEhwKF0lOVklURUVfQUxSRUFEWV9JTl9URUFNEPcHEh0KGFVTRVJf",
            "Tk9UX0lOX0lOVklURUVfTElTVBD4BxIbChZURUFNX0lOVklUQVRJT05fRVhQ",
            "SVJFEPkHEhUKEFVTRVJfTk9UX0lOX1RFQU0Q+gcSHAoXVEVBTV9JTlZJVEVF",
            "X05PVF9PTkxJTkUQ+wcSFwoSVEFSR0VUX05PVF9JTl9URUFNEPwHEhMKDlRB",
            "UkdFVF9PRkZMSU5FEP0HEhYKEUlOVkFMSURfR0FNRV9NT0RFEP4HEiEKHE1B",
            "VENIX1RFQU1fTk9UX0VOT1VUSF9QTEFZRVIQ/wcSFAoPSU5WQUxJRF9IRVJP",
            "X0lEEIAIEiAKG0NBTl9OT1RfT1BFUkFURV9PTl9ZT1VSU0VMRhCBCBIhChxC",
            "VU5ETEVfQ09ERV9OT1RfSU5DT05TSVNURU5UEIIIKscGCgpQcm90b2NvbElE",
            "EggKBE5PTkUQABISCg1IRUFSVEJFQVRfUkVREJBOEg4KCUxPR0lOX1JFURCR",
            "ThIVChBNQVRDSF9CQVRUTEVfUkVREJJOEhcKEkNIQU5HRV9IRVJPX0lEX1JF",
            "URCTThIaChVDSEFOR0VfU0tJTl9JTkRFWF9SRVEQlE4SGgoVVEVBTV9NQVRD",
            "SF9CQVRUTEVfUkVREJVOEhQKD0NSRUFURV9URUFNX1JFURCbThIUCg9URUFN",
            "X0lOVklURV9SRVEQnE4SEgoNSk9JTl9URUFNX1JFURCdThITCg5MRUFWRV9U",
            "RUFNX1JFURCeThIZChRLSUNLX1RFQU1fTUVNQkVSX1JFURCfThIVChBESVNC",
            "QU5EX1RFQU1fUkVREKBOEhMKDUhFQVJUQkVBVF9SU1AQoJwBEg8KCUxPR0lO",
            "X1JTUBChnAESFgoQTUFUQ0hfQkFUVExFX1JTUBCinAESGAoSQ0hBTkdFX0hF",
            "Uk9fSURfUlNQEKOcARIbChVDSEFOR0VfU0tJTl9JTkRFWF9SU1AQpJwBEhsK",
            "FVRFQU1fTUFUQ0hfQkFUVExFX1JTUBClnAESFQoPQ1JFQVRFX1RFQU1fUlNQ",
            "EKucARIVCg9URUFNX0lOVklURV9SU1AQrJwBEhMKDUpPSU5fVEVBTV9SU1AQ",
            "rZwBEhQKDkxFQVZFX1RFQU1fUlNQEK6cARIaChRLSUNLX1RFQU1fTUVNQkVS",
            "X1JTUBCvnAESFgoQRElTQkFORF9URUFNX1JTUBCwnAESIQobTUFUQ0hfQkFU",
            "VExFX1NVQ0NFU1NfTk9USUZZELHqARIdChdURUFNX01FTUJFUl9KT0lOX05P",
            "VElGWRCy6gESHgoYVEVBTV9NRU1CRVJfTEVBVkVfTk9USUZZELPqARIfChlU",
            "RUFNX01FTUJFUl9LSUNLRURfTk9USUZZELTqARIZChNURUFNX0RJU0JBTkRf",
            "Tk9USUZZELXqARIYChJURUFNX0lOVklURV9OT1RJRlkQtuoBEh8KGVRFQU1f",
            "TEVBREVSX0NIQU5HRV9OT1RJRlkQt+oBEiQKHlRFQU1fTUVNQkVSX0hFUk9f",
            "Q0hBTkdFX05PVElGWRC46gEqfgoJTWF0Y2hNb2RlEhIKDk1BVENITU9ERV9O",
            "T05FEAASCgoGU0lOR0xFEAESGAoUTVVMVElfVU5MSU1JVEVEX1RJTUUQAhIU",
            "ChBNVUxUSV9MSU1JVF9USU1FEAMSEAoMTE9DQUxfU0lOR0xFEAQSDwoLTE9D",
            "QUxfTVVMVEkQBSpwCg1UZWFtTWF0Y2hNb2RlEhYKElRFQU1NQVRDSE1PREVf",
            "Tk9ORRAAEgkKBVFVSUNLEAESEgoOVU5MSU1JVEVEX1RJTUUQAhIOCgpMSU1J",
            "VF9USU1FEAMSGAoUVU5MSU1JVEVEX1RJTUVfTE9DQUwQBCo1CghHYW1lTW9k",
            "ZRIRCg1HQU1FTU9ERV9OT05FEAASBgoCVjEQARIGCgJWMhACEgYKAlY0EANC",
            "C1oJLi9wYmNsaWxzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Pbclils.RetCode), typeof(global::Pbclils.ProtocolID), typeof(global::Pbclils.MatchMode), typeof(global::Pbclils.TeamMatchMode), typeof(global::Pbclils.GameMode), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.HearbeatReq), global::Pbclils.HearbeatReq.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.HearbeatRsp), global::Pbclils.HearbeatRsp.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.UserInfo), global::Pbclils.UserInfo.Parser, new[]{ "Id", "Nickname", "HeroId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.LoginInfoReq), global::Pbclils.LoginInfoReq.Parser, new[]{ "Puid", "Token", "BundleBuildCode", "ResBuildCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.LoginInfoRsp), global::Pbclils.LoginInfoRsp.Parser, new[]{ "Code", "RecoverToken", "UserInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.MatchBattleReq), global::Pbclils.MatchBattleReq.Parser, new[]{ "MatchMode", "LevelCfgId", "HeroId", "SkinIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.MatchBattleRsp), global::Pbclils.MatchBattleRsp.Parser, new[]{ "Code", "MatchMode", "LevelCfgId", "HeroId", "SkinIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.MatchBattleSuccessNotify), global::Pbclils.MatchBattleSuccessNotify.Parser, new[]{ "ServerAddr", "BattleId", "Ticket" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.TeamMatchBattleReq), global::Pbclils.TeamMatchBattleReq.Parser, new[]{ "MatchMode", "LevelCfgId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.TeamMatchBattleRsp), global::Pbclils.TeamMatchBattleRsp.Parser, new[]{ "Code", "MatchMode", "LevelCfgId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.ChangeHeroIDReq), global::Pbclils.ChangeHeroIDReq.Parser, new[]{ "HeroId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.ChangeHeroIDRsp), global::Pbclils.ChangeHeroIDRsp.Parser, new[]{ "Code", "HeroId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.TeamMemberChangeHeroNotify), global::Pbclils.TeamMemberChangeHeroNotify.Parser, new[]{ "Uid", "HeroId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.ChangeSkinIndexReq), global::Pbclils.ChangeSkinIndexReq.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.ChangeSkinIndexRsp), global::Pbclils.ChangeSkinIndexRsp.Parser, new[]{ "Code" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.CreateTeamReq), global::Pbclils.CreateTeamReq.Parser, new[]{ "Mode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.CreateTeamRsp), global::Pbclils.CreateTeamRsp.Parser, new[]{ "Code", "TeamId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.TeamInviteReq), global::Pbclils.TeamInviteReq.Parser, new[]{ "Nickname" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.TeamInviteRsp), global::Pbclils.TeamInviteRsp.Parser, new[]{ "Code", "Nickname" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.TeamInviteNotify), global::Pbclils.TeamInviteNotify.Parser, new[]{ "InvitorUid", "TeamId", "InvitorName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.JoinTeamReq), global::Pbclils.JoinTeamReq.Parser, new[]{ "TeamId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.JoinTeamRsp), global::Pbclils.JoinTeamRsp.Parser, new[]{ "Code", "TeamId", "LeaderUid", "Members" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.TeamMember), global::Pbclils.TeamMember.Parser, new[]{ "Uid", "Name", "HeroId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.TeamMemberJoinNotify), global::Pbclils.TeamMemberJoinNotify.Parser, new[]{ "Member" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.LeaveTeamReq), global::Pbclils.LeaveTeamReq.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.LeaveTeamRsp), global::Pbclils.LeaveTeamRsp.Parser, new[]{ "Code" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.TeamMemberLeaveNotify), global::Pbclils.TeamMemberLeaveNotify.Parser, new[]{ "LeaverUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.KickTeamMemberReq), global::Pbclils.KickTeamMemberReq.Parser, new[]{ "KickeeUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.KickTeamMemberRsp), global::Pbclils.KickTeamMemberRsp.Parser, new[]{ "Code", "KickeeUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.TeamMemberKickedNotify), global::Pbclils.TeamMemberKickedNotify.Parser, new[]{ "KickeeUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.DisbandTeamReq), global::Pbclils.DisbandTeamReq.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.DisbandTeamRsp), global::Pbclils.DisbandTeamRsp.Parser, new[]{ "Code" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.TeamDisbandNotify), global::Pbclils.TeamDisbandNotify.Parser, new[]{ "TeamId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbclils.TeamLeaderChangeNotify), global::Pbclils.TeamLeaderChangeNotify.Parser, new[]{ "NewLeaderID" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// lobby_server 只允许 0-9999
  /// </summary>
  public enum RetCode {
    [pbr::OriginalName("OK")] Ok = 0,
    [pbr::OriginalName("SERVER_INTERNAL_ERROR")] ServerInternalError = 1001,
    [pbr::OriginalName("USER_ALREADY_LOGIN")] UserAlreadyLogin = 1002,
    [pbr::OriginalName("USER_NOT_LOGIN")] UserNotLogin = 1003,
    [pbr::OriginalName("USER_ALREADY_IN_BATTLE")] UserAlreadyInBattle = 1004,
    [pbr::OriginalName("USER_IS_MATCHING")] UserIsMatching = 1005,
    [pbr::OriginalName("INVALID_LOGIN_TOKEN")] InvalidLoginToken = 1006,
    [pbr::OriginalName("INVALID_MATCH_MODE")] InvalidMatchMode = 1007,
    [pbr::OriginalName("INVALID_LEVEL_CFG_ID")] InvalidLevelCfgId = 1008,
    [pbr::OriginalName("TEAM_USER_ALREADY_IN_TEAM")] TeamUserAlreadyInTeam = 1011,
    [pbr::OriginalName("TEAM_IS_FULL")] TeamIsFull = 1012,
    [pbr::OriginalName("USER_IS_NOT_TEAM_LEADER")] UserIsNotTeamLeader = 1013,
    [pbr::OriginalName("INVLID_TEAM_ID")] InvlidTeamId = 1014,
    [pbr::OriginalName("INVITEE_ALREADY_IN_TEAM")] InviteeAlreadyInTeam = 1015,
    [pbr::OriginalName("USER_NOT_IN_INVITEE_LIST")] UserNotInInviteeList = 1016,
    [pbr::OriginalName("TEAM_INVITATION_EXPIRE")] TeamInvitationExpire = 1017,
    [pbr::OriginalName("USER_NOT_IN_TEAM")] UserNotInTeam = 1018,
    [pbr::OriginalName("TEAM_INVITEE_NOT_ONLINE")] TeamInviteeNotOnline = 1019,
    [pbr::OriginalName("TARGET_NOT_IN_TEAM")] TargetNotInTeam = 1020,
    [pbr::OriginalName("TARGET_OFFLINE")] TargetOffline = 1021,
    [pbr::OriginalName("INVALID_GAME_MODE")] InvalidGameMode = 1022,
    [pbr::OriginalName("MATCH_TEAM_NOT_ENOUTH_PLAYER")] MatchTeamNotEnouthPlayer = 1023,
    [pbr::OriginalName("INVALID_HERO_ID")] InvalidHeroId = 1024,
    [pbr::OriginalName("CAN_NOT_OPERATE_ON_YOURSELF")] CanNotOperateOnYourself = 1025,
    [pbr::OriginalName("BUNDLE_CODE_NOT_INCONSISTENT")] BundleCodeNotInconsistent = 1026,
  }

  public enum ProtocolID {
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("HEARTBEAT_REQ")] HeartbeatReq = 10000,
    [pbr::OriginalName("LOGIN_REQ")] LoginReq = 10001,
    [pbr::OriginalName("MATCH_BATTLE_REQ")] MatchBattleReq = 10002,
    [pbr::OriginalName("CHANGE_HERO_ID_REQ")] ChangeHeroIdReq = 10003,
    [pbr::OriginalName("CHANGE_SKIN_INDEX_REQ")] ChangeSkinIndexReq = 10004,
    [pbr::OriginalName("TEAM_MATCH_BATTLE_REQ")] TeamMatchBattleReq = 10005,
    [pbr::OriginalName("CREATE_TEAM_REQ")] CreateTeamReq = 10011,
    [pbr::OriginalName("TEAM_INVITE_REQ")] TeamInviteReq = 10012,
    [pbr::OriginalName("JOIN_TEAM_REQ")] JoinTeamReq = 10013,
    [pbr::OriginalName("LEAVE_TEAM_REQ")] LeaveTeamReq = 10014,
    [pbr::OriginalName("KICK_TEAM_MEMBER_REQ")] KickTeamMemberReq = 10015,
    [pbr::OriginalName("DISBAND_TEAM_REQ")] DisbandTeamReq = 10016,
    [pbr::OriginalName("HEARTBEAT_RSP")] HeartbeatRsp = 20000,
    [pbr::OriginalName("LOGIN_RSP")] LoginRsp = 20001,
    [pbr::OriginalName("MATCH_BATTLE_RSP")] MatchBattleRsp = 20002,
    [pbr::OriginalName("CHANGE_HERO_ID_RSP")] ChangeHeroIdRsp = 20003,
    [pbr::OriginalName("CHANGE_SKIN_INDEX_RSP")] ChangeSkinIndexRsp = 20004,
    [pbr::OriginalName("TEAM_MATCH_BATTLE_RSP")] TeamMatchBattleRsp = 20005,
    [pbr::OriginalName("CREATE_TEAM_RSP")] CreateTeamRsp = 20011,
    [pbr::OriginalName("TEAM_INVITE_RSP")] TeamInviteRsp = 20012,
    [pbr::OriginalName("JOIN_TEAM_RSP")] JoinTeamRsp = 20013,
    [pbr::OriginalName("LEAVE_TEAM_RSP")] LeaveTeamRsp = 20014,
    [pbr::OriginalName("KICK_TEAM_MEMBER_RSP")] KickTeamMemberRsp = 20015,
    [pbr::OriginalName("DISBAND_TEAM_RSP")] DisbandTeamRsp = 20016,
    [pbr::OriginalName("MATCH_BATTLE_SUCCESS_NOTIFY")] MatchBattleSuccessNotify = 30001,
    [pbr::OriginalName("TEAM_MEMBER_JOIN_NOTIFY")] TeamMemberJoinNotify = 30002,
    [pbr::OriginalName("TEAM_MEMBER_LEAVE_NOTIFY")] TeamMemberLeaveNotify = 30003,
    [pbr::OriginalName("TEAM_MEMBER_KICKED_NOTIFY")] TeamMemberKickedNotify = 30004,
    [pbr::OriginalName("TEAM_DISBAND_NOTIFY")] TeamDisbandNotify = 30005,
    [pbr::OriginalName("TEAM_INVITE_NOTIFY")] TeamInviteNotify = 30006,
    [pbr::OriginalName("TEAM_LEADER_CHANGE_NOTIFY")] TeamLeaderChangeNotify = 30007,
    [pbr::OriginalName("TEAM_MEMBER_HERO_CHANGE_NOTIFY")] TeamMemberHeroChangeNotify = 30008,
  }

  public enum MatchMode {
    [pbr::OriginalName("MATCHMODE_NONE")] None = 0,
    [pbr::OriginalName("SINGLE")] Single = 1,
    [pbr::OriginalName("MULTI_UNLIMITED_TIME")] MultiUnlimitedTime = 2,
    [pbr::OriginalName("MULTI_LIMIT_TIME")] MultiLimitTime = 3,
    [pbr::OriginalName("LOCAL_SINGLE")] LocalSingle = 4,
    [pbr::OriginalName("LOCAL_MULTI")] LocalMulti = 5,
  }

  public enum TeamMatchMode {
    [pbr::OriginalName("TEAMMATCHMODE_NONE")] None = 0,
    [pbr::OriginalName("QUICK")] Quick = 1,
    [pbr::OriginalName("UNLIMITED_TIME")] UnlimitedTime = 2,
    [pbr::OriginalName("LIMIT_TIME")] LimitTime = 3,
    [pbr::OriginalName("UNLIMITED_TIME_LOCAL")] UnlimitedTimeLocal = 4,
  }

  public enum GameMode {
    [pbr::OriginalName("GAMEMODE_NONE")] None = 0,
    [pbr::OriginalName("V1")] V1 = 1,
    [pbr::OriginalName("V2")] V2 = 2,
    [pbr::OriginalName("V4")] V4 = 3,
  }

  #endregion

  #region Messages
  public sealed partial class HearbeatReq : pb::IMessage<HearbeatReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HearbeatReq> _parser = new pb::MessageParser<HearbeatReq>(() => new HearbeatReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HearbeatReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HearbeatReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HearbeatReq(HearbeatReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HearbeatReq Clone() {
      return new HearbeatReq(this);
    }

    public void ClearDirty() {
    }
    public bool IsDirty() {
      return false;
    }
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HearbeatReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HearbeatReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HearbeatReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class HearbeatRsp : pb::IMessage<HearbeatRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HearbeatRsp> _parser = new pb::MessageParser<HearbeatRsp>(() => new HearbeatRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HearbeatRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HearbeatRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HearbeatRsp(HearbeatRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HearbeatRsp Clone() {
      return new HearbeatRsp(this);
    }

    public void ClearDirty() {
    }
    public bool IsDirty() {
      return false;
    }
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HearbeatRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HearbeatRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HearbeatRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class UserInfo : pb::IMessage<UserInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => new UserInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo(UserInfo other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      id_ = other.id_;
      nickname_ = other.nickname_;
      heroId_ = other.heroId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo Clone() {
      return new UserInfo(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 2;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "nickname" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNicknameDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 4;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHeroIdDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Nickname != other.Nickname) return false;
      if (HeroId != other.HeroId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && Id != 0UL)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && Nickname.Length != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNicknameDirty)) {
        output.WriteRawTag(18);
        output.WriteString(Nickname);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HeroId != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && Id != 0UL)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if ((output.writeScope == pb.WriteScope.FULL && Nickname.Length != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNicknameDirty)) {
        output.WriteRawTag(18);
        output.WriteString(Nickname);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HeroId != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && Id != 0UL)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if ((scope == pb.WriteScope.FULL && Nickname.Length != 0)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNicknameDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if ((scope == pb.WriteScope.FULL && HeroId != 0)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            Nickname = input.ReadString();
            break;
          }
          case 32: {
            HeroId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            Nickname = input.ReadString();
            break;
          }
          case 32: {
            HeroId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LoginInfoReq : pb::IMessage<LoginInfoReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LoginInfoReq> _parser = new pb::MessageParser<LoginInfoReq>(() => new LoginInfoReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginInfoReq(LoginInfoReq other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      puid_ = other.puid_;
      token_ = other.token_;
      bundleBuildCode_ = other.bundleBuildCode_;
      resBuildCode_ = other.resBuildCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginInfoReq Clone() {
      return new LoginInfoReq(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "puid" field.</summary>
    public const int PuidFieldNumber = 1;
    private long puid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Puid {
      get { return puid_; }
      set {
        puid_ = value;
      }
    }
    /// <summary>Gets whether the "puid" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPuidDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "token" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTokenDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    /// <summary>Field number for the "bundle_build_code" field.</summary>
    public const int BundleBuildCodeFieldNumber = 3;
    private uint bundleBuildCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BundleBuildCode {
      get { return bundleBuildCode_; }
      set {
        bundleBuildCode_ = value;
      }
    }
    /// <summary>Gets whether the "bundle_build_code" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBundleBuildCodeDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    /// <summary>Field number for the "res_build_code" field.</summary>
    public const int ResBuildCodeFieldNumber = 4;
    private uint resBuildCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResBuildCode {
      get { return resBuildCode_; }
      set {
        resBuildCode_ = value;
      }
    }
    /// <summary>Gets whether the "res_build_code" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsResBuildCodeDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Puid != other.Puid) return false;
      if (Token != other.Token) return false;
      if (BundleBuildCode != other.BundleBuildCode) return false;
      if (ResBuildCode != other.ResBuildCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Puid != 0L) hash ^= Puid.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (BundleBuildCode != 0) hash ^= BundleBuildCode.GetHashCode();
      if (ResBuildCode != 0) hash ^= ResBuildCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && Puid != 0L)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPuidDirty)) {
        output.WriteRawTag(8);
        output.WriteInt64(Puid);
      }
      if ((output.writeScope == pb.WriteScope.FULL && Token.Length != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTokenDirty)) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if ((output.writeScope == pb.WriteScope.FULL && BundleBuildCode != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBundleBuildCodeDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(BundleBuildCode);
      }
      if ((output.writeScope == pb.WriteScope.FULL && ResBuildCode != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsResBuildCodeDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(ResBuildCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && Puid != 0L)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPuidDirty)) {
        output.WriteRawTag(8);
        output.WriteInt64(Puid);
      }
      if ((output.writeScope == pb.WriteScope.FULL && Token.Length != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTokenDirty)) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if ((output.writeScope == pb.WriteScope.FULL && BundleBuildCode != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBundleBuildCodeDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(BundleBuildCode);
      }
      if ((output.writeScope == pb.WriteScope.FULL && ResBuildCode != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsResBuildCodeDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(ResBuildCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && Puid != 0L)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsPuidDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Puid);
      }
      if ((scope == pb.WriteScope.FULL && Token.Length != 0)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTokenDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if ((scope == pb.WriteScope.FULL && BundleBuildCode != 0)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsBundleBuildCodeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BundleBuildCode);
      }
      if ((scope == pb.WriteScope.FULL && ResBuildCode != 0)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsResBuildCodeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResBuildCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginInfoReq other) {
      if (other == null) {
        return;
      }
      if (other.Puid != 0L) {
        Puid = other.Puid;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.BundleBuildCode != 0) {
        BundleBuildCode = other.BundleBuildCode;
      }
      if (other.ResBuildCode != 0) {
        ResBuildCode = other.ResBuildCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Puid = input.ReadInt64();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 24: {
            BundleBuildCode = input.ReadUInt32();
            break;
          }
          case 32: {
            ResBuildCode = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Puid = input.ReadInt64();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 24: {
            BundleBuildCode = input.ReadUInt32();
            break;
          }
          case 32: {
            ResBuildCode = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LoginInfoRsp : pb::IMessage<LoginInfoRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LoginInfoRsp> _parser = new pb::MessageParser<LoginInfoRsp>(() => new LoginInfoRsp());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginInfoRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginInfoRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginInfoRsp(LoginInfoRsp other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      code_ = other.code_;
      recoverToken_ = other.recoverToken_;
      userInfo_ = other.userInfo_ != null ? other.userInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginInfoRsp Clone() {
      return new LoginInfoRsp(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Pbclils.RetCode code_ = global::Pbclils.RetCode.Ok;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbclils.RetCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCodeDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "recover_token" field.</summary>
    public const int RecoverTokenFieldNumber = 3;
    private string recoverToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RecoverToken {
      get { return recoverToken_; }
      set {
        recoverToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "recover_token" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRecoverTokenDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    /// <summary>Field number for the "user_info" field.</summary>
    public const int UserInfoFieldNumber = 4;
    private global::Pbclils.UserInfo userInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbclils.UserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }
    /// <summary>Gets whether the "user_info" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUserInfoDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginInfoRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginInfoRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (RecoverToken != other.RecoverToken) return false;
      if (!object.Equals(UserInfo, other.UserInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != global::Pbclils.RetCode.Ok) hash ^= Code.GetHashCode();
      if (RecoverToken.Length != 0) hash ^= RecoverToken.GetHashCode();
      if (userInfo_ != null) hash ^= UserInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if ((output.writeScope == pb.WriteScope.FULL && RecoverToken.Length != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRecoverTokenDirty)) {
        output.WriteRawTag(26);
        output.WriteString(RecoverToken);
      }
      if ((output.writeScope == pb.WriteScope.FULL && userInfo_ != null)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUserInfoDirty)) {
        output.WriteRawTag(34);
        output.WriteMessage(UserInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if ((output.writeScope == pb.WriteScope.FULL && RecoverToken.Length != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRecoverTokenDirty)) {
        output.WriteRawTag(26);
        output.WriteString(RecoverToken);
      }
      if ((output.writeScope == pb.WriteScope.FULL && userInfo_ != null)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUserInfoDirty)) {
        output.WriteRawTag(34);
        output.WriteMessage(UserInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if ((scope == pb.WriteScope.FULL && RecoverToken.Length != 0)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsRecoverTokenDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RecoverToken);
      }
      if (userInfo_ != null) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(UserInfo, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 4;
        } else {
          _dirtyBits0 &= ~4;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginInfoRsp other) {
      if (other == null) {
        return;
      }
      if (other.Code != global::Pbclils.RetCode.Ok) {
        Code = other.Code;
      }
      if (other.RecoverToken.Length != 0) {
        RecoverToken = other.RecoverToken;
      }
      if (other.userInfo_ != null) {
        if (userInfo_ == null) {
          UserInfo = new global::Pbclils.UserInfo();
        }
        UserInfo.MergeFrom(other.UserInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Pbclils.RetCode) input.ReadEnum();
            break;
          }
          case 26: {
            RecoverToken = input.ReadString();
            break;
          }
          case 34: {
            if (userInfo_ == null) {
              UserInfo = new global::Pbclils.UserInfo();
            }
            input.ReadMessage(UserInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = (global::Pbclils.RetCode) input.ReadEnum();
            break;
          }
          case 26: {
            RecoverToken = input.ReadString();
            break;
          }
          case 34: {
            if (userInfo_ == null) {
              UserInfo = new global::Pbclils.UserInfo();
            }
            input.ReadMessage(UserInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MatchBattleReq : pb::IMessage<MatchBattleReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchBattleReq> _parser = new pb::MessageParser<MatchBattleReq>(() => new MatchBattleReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchBattleReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchBattleReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchBattleReq(MatchBattleReq other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      matchMode_ = other.matchMode_;
      levelCfgId_ = other.levelCfgId_;
      heroId_ = other.heroId_;
      skinIndex_ = other.skinIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchBattleReq Clone() {
      return new MatchBattleReq(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "match_mode" field.</summary>
    public const int MatchModeFieldNumber = 1;
    private global::Pbclils.MatchMode matchMode_ = global::Pbclils.MatchMode.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbclils.MatchMode MatchMode {
      get { return matchMode_; }
      set {
        matchMode_ = value;
      }
    }
    /// <summary>Gets whether the "match_mode" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMatchModeDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "level_cfg_id" field.</summary>
    public const int LevelCfgIdFieldNumber = 2;
    private uint levelCfgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LevelCfgId {
      get { return levelCfgId_; }
      set {
        levelCfgId_ = value;
      }
    }
    /// <summary>Gets whether the "level_cfg_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLevelCfgIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 3;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHeroIdDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    /// <summary>Field number for the "skin_index" field.</summary>
    public const int SkinIndexFieldNumber = 4;
    private uint skinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkinIndex {
      get { return skinIndex_; }
      set {
        skinIndex_ = value;
      }
    }
    /// <summary>Gets whether the "skin_index" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkinIndexDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchBattleReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchBattleReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchMode != other.MatchMode) return false;
      if (LevelCfgId != other.LevelCfgId) return false;
      if (HeroId != other.HeroId) return false;
      if (SkinIndex != other.SkinIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchMode != global::Pbclils.MatchMode.None) hash ^= MatchMode.GetHashCode();
      if (LevelCfgId != 0) hash ^= LevelCfgId.GetHashCode();
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (SkinIndex != 0) hash ^= SkinIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && MatchMode != global::Pbclils.MatchMode.None)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMatchModeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MatchMode);
      }
      if ((output.writeScope == pb.WriteScope.FULL && LevelCfgId != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLevelCfgIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(LevelCfgId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HeroId != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(HeroId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && SkinIndex != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkinIndexDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(SkinIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && MatchMode != global::Pbclils.MatchMode.None)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMatchModeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MatchMode);
      }
      if ((output.writeScope == pb.WriteScope.FULL && LevelCfgId != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLevelCfgIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(LevelCfgId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HeroId != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(HeroId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && SkinIndex != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkinIndexDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(SkinIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && MatchMode != global::Pbclils.MatchMode.None)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsMatchModeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchMode);
      }
      if ((scope == pb.WriteScope.FULL && LevelCfgId != 0)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsLevelCfgIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LevelCfgId);
      }
      if ((scope == pb.WriteScope.FULL && HeroId != 0)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if ((scope == pb.WriteScope.FULL && SkinIndex != 0)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSkinIndexDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkinIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchBattleReq other) {
      if (other == null) {
        return;
      }
      if (other.MatchMode != global::Pbclils.MatchMode.None) {
        MatchMode = other.MatchMode;
      }
      if (other.LevelCfgId != 0) {
        LevelCfgId = other.LevelCfgId;
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      if (other.SkinIndex != 0) {
        SkinIndex = other.SkinIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchMode = (global::Pbclils.MatchMode) input.ReadEnum();
            break;
          }
          case 16: {
            LevelCfgId = input.ReadUInt32();
            break;
          }
          case 24: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 32: {
            SkinIndex = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MatchMode = (global::Pbclils.MatchMode) input.ReadEnum();
            break;
          }
          case 16: {
            LevelCfgId = input.ReadUInt32();
            break;
          }
          case 24: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 32: {
            SkinIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MatchBattleRsp : pb::IMessage<MatchBattleRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchBattleRsp> _parser = new pb::MessageParser<MatchBattleRsp>(() => new MatchBattleRsp());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchBattleRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchBattleRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchBattleRsp(MatchBattleRsp other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      code_ = other.code_;
      matchMode_ = other.matchMode_;
      levelCfgId_ = other.levelCfgId_;
      heroId_ = other.heroId_;
      skinIndex_ = other.skinIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchBattleRsp Clone() {
      return new MatchBattleRsp(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Pbclils.RetCode code_ = global::Pbclils.RetCode.Ok;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbclils.RetCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCodeDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "match_mode" field.</summary>
    public const int MatchModeFieldNumber = 2;
    private global::Pbclils.MatchMode matchMode_ = global::Pbclils.MatchMode.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbclils.MatchMode MatchMode {
      get { return matchMode_; }
      set {
        matchMode_ = value;
      }
    }
    /// <summary>Gets whether the "match_mode" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMatchModeDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    /// <summary>Field number for the "level_cfg_id" field.</summary>
    public const int LevelCfgIdFieldNumber = 3;
    private uint levelCfgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LevelCfgId {
      get { return levelCfgId_; }
      set {
        levelCfgId_ = value;
      }
    }
    /// <summary>Gets whether the "level_cfg_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLevelCfgIdDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 4;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHeroIdDirty {
      get { return (_dirtyBits0 & 8) != 0; }
    }

    /// <summary>Field number for the "skin_index" field.</summary>
    public const int SkinIndexFieldNumber = 5;
    private uint skinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkinIndex {
      get { return skinIndex_; }
      set {
        skinIndex_ = value;
      }
    }
    /// <summary>Gets whether the "skin_index" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkinIndexDirty {
      get { return (_dirtyBits0 & 16) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchBattleRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchBattleRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (MatchMode != other.MatchMode) return false;
      if (LevelCfgId != other.LevelCfgId) return false;
      if (HeroId != other.HeroId) return false;
      if (SkinIndex != other.SkinIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != global::Pbclils.RetCode.Ok) hash ^= Code.GetHashCode();
      if (MatchMode != global::Pbclils.MatchMode.None) hash ^= MatchMode.GetHashCode();
      if (LevelCfgId != 0) hash ^= LevelCfgId.GetHashCode();
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (SkinIndex != 0) hash ^= SkinIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if ((output.writeScope == pb.WriteScope.FULL && MatchMode != global::Pbclils.MatchMode.None)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMatchModeDirty)) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MatchMode);
      }
      if ((output.writeScope == pb.WriteScope.FULL && LevelCfgId != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLevelCfgIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(LevelCfgId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HeroId != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(HeroId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && SkinIndex != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkinIndexDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(SkinIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if ((output.writeScope == pb.WriteScope.FULL && MatchMode != global::Pbclils.MatchMode.None)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMatchModeDirty)) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MatchMode);
      }
      if ((output.writeScope == pb.WriteScope.FULL && LevelCfgId != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLevelCfgIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(LevelCfgId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HeroId != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        output.WriteRawTag(32);
        output.WriteUInt32(HeroId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && SkinIndex != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsSkinIndexDirty)) {
        output.WriteRawTag(40);
        output.WriteUInt32(SkinIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if ((scope == pb.WriteScope.FULL && MatchMode != global::Pbclils.MatchMode.None)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsMatchModeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchMode);
      }
      if ((scope == pb.WriteScope.FULL && LevelCfgId != 0)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsLevelCfgIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LevelCfgId);
      }
      if ((scope == pb.WriteScope.FULL && HeroId != 0)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if ((scope == pb.WriteScope.FULL && SkinIndex != 0)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsSkinIndexDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkinIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchBattleRsp other) {
      if (other == null) {
        return;
      }
      if (other.Code != global::Pbclils.RetCode.Ok) {
        Code = other.Code;
      }
      if (other.MatchMode != global::Pbclils.MatchMode.None) {
        MatchMode = other.MatchMode;
      }
      if (other.LevelCfgId != 0) {
        LevelCfgId = other.LevelCfgId;
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      if (other.SkinIndex != 0) {
        SkinIndex = other.SkinIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Pbclils.RetCode) input.ReadEnum();
            break;
          }
          case 16: {
            MatchMode = (global::Pbclils.MatchMode) input.ReadEnum();
            break;
          }
          case 24: {
            LevelCfgId = input.ReadUInt32();
            break;
          }
          case 32: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 40: {
            SkinIndex = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = (global::Pbclils.RetCode) input.ReadEnum();
            break;
          }
          case 16: {
            MatchMode = (global::Pbclils.MatchMode) input.ReadEnum();
            break;
          }
          case 24: {
            LevelCfgId = input.ReadUInt32();
            break;
          }
          case 32: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 40: {
            SkinIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MatchBattleSuccessNotify : pb::IMessage<MatchBattleSuccessNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchBattleSuccessNotify> _parser = new pb::MessageParser<MatchBattleSuccessNotify>(() => new MatchBattleSuccessNotify());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchBattleSuccessNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchBattleSuccessNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchBattleSuccessNotify(MatchBattleSuccessNotify other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      serverAddr_ = other.serverAddr_;
      battleId_ = other.battleId_;
      ticket_ = other.ticket_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchBattleSuccessNotify Clone() {
      return new MatchBattleSuccessNotify(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "server_addr" field.</summary>
    public const int ServerAddrFieldNumber = 2;
    private string serverAddr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerAddr {
      get { return serverAddr_; }
      set {
        serverAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "server_addr" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsServerAddrDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 3;
    private ulong battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }
    /// <summary>Gets whether the "battle_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBattleIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 4;
    private string ticket_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ticket {
      get { return ticket_; }
      set {
        ticket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ticket" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTicketDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchBattleSuccessNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchBattleSuccessNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerAddr != other.ServerAddr) return false;
      if (BattleId != other.BattleId) return false;
      if (Ticket != other.Ticket) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerAddr.Length != 0) hash ^= ServerAddr.GetHashCode();
      if (BattleId != 0UL) hash ^= BattleId.GetHashCode();
      if (Ticket.Length != 0) hash ^= Ticket.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && ServerAddr.Length != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsServerAddrDirty)) {
        output.WriteRawTag(18);
        output.WriteString(ServerAddr);
      }
      if ((output.writeScope == pb.WriteScope.FULL && BattleId != 0UL)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBattleIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt64(BattleId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && Ticket.Length != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTicketDirty)) {
        output.WriteRawTag(34);
        output.WriteString(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && ServerAddr.Length != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsServerAddrDirty)) {
        output.WriteRawTag(18);
        output.WriteString(ServerAddr);
      }
      if ((output.writeScope == pb.WriteScope.FULL && BattleId != 0UL)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsBattleIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt64(BattleId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && Ticket.Length != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTicketDirty)) {
        output.WriteRawTag(34);
        output.WriteString(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && ServerAddr.Length != 0)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsServerAddrDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerAddr);
      }
      if ((scope == pb.WriteScope.FULL && BattleId != 0UL)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsBattleIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BattleId);
      }
      if ((scope == pb.WriteScope.FULL && Ticket.Length != 0)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTicketDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticket);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchBattleSuccessNotify other) {
      if (other == null) {
        return;
      }
      if (other.ServerAddr.Length != 0) {
        ServerAddr = other.ServerAddr;
      }
      if (other.BattleId != 0UL) {
        BattleId = other.BattleId;
      }
      if (other.Ticket.Length != 0) {
        Ticket = other.Ticket;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            ServerAddr = input.ReadString();
            break;
          }
          case 24: {
            BattleId = input.ReadUInt64();
            break;
          }
          case 34: {
            Ticket = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            ServerAddr = input.ReadString();
            break;
          }
          case 24: {
            BattleId = input.ReadUInt64();
            break;
          }
          case 34: {
            Ticket = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TeamMatchBattleReq : pb::IMessage<TeamMatchBattleReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TeamMatchBattleReq> _parser = new pb::MessageParser<TeamMatchBattleReq>(() => new TeamMatchBattleReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamMatchBattleReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMatchBattleReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMatchBattleReq(TeamMatchBattleReq other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      matchMode_ = other.matchMode_;
      levelCfgId_ = other.levelCfgId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMatchBattleReq Clone() {
      return new TeamMatchBattleReq(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "match_mode" field.</summary>
    public const int MatchModeFieldNumber = 1;
    private global::Pbclils.TeamMatchMode matchMode_ = global::Pbclils.TeamMatchMode.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbclils.TeamMatchMode MatchMode {
      get { return matchMode_; }
      set {
        matchMode_ = value;
      }
    }
    /// <summary>Gets whether the "match_mode" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMatchModeDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "level_cfg_id" field.</summary>
    public const int LevelCfgIdFieldNumber = 2;
    private uint levelCfgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LevelCfgId {
      get { return levelCfgId_; }
      set {
        levelCfgId_ = value;
      }
    }
    /// <summary>Gets whether the "level_cfg_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLevelCfgIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamMatchBattleReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamMatchBattleReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchMode != other.MatchMode) return false;
      if (LevelCfgId != other.LevelCfgId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchMode != global::Pbclils.TeamMatchMode.None) hash ^= MatchMode.GetHashCode();
      if (LevelCfgId != 0) hash ^= LevelCfgId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && MatchMode != global::Pbclils.TeamMatchMode.None)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMatchModeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MatchMode);
      }
      if ((output.writeScope == pb.WriteScope.FULL && LevelCfgId != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLevelCfgIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(LevelCfgId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && MatchMode != global::Pbclils.TeamMatchMode.None)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMatchModeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MatchMode);
      }
      if ((output.writeScope == pb.WriteScope.FULL && LevelCfgId != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLevelCfgIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(LevelCfgId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && MatchMode != global::Pbclils.TeamMatchMode.None)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsMatchModeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchMode);
      }
      if ((scope == pb.WriteScope.FULL && LevelCfgId != 0)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsLevelCfgIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LevelCfgId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamMatchBattleReq other) {
      if (other == null) {
        return;
      }
      if (other.MatchMode != global::Pbclils.TeamMatchMode.None) {
        MatchMode = other.MatchMode;
      }
      if (other.LevelCfgId != 0) {
        LevelCfgId = other.LevelCfgId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchMode = (global::Pbclils.TeamMatchMode) input.ReadEnum();
            break;
          }
          case 16: {
            LevelCfgId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MatchMode = (global::Pbclils.TeamMatchMode) input.ReadEnum();
            break;
          }
          case 16: {
            LevelCfgId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TeamMatchBattleRsp : pb::IMessage<TeamMatchBattleRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TeamMatchBattleRsp> _parser = new pb::MessageParser<TeamMatchBattleRsp>(() => new TeamMatchBattleRsp());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamMatchBattleRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMatchBattleRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMatchBattleRsp(TeamMatchBattleRsp other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      code_ = other.code_;
      matchMode_ = other.matchMode_;
      levelCfgId_ = other.levelCfgId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMatchBattleRsp Clone() {
      return new TeamMatchBattleRsp(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Pbclils.RetCode code_ = global::Pbclils.RetCode.Ok;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbclils.RetCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCodeDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "match_mode" field.</summary>
    public const int MatchModeFieldNumber = 2;
    private global::Pbclils.TeamMatchMode matchMode_ = global::Pbclils.TeamMatchMode.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbclils.TeamMatchMode MatchMode {
      get { return matchMode_; }
      set {
        matchMode_ = value;
      }
    }
    /// <summary>Gets whether the "match_mode" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMatchModeDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    /// <summary>Field number for the "level_cfg_id" field.</summary>
    public const int LevelCfgIdFieldNumber = 3;
    private uint levelCfgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LevelCfgId {
      get { return levelCfgId_; }
      set {
        levelCfgId_ = value;
      }
    }
    /// <summary>Gets whether the "level_cfg_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLevelCfgIdDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamMatchBattleRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamMatchBattleRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (MatchMode != other.MatchMode) return false;
      if (LevelCfgId != other.LevelCfgId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != global::Pbclils.RetCode.Ok) hash ^= Code.GetHashCode();
      if (MatchMode != global::Pbclils.TeamMatchMode.None) hash ^= MatchMode.GetHashCode();
      if (LevelCfgId != 0) hash ^= LevelCfgId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if ((output.writeScope == pb.WriteScope.FULL && MatchMode != global::Pbclils.TeamMatchMode.None)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMatchModeDirty)) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MatchMode);
      }
      if ((output.writeScope == pb.WriteScope.FULL && LevelCfgId != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLevelCfgIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(LevelCfgId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if ((output.writeScope == pb.WriteScope.FULL && MatchMode != global::Pbclils.TeamMatchMode.None)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMatchModeDirty)) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MatchMode);
      }
      if ((output.writeScope == pb.WriteScope.FULL && LevelCfgId != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLevelCfgIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(LevelCfgId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if ((scope == pb.WriteScope.FULL && MatchMode != global::Pbclils.TeamMatchMode.None)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsMatchModeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchMode);
      }
      if ((scope == pb.WriteScope.FULL && LevelCfgId != 0)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsLevelCfgIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LevelCfgId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamMatchBattleRsp other) {
      if (other == null) {
        return;
      }
      if (other.Code != global::Pbclils.RetCode.Ok) {
        Code = other.Code;
      }
      if (other.MatchMode != global::Pbclils.TeamMatchMode.None) {
        MatchMode = other.MatchMode;
      }
      if (other.LevelCfgId != 0) {
        LevelCfgId = other.LevelCfgId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Pbclils.RetCode) input.ReadEnum();
            break;
          }
          case 16: {
            MatchMode = (global::Pbclils.TeamMatchMode) input.ReadEnum();
            break;
          }
          case 24: {
            LevelCfgId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = (global::Pbclils.RetCode) input.ReadEnum();
            break;
          }
          case 16: {
            MatchMode = (global::Pbclils.TeamMatchMode) input.ReadEnum();
            break;
          }
          case 24: {
            LevelCfgId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChangeHeroIDReq : pb::IMessage<ChangeHeroIDReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChangeHeroIDReq> _parser = new pb::MessageParser<ChangeHeroIDReq>(() => new ChangeHeroIDReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeHeroIDReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeHeroIDReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeHeroIDReq(ChangeHeroIDReq other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      heroId_ = other.heroId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeHeroIDReq Clone() {
      return new ChangeHeroIDReq(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHeroIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeHeroIDReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeHeroIDReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroId != other.HeroId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HeroId != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HeroId != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HeroId != 0)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeHeroIDReq other) {
      if (other == null) {
        return;
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HeroId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChangeHeroIDRsp : pb::IMessage<ChangeHeroIDRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChangeHeroIDRsp> _parser = new pb::MessageParser<ChangeHeroIDRsp>(() => new ChangeHeroIDRsp());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeHeroIDRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeHeroIDRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeHeroIDRsp(ChangeHeroIDRsp other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      code_ = other.code_;
      heroId_ = other.heroId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeHeroIDRsp Clone() {
      return new ChangeHeroIDRsp(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Pbclils.RetCode code_ = global::Pbclils.RetCode.Ok;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbclils.RetCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCodeDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHeroIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeHeroIDRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeHeroIDRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (HeroId != other.HeroId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != global::Pbclils.RetCode.Ok) hash ^= Code.GetHashCode();
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HeroId != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HeroId != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if ((scope == pb.WriteScope.FULL && HeroId != 0)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeHeroIDRsp other) {
      if (other == null) {
        return;
      }
      if (other.Code != global::Pbclils.RetCode.Ok) {
        Code = other.Code;
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Pbclils.RetCode) input.ReadEnum();
            break;
          }
          case 16: {
            HeroId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = (global::Pbclils.RetCode) input.ReadEnum();
            break;
          }
          case 16: {
            HeroId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TeamMemberChangeHeroNotify : pb::IMessage<TeamMemberChangeHeroNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TeamMemberChangeHeroNotify> _parser = new pb::MessageParser<TeamMemberChangeHeroNotify>(() => new TeamMemberChangeHeroNotify());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamMemberChangeHeroNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMemberChangeHeroNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMemberChangeHeroNotify(TeamMemberChangeHeroNotify other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      uid_ = other.uid_;
      heroId_ = other.heroId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMemberChangeHeroNotify Clone() {
      return new TeamMemberChangeHeroNotify(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private ulong uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUidDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHeroIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamMemberChangeHeroNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamMemberChangeHeroNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (HeroId != other.HeroId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && Uid != 0UL)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUidDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uid);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HeroId != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && Uid != 0UL)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUidDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uid);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HeroId != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt32(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && Uid != 0UL)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsUidDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      if ((scope == pb.WriteScope.FULL && HeroId != 0)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamMemberChangeHeroNotify other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadUInt64();
            break;
          }
          case 16: {
            HeroId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadUInt64();
            break;
          }
          case 16: {
            HeroId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChangeSkinIndexReq : pb::IMessage<ChangeSkinIndexReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChangeSkinIndexReq> _parser = new pb::MessageParser<ChangeSkinIndexReq>(() => new ChangeSkinIndexReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeSkinIndexReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSkinIndexReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSkinIndexReq(ChangeSkinIndexReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSkinIndexReq Clone() {
      return new ChangeSkinIndexReq(this);
    }

    public void ClearDirty() {
    }
    public bool IsDirty() {
      return false;
    }
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeSkinIndexReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeSkinIndexReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeSkinIndexReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ChangeSkinIndexRsp : pb::IMessage<ChangeSkinIndexRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChangeSkinIndexRsp> _parser = new pb::MessageParser<ChangeSkinIndexRsp>(() => new ChangeSkinIndexRsp());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeSkinIndexRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSkinIndexRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSkinIndexRsp(ChangeSkinIndexRsp other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSkinIndexRsp Clone() {
      return new ChangeSkinIndexRsp(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Pbclils.RetCode code_ = global::Pbclils.RetCode.Ok;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbclils.RetCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCodeDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeSkinIndexRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeSkinIndexRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != global::Pbclils.RetCode.Ok) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeSkinIndexRsp other) {
      if (other == null) {
        return;
      }
      if (other.Code != global::Pbclils.RetCode.Ok) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Pbclils.RetCode) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = (global::Pbclils.RetCode) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CreateTeamReq : pb::IMessage<CreateTeamReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateTeamReq> _parser = new pb::MessageParser<CreateTeamReq>(() => new CreateTeamReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateTeamReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTeamReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTeamReq(CreateTeamReq other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      mode_ = other.mode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTeamReq Clone() {
      return new CreateTeamReq(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private global::Pbclils.GameMode mode_ = global::Pbclils.GameMode.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbclils.GameMode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }
    /// <summary>Gets whether the "mode" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsModeDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateTeamReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateTeamReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != global::Pbclils.GameMode.None) hash ^= Mode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && Mode != global::Pbclils.GameMode.None)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsModeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && Mode != global::Pbclils.GameMode.None)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsModeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && Mode != global::Pbclils.GameMode.None)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsModeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateTeamReq other) {
      if (other == null) {
        return;
      }
      if (other.Mode != global::Pbclils.GameMode.None) {
        Mode = other.Mode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Mode = (global::Pbclils.GameMode) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Mode = (global::Pbclils.GameMode) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CreateTeamRsp : pb::IMessage<CreateTeamRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateTeamRsp> _parser = new pb::MessageParser<CreateTeamRsp>(() => new CreateTeamRsp());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateTeamRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTeamRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTeamRsp(CreateTeamRsp other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      code_ = other.code_;
      teamId_ = other.teamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTeamRsp Clone() {
      return new CreateTeamRsp(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Pbclils.RetCode code_ = global::Pbclils.RetCode.Ok;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbclils.RetCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCodeDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 2;
    private long teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }
    /// <summary>Gets whether the "team_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTeamIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateTeamRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateTeamRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (TeamId != other.TeamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != global::Pbclils.RetCode.Ok) hash ^= Code.GetHashCode();
      if (TeamId != 0L) hash ^= TeamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if ((output.writeScope == pb.WriteScope.FULL && TeamId != 0L)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTeamIdDirty)) {
        output.WriteRawTag(16);
        output.WriteInt64(TeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if ((output.writeScope == pb.WriteScope.FULL && TeamId != 0L)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTeamIdDirty)) {
        output.WriteRawTag(16);
        output.WriteInt64(TeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if ((scope == pb.WriteScope.FULL && TeamId != 0L)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTeamIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TeamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateTeamRsp other) {
      if (other == null) {
        return;
      }
      if (other.Code != global::Pbclils.RetCode.Ok) {
        Code = other.Code;
      }
      if (other.TeamId != 0L) {
        TeamId = other.TeamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Pbclils.RetCode) input.ReadEnum();
            break;
          }
          case 16: {
            TeamId = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = (global::Pbclils.RetCode) input.ReadEnum();
            break;
          }
          case 16: {
            TeamId = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TeamInviteReq : pb::IMessage<TeamInviteReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TeamInviteReq> _parser = new pb::MessageParser<TeamInviteReq>(() => new TeamInviteReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamInviteReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInviteReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInviteReq(TeamInviteReq other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      nickname_ = other.nickname_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInviteReq Clone() {
      return new TeamInviteReq(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 1;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "nickname" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNicknameDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamInviteReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamInviteReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nickname != other.Nickname) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && Nickname.Length != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNicknameDirty)) {
        output.WriteRawTag(10);
        output.WriteString(Nickname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && Nickname.Length != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNicknameDirty)) {
        output.WriteRawTag(10);
        output.WriteString(Nickname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && Nickname.Length != 0)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNicknameDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamInviteReq other) {
      if (other == null) {
        return;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Nickname = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Nickname = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TeamInviteRsp : pb::IMessage<TeamInviteRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TeamInviteRsp> _parser = new pb::MessageParser<TeamInviteRsp>(() => new TeamInviteRsp());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamInviteRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInviteRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInviteRsp(TeamInviteRsp other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      code_ = other.code_;
      nickname_ = other.nickname_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInviteRsp Clone() {
      return new TeamInviteRsp(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Pbclils.RetCode code_ = global::Pbclils.RetCode.Ok;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbclils.RetCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCodeDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 2;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "nickname" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNicknameDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamInviteRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamInviteRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Nickname != other.Nickname) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != global::Pbclils.RetCode.Ok) hash ^= Code.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if ((output.writeScope == pb.WriteScope.FULL && Nickname.Length != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNicknameDirty)) {
        output.WriteRawTag(18);
        output.WriteString(Nickname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if ((output.writeScope == pb.WriteScope.FULL && Nickname.Length != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNicknameDirty)) {
        output.WriteRawTag(18);
        output.WriteString(Nickname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if ((scope == pb.WriteScope.FULL && Nickname.Length != 0)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNicknameDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamInviteRsp other) {
      if (other == null) {
        return;
      }
      if (other.Code != global::Pbclils.RetCode.Ok) {
        Code = other.Code;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Pbclils.RetCode) input.ReadEnum();
            break;
          }
          case 18: {
            Nickname = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = (global::Pbclils.RetCode) input.ReadEnum();
            break;
          }
          case 18: {
            Nickname = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TeamInviteNotify : pb::IMessage<TeamInviteNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TeamInviteNotify> _parser = new pb::MessageParser<TeamInviteNotify>(() => new TeamInviteNotify());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamInviteNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInviteNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInviteNotify(TeamInviteNotify other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      invitorUid_ = other.invitorUid_;
      teamId_ = other.teamId_;
      invitorName_ = other.invitorName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInviteNotify Clone() {
      return new TeamInviteNotify(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "invitor_uid" field.</summary>
    public const int InvitorUidFieldNumber = 1;
    private ulong invitorUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong InvitorUid {
      get { return invitorUid_; }
      set {
        invitorUid_ = value;
      }
    }
    /// <summary>Gets whether the "invitor_uid" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInvitorUidDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 2;
    private long teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }
    /// <summary>Gets whether the "team_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTeamIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    /// <summary>Field number for the "invitor_name" field.</summary>
    public const int InvitorNameFieldNumber = 3;
    private string invitorName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InvitorName {
      get { return invitorName_; }
      set {
        invitorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "invitor_name" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInvitorNameDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamInviteNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamInviteNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InvitorUid != other.InvitorUid) return false;
      if (TeamId != other.TeamId) return false;
      if (InvitorName != other.InvitorName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InvitorUid != 0UL) hash ^= InvitorUid.GetHashCode();
      if (TeamId != 0L) hash ^= TeamId.GetHashCode();
      if (InvitorName.Length != 0) hash ^= InvitorName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && InvitorUid != 0UL)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsInvitorUidDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(InvitorUid);
      }
      if ((output.writeScope == pb.WriteScope.FULL && TeamId != 0L)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTeamIdDirty)) {
        output.WriteRawTag(16);
        output.WriteInt64(TeamId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && InvitorName.Length != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsInvitorNameDirty)) {
        output.WriteRawTag(26);
        output.WriteString(InvitorName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && InvitorUid != 0UL)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsInvitorUidDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(InvitorUid);
      }
      if ((output.writeScope == pb.WriteScope.FULL && TeamId != 0L)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTeamIdDirty)) {
        output.WriteRawTag(16);
        output.WriteInt64(TeamId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && InvitorName.Length != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsInvitorNameDirty)) {
        output.WriteRawTag(26);
        output.WriteString(InvitorName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && InvitorUid != 0UL)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsInvitorUidDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InvitorUid);
      }
      if ((scope == pb.WriteScope.FULL && TeamId != 0L)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTeamIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TeamId);
      }
      if ((scope == pb.WriteScope.FULL && InvitorName.Length != 0)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsInvitorNameDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InvitorName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamInviteNotify other) {
      if (other == null) {
        return;
      }
      if (other.InvitorUid != 0UL) {
        InvitorUid = other.InvitorUid;
      }
      if (other.TeamId != 0L) {
        TeamId = other.TeamId;
      }
      if (other.InvitorName.Length != 0) {
        InvitorName = other.InvitorName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InvitorUid = input.ReadUInt64();
            break;
          }
          case 16: {
            TeamId = input.ReadInt64();
            break;
          }
          case 26: {
            InvitorName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            InvitorUid = input.ReadUInt64();
            break;
          }
          case 16: {
            TeamId = input.ReadInt64();
            break;
          }
          case 26: {
            InvitorName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JoinTeamReq : pb::IMessage<JoinTeamReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JoinTeamReq> _parser = new pb::MessageParser<JoinTeamReq>(() => new JoinTeamReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinTeamReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTeamReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTeamReq(JoinTeamReq other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      teamId_ = other.teamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTeamReq Clone() {
      return new JoinTeamReq(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private long teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }
    /// <summary>Gets whether the "team_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTeamIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinTeamReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinTeamReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamId != other.TeamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamId != 0L) hash ^= TeamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && TeamId != 0L)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTeamIdDirty)) {
        output.WriteRawTag(8);
        output.WriteInt64(TeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && TeamId != 0L)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTeamIdDirty)) {
        output.WriteRawTag(8);
        output.WriteInt64(TeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && TeamId != 0L)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTeamIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TeamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinTeamReq other) {
      if (other == null) {
        return;
      }
      if (other.TeamId != 0L) {
        TeamId = other.TeamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TeamId = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TeamId = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JoinTeamRsp : pb::IMessage<JoinTeamRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JoinTeamRsp> _parser = new pb::MessageParser<JoinTeamRsp>(() => new JoinTeamRsp());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinTeamRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTeamRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTeamRsp(JoinTeamRsp other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      code_ = other.code_;
      teamId_ = other.teamId_;
      leaderUid_ = other.leaderUid_;
      members_ = other.members_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTeamRsp Clone() {
      return new JoinTeamRsp(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Pbclils.RetCode code_ = global::Pbclils.RetCode.Ok;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbclils.RetCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCodeDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 2;
    private long teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }
    /// <summary>Gets whether the "team_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTeamIdDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    /// <summary>Field number for the "leader_uid" field.</summary>
    public const int LeaderUidFieldNumber = 3;
    private ulong leaderUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LeaderUid {
      get { return leaderUid_; }
      set {
        leaderUid_ = value;
      }
    }
    /// <summary>Gets whether the "leader_uid" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLeaderUidDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Pbclils.TeamMember> _repeated_members_codec
        = pb::FieldCodec.ForMessage(34, global::Pbclils.TeamMember.Parser);
    private readonly pbc::RepeatedField<global::Pbclils.TeamMember> members_ = new pbc::RepeatedField<global::Pbclils.TeamMember>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbclils.TeamMember> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinTeamRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinTeamRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (TeamId != other.TeamId) return false;
      if (LeaderUid != other.LeaderUid) return false;
      if(!members_.Equals(other.members_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != global::Pbclils.RetCode.Ok) hash ^= Code.GetHashCode();
      if (TeamId != 0L) hash ^= TeamId.GetHashCode();
      if (LeaderUid != 0UL) hash ^= LeaderUid.GetHashCode();
      hash ^= members_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if ((output.writeScope == pb.WriteScope.FULL && TeamId != 0L)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTeamIdDirty)) {
        output.WriteRawTag(16);
        output.WriteInt64(TeamId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && LeaderUid != 0UL)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLeaderUidDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt64(LeaderUid);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if ((output.writeScope == pb.WriteScope.FULL && TeamId != 0L)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTeamIdDirty)) {
        output.WriteRawTag(16);
        output.WriteInt64(TeamId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && LeaderUid != 0UL)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLeaderUidDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt64(LeaderUid);
      }
      members_.WriteTo(ref output, _repeated_members_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if ((scope == pb.WriteScope.FULL && TeamId != 0L)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTeamIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TeamId);
      }
      if ((scope == pb.WriteScope.FULL && LeaderUid != 0UL)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsLeaderUidDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LeaderUid);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinTeamRsp other) {
      if (other == null) {
        return;
      }
      if (other.Code != global::Pbclils.RetCode.Ok) {
        Code = other.Code;
      }
      if (other.TeamId != 0L) {
        TeamId = other.TeamId;
      }
      if (other.LeaderUid != 0UL) {
        LeaderUid = other.LeaderUid;
      }
      members_.Add(other.members_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Pbclils.RetCode) input.ReadEnum();
            break;
          }
          case 16: {
            TeamId = input.ReadInt64();
            break;
          }
          case 24: {
            LeaderUid = input.ReadUInt64();
            break;
          }
          case 34: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = (global::Pbclils.RetCode) input.ReadEnum();
            break;
          }
          case 16: {
            TeamId = input.ReadInt64();
            break;
          }
          case 24: {
            LeaderUid = input.ReadUInt64();
            break;
          }
          case 34: {
            members_.AddEntriesFrom(ref input, _repeated_members_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TeamMember : pb::IMessage<TeamMember>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TeamMember> _parser = new pb::MessageParser<TeamMember>(() => new TeamMember());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMember(TeamMember other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      uid_ = other.uid_;
      name_ = other.name_;
      heroId_ = other.heroId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMember Clone() {
      return new TeamMember(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private ulong uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUidDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNameDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 3;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }
    /// <summary>Gets whether the "hero_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHeroIdDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      if (HeroId != other.HeroId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && Uid != 0UL)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUidDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uid);
      }
      if ((output.writeScope == pb.WriteScope.FULL && Name.Length != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNameDirty)) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HeroId != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && Uid != 0UL)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUidDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uid);
      }
      if ((output.writeScope == pb.WriteScope.FULL && Name.Length != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNameDirty)) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HeroId != 0)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && Uid != 0UL)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsUidDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      if ((scope == pb.WriteScope.FULL && Name.Length != 0)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNameDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if ((scope == pb.WriteScope.FULL && HeroId != 0)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsHeroIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamMember other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            HeroId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            HeroId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TeamMemberJoinNotify : pb::IMessage<TeamMemberJoinNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TeamMemberJoinNotify> _parser = new pb::MessageParser<TeamMemberJoinNotify>(() => new TeamMemberJoinNotify());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamMemberJoinNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMemberJoinNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMemberJoinNotify(TeamMemberJoinNotify other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      member_ = other.member_ != null ? other.member_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMemberJoinNotify Clone() {
      return new TeamMemberJoinNotify(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "member" field.</summary>
    public const int MemberFieldNumber = 1;
    private global::Pbclils.TeamMember member_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbclils.TeamMember Member {
      get { return member_; }
      set {
        member_ = value;
      }
    }
    /// <summary>Gets whether the "member" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMemberDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamMemberJoinNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamMemberJoinNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Member, other.Member)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (member_ != null) hash ^= Member.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && member_ != null)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMemberDirty)) {
        output.WriteRawTag(10);
        output.WriteMessage(Member);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && member_ != null)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsMemberDirty)) {
        output.WriteRawTag(10);
        output.WriteMessage(Member);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if (member_ != null) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(Member, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 1;
        } else {
          _dirtyBits0 &= ~1;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamMemberJoinNotify other) {
      if (other == null) {
        return;
      }
      if (other.member_ != null) {
        if (member_ == null) {
          Member = new global::Pbclils.TeamMember();
        }
        Member.MergeFrom(other.Member);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (member_ == null) {
              Member = new global::Pbclils.TeamMember();
            }
            input.ReadMessage(Member);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (member_ == null) {
              Member = new global::Pbclils.TeamMember();
            }
            input.ReadMessage(Member);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LeaveTeamReq : pb::IMessage<LeaveTeamReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LeaveTeamReq> _parser = new pb::MessageParser<LeaveTeamReq>(() => new LeaveTeamReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveTeamReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveTeamReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveTeamReq(LeaveTeamReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveTeamReq Clone() {
      return new LeaveTeamReq(this);
    }

    public void ClearDirty() {
    }
    public bool IsDirty() {
      return false;
    }
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveTeamReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveTeamReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveTeamReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class LeaveTeamRsp : pb::IMessage<LeaveTeamRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LeaveTeamRsp> _parser = new pb::MessageParser<LeaveTeamRsp>(() => new LeaveTeamRsp());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveTeamRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveTeamRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveTeamRsp(LeaveTeamRsp other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveTeamRsp Clone() {
      return new LeaveTeamRsp(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Pbclils.RetCode code_ = global::Pbclils.RetCode.Ok;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbclils.RetCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCodeDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveTeamRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveTeamRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != global::Pbclils.RetCode.Ok) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveTeamRsp other) {
      if (other == null) {
        return;
      }
      if (other.Code != global::Pbclils.RetCode.Ok) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Pbclils.RetCode) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = (global::Pbclils.RetCode) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TeamMemberLeaveNotify : pb::IMessage<TeamMemberLeaveNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TeamMemberLeaveNotify> _parser = new pb::MessageParser<TeamMemberLeaveNotify>(() => new TeamMemberLeaveNotify());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamMemberLeaveNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMemberLeaveNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMemberLeaveNotify(TeamMemberLeaveNotify other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      leaverUid_ = other.leaverUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMemberLeaveNotify Clone() {
      return new TeamMemberLeaveNotify(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "leaver_uid" field.</summary>
    public const int LeaverUidFieldNumber = 1;
    private ulong leaverUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LeaverUid {
      get { return leaverUid_; }
      set {
        leaverUid_ = value;
      }
    }
    /// <summary>Gets whether the "leaver_uid" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLeaverUidDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamMemberLeaveNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamMemberLeaveNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeaverUid != other.LeaverUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeaverUid != 0UL) hash ^= LeaverUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && LeaverUid != 0UL)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLeaverUidDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(LeaverUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && LeaverUid != 0UL)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsLeaverUidDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(LeaverUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && LeaverUid != 0UL)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsLeaverUidDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LeaverUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamMemberLeaveNotify other) {
      if (other == null) {
        return;
      }
      if (other.LeaverUid != 0UL) {
        LeaverUid = other.LeaverUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LeaverUid = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LeaverUid = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class KickTeamMemberReq : pb::IMessage<KickTeamMemberReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<KickTeamMemberReq> _parser = new pb::MessageParser<KickTeamMemberReq>(() => new KickTeamMemberReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KickTeamMemberReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickTeamMemberReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickTeamMemberReq(KickTeamMemberReq other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      kickeeUid_ = other.kickeeUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickTeamMemberReq Clone() {
      return new KickTeamMemberReq(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "kickee_uid" field.</summary>
    public const int KickeeUidFieldNumber = 1;
    private ulong kickeeUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong KickeeUid {
      get { return kickeeUid_; }
      set {
        kickeeUid_ = value;
      }
    }
    /// <summary>Gets whether the "kickee_uid" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsKickeeUidDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KickTeamMemberReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KickTeamMemberReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KickeeUid != other.KickeeUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KickeeUid != 0UL) hash ^= KickeeUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && KickeeUid != 0UL)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsKickeeUidDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(KickeeUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && KickeeUid != 0UL)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsKickeeUidDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(KickeeUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && KickeeUid != 0UL)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsKickeeUidDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(KickeeUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KickTeamMemberReq other) {
      if (other == null) {
        return;
      }
      if (other.KickeeUid != 0UL) {
        KickeeUid = other.KickeeUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            KickeeUid = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            KickeeUid = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class KickTeamMemberRsp : pb::IMessage<KickTeamMemberRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<KickTeamMemberRsp> _parser = new pb::MessageParser<KickTeamMemberRsp>(() => new KickTeamMemberRsp());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KickTeamMemberRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickTeamMemberRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickTeamMemberRsp(KickTeamMemberRsp other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      code_ = other.code_;
      kickeeUid_ = other.kickeeUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickTeamMemberRsp Clone() {
      return new KickTeamMemberRsp(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Pbclils.RetCode code_ = global::Pbclils.RetCode.Ok;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbclils.RetCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCodeDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    /// <summary>Field number for the "kickee_uid" field.</summary>
    public const int KickeeUidFieldNumber = 2;
    private ulong kickeeUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong KickeeUid {
      get { return kickeeUid_; }
      set {
        kickeeUid_ = value;
      }
    }
    /// <summary>Gets whether the "kickee_uid" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsKickeeUidDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KickTeamMemberRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KickTeamMemberRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (KickeeUid != other.KickeeUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != global::Pbclils.RetCode.Ok) hash ^= Code.GetHashCode();
      if (KickeeUid != 0UL) hash ^= KickeeUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if ((output.writeScope == pb.WriteScope.FULL && KickeeUid != 0UL)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsKickeeUidDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt64(KickeeUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if ((output.writeScope == pb.WriteScope.FULL && KickeeUid != 0UL)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsKickeeUidDirty)) {
        output.WriteRawTag(16);
        output.WriteUInt64(KickeeUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if ((scope == pb.WriteScope.FULL && KickeeUid != 0UL)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsKickeeUidDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(KickeeUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KickTeamMemberRsp other) {
      if (other == null) {
        return;
      }
      if (other.Code != global::Pbclils.RetCode.Ok) {
        Code = other.Code;
      }
      if (other.KickeeUid != 0UL) {
        KickeeUid = other.KickeeUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Pbclils.RetCode) input.ReadEnum();
            break;
          }
          case 16: {
            KickeeUid = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = (global::Pbclils.RetCode) input.ReadEnum();
            break;
          }
          case 16: {
            KickeeUid = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TeamMemberKickedNotify : pb::IMessage<TeamMemberKickedNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TeamMemberKickedNotify> _parser = new pb::MessageParser<TeamMemberKickedNotify>(() => new TeamMemberKickedNotify());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamMemberKickedNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMemberKickedNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMemberKickedNotify(TeamMemberKickedNotify other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      kickeeUid_ = other.kickeeUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMemberKickedNotify Clone() {
      return new TeamMemberKickedNotify(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "kickee_uid" field.</summary>
    public const int KickeeUidFieldNumber = 1;
    private ulong kickeeUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong KickeeUid {
      get { return kickeeUid_; }
      set {
        kickeeUid_ = value;
      }
    }
    /// <summary>Gets whether the "kickee_uid" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsKickeeUidDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamMemberKickedNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamMemberKickedNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KickeeUid != other.KickeeUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KickeeUid != 0UL) hash ^= KickeeUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && KickeeUid != 0UL)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsKickeeUidDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(KickeeUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && KickeeUid != 0UL)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsKickeeUidDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(KickeeUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && KickeeUid != 0UL)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsKickeeUidDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(KickeeUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamMemberKickedNotify other) {
      if (other == null) {
        return;
      }
      if (other.KickeeUid != 0UL) {
        KickeeUid = other.KickeeUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            KickeeUid = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            KickeeUid = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DisbandTeamReq : pb::IMessage<DisbandTeamReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DisbandTeamReq> _parser = new pb::MessageParser<DisbandTeamReq>(() => new DisbandTeamReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisbandTeamReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisbandTeamReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisbandTeamReq(DisbandTeamReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisbandTeamReq Clone() {
      return new DisbandTeamReq(this);
    }

    public void ClearDirty() {
    }
    public bool IsDirty() {
      return false;
    }
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisbandTeamReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisbandTeamReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisbandTeamReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class DisbandTeamRsp : pb::IMessage<DisbandTeamRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DisbandTeamRsp> _parser = new pb::MessageParser<DisbandTeamRsp>(() => new DisbandTeamRsp());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisbandTeamRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisbandTeamRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisbandTeamRsp(DisbandTeamRsp other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisbandTeamRsp Clone() {
      return new DisbandTeamRsp(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Pbclils.RetCode code_ = global::Pbclils.RetCode.Ok;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbclils.RetCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCodeDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisbandTeamRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisbandTeamRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != global::Pbclils.RetCode.Ok) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && Code != global::Pbclils.RetCode.Ok)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsCodeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisbandTeamRsp other) {
      if (other == null) {
        return;
      }
      if (other.Code != global::Pbclils.RetCode.Ok) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Pbclils.RetCode) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = (global::Pbclils.RetCode) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TeamDisbandNotify : pb::IMessage<TeamDisbandNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TeamDisbandNotify> _parser = new pb::MessageParser<TeamDisbandNotify>(() => new TeamDisbandNotify());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamDisbandNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamDisbandNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamDisbandNotify(TeamDisbandNotify other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      teamId_ = other.teamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamDisbandNotify Clone() {
      return new TeamDisbandNotify(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private long teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }
    /// <summary>Gets whether the "team_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTeamIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamDisbandNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamDisbandNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamId != other.TeamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamId != 0L) hash ^= TeamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && TeamId != 0L)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTeamIdDirty)) {
        output.WriteRawTag(8);
        output.WriteInt64(TeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && TeamId != 0L)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsTeamIdDirty)) {
        output.WriteRawTag(8);
        output.WriteInt64(TeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && TeamId != 0L)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsTeamIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TeamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamDisbandNotify other) {
      if (other == null) {
        return;
      }
      if (other.TeamId != 0L) {
        TeamId = other.TeamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TeamId = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TeamId = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TeamLeaderChangeNotify : pb::IMessage<TeamLeaderChangeNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TeamLeaderChangeNotify> _parser = new pb::MessageParser<TeamLeaderChangeNotify>(() => new TeamLeaderChangeNotify());
    private pb::UnknownFieldSet _unknownFields;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamLeaderChangeNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbclils.PbclilsReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamLeaderChangeNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamLeaderChangeNotify(TeamLeaderChangeNotify other) : this() {
      _dirtyBits0 = other._dirtyBits0;
      newLeaderID_ = other.newLeaderID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamLeaderChangeNotify Clone() {
      return new TeamLeaderChangeNotify(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "newLeaderID" field.</summary>
    public const int NewLeaderIDFieldNumber = 1;
    private ulong newLeaderID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NewLeaderID {
      get { return newLeaderID_; }
      set {
        newLeaderID_ = value;
      }
    }
    /// <summary>Gets whether the "newLeaderID" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNewLeaderIDDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamLeaderChangeNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamLeaderChangeNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NewLeaderID != other.NewLeaderID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NewLeaderID != 0UL) hash ^= NewLeaderID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && NewLeaderID != 0UL)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNewLeaderIDDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(NewLeaderID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && NewLeaderID != 0UL)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsNewLeaderIDDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(NewLeaderID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && NewLeaderID != 0UL)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsNewLeaderIDDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NewLeaderID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamLeaderChangeNotify other) {
      if (other == null) {
        return;
      }
      if (other.NewLeaderID != 0UL) {
        NewLeaderID = other.NewLeaderID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NewLeaderID = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NewLeaderID = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
