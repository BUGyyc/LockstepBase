// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Protocol {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class ProtoRoom {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Protocol_PlayerInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.PlayerInfo, global::Protocol.PlayerInfo.Builder> internal__static_Protocol_PlayerInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_RoomPlayerInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.RoomPlayerInfo, global::Protocol.RoomPlayerInfo.Builder> internal__static_Protocol_RoomPlayerInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_BatteRuntimeData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.BatteRuntimeData, global::Protocol.BatteRuntimeData.Builder> internal__static_Protocol_BatteRuntimeData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_EnterBattleRsp__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.EnterBattleRsp, global::Protocol.EnterBattleRsp.Builder> internal__static_Protocol_EnterBattleRsp__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_LeaveBattleReq__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.LeaveBattleReq, global::Protocol.LeaveBattleReq.Builder> internal__static_Protocol_LeaveBattleReq__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_LeaveBattleRsp__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.LeaveBattleRsp, global::Protocol.LeaveBattleRsp.Builder> internal__static_Protocol_LeaveBattleRsp__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_LeaveBattleNotify__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.LeaveBattleNotify, global::Protocol.LeaveBattleNotify.Builder> internal__static_Protocol_LeaveBattleNotify__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_BattleEndNotify__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.BattleEndNotify, global::Protocol.BattleEndNotify.Builder> internal__static_Protocol_BattleEndNotify__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_LoadBattleReq__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.LoadBattleReq, global::Protocol.LoadBattleReq.Builder> internal__static_Protocol_LoadBattleReq__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_LoadBattleRsp__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.LoadBattleRsp, global::Protocol.LoadBattleRsp.Builder> internal__static_Protocol_LoadBattleRsp__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_LoadProgressNtf__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.LoadProgressNtf, global::Protocol.LoadProgressNtf.Builder> internal__static_Protocol_LoadProgressNtf__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Protocol_BattleStart__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Protocol.BattleStart, global::Protocol.BattleStart.Builder> internal__static_Protocol_BattleStart__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static ProtoRoom() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBwcm90b19yb29tLnByb3RvEghQcm90b2NvbBodaW5jbHVkZS95ZF9maWVs", 
            "ZG9wdGlvbnMucHJvdG8aEnByb3RvX2NvbW1vbi5wcm90bxoScHJvdG9fYmF0", 
            "dGxlLnByb3RvIu4BCgpQbGF5ZXJJbmZvEhsKCXBsYXllcl9pZBgBIAIoDVII", 
            "cGxheWVySWQSNQoLcGxheWVyX3R5cGUYAiACKA4yFC5Qcm90b2NvbC5QbGF5", 
            "ZXJUeXBlUgpwbGF5ZXJUeXBlEh8KC3BsYXllcl9uYW1lGAMgAigJUgpwbGF5", 
            "ZXJOYW1lEhcKB2hlcm9faWQYBCACKA1SBmhlcm9JZBIXCgdza2luX2lkGAUg", 
            "AigNUgZza2luSWQSOQoNYmFnX3N5bmNfZGF0YRg1IAEoCzIVLlByb3RvY29s", 
            "LkJhZ1N5bmNEYXRhUgtiYWdTeW5jRGF0YSI+Cg5Sb29tUGxheWVySW5mbxIs", 
            "CgZwbGF5ZXIYASACKAsyFC5Qcm90b2NvbC5QbGF5ZXJJbmZvUgZwbGF5ZXIi", 
            "sgEKEEJhdHRlUnVudGltZURhdGESFwoHZ2FtZV9pZBgBIAIoBVIGZ2FtZUlk", 
            "Eh0KCnN0YXJ0X3RpbWUYAiACKAVSCXN0YXJ0VGltZRIhCgxydW5uaW5nX3Rp", 
            "bWUYAyACKAVSC3J1bm5pbmdUaW1lEhsKCWdhbWVfdHlwZRgEIAIoCVIIZ2Ft", 
            "ZVR5cGUSJgoPcmVhbF9wbGF5ZXJfbnVtGAUgAigFUg1yZWFsUGxheWVyTnVt", 
            "IrABCg5FbnRlckJhdHRsZVJzcBIZCghyZXRfY29kZRgBIAIoBVIHcmV0Q29k", 
            "ZRIXCgdyb29tX2lkGAIgASgEUgZyb29tSWQSHQoKbGV2ZWxfbmFtZRgDIAEo", 
            "CVIJbGV2ZWxOYW1lEksKFXJvb21fcGxheWVyX2luZm9fbGlzdBgEIAMoCzIY", 
            "LlByb3RvY29sLlJvb21QbGF5ZXJJbmZvUhJyb29tUGxheWVySW5mb0xpc3Qi", 
            "YgoOTGVhdmVCYXR0bGVSZXESGwoJcGxheWVyX2lkGAEgAigNUghwbGF5ZXJJ", 
            "ZBIQCgN1aWQYAiACKAlSA3VpZBIhCgxyZXN1bHRfc3RhdGUYAyABKA1SC3Jl", 
            "c3VsdFN0YXRlIisKDkxlYXZlQmF0dGxlUnNwEhkKCHJldF9jb2RlGAEgAigF", 
            "UgdyZXRDb2RlIjAKEUxlYXZlQmF0dGxlTm90aWZ5EhsKCXBsYXllcl9pZBgB", 
            "IAIoDVIIcGxheWVySWQiKgoPQmF0dGxlRW5kTm90aWZ5EhcKB3Jvb21faWQY", 
            "ASACKARSBnJvb21JZCIoCg1Mb2FkQmF0dGxlUmVxEhcKB3VzZXJfaWQYASAC", 
            "KAlSBnVzZXJJZCKZAQoNTG9hZEJhdHRsZVJzcBIZCghyZXRfY29kZRgBIAIo", 
            "BVIHcmV0Q29kZRIXCgdob3N0X2lkGAIgAigNUgZob3N0SWQSNQoLcGxheWVy", 
            "X2xpc3QYAyADKAsyFC5Qcm90b2NvbC5QbGF5ZXJJbmZvUgpwbGF5ZXJMaXN0", 
            "Eh0KCmxldmVsX25hbWUYBCABKAlSCWxldmVsTmFtZSItCg9Mb2FkUHJvZ3Jl", 
            "c3NOdGYSGgoIcHJvZ3Jlc3MYASACKA1SCHByb2dyZXNzIi4KC0JhdHRsZVN0", 
          "YXJ0Eh8KC3NlcnZlcl90aW1lGAEgAigCUgpzZXJ2ZXJUaW1l"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Protocol_PlayerInfo__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Protocol_PlayerInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.PlayerInfo, global::Protocol.PlayerInfo.Builder>(internal__static_Protocol_PlayerInfo__Descriptor,
                new string[] { "PlayerId", "PlayerType", "PlayerName", "HeroId", "SkinId", "BagSyncData", });
        internal__static_Protocol_RoomPlayerInfo__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Protocol_RoomPlayerInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.RoomPlayerInfo, global::Protocol.RoomPlayerInfo.Builder>(internal__static_Protocol_RoomPlayerInfo__Descriptor,
                new string[] { "Player", });
        internal__static_Protocol_BatteRuntimeData__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Protocol_BatteRuntimeData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.BatteRuntimeData, global::Protocol.BatteRuntimeData.Builder>(internal__static_Protocol_BatteRuntimeData__Descriptor,
                new string[] { "GameId", "StartTime", "RunningTime", "GameType", "RealPlayerNum", });
        internal__static_Protocol_EnterBattleRsp__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Protocol_EnterBattleRsp__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.EnterBattleRsp, global::Protocol.EnterBattleRsp.Builder>(internal__static_Protocol_EnterBattleRsp__Descriptor,
                new string[] { "RetCode", "RoomId", "LevelName", "RoomPlayerInfoList", });
        internal__static_Protocol_LeaveBattleReq__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Protocol_LeaveBattleReq__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.LeaveBattleReq, global::Protocol.LeaveBattleReq.Builder>(internal__static_Protocol_LeaveBattleReq__Descriptor,
                new string[] { "PlayerId", "Uid", "ResultState", });
        internal__static_Protocol_LeaveBattleRsp__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Protocol_LeaveBattleRsp__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.LeaveBattleRsp, global::Protocol.LeaveBattleRsp.Builder>(internal__static_Protocol_LeaveBattleRsp__Descriptor,
                new string[] { "RetCode", });
        internal__static_Protocol_LeaveBattleNotify__Descriptor = Descriptor.MessageTypes[6];
        internal__static_Protocol_LeaveBattleNotify__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.LeaveBattleNotify, global::Protocol.LeaveBattleNotify.Builder>(internal__static_Protocol_LeaveBattleNotify__Descriptor,
                new string[] { "PlayerId", });
        internal__static_Protocol_BattleEndNotify__Descriptor = Descriptor.MessageTypes[7];
        internal__static_Protocol_BattleEndNotify__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.BattleEndNotify, global::Protocol.BattleEndNotify.Builder>(internal__static_Protocol_BattleEndNotify__Descriptor,
                new string[] { "RoomId", });
        internal__static_Protocol_LoadBattleReq__Descriptor = Descriptor.MessageTypes[8];
        internal__static_Protocol_LoadBattleReq__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.LoadBattleReq, global::Protocol.LoadBattleReq.Builder>(internal__static_Protocol_LoadBattleReq__Descriptor,
                new string[] { "UserId", });
        internal__static_Protocol_LoadBattleRsp__Descriptor = Descriptor.MessageTypes[9];
        internal__static_Protocol_LoadBattleRsp__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.LoadBattleRsp, global::Protocol.LoadBattleRsp.Builder>(internal__static_Protocol_LoadBattleRsp__Descriptor,
                new string[] { "RetCode", "HostId", "PlayerList", "LevelName", });
        internal__static_Protocol_LoadProgressNtf__Descriptor = Descriptor.MessageTypes[10];
        internal__static_Protocol_LoadProgressNtf__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.LoadProgressNtf, global::Protocol.LoadProgressNtf.Builder>(internal__static_Protocol_LoadProgressNtf__Descriptor,
                new string[] { "Progress", });
        internal__static_Protocol_BattleStart__Descriptor = Descriptor.MessageTypes[11];
        internal__static_Protocol_BattleStart__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Protocol.BattleStart, global::Protocol.BattleStart.Builder>(internal__static_Protocol_BattleStart__Descriptor,
                new string[] { "ServerTime", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::yd_fieldoptions.YdFieldoptions.RegisterAllExtensions(registry);
        global::Protocol.ProtoCommon.RegisterAllExtensions(registry);
        global::Protocol.ProtoBattle.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::yd_fieldoptions.YdFieldoptions.Descriptor, 
          global::Protocol.ProtoCommon.Descriptor, 
          global::Protocol.ProtoBattle.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PlayerInfo : pb::GeneratedMessage<PlayerInfo, PlayerInfo.Builder> {
    public PlayerInfo() { }
    private static readonly PlayerInfo defaultInstance = new PlayerInfo().MakeReadOnly();
    private static readonly string[] _playerInfoFieldNames = new string[] { "bag_sync_data", "hero_id", "player_id", "player_name", "player_type", "skin_id" };
    private static readonly uint[] _playerInfoFieldTags = new uint[] { 426, 32, 8, 26, 16, 40 };
    public static PlayerInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PlayerInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoRoom.internal__static_Protocol_PlayerInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PlayerInfo, PlayerInfo.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoRoom.internal__static_Protocol_PlayerInfo__FieldAccessorTable; }
    }
    
    public const int PlayerIdFieldNumber = 1;
    private bool hasPlayerId;
    private uint playerId_;
    public bool HasPlayerId {
      get { return hasPlayerId; }
    }
    [global::System.CLSCompliant(false)]
    public uint PlayerId {
      get { return playerId_; }
      set { hasPlayerId = true;
        playerId_ = value;}
    }
    
    public const int PlayerTypeFieldNumber = 2;
    private bool hasPlayerType;
    private global::Protocol.PlayerType playerType_ = global::Protocol.PlayerType.PT_Player;
    public bool HasPlayerType {
      get { return hasPlayerType; }
    }
    public global::Protocol.PlayerType PlayerType {
      get { return playerType_; }
      set { hasPlayerType = true;
        playerType_ = value;}
    }
    
    public const int PlayerNameFieldNumber = 3;
    private bool hasPlayerName;
    private string playerName_ = "";
    public bool HasPlayerName {
      get { return hasPlayerName; }
    }
    public string PlayerName {
      get { return playerName_; }
      set { hasPlayerName = true;
        playerName_ = value;}
    }
    
    public const int HeroIdFieldNumber = 4;
    private bool hasHeroId;
    private uint heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    [global::System.CLSCompliant(false)]
    public uint HeroId {
      get { return heroId_; }
      set { hasHeroId = true;
        heroId_ = value;}
    }
    
    public const int SkinIdFieldNumber = 5;
    private bool hasSkinId;
    private uint skinId_;
    public bool HasSkinId {
      get { return hasSkinId; }
    }
    [global::System.CLSCompliant(false)]
    public uint SkinId {
      get { return skinId_; }
      set { hasSkinId = true;
        skinId_ = value;}
    }
    
    public const int BagSyncDataFieldNumber = 53;
    private bool hasBagSyncData;
    private global::Protocol.BagSyncData bagSyncData_;
    public bool HasBagSyncData {
      get { return hasBagSyncData; }
    }
    public global::Protocol.BagSyncData BagSyncData {
      get { return bagSyncData_; }
      set { hasBagSyncData = true;
        bagSyncData_ = value;}
    }
    public void MergeBagSyncData(global::Protocol.BagSyncData value, bool isFull = false) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (HasBagSyncData &&
        bagSyncData_ != global::Protocol.BagSyncData.DefaultInstance) {
        bagSyncData_.MergeFrom(value, isFull);
      } else {
        bagSyncData_ = value;
      }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerId) return false;
        if (!hasPlayerType) return false;
        if (!hasPlayerName) return false;
        if (!hasHeroId) return false;
        if (!hasSkinId) return false;
        if (HasBagSyncData) {
          if (!BagSyncData.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _playerInfoFieldNames;
      if (hasPlayerId) {
        output.WriteUInt32(1, field_names[2], PlayerId);
      }
      if (hasPlayerType) {
        output.WriteEnum(2, field_names[4], (int) PlayerType, PlayerType);
      }
      if (hasPlayerName) {
        output.WriteString(3, field_names[3], PlayerName);
      }
      if (hasHeroId) {
        output.WriteUInt32(4, field_names[1], HeroId);
      }
      if (hasSkinId) {
        output.WriteUInt32(5, field_names[5], SkinId);
      }
      if (hasBagSyncData) {
        output.WriteMessage(53, field_names[0], BagSyncData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasPlayerId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, PlayerId);
      }
      if (hasPlayerType) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) PlayerType);
      }
      if (hasPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, PlayerName);
      }
      if (hasHeroId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, HeroId);
      }
      if (hasSkinId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, SkinId);
      }
      if (hasBagSyncData) {
        size += pb::CodedOutputStream.ComputeMessageSize(53, BagSyncData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public PlayerInfo CommitChange() {
      PlayerInfo other = new PlayerInfo();
      bool isChange = false;
      other.PlayerId = PlayerId;
      other.PlayerType = PlayerType;
      other.PlayerName = PlayerName;
      other.HeroId = HeroId;
      other.SkinId = SkinId;
      
      var BagSyncDatacommit = BagSyncData?.CommitChange();
      if(BagSyncDatacommit!=null)
      {
          isChange = true;
          other.BagSyncData = BagSyncDatacommit;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(PlayerInfo other, bool isFull = false) {
      if (other == global::Protocol.PlayerInfo.DefaultInstance) return;
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasPlayerType) {
        PlayerType = other.PlayerType;
      }
      if (other.HasPlayerName) {
        PlayerName = other.PlayerName;
      }
      if (other.HasHeroId) {
        HeroId = other.HeroId;
      }
      if (other.HasSkinId) {
        SkinId = other.SkinId;
      }
      
      if (other.HasBagSyncData)
      {
        MergeBagSyncData(other.BagSyncData, isFull);
      }
    }
    
    public static PlayerInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PlayerInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PlayerInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PlayerInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PlayerInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PlayerInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerInfo result;
      
      private PlayerInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerInfo original = result;
          result = new PlayerInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.PlayerInfo.Descriptor; }
      }
      
      public override PlayerInfo DefaultInstanceForType {
        get { return global::Protocol.PlayerInfo.DefaultInstance; }
      }
      
      public override PlayerInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PlayerInfo) {
          return MergeFrom((PlayerInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerInfo other) {
        if (other == global::Protocol.PlayerInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerId) {
          PlayerId = other.PlayerId;
        }
        if (other.HasPlayerType) {
          PlayerType = other.PlayerType;
        }
        if (other.HasPlayerName) {
          PlayerName = other.PlayerName;
        }
        if (other.HasHeroId) {
          HeroId = other.HeroId;
        }
        if (other.HasSkinId) {
          SkinId = other.SkinId;
        }
        if (other.HasBagSyncData) {
          MergeBagSyncData(other.BagSyncData);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPlayerId = input.ReadUInt32(ref result.playerId_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.playerType_, out unknown)) {
                result.hasPlayerType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 26: {
              result.hasPlayerName = input.ReadString(ref result.playerName_);
              break;
            }
            case 32: {
              result.hasHeroId = input.ReadUInt32(ref result.heroId_);
              break;
            }
            case 40: {
              result.hasSkinId = input.ReadUInt32(ref result.skinId_);
              break;
            }
            case 426: {
              global::Protocol.BagSyncData.Builder subBuilder = global::Protocol.BagSyncData.CreateBuilder();
              if (result.hasBagSyncData) {
                subBuilder.MergeFrom(BagSyncData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BagSyncData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerId {
        get { return result.hasPlayerId; }
      }
      [global::System.CLSCompliant(false)]
      public uint PlayerId {
        get { return result.PlayerId; }
        set { SetPlayerId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPlayerId(uint value) {
        PrepareBuilder();
        result.hasPlayerId = true;
        result.playerId_ = value;
        return this;
      }
      public Builder ClearPlayerId() {
        PrepareBuilder();
        result.hasPlayerId = false;
        result.playerId_ = 0;
        return this;
      }
      
      public bool HasPlayerType {
       get { return result.hasPlayerType; }
      }
      public global::Protocol.PlayerType PlayerType {
        get { return result.PlayerType; }
        set { SetPlayerType(value); }
      }
      public Builder SetPlayerType(global::Protocol.PlayerType value) {
        PrepareBuilder();
        result.hasPlayerType = true;
        result.playerType_ = value;
        return this;
      }
      public Builder ClearPlayerType() {
        PrepareBuilder();
        result.hasPlayerType = false;
        result.playerType_ = global::Protocol.PlayerType.PT_Player;
        return this;
      }
      
      public bool HasPlayerName {
        get { return result.hasPlayerName; }
      }
      public string PlayerName {
        get { return result.PlayerName; }
        set { SetPlayerName(value); }
      }
      public Builder SetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerName = true;
        result.playerName_ = value;
        return this;
      }
      public Builder ClearPlayerName() {
        PrepareBuilder();
        result.hasPlayerName = false;
        result.playerName_ = "";
        return this;
      }
      
      public bool HasHeroId {
        get { return result.hasHeroId; }
      }
      [global::System.CLSCompliant(false)]
      public uint HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHeroId(uint value) {
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = 0;
        return this;
      }
      
      public bool HasSkinId {
        get { return result.hasSkinId; }
      }
      [global::System.CLSCompliant(false)]
      public uint SkinId {
        get { return result.SkinId; }
        set { SetSkinId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSkinId(uint value) {
        PrepareBuilder();
        result.hasSkinId = true;
        result.skinId_ = value;
        return this;
      }
      public Builder ClearSkinId() {
        PrepareBuilder();
        result.hasSkinId = false;
        result.skinId_ = 0;
        return this;
      }
      
      public bool HasBagSyncData {
       get { return result.hasBagSyncData; }
      }
      public global::Protocol.BagSyncData BagSyncData {
        get { return result.BagSyncData; }
        set { SetBagSyncData(value); }
      }
      public Builder SetBagSyncData(global::Protocol.BagSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBagSyncData = true;
        result.bagSyncData_ = value;
        return this;
      }
      public Builder SetBagSyncData(global::Protocol.BagSyncData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBagSyncData = true;
        result.bagSyncData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBagSyncData(global::Protocol.BagSyncData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.HasBagSyncData &&
            result.bagSyncData_ != global::Protocol.BagSyncData.DefaultInstance) {
            result.bagSyncData_ = global::Protocol.BagSyncData.CreateBuilder(result.bagSyncData_).MergeFrom(value).BuildPartial();
        } else {
          result.bagSyncData_ = value;
          result.hasBagSyncData = true;
        }
        return this;
      }
      public Builder ClearBagSyncData() {
        PrepareBuilder();
        result.hasBagSyncData = false;
        result.bagSyncData_ = null;
        return this;
      }
    }
    static PlayerInfo() {
      object.ReferenceEquals(global::Protocol.ProtoRoom.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RoomPlayerInfo : pb::GeneratedMessage<RoomPlayerInfo, RoomPlayerInfo.Builder> {
    public RoomPlayerInfo() { }
    private static readonly RoomPlayerInfo defaultInstance = new RoomPlayerInfo().MakeReadOnly();
    private static readonly string[] _roomPlayerInfoFieldNames = new string[] { "player" };
    private static readonly uint[] _roomPlayerInfoFieldTags = new uint[] { 10 };
    public static RoomPlayerInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RoomPlayerInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RoomPlayerInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoRoom.internal__static_Protocol_RoomPlayerInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RoomPlayerInfo, RoomPlayerInfo.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoRoom.internal__static_Protocol_RoomPlayerInfo__FieldAccessorTable; }
    }
    
    public const int PlayerFieldNumber = 1;
    private bool hasPlayer;
    private global::Protocol.PlayerInfo player_;
    public bool HasPlayer {
      get { return hasPlayer; }
    }
    public global::Protocol.PlayerInfo Player {
      get { return player_; }
      set { hasPlayer = true;
        player_ = value;}
    }
    public void MergePlayer(global::Protocol.PlayerInfo value, bool isFull = false) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (HasPlayer &&
        player_ != global::Protocol.PlayerInfo.DefaultInstance) {
        player_.MergeFrom(value, isFull);
      } else {
        player_ = value;
      }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayer) return false;
        if (!Player.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _roomPlayerInfoFieldNames;
      if (hasPlayer) {
        output.WriteMessage(1, field_names[0], Player);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasPlayer) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Player);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public RoomPlayerInfo CommitChange() {
      RoomPlayerInfo other = new RoomPlayerInfo();
      bool isChange = false;
      
      var Playercommit = Player?.CommitChange();
      if(Playercommit!=null)
      {
          isChange = true;
          other.Player = Playercommit;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(RoomPlayerInfo other, bool isFull = false) {
      if (other == global::Protocol.RoomPlayerInfo.DefaultInstance) return;
      
      if (other.HasPlayer)
      {
        MergePlayer(other.Player, isFull);
      }
    }
    
    public static RoomPlayerInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RoomPlayerInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RoomPlayerInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RoomPlayerInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RoomPlayerInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RoomPlayerInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RoomPlayerInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RoomPlayerInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RoomPlayerInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RoomPlayerInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RoomPlayerInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RoomPlayerInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<RoomPlayerInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RoomPlayerInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RoomPlayerInfo result;
      
      private RoomPlayerInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          RoomPlayerInfo original = result;
          result = new RoomPlayerInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RoomPlayerInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.RoomPlayerInfo.Descriptor; }
      }
      
      public override RoomPlayerInfo DefaultInstanceForType {
        get { return global::Protocol.RoomPlayerInfo.DefaultInstance; }
      }
      
      public override RoomPlayerInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RoomPlayerInfo) {
          return MergeFrom((RoomPlayerInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RoomPlayerInfo other) {
        if (other == global::Protocol.RoomPlayerInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayer) {
          MergePlayer(other.Player);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_roomPlayerInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _roomPlayerInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Protocol.PlayerInfo.Builder subBuilder = global::Protocol.PlayerInfo.CreateBuilder();
              if (result.hasPlayer) {
                subBuilder.MergeFrom(Player);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Player = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayer {
       get { return result.hasPlayer; }
      }
      public global::Protocol.PlayerInfo Player {
        get { return result.Player; }
        set { SetPlayer(value); }
      }
      public Builder SetPlayer(global::Protocol.PlayerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayer = true;
        result.player_ = value;
        return this;
      }
      public Builder SetPlayer(global::Protocol.PlayerInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPlayer = true;
        result.player_ = builderForValue.Build();
        return this;
      }
      public Builder MergePlayer(global::Protocol.PlayerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.HasPlayer &&
            result.player_ != global::Protocol.PlayerInfo.DefaultInstance) {
            result.player_ = global::Protocol.PlayerInfo.CreateBuilder(result.player_).MergeFrom(value).BuildPartial();
        } else {
          result.player_ = value;
          result.hasPlayer = true;
        }
        return this;
      }
      public Builder ClearPlayer() {
        PrepareBuilder();
        result.hasPlayer = false;
        result.player_ = null;
        return this;
      }
    }
    static RoomPlayerInfo() {
      object.ReferenceEquals(global::Protocol.ProtoRoom.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BatteRuntimeData : pb::GeneratedMessage<BatteRuntimeData, BatteRuntimeData.Builder> {
    public BatteRuntimeData() { }
    private static readonly BatteRuntimeData defaultInstance = new BatteRuntimeData().MakeReadOnly();
    private static readonly string[] _batteRuntimeDataFieldNames = new string[] { "game_id", "game_type", "real_player_num", "running_time", "start_time" };
    private static readonly uint[] _batteRuntimeDataFieldTags = new uint[] { 8, 34, 40, 24, 16 };
    public static BatteRuntimeData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BatteRuntimeData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BatteRuntimeData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoRoom.internal__static_Protocol_BatteRuntimeData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BatteRuntimeData, BatteRuntimeData.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoRoom.internal__static_Protocol_BatteRuntimeData__FieldAccessorTable; }
    }
    
    public const int GameIdFieldNumber = 1;
    private bool hasGameId;
    private int gameId_;
    public bool HasGameId {
      get { return hasGameId; }
    }
    public int GameId {
      get { return gameId_; }
      set { hasGameId = true;
        gameId_ = value;}
    }
    
    public const int StartTimeFieldNumber = 2;
    private bool hasStartTime;
    private int startTime_;
    public bool HasStartTime {
      get { return hasStartTime; }
    }
    public int StartTime {
      get { return startTime_; }
      set { hasStartTime = true;
        startTime_ = value;}
    }
    
    public const int RunningTimeFieldNumber = 3;
    private bool hasRunningTime;
    private int runningTime_;
    public bool HasRunningTime {
      get { return hasRunningTime; }
    }
    public int RunningTime {
      get { return runningTime_; }
      set { hasRunningTime = true;
        runningTime_ = value;}
    }
    
    public const int GameTypeFieldNumber = 4;
    private bool hasGameType;
    private string gameType_ = "";
    public bool HasGameType {
      get { return hasGameType; }
    }
    public string GameType {
      get { return gameType_; }
      set { hasGameType = true;
        gameType_ = value;}
    }
    
    public const int RealPlayerNumFieldNumber = 5;
    private bool hasRealPlayerNum;
    private int realPlayerNum_;
    public bool HasRealPlayerNum {
      get { return hasRealPlayerNum; }
    }
    public int RealPlayerNum {
      get { return realPlayerNum_; }
      set { hasRealPlayerNum = true;
        realPlayerNum_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameId) return false;
        if (!hasStartTime) return false;
        if (!hasRunningTime) return false;
        if (!hasGameType) return false;
        if (!hasRealPlayerNum) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _batteRuntimeDataFieldNames;
      if (hasGameId) {
        output.WriteInt32(1, field_names[0], GameId);
      }
      if (hasStartTime) {
        output.WriteInt32(2, field_names[4], StartTime);
      }
      if (hasRunningTime) {
        output.WriteInt32(3, field_names[3], RunningTime);
      }
      if (hasGameType) {
        output.WriteString(4, field_names[1], GameType);
      }
      if (hasRealPlayerNum) {
        output.WriteInt32(5, field_names[2], RealPlayerNum);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasGameId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, GameId);
      }
      if (hasStartTime) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, StartTime);
      }
      if (hasRunningTime) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, RunningTime);
      }
      if (hasGameType) {
        size += pb::CodedOutputStream.ComputeStringSize(4, GameType);
      }
      if (hasRealPlayerNum) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, RealPlayerNum);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public BatteRuntimeData CommitChange() {
      BatteRuntimeData other = new BatteRuntimeData();
      bool isChange = false;
      other.GameId = GameId;
      other.StartTime = StartTime;
      other.RunningTime = RunningTime;
      other.GameType = GameType;
      other.RealPlayerNum = RealPlayerNum;
      return isChange?other:null;
    }
    
    public void MergeFrom(BatteRuntimeData other, bool isFull = false) {
      if (other == global::Protocol.BatteRuntimeData.DefaultInstance) return;
      if (other.HasGameId) {
        GameId = other.GameId;
      }
      if (other.HasStartTime) {
        StartTime = other.StartTime;
      }
      if (other.HasRunningTime) {
        RunningTime = other.RunningTime;
      }
      if (other.HasGameType) {
        GameType = other.GameType;
      }
      if (other.HasRealPlayerNum) {
        RealPlayerNum = other.RealPlayerNum;
      }
    }
    
    public static BatteRuntimeData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BatteRuntimeData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BatteRuntimeData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BatteRuntimeData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BatteRuntimeData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BatteRuntimeData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BatteRuntimeData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BatteRuntimeData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BatteRuntimeData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BatteRuntimeData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BatteRuntimeData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BatteRuntimeData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BatteRuntimeData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BatteRuntimeData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BatteRuntimeData result;
      
      private BatteRuntimeData PrepareBuilder() {
        if (resultIsReadOnly) {
          BatteRuntimeData original = result;
          result = new BatteRuntimeData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BatteRuntimeData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.BatteRuntimeData.Descriptor; }
      }
      
      public override BatteRuntimeData DefaultInstanceForType {
        get { return global::Protocol.BatteRuntimeData.DefaultInstance; }
      }
      
      public override BatteRuntimeData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BatteRuntimeData) {
          return MergeFrom((BatteRuntimeData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BatteRuntimeData other) {
        if (other == global::Protocol.BatteRuntimeData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameId) {
          GameId = other.GameId;
        }
        if (other.HasStartTime) {
          StartTime = other.StartTime;
        }
        if (other.HasRunningTime) {
          RunningTime = other.RunningTime;
        }
        if (other.HasGameType) {
          GameType = other.GameType;
        }
        if (other.HasRealPlayerNum) {
          RealPlayerNum = other.RealPlayerNum;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_batteRuntimeDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _batteRuntimeDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGameId = input.ReadInt32(ref result.gameId_);
              break;
            }
            case 16: {
              result.hasStartTime = input.ReadInt32(ref result.startTime_);
              break;
            }
            case 24: {
              result.hasRunningTime = input.ReadInt32(ref result.runningTime_);
              break;
            }
            case 34: {
              result.hasGameType = input.ReadString(ref result.gameType_);
              break;
            }
            case 40: {
              result.hasRealPlayerNum = input.ReadInt32(ref result.realPlayerNum_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameId {
        get { return result.hasGameId; }
      }
      public int GameId {
        get { return result.GameId; }
        set { SetGameId(value); }
      }
      public Builder SetGameId(int value) {
        PrepareBuilder();
        result.hasGameId = true;
        result.gameId_ = value;
        return this;
      }
      public Builder ClearGameId() {
        PrepareBuilder();
        result.hasGameId = false;
        result.gameId_ = 0;
        return this;
      }
      
      public bool HasStartTime {
        get { return result.hasStartTime; }
      }
      public int StartTime {
        get { return result.StartTime; }
        set { SetStartTime(value); }
      }
      public Builder SetStartTime(int value) {
        PrepareBuilder();
        result.hasStartTime = true;
        result.startTime_ = value;
        return this;
      }
      public Builder ClearStartTime() {
        PrepareBuilder();
        result.hasStartTime = false;
        result.startTime_ = 0;
        return this;
      }
      
      public bool HasRunningTime {
        get { return result.hasRunningTime; }
      }
      public int RunningTime {
        get { return result.RunningTime; }
        set { SetRunningTime(value); }
      }
      public Builder SetRunningTime(int value) {
        PrepareBuilder();
        result.hasRunningTime = true;
        result.runningTime_ = value;
        return this;
      }
      public Builder ClearRunningTime() {
        PrepareBuilder();
        result.hasRunningTime = false;
        result.runningTime_ = 0;
        return this;
      }
      
      public bool HasGameType {
        get { return result.hasGameType; }
      }
      public string GameType {
        get { return result.GameType; }
        set { SetGameType(value); }
      }
      public Builder SetGameType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameType = true;
        result.gameType_ = value;
        return this;
      }
      public Builder ClearGameType() {
        PrepareBuilder();
        result.hasGameType = false;
        result.gameType_ = "";
        return this;
      }
      
      public bool HasRealPlayerNum {
        get { return result.hasRealPlayerNum; }
      }
      public int RealPlayerNum {
        get { return result.RealPlayerNum; }
        set { SetRealPlayerNum(value); }
      }
      public Builder SetRealPlayerNum(int value) {
        PrepareBuilder();
        result.hasRealPlayerNum = true;
        result.realPlayerNum_ = value;
        return this;
      }
      public Builder ClearRealPlayerNum() {
        PrepareBuilder();
        result.hasRealPlayerNum = false;
        result.realPlayerNum_ = 0;
        return this;
      }
    }
    static BatteRuntimeData() {
      object.ReferenceEquals(global::Protocol.ProtoRoom.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EnterBattleRsp : pb::GeneratedMessage<EnterBattleRsp, EnterBattleRsp.Builder> {
    public EnterBattleRsp() { }
    private static readonly EnterBattleRsp defaultInstance = new EnterBattleRsp().MakeReadOnly();
    private static readonly string[] _enterBattleRspFieldNames = new string[] { "level_name", "ret_code", "room_id", "room_player_info_list" };
    private static readonly uint[] _enterBattleRspFieldTags = new uint[] { 26, 8, 16, 34 };
    public static EnterBattleRsp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EnterBattleRsp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EnterBattleRsp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoRoom.internal__static_Protocol_EnterBattleRsp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EnterBattleRsp, EnterBattleRsp.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoRoom.internal__static_Protocol_EnterBattleRsp__FieldAccessorTable; }
    }
    
    public const int RetCodeFieldNumber = 1;
    private bool hasRetCode;
    private int retCode_;
    public bool HasRetCode {
      get { return hasRetCode; }
    }
    public int RetCode {
      get { return retCode_; }
      set { hasRetCode = true;
        retCode_ = value;}
    }
    
    public const int RoomIdFieldNumber = 2;
    private bool hasRoomId;
    private bool isRoomIdChanged = true;
    private ulong roomId_;
    public bool HasRoomId {
      get { return hasRoomId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong RoomId {
      get { return roomId_; }
      set { hasRoomId = true;
        isRoomIdChanged = true;
        roomId_ = value;}
    }
    
    public const int LevelNameFieldNumber = 3;
    private bool hasLevelName;
    private bool isLevelNameChanged = true;
    private string levelName_ = "";
    public bool HasLevelName {
      get { return hasLevelName; }
    }
    public string LevelName {
      get { return levelName_; }
      set { hasLevelName = true;
        isLevelNameChanged = true;
        levelName_ = value;}
    }
    
    public const int RoomPlayerInfoListFieldNumber = 4;
    private pbc::PopsicleList<global::Protocol.RoomPlayerInfo> roomPlayerInfoList_ = new pbc::PopsicleList<global::Protocol.RoomPlayerInfo>();
    public scg::IList<global::Protocol.RoomPlayerInfo> RoomPlayerInfoList {
      get { return pbc::Lists.AsReadOnly(roomPlayerInfoList_); }
    }
    public int RoomPlayerInfoListCount {
      get { return roomPlayerInfoList_.Count; }
    }
    public global::Protocol.RoomPlayerInfo GetRoomPlayerInfoList(int index) {
      return roomPlayerInfoList_[index];
    }
    public global::Protocol.RoomPlayerInfo FindRoomPlayerInfoList(System.Predicate<global::Protocol.RoomPlayerInfo> match) {
      return roomPlayerInfoList_.Find(match);
    }
    public System.Collections.Generic.IList<global::Protocol.RoomPlayerInfo> FindAllRoomPlayerInfoList(System.Predicate<global::Protocol.RoomPlayerInfo> match) {
      return roomPlayerInfoList_.FindAll(match);
    }
    public void SetRoomPlayerInfoList(int index, global::Protocol.RoomPlayerInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (index < 0 || index >= roomPlayerInfoList_.Count) return;
      roomPlayerInfoList_[index] = value;
    }
    public void AddRoomPlayerInfoList(global::Protocol.RoomPlayerInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      roomPlayerInfoList_.Add(value);
    }
    public void AddRangeRoomPlayerInfoList(scg::IEnumerable<global::Protocol.RoomPlayerInfo> values) {
      roomPlayerInfoList_.Add(values);
    }
    public void RemoveRoomPlayerInfoList(global::Protocol.RoomPlayerInfo value) {
      if (!roomPlayerInfoList_.Contains(value)) return;
      roomPlayerInfoList_.Remove(value);
    }
    public void RemoveAtRoomPlayerInfoList(int index) {
      if (index < 0 || index >= roomPlayerInfoList_.Count) return;
      roomPlayerInfoList_.RemoveAt(index);
    }
    public void ClearRoomPlayerInfoList() {
      if (roomPlayerInfoList_.Count <= 0) return;
      roomPlayerInfoList_.Clear();
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRetCode) return false;
        foreach (global::Protocol.RoomPlayerInfo element in RoomPlayerInfoList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _enterBattleRspFieldNames;
      if (hasRetCode) {
        output.WriteInt32(1, field_names[1], RetCode);
      }
      if (hasRoomId) {
        output.WriteUInt64(2, field_names[2], RoomId);
      }
      if (hasLevelName) {
        output.WriteString(3, field_names[0], LevelName);
      }
      if (roomPlayerInfoList_.Count > 0) {
        output.WriteMessageArray(4, field_names[3], roomPlayerInfoList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasRetCode) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, RetCode);
      }
      if (hasRoomId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, RoomId);
      }
      if (hasLevelName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, LevelName);
      }
      foreach (global::Protocol.RoomPlayerInfo element in RoomPlayerInfoList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public EnterBattleRsp CommitChange() {
      EnterBattleRsp other = new EnterBattleRsp();
      bool isChange = false;
      other.RetCode = RetCode;
      if (isRoomIdChanged) {
        isChange = true;
        other.RoomId = RoomId;
        isRoomIdChanged = false;
      }
      if (isLevelNameChanged) {
        isChange = true;
        other.LevelName = LevelName;
        isLevelNameChanged = false;
      }
      isChange = true;
      other.roomPlayerInfoList_.Add(roomPlayerInfoList_);
      return isChange?other:null;
    }
    
    public void MergeFrom(EnterBattleRsp other, bool isFull = false) {
      if (other == global::Protocol.EnterBattleRsp.DefaultInstance) return;
      if (other.HasRetCode) {
        RetCode = other.RetCode;
      }
      if (other.HasRoomId) {
        RoomId = other.RoomId;
      }
      if (other.HasLevelName) {
        LevelName = other.LevelName;
      }
        roomPlayerInfoList_.Clear();
        roomPlayerInfoList_.Add(other.roomPlayerInfoList_);
    }
    
    public static EnterBattleRsp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EnterBattleRsp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EnterBattleRsp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EnterBattleRsp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EnterBattleRsp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EnterBattleRsp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EnterBattleRsp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EnterBattleRsp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EnterBattleRsp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EnterBattleRsp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EnterBattleRsp MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EnterBattleRsp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EnterBattleRsp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EnterBattleRsp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EnterBattleRsp result;
      
      private EnterBattleRsp PrepareBuilder() {
        if (resultIsReadOnly) {
          EnterBattleRsp original = result;
          result = new EnterBattleRsp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EnterBattleRsp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.EnterBattleRsp.Descriptor; }
      }
      
      public override EnterBattleRsp DefaultInstanceForType {
        get { return global::Protocol.EnterBattleRsp.DefaultInstance; }
      }
      
      public override EnterBattleRsp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EnterBattleRsp) {
          return MergeFrom((EnterBattleRsp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EnterBattleRsp other) {
        if (other == global::Protocol.EnterBattleRsp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRetCode) {
          RetCode = other.RetCode;
        }
        if (other.HasRoomId) {
          RoomId = other.RoomId;
        }
        if (other.HasLevelName) {
          LevelName = other.LevelName;
        }
        if (other.roomPlayerInfoList_.Count != 0) {
          result.roomPlayerInfoList_.Add(other.roomPlayerInfoList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_enterBattleRspFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _enterBattleRspFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRetCode = input.ReadInt32(ref result.retCode_);
              break;
            }
            case 16: {
              result.hasRoomId = input.ReadUInt64(ref result.roomId_);
              break;
            }
            case 26: {
              result.hasLevelName = input.ReadString(ref result.levelName_);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.roomPlayerInfoList_, global::Protocol.RoomPlayerInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRetCode {
        get { return result.hasRetCode; }
      }
      public int RetCode {
        get { return result.RetCode; }
        set { SetRetCode(value); }
      }
      public Builder SetRetCode(int value) {
        PrepareBuilder();
        result.hasRetCode = true;
        result.retCode_ = value;
        return this;
      }
      public Builder ClearRetCode() {
        PrepareBuilder();
        result.hasRetCode = false;
        result.retCode_ = 0;
        return this;
      }
      
      public bool HasRoomId {
        get { return result.hasRoomId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong RoomId {
        get { return result.RoomId; }
        set { SetRoomId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRoomId(ulong value) {
        PrepareBuilder();
        result.hasRoomId = true;
        result.roomId_ = value;
        return this;
      }
      public Builder ClearRoomId() {
        PrepareBuilder();
        result.hasRoomId = false;
        result.roomId_ = 0UL;
        return this;
      }
      
      public bool HasLevelName {
        get { return result.hasLevelName; }
      }
      public string LevelName {
        get { return result.LevelName; }
        set { SetLevelName(value); }
      }
      public Builder SetLevelName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLevelName = true;
        result.levelName_ = value;
        return this;
      }
      public Builder ClearLevelName() {
        PrepareBuilder();
        result.hasLevelName = false;
        result.levelName_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::Protocol.RoomPlayerInfo> RoomPlayerInfoList {
        get { return PrepareBuilder().roomPlayerInfoList_; }
      }
      public int RoomPlayerInfoListCount {
        get { return result.RoomPlayerInfoListCount; }
      }
      public global::Protocol.RoomPlayerInfo GetRoomPlayerInfoList(int index) {
        return result.GetRoomPlayerInfoList(index);
      }
      public Builder SetRoomPlayerInfoList(int index, global::Protocol.RoomPlayerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.roomPlayerInfoList_[index] = value;
        return this;
      }
      public Builder SetRoomPlayerInfoList(int index, global::Protocol.RoomPlayerInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.roomPlayerInfoList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRoomPlayerInfoList(global::Protocol.RoomPlayerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.roomPlayerInfoList_.Add(value);
        return this;
      }
      public Builder AddRoomPlayerInfoList(global::Protocol.RoomPlayerInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.roomPlayerInfoList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRoomPlayerInfoList(scg::IEnumerable<global::Protocol.RoomPlayerInfo> values) {
        PrepareBuilder();
        result.roomPlayerInfoList_.Add(values);
        return this;
      }
      public Builder ClearRoomPlayerInfoList() {
        PrepareBuilder();
        result.roomPlayerInfoList_.Clear();
        return this;
      }
    }
    static EnterBattleRsp() {
      object.ReferenceEquals(global::Protocol.ProtoRoom.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LeaveBattleReq : pb::GeneratedMessage<LeaveBattleReq, LeaveBattleReq.Builder> {
    public LeaveBattleReq() { }
    private static readonly LeaveBattleReq defaultInstance = new LeaveBattleReq().MakeReadOnly();
    private static readonly string[] _leaveBattleReqFieldNames = new string[] { "player_id", "result_state", "uid" };
    private static readonly uint[] _leaveBattleReqFieldTags = new uint[] { 8, 24, 18 };
    public static LeaveBattleReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LeaveBattleReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LeaveBattleReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoRoom.internal__static_Protocol_LeaveBattleReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LeaveBattleReq, LeaveBattleReq.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoRoom.internal__static_Protocol_LeaveBattleReq__FieldAccessorTable; }
    }
    
    public const int PlayerIdFieldNumber = 1;
    private bool hasPlayerId;
    private uint playerId_;
    public bool HasPlayerId {
      get { return hasPlayerId; }
    }
    [global::System.CLSCompliant(false)]
    public uint PlayerId {
      get { return playerId_; }
      set { hasPlayerId = true;
        playerId_ = value;}
    }
    
    public const int UidFieldNumber = 2;
    private bool hasUid;
    private string uid_ = "";
    public bool HasUid {
      get { return hasUid; }
    }
    public string Uid {
      get { return uid_; }
      set { hasUid = true;
        uid_ = value;}
    }
    
    public const int ResultStateFieldNumber = 3;
    private bool hasResultState;
    private bool isResultStateChanged = true;
    private uint resultState_;
    public bool HasResultState {
      get { return hasResultState; }
    }
    [global::System.CLSCompliant(false)]
    public uint ResultState {
      get { return resultState_; }
      set { hasResultState = true;
        isResultStateChanged = true;
        resultState_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerId) return false;
        if (!hasUid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _leaveBattleReqFieldNames;
      if (hasPlayerId) {
        output.WriteUInt32(1, field_names[0], PlayerId);
      }
      if (hasUid) {
        output.WriteString(2, field_names[2], Uid);
      }
      if (hasResultState) {
        output.WriteUInt32(3, field_names[1], ResultState);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasPlayerId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, PlayerId);
      }
      if (hasUid) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Uid);
      }
      if (hasResultState) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, ResultState);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public LeaveBattleReq CommitChange() {
      LeaveBattleReq other = new LeaveBattleReq();
      bool isChange = false;
      other.PlayerId = PlayerId;
      other.Uid = Uid;
      if (isResultStateChanged) {
        isChange = true;
        other.ResultState = ResultState;
        isResultStateChanged = false;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(LeaveBattleReq other, bool isFull = false) {
      if (other == global::Protocol.LeaveBattleReq.DefaultInstance) return;
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasResultState) {
        ResultState = other.ResultState;
      }
    }
    
    public static LeaveBattleReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LeaveBattleReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LeaveBattleReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LeaveBattleReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LeaveBattleReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LeaveBattleReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LeaveBattleReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LeaveBattleReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LeaveBattleReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LeaveBattleReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LeaveBattleReq MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LeaveBattleReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LeaveBattleReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LeaveBattleReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LeaveBattleReq result;
      
      private LeaveBattleReq PrepareBuilder() {
        if (resultIsReadOnly) {
          LeaveBattleReq original = result;
          result = new LeaveBattleReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LeaveBattleReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.LeaveBattleReq.Descriptor; }
      }
      
      public override LeaveBattleReq DefaultInstanceForType {
        get { return global::Protocol.LeaveBattleReq.DefaultInstance; }
      }
      
      public override LeaveBattleReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LeaveBattleReq) {
          return MergeFrom((LeaveBattleReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LeaveBattleReq other) {
        if (other == global::Protocol.LeaveBattleReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerId) {
          PlayerId = other.PlayerId;
        }
        if (other.HasUid) {
          Uid = other.Uid;
        }
        if (other.HasResultState) {
          ResultState = other.ResultState;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_leaveBattleReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _leaveBattleReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPlayerId = input.ReadUInt32(ref result.playerId_);
              break;
            }
            case 18: {
              result.hasUid = input.ReadString(ref result.uid_);
              break;
            }
            case 24: {
              result.hasResultState = input.ReadUInt32(ref result.resultState_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerId {
        get { return result.hasPlayerId; }
      }
      [global::System.CLSCompliant(false)]
      public uint PlayerId {
        get { return result.PlayerId; }
        set { SetPlayerId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPlayerId(uint value) {
        PrepareBuilder();
        result.hasPlayerId = true;
        result.playerId_ = value;
        return this;
      }
      public Builder ClearPlayerId() {
        PrepareBuilder();
        result.hasPlayerId = false;
        result.playerId_ = 0;
        return this;
      }
      
      public bool HasUid {
        get { return result.hasUid; }
      }
      public string Uid {
        get { return result.Uid; }
        set { SetUid(value); }
      }
      public Builder SetUid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUid = true;
        result.uid_ = value;
        return this;
      }
      public Builder ClearUid() {
        PrepareBuilder();
        result.hasUid = false;
        result.uid_ = "";
        return this;
      }
      
      public bool HasResultState {
        get { return result.hasResultState; }
      }
      [global::System.CLSCompliant(false)]
      public uint ResultState {
        get { return result.ResultState; }
        set { SetResultState(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetResultState(uint value) {
        PrepareBuilder();
        result.hasResultState = true;
        result.resultState_ = value;
        return this;
      }
      public Builder ClearResultState() {
        PrepareBuilder();
        result.hasResultState = false;
        result.resultState_ = 0;
        return this;
      }
    }
    static LeaveBattleReq() {
      object.ReferenceEquals(global::Protocol.ProtoRoom.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LeaveBattleRsp : pb::GeneratedMessage<LeaveBattleRsp, LeaveBattleRsp.Builder> {
    public LeaveBattleRsp() { }
    private static readonly LeaveBattleRsp defaultInstance = new LeaveBattleRsp().MakeReadOnly();
    private static readonly string[] _leaveBattleRspFieldNames = new string[] { "ret_code" };
    private static readonly uint[] _leaveBattleRspFieldTags = new uint[] { 8 };
    public static LeaveBattleRsp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LeaveBattleRsp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LeaveBattleRsp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoRoom.internal__static_Protocol_LeaveBattleRsp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LeaveBattleRsp, LeaveBattleRsp.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoRoom.internal__static_Protocol_LeaveBattleRsp__FieldAccessorTable; }
    }
    
    public const int RetCodeFieldNumber = 1;
    private bool hasRetCode;
    private int retCode_;
    public bool HasRetCode {
      get { return hasRetCode; }
    }
    public int RetCode {
      get { return retCode_; }
      set { hasRetCode = true;
        retCode_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRetCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _leaveBattleRspFieldNames;
      if (hasRetCode) {
        output.WriteInt32(1, field_names[0], RetCode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasRetCode) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, RetCode);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public LeaveBattleRsp CommitChange() {
      LeaveBattleRsp other = new LeaveBattleRsp();
      bool isChange = false;
      other.RetCode = RetCode;
      return isChange?other:null;
    }
    
    public void MergeFrom(LeaveBattleRsp other, bool isFull = false) {
      if (other == global::Protocol.LeaveBattleRsp.DefaultInstance) return;
      if (other.HasRetCode) {
        RetCode = other.RetCode;
      }
    }
    
    public static LeaveBattleRsp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LeaveBattleRsp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LeaveBattleRsp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LeaveBattleRsp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LeaveBattleRsp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LeaveBattleRsp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LeaveBattleRsp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LeaveBattleRsp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LeaveBattleRsp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LeaveBattleRsp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LeaveBattleRsp MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LeaveBattleRsp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LeaveBattleRsp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LeaveBattleRsp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LeaveBattleRsp result;
      
      private LeaveBattleRsp PrepareBuilder() {
        if (resultIsReadOnly) {
          LeaveBattleRsp original = result;
          result = new LeaveBattleRsp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LeaveBattleRsp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.LeaveBattleRsp.Descriptor; }
      }
      
      public override LeaveBattleRsp DefaultInstanceForType {
        get { return global::Protocol.LeaveBattleRsp.DefaultInstance; }
      }
      
      public override LeaveBattleRsp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LeaveBattleRsp) {
          return MergeFrom((LeaveBattleRsp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LeaveBattleRsp other) {
        if (other == global::Protocol.LeaveBattleRsp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRetCode) {
          RetCode = other.RetCode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_leaveBattleRspFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _leaveBattleRspFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRetCode = input.ReadInt32(ref result.retCode_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRetCode {
        get { return result.hasRetCode; }
      }
      public int RetCode {
        get { return result.RetCode; }
        set { SetRetCode(value); }
      }
      public Builder SetRetCode(int value) {
        PrepareBuilder();
        result.hasRetCode = true;
        result.retCode_ = value;
        return this;
      }
      public Builder ClearRetCode() {
        PrepareBuilder();
        result.hasRetCode = false;
        result.retCode_ = 0;
        return this;
      }
    }
    static LeaveBattleRsp() {
      object.ReferenceEquals(global::Protocol.ProtoRoom.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LeaveBattleNotify : pb::GeneratedMessage<LeaveBattleNotify, LeaveBattleNotify.Builder> {
    public LeaveBattleNotify() { }
    private static readonly LeaveBattleNotify defaultInstance = new LeaveBattleNotify().MakeReadOnly();
    private static readonly string[] _leaveBattleNotifyFieldNames = new string[] { "player_id" };
    private static readonly uint[] _leaveBattleNotifyFieldTags = new uint[] { 8 };
    public static LeaveBattleNotify DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LeaveBattleNotify DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LeaveBattleNotify ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoRoom.internal__static_Protocol_LeaveBattleNotify__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LeaveBattleNotify, LeaveBattleNotify.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoRoom.internal__static_Protocol_LeaveBattleNotify__FieldAccessorTable; }
    }
    
    public const int PlayerIdFieldNumber = 1;
    private bool hasPlayerId;
    private uint playerId_;
    public bool HasPlayerId {
      get { return hasPlayerId; }
    }
    [global::System.CLSCompliant(false)]
    public uint PlayerId {
      get { return playerId_; }
      set { hasPlayerId = true;
        playerId_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _leaveBattleNotifyFieldNames;
      if (hasPlayerId) {
        output.WriteUInt32(1, field_names[0], PlayerId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasPlayerId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, PlayerId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public LeaveBattleNotify CommitChange() {
      LeaveBattleNotify other = new LeaveBattleNotify();
      bool isChange = false;
      other.PlayerId = PlayerId;
      return isChange?other:null;
    }
    
    public void MergeFrom(LeaveBattleNotify other, bool isFull = false) {
      if (other == global::Protocol.LeaveBattleNotify.DefaultInstance) return;
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
    }
    
    public static LeaveBattleNotify ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LeaveBattleNotify ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LeaveBattleNotify ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LeaveBattleNotify ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LeaveBattleNotify ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LeaveBattleNotify ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LeaveBattleNotify ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LeaveBattleNotify ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LeaveBattleNotify ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LeaveBattleNotify ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LeaveBattleNotify MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LeaveBattleNotify prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LeaveBattleNotify, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LeaveBattleNotify cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LeaveBattleNotify result;
      
      private LeaveBattleNotify PrepareBuilder() {
        if (resultIsReadOnly) {
          LeaveBattleNotify original = result;
          result = new LeaveBattleNotify();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LeaveBattleNotify MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.LeaveBattleNotify.Descriptor; }
      }
      
      public override LeaveBattleNotify DefaultInstanceForType {
        get { return global::Protocol.LeaveBattleNotify.DefaultInstance; }
      }
      
      public override LeaveBattleNotify BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LeaveBattleNotify) {
          return MergeFrom((LeaveBattleNotify) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LeaveBattleNotify other) {
        if (other == global::Protocol.LeaveBattleNotify.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerId) {
          PlayerId = other.PlayerId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_leaveBattleNotifyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _leaveBattleNotifyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPlayerId = input.ReadUInt32(ref result.playerId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerId {
        get { return result.hasPlayerId; }
      }
      [global::System.CLSCompliant(false)]
      public uint PlayerId {
        get { return result.PlayerId; }
        set { SetPlayerId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPlayerId(uint value) {
        PrepareBuilder();
        result.hasPlayerId = true;
        result.playerId_ = value;
        return this;
      }
      public Builder ClearPlayerId() {
        PrepareBuilder();
        result.hasPlayerId = false;
        result.playerId_ = 0;
        return this;
      }
    }
    static LeaveBattleNotify() {
      object.ReferenceEquals(global::Protocol.ProtoRoom.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BattleEndNotify : pb::GeneratedMessage<BattleEndNotify, BattleEndNotify.Builder> {
    public BattleEndNotify() { }
    private static readonly BattleEndNotify defaultInstance = new BattleEndNotify().MakeReadOnly();
    private static readonly string[] _battleEndNotifyFieldNames = new string[] { "room_id" };
    private static readonly uint[] _battleEndNotifyFieldTags = new uint[] { 8 };
    public static BattleEndNotify DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BattleEndNotify DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BattleEndNotify ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoRoom.internal__static_Protocol_BattleEndNotify__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BattleEndNotify, BattleEndNotify.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoRoom.internal__static_Protocol_BattleEndNotify__FieldAccessorTable; }
    }
    
    public const int RoomIdFieldNumber = 1;
    private bool hasRoomId;
    private ulong roomId_;
    public bool HasRoomId {
      get { return hasRoomId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong RoomId {
      get { return roomId_; }
      set { hasRoomId = true;
        roomId_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRoomId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _battleEndNotifyFieldNames;
      if (hasRoomId) {
        output.WriteUInt64(1, field_names[0], RoomId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasRoomId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, RoomId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public BattleEndNotify CommitChange() {
      BattleEndNotify other = new BattleEndNotify();
      bool isChange = false;
      other.RoomId = RoomId;
      return isChange?other:null;
    }
    
    public void MergeFrom(BattleEndNotify other, bool isFull = false) {
      if (other == global::Protocol.BattleEndNotify.DefaultInstance) return;
      if (other.HasRoomId) {
        RoomId = other.RoomId;
      }
    }
    
    public static BattleEndNotify ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BattleEndNotify ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BattleEndNotify ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BattleEndNotify ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BattleEndNotify ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BattleEndNotify ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BattleEndNotify ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BattleEndNotify ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BattleEndNotify ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BattleEndNotify ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BattleEndNotify MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BattleEndNotify prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BattleEndNotify, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BattleEndNotify cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BattleEndNotify result;
      
      private BattleEndNotify PrepareBuilder() {
        if (resultIsReadOnly) {
          BattleEndNotify original = result;
          result = new BattleEndNotify();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BattleEndNotify MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.BattleEndNotify.Descriptor; }
      }
      
      public override BattleEndNotify DefaultInstanceForType {
        get { return global::Protocol.BattleEndNotify.DefaultInstance; }
      }
      
      public override BattleEndNotify BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BattleEndNotify) {
          return MergeFrom((BattleEndNotify) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BattleEndNotify other) {
        if (other == global::Protocol.BattleEndNotify.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRoomId) {
          RoomId = other.RoomId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_battleEndNotifyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _battleEndNotifyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRoomId = input.ReadUInt64(ref result.roomId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRoomId {
        get { return result.hasRoomId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong RoomId {
        get { return result.RoomId; }
        set { SetRoomId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRoomId(ulong value) {
        PrepareBuilder();
        result.hasRoomId = true;
        result.roomId_ = value;
        return this;
      }
      public Builder ClearRoomId() {
        PrepareBuilder();
        result.hasRoomId = false;
        result.roomId_ = 0UL;
        return this;
      }
    }
    static BattleEndNotify() {
      object.ReferenceEquals(global::Protocol.ProtoRoom.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LoadBattleReq : pb::GeneratedMessage<LoadBattleReq, LoadBattleReq.Builder> {
    public LoadBattleReq() { }
    private static readonly LoadBattleReq defaultInstance = new LoadBattleReq().MakeReadOnly();
    private static readonly string[] _loadBattleReqFieldNames = new string[] { "user_id" };
    private static readonly uint[] _loadBattleReqFieldTags = new uint[] { 10 };
    public static LoadBattleReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LoadBattleReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LoadBattleReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoRoom.internal__static_Protocol_LoadBattleReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LoadBattleReq, LoadBattleReq.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoRoom.internal__static_Protocol_LoadBattleReq__FieldAccessorTable; }
    }
    
    public const int UserIdFieldNumber = 1;
    private bool hasUserId;
    private string userId_ = "";
    public bool HasUserId {
      get { return hasUserId; }
    }
    public string UserId {
      get { return userId_; }
      set { hasUserId = true;
        userId_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUserId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _loadBattleReqFieldNames;
      if (hasUserId) {
        output.WriteString(1, field_names[0], UserId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasUserId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, UserId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public LoadBattleReq CommitChange() {
      LoadBattleReq other = new LoadBattleReq();
      bool isChange = false;
      other.UserId = UserId;
      return isChange?other:null;
    }
    
    public void MergeFrom(LoadBattleReq other, bool isFull = false) {
      if (other == global::Protocol.LoadBattleReq.DefaultInstance) return;
      if (other.HasUserId) {
        UserId = other.UserId;
      }
    }
    
    public static LoadBattleReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoadBattleReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoadBattleReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoadBattleReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoadBattleReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoadBattleReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LoadBattleReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LoadBattleReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LoadBattleReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoadBattleReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LoadBattleReq MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LoadBattleReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LoadBattleReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LoadBattleReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LoadBattleReq result;
      
      private LoadBattleReq PrepareBuilder() {
        if (resultIsReadOnly) {
          LoadBattleReq original = result;
          result = new LoadBattleReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LoadBattleReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.LoadBattleReq.Descriptor; }
      }
      
      public override LoadBattleReq DefaultInstanceForType {
        get { return global::Protocol.LoadBattleReq.DefaultInstance; }
      }
      
      public override LoadBattleReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LoadBattleReq) {
          return MergeFrom((LoadBattleReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LoadBattleReq other) {
        if (other == global::Protocol.LoadBattleReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_loadBattleReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _loadBattleReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUserId = input.ReadString(ref result.userId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public string UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = "";
        return this;
      }
    }
    static LoadBattleReq() {
      object.ReferenceEquals(global::Protocol.ProtoRoom.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LoadBattleRsp : pb::GeneratedMessage<LoadBattleRsp, LoadBattleRsp.Builder> {
    public LoadBattleRsp() { }
    private static readonly LoadBattleRsp defaultInstance = new LoadBattleRsp().MakeReadOnly();
    private static readonly string[] _loadBattleRspFieldNames = new string[] { "host_id", "level_name", "player_list", "ret_code" };
    private static readonly uint[] _loadBattleRspFieldTags = new uint[] { 16, 34, 26, 8 };
    public static LoadBattleRsp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LoadBattleRsp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LoadBattleRsp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoRoom.internal__static_Protocol_LoadBattleRsp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LoadBattleRsp, LoadBattleRsp.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoRoom.internal__static_Protocol_LoadBattleRsp__FieldAccessorTable; }
    }
    
    public const int RetCodeFieldNumber = 1;
    private bool hasRetCode;
    private int retCode_;
    public bool HasRetCode {
      get { return hasRetCode; }
    }
    public int RetCode {
      get { return retCode_; }
      set { hasRetCode = true;
        retCode_ = value;}
    }
    
    public const int HostIdFieldNumber = 2;
    private bool hasHostId;
    private uint hostId_;
    public bool HasHostId {
      get { return hasHostId; }
    }
    [global::System.CLSCompliant(false)]
    public uint HostId {
      get { return hostId_; }
      set { hasHostId = true;
        hostId_ = value;}
    }
    
    public const int PlayerListFieldNumber = 3;
    private pbc::PopsicleList<global::Protocol.PlayerInfo> playerList_ = new pbc::PopsicleList<global::Protocol.PlayerInfo>();
    public scg::IList<global::Protocol.PlayerInfo> PlayerList {
      get { return pbc::Lists.AsReadOnly(playerList_); }
    }
    public int PlayerListCount {
      get { return playerList_.Count; }
    }
    public global::Protocol.PlayerInfo GetPlayerList(int index) {
      return playerList_[index];
    }
    public global::Protocol.PlayerInfo FindPlayerList(System.Predicate<global::Protocol.PlayerInfo> match) {
      return playerList_.Find(match);
    }
    public System.Collections.Generic.IList<global::Protocol.PlayerInfo> FindAllPlayerList(System.Predicate<global::Protocol.PlayerInfo> match) {
      return playerList_.FindAll(match);
    }
    public void SetPlayerList(int index, global::Protocol.PlayerInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      if (index < 0 || index >= playerList_.Count) return;
      playerList_[index] = value;
    }
    public void AddPlayerList(global::Protocol.PlayerInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      playerList_.Add(value);
    }
    public void AddRangePlayerList(scg::IEnumerable<global::Protocol.PlayerInfo> values) {
      playerList_.Add(values);
    }
    public void RemovePlayerList(global::Protocol.PlayerInfo value) {
      if (!playerList_.Contains(value)) return;
      playerList_.Remove(value);
    }
    public void RemoveAtPlayerList(int index) {
      if (index < 0 || index >= playerList_.Count) return;
      playerList_.RemoveAt(index);
    }
    public void ClearPlayerList() {
      if (playerList_.Count <= 0) return;
      playerList_.Clear();
    }
    
    public const int LevelNameFieldNumber = 4;
    private bool hasLevelName;
    private bool isLevelNameChanged = true;
    private string levelName_ = "";
    public bool HasLevelName {
      get { return hasLevelName; }
    }
    public string LevelName {
      get { return levelName_; }
      set { hasLevelName = true;
        isLevelNameChanged = true;
        levelName_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRetCode) return false;
        if (!hasHostId) return false;
        foreach (global::Protocol.PlayerInfo element in PlayerList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _loadBattleRspFieldNames;
      if (hasRetCode) {
        output.WriteInt32(1, field_names[3], RetCode);
      }
      if (hasHostId) {
        output.WriteUInt32(2, field_names[0], HostId);
      }
      if (playerList_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], playerList_);
      }
      if (hasLevelName) {
        output.WriteString(4, field_names[1], LevelName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasRetCode) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, RetCode);
      }
      if (hasHostId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, HostId);
      }
      foreach (global::Protocol.PlayerInfo element in PlayerList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      if (hasLevelName) {
        size += pb::CodedOutputStream.ComputeStringSize(4, LevelName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public LoadBattleRsp CommitChange() {
      LoadBattleRsp other = new LoadBattleRsp();
      bool isChange = false;
      other.RetCode = RetCode;
      other.HostId = HostId;
      isChange = true;
      other.playerList_.Add(playerList_);
      if (isLevelNameChanged) {
        isChange = true;
        other.LevelName = LevelName;
        isLevelNameChanged = false;
      }
      return isChange?other:null;
    }
    
    public void MergeFrom(LoadBattleRsp other, bool isFull = false) {
      if (other == global::Protocol.LoadBattleRsp.DefaultInstance) return;
      if (other.HasRetCode) {
        RetCode = other.RetCode;
      }
      if (other.HasHostId) {
        HostId = other.HostId;
      }
        playerList_.Clear();
        playerList_.Add(other.playerList_);
      if (other.HasLevelName) {
        LevelName = other.LevelName;
      }
    }
    
    public static LoadBattleRsp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoadBattleRsp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoadBattleRsp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoadBattleRsp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoadBattleRsp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoadBattleRsp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LoadBattleRsp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LoadBattleRsp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LoadBattleRsp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoadBattleRsp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LoadBattleRsp MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LoadBattleRsp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LoadBattleRsp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LoadBattleRsp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LoadBattleRsp result;
      
      private LoadBattleRsp PrepareBuilder() {
        if (resultIsReadOnly) {
          LoadBattleRsp original = result;
          result = new LoadBattleRsp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LoadBattleRsp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.LoadBattleRsp.Descriptor; }
      }
      
      public override LoadBattleRsp DefaultInstanceForType {
        get { return global::Protocol.LoadBattleRsp.DefaultInstance; }
      }
      
      public override LoadBattleRsp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LoadBattleRsp) {
          return MergeFrom((LoadBattleRsp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LoadBattleRsp other) {
        if (other == global::Protocol.LoadBattleRsp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRetCode) {
          RetCode = other.RetCode;
        }
        if (other.HasHostId) {
          HostId = other.HostId;
        }
        if (other.playerList_.Count != 0) {
          result.playerList_.Add(other.playerList_);
        }
        if (other.HasLevelName) {
          LevelName = other.LevelName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_loadBattleRspFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _loadBattleRspFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRetCode = input.ReadInt32(ref result.retCode_);
              break;
            }
            case 16: {
              result.hasHostId = input.ReadUInt32(ref result.hostId_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.playerList_, global::Protocol.PlayerInfo.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              result.hasLevelName = input.ReadString(ref result.levelName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRetCode {
        get { return result.hasRetCode; }
      }
      public int RetCode {
        get { return result.RetCode; }
        set { SetRetCode(value); }
      }
      public Builder SetRetCode(int value) {
        PrepareBuilder();
        result.hasRetCode = true;
        result.retCode_ = value;
        return this;
      }
      public Builder ClearRetCode() {
        PrepareBuilder();
        result.hasRetCode = false;
        result.retCode_ = 0;
        return this;
      }
      
      public bool HasHostId {
        get { return result.hasHostId; }
      }
      [global::System.CLSCompliant(false)]
      public uint HostId {
        get { return result.HostId; }
        set { SetHostId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHostId(uint value) {
        PrepareBuilder();
        result.hasHostId = true;
        result.hostId_ = value;
        return this;
      }
      public Builder ClearHostId() {
        PrepareBuilder();
        result.hasHostId = false;
        result.hostId_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::Protocol.PlayerInfo> PlayerList {
        get { return PrepareBuilder().playerList_; }
      }
      public int PlayerListCount {
        get { return result.PlayerListCount; }
      }
      public global::Protocol.PlayerInfo GetPlayerList(int index) {
        return result.GetPlayerList(index);
      }
      public Builder SetPlayerList(int index, global::Protocol.PlayerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.playerList_[index] = value;
        return this;
      }
      public Builder SetPlayerList(int index, global::Protocol.PlayerInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.playerList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPlayerList(global::Protocol.PlayerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.playerList_.Add(value);
        return this;
      }
      public Builder AddPlayerList(global::Protocol.PlayerInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.playerList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePlayerList(scg::IEnumerable<global::Protocol.PlayerInfo> values) {
        PrepareBuilder();
        result.playerList_.Add(values);
        return this;
      }
      public Builder ClearPlayerList() {
        PrepareBuilder();
        result.playerList_.Clear();
        return this;
      }
      
      public bool HasLevelName {
        get { return result.hasLevelName; }
      }
      public string LevelName {
        get { return result.LevelName; }
        set { SetLevelName(value); }
      }
      public Builder SetLevelName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLevelName = true;
        result.levelName_ = value;
        return this;
      }
      public Builder ClearLevelName() {
        PrepareBuilder();
        result.hasLevelName = false;
        result.levelName_ = "";
        return this;
      }
    }
    static LoadBattleRsp() {
      object.ReferenceEquals(global::Protocol.ProtoRoom.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LoadProgressNtf : pb::GeneratedMessage<LoadProgressNtf, LoadProgressNtf.Builder> {
    public LoadProgressNtf() { }
    private static readonly LoadProgressNtf defaultInstance = new LoadProgressNtf().MakeReadOnly();
    private static readonly string[] _loadProgressNtfFieldNames = new string[] { "progress" };
    private static readonly uint[] _loadProgressNtfFieldTags = new uint[] { 8 };
    public static LoadProgressNtf DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LoadProgressNtf DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LoadProgressNtf ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoRoom.internal__static_Protocol_LoadProgressNtf__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LoadProgressNtf, LoadProgressNtf.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoRoom.internal__static_Protocol_LoadProgressNtf__FieldAccessorTable; }
    }
    
    public const int ProgressFieldNumber = 1;
    private bool hasProgress;
    private uint progress_;
    public bool HasProgress {
      get { return hasProgress; }
    }
    [global::System.CLSCompliant(false)]
    public uint Progress {
      get { return progress_; }
      set { hasProgress = true;
        progress_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        if (!hasProgress) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _loadProgressNtfFieldNames;
      if (hasProgress) {
        output.WriteUInt32(1, field_names[0], Progress);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasProgress) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Progress);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public LoadProgressNtf CommitChange() {
      LoadProgressNtf other = new LoadProgressNtf();
      bool isChange = false;
      other.Progress = Progress;
      return isChange?other:null;
    }
    
    public void MergeFrom(LoadProgressNtf other, bool isFull = false) {
      if (other == global::Protocol.LoadProgressNtf.DefaultInstance) return;
      if (other.HasProgress) {
        Progress = other.Progress;
      }
    }
    
    public static LoadProgressNtf ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoadProgressNtf ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoadProgressNtf ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoadProgressNtf ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoadProgressNtf ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoadProgressNtf ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LoadProgressNtf ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LoadProgressNtf ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LoadProgressNtf ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoadProgressNtf ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LoadProgressNtf MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LoadProgressNtf prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LoadProgressNtf, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LoadProgressNtf cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LoadProgressNtf result;
      
      private LoadProgressNtf PrepareBuilder() {
        if (resultIsReadOnly) {
          LoadProgressNtf original = result;
          result = new LoadProgressNtf();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LoadProgressNtf MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.LoadProgressNtf.Descriptor; }
      }
      
      public override LoadProgressNtf DefaultInstanceForType {
        get { return global::Protocol.LoadProgressNtf.DefaultInstance; }
      }
      
      public override LoadProgressNtf BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LoadProgressNtf) {
          return MergeFrom((LoadProgressNtf) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LoadProgressNtf other) {
        if (other == global::Protocol.LoadProgressNtf.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasProgress) {
          Progress = other.Progress;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_loadProgressNtfFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _loadProgressNtfFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasProgress = input.ReadUInt32(ref result.progress_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasProgress {
        get { return result.hasProgress; }
      }
      [global::System.CLSCompliant(false)]
      public uint Progress {
        get { return result.Progress; }
        set { SetProgress(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetProgress(uint value) {
        PrepareBuilder();
        result.hasProgress = true;
        result.progress_ = value;
        return this;
      }
      public Builder ClearProgress() {
        PrepareBuilder();
        result.hasProgress = false;
        result.progress_ = 0;
        return this;
      }
    }
    static LoadProgressNtf() {
      object.ReferenceEquals(global::Protocol.ProtoRoom.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BattleStart : pb::GeneratedMessage<BattleStart, BattleStart.Builder> {
    public BattleStart() { }
    private static readonly BattleStart defaultInstance = new BattleStart().MakeReadOnly();
    private static readonly string[] _battleStartFieldNames = new string[] { "server_time" };
    private static readonly uint[] _battleStartFieldTags = new uint[] { 13 };
    public static BattleStart DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BattleStart DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BattleStart ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoRoom.internal__static_Protocol_BattleStart__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BattleStart, BattleStart.Builder> InternalFieldAccessors {
      get { return global::Protocol.ProtoRoom.internal__static_Protocol_BattleStart__FieldAccessorTable; }
    }
    
    public const int ServerTimeFieldNumber = 1;
    private bool hasServerTime;
    private float serverTime_;
    public bool HasServerTime {
      get { return hasServerTime; }
    }
    public float ServerTime {
      get { return serverTime_; }
      set { hasServerTime = true;
        serverTime_ = value;}
    }
    
    public override bool IsInitialized {
      get {
        if (!hasServerTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _battleStartFieldNames;
      if (hasServerTime) {
        output.WriteFloat(1, field_names[0], ServerTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = 0;
      if (hasServerTime) {
        size += pb::CodedOutputStream.ComputeFloatSize(1, ServerTime);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    
    public BattleStart CommitChange() {
      BattleStart other = new BattleStart();
      bool isChange = false;
      other.ServerTime = ServerTime;
      return isChange?other:null;
    }
    
    public void MergeFrom(BattleStart other, bool isFull = false) {
      if (other == global::Protocol.BattleStart.DefaultInstance) return;
      if (other.HasServerTime) {
        ServerTime = other.ServerTime;
      }
    }
    
    public static BattleStart ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BattleStart ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BattleStart ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BattleStart ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BattleStart ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BattleStart ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BattleStart ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BattleStart ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BattleStart ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BattleStart ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BattleStart MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BattleStart prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BattleStart, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BattleStart cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BattleStart result;
      
      private BattleStart PrepareBuilder() {
        if (resultIsReadOnly) {
          BattleStart original = result;
          result = new BattleStart();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BattleStart MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Protocol.BattleStart.Descriptor; }
      }
      
      public override BattleStart DefaultInstanceForType {
        get { return global::Protocol.BattleStart.DefaultInstance; }
      }
      
      public override BattleStart BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BattleStart) {
          return MergeFrom((BattleStart) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BattleStart other) {
        if (other == global::Protocol.BattleStart.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasServerTime) {
          ServerTime = other.ServerTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_battleStartFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _battleStartFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasServerTime = input.ReadFloat(ref result.serverTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasServerTime {
        get { return result.hasServerTime; }
      }
      public float ServerTime {
        get { return result.ServerTime; }
        set { SetServerTime(value); }
      }
      public Builder SetServerTime(float value) {
        PrepareBuilder();
        result.hasServerTime = true;
        result.serverTime_ = value;
        return this;
      }
      public Builder ClearServerTime() {
        PrepareBuilder();
        result.hasServerTime = false;
        result.serverTime_ = 0F;
        return this;
      }
    }
    static BattleStart() {
      object.ReferenceEquals(global::Protocol.ProtoRoom.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
