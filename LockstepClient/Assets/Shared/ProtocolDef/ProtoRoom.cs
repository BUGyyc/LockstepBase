// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto_room.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protocol {

  /// <summary>Holder for reflection information generated from proto_room.proto</summary>
  public static partial class ProtoRoomReflection {

    #region Descriptor
    /// <summary>File descriptor for proto_room.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtoRoomReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBwcm90b19yb29tLnByb3RvEghQcm90b2NvbBoScHJvdG9fYmF0dGxlLnBy",
            "b3RvInwKDkxlYXZlQmF0dGxlUmVxEhYKCXBsYXllcl9pZBgBIAEoDUgAiAEB",
            "EhAKA3VpZBgCIAEoCUgBiAEBEhkKDHJlc3VsdF9zdGF0ZRgDIAEoDUgCiAEB",
            "QgwKCl9wbGF5ZXJfaWRCBgoEX3VpZEIPCg1fcmVzdWx0X3N0YXRlImYKDkxl",
            "YXZlQmF0dGxlUnNwEhUKCHJldF9jb2RlGAEgASgFSACIAQESMAoPZ2FtZV9y",
            "ZXN1bHRfbXNnGAIgASgLMhcuUHJvdG9jb2wuR2FtZVJlc3VsdE1zZ0ILCglf",
            "cmV0X2NvZGUiOQoRTGVhdmVCYXR0bGVOb3RpZnkSFgoJcGxheWVyX2lkGAEg",
            "ASgNSACIAQFCDAoKX3BsYXllcl9pZCIzCg9CYXR0bGVFbmROb3RpZnkSFAoH",
            "cm9vbV9pZBgBIAEoBEgAiAEBQgoKCF9yb29tX2lkIjUKD0xvYWRQcm9ncmVz",
            "c050ZhIVCghwcm9ncmVzcxgBIAEoDUgAiAEBQgsKCV9wcm9ncmVzcyI3CgtC",
            "YXR0bGVTdGFydBIYCgtzZXJ2ZXJfdGltZRgBIAEoAkgAiAEBQg4KDF9zZXJ2",
            "ZXJfdGltZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Protocol.ProtoBattleReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.LeaveBattleReq), global::Protocol.LeaveBattleReq.Parser, new[]{ "PlayerId", "Uid", "ResultState" }, new[]{ "PlayerId", "Uid", "ResultState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.LeaveBattleRsp), global::Protocol.LeaveBattleRsp.Parser, new[]{ "RetCode", "GameResultMsg" }, new[]{ "RetCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.LeaveBattleNotify), global::Protocol.LeaveBattleNotify.Parser, new[]{ "PlayerId" }, new[]{ "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BattleEndNotify), global::Protocol.BattleEndNotify.Parser, new[]{ "RoomId" }, new[]{ "RoomId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.LoadProgressNtf), global::Protocol.LoadProgressNtf.Parser, new[]{ "Progress" }, new[]{ "Progress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BattleStart), global::Protocol.BattleStart.Parser, new[]{ "ServerTime" }, new[]{ "ServerTime" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LeaveBattleReq : pb::IMessage<LeaveBattleReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LeaveBattleReq> _parser = new pb::MessageParser<LeaveBattleReq>(() => new LeaveBattleReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveBattleReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoRoomReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveBattleReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveBattleReq(LeaveBattleReq other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      playerId_ = other.playerId_;
      uid_ = other.uid_;
      resultState_ = other.resultState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveBattleReq Clone() {
      return new LeaveBattleReq(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private uint playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "player_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPlayerIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private string uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_ ?? ""; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUid {
      get { return uid_ != null; }
    }
    /// <summary>Gets whether the "uid" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUidDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUid() {
      uid_ = null;
    }

    /// <summary>Field number for the "result_state" field.</summary>
    public const int ResultStateFieldNumber = 3;
    private uint resultState_;
    /// <summary>
    ///是否成功撤离
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResultState {
      get { if ((_hasBits0 & 2) != 0) { return resultState_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        _dirtyBits0 |= 4;
        resultState_ = value;
      }
    }
    /// <summary>Gets whether the "result_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResultState {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Gets whether the "result_state" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsResultStateDirty {
      get { return (_dirtyBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "result_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResultState() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveBattleReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveBattleReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Uid != other.Uid) return false;
      if (ResultState != other.ResultState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasResultState) hash ^= ResultState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasPlayerId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPlayerIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayerId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasUid)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUidDirty)) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasResultState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsResultStateDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(ResultState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasPlayerId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPlayerIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayerId);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasUid)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsUidDirty)) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if ((output.writeScope == pb.WriteScope.FULL && HasResultState)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsResultStateDirty)) {
        output.WriteRawTag(24);
        output.WriteUInt32(ResultState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasPlayerId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsPlayerIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      if ((scope == pb.WriteScope.FULL && HasUid)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsUidDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if ((scope == pb.WriteScope.FULL && HasResultState)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsResultStateDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResultState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveBattleReq other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasResultState) {
        ResultState = other.ResultState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt32();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
          case 24: {
            ResultState = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadUInt32();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
          case 24: {
            ResultState = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LeaveBattleRsp : pb::IMessage<LeaveBattleRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LeaveBattleRsp> _parser = new pb::MessageParser<LeaveBattleRsp>(() => new LeaveBattleRsp());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveBattleRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoRoomReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveBattleRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveBattleRsp(LeaveBattleRsp other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      retCode_ = other.retCode_;
      gameResultMsg_ = other.gameResultMsg_ != null ? other.gameResultMsg_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveBattleRsp Clone() {
      return new LeaveBattleRsp(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "ret_code" field.</summary>
    public const int RetCodeFieldNumber = 1;
    private int retCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RetCode {
      get { if ((_hasBits0 & 1) != 0) { return retCode_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        retCode_ = value;
      }
    }
    /// <summary>Gets whether the "ret_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRetCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "ret_code" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRetCodeDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ret_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRetCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "game_result_msg" field.</summary>
    public const int GameResultMsgFieldNumber = 2;
    private global::Protocol.GameResultMsg gameResultMsg_;
    /// <summary>
    ///夺宝撤离		
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.GameResultMsg GameResultMsg {
      get { return gameResultMsg_; }
      set {
        gameResultMsg_ = value;
      }
    }
    /// <summary>Gets whether the "game_result_msg" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGameResultMsgDirty {
      get { return (_dirtyBits0 & 2) != 0; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveBattleRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveBattleRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RetCode != other.RetCode) return false;
      if (!object.Equals(GameResultMsg, other.GameResultMsg)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRetCode) hash ^= RetCode.GetHashCode();
      if (gameResultMsg_ != null) hash ^= GameResultMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasRetCode)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRetCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteInt32(RetCode);
      }
      if ((output.writeScope == pb.WriteScope.FULL && gameResultMsg_ != null)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsGameResultMsgDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(GameResultMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasRetCode)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRetCodeDirty)) {
        output.WriteRawTag(8);
        output.WriteInt32(RetCode);
      }
      if ((output.writeScope == pb.WriteScope.FULL && gameResultMsg_ != null)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsGameResultMsgDirty)) {
        output.WriteRawTag(18);
        output.WriteMessage(GameResultMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasRetCode)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsRetCodeDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetCode);
      }
      if (gameResultMsg_ != null) {
        int msgSize = pb::CodedOutputStream.ComputeMessageSize(GameResultMsg, scope);
        if (msgSize>0 || scope== pb.WriteScope.FULL) {
          size += 1 + msgSize;
          if (scope!= pb.WriteScope.FULL) _dirtyBits0 |= 2;
        } else {
          _dirtyBits0 &= ~2;
        }
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveBattleRsp other) {
      if (other == null) {
        return;
      }
      if (other.HasRetCode) {
        RetCode = other.RetCode;
      }
      if (other.gameResultMsg_ != null) {
        if (gameResultMsg_ == null) {
          GameResultMsg = new global::Protocol.GameResultMsg();
        }
        GameResultMsg.MergeFrom(other.GameResultMsg);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RetCode = input.ReadInt32();
            break;
          }
          case 18: {
            if (gameResultMsg_ == null) {
              GameResultMsg = new global::Protocol.GameResultMsg();
            }
            input.ReadMessage(GameResultMsg);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RetCode = input.ReadInt32();
            break;
          }
          case 18: {
            if (gameResultMsg_ == null) {
              GameResultMsg = new global::Protocol.GameResultMsg();
            }
            input.ReadMessage(GameResultMsg);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LeaveBattleNotify : pb::IMessage<LeaveBattleNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LeaveBattleNotify> _parser = new pb::MessageParser<LeaveBattleNotify>(() => new LeaveBattleNotify());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveBattleNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoRoomReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveBattleNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveBattleNotify(LeaveBattleNotify other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveBattleNotify Clone() {
      return new LeaveBattleNotify(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private uint playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        playerId_ = value;
      }
    }
    /// <summary>Gets whether the "player_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlayerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "player_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPlayerIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "player_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayerId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveBattleNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveBattleNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlayerId) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasPlayerId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPlayerIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasPlayerId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsPlayerIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasPlayerId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsPlayerIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveBattleNotify other) {
      if (other == null) {
        return;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BattleEndNotify : pb::IMessage<BattleEndNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BattleEndNotify> _parser = new pb::MessageParser<BattleEndNotify>(() => new BattleEndNotify());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleEndNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoRoomReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEndNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEndNotify(BattleEndNotify other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      roomId_ = other.roomId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEndNotify Clone() {
      return new BattleEndNotify(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private ulong roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomId {
      get { if ((_hasBits0 & 1) != 0) { return roomId_; } else { return 0UL; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        roomId_ = value;
      }
    }
    /// <summary>Gets whether the "room_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRoomId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "room_id" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRoomIdDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "room_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRoomId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleEndNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleEndNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRoomId) hash ^= RoomId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasRoomId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRoomIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasRoomId)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsRoomIdDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasRoomId)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsRoomIdDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleEndNotify other) {
      if (other == null) {
        return;
      }
      if (other.HasRoomId) {
        RoomId = other.RoomId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RoomId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 客户端加载进度
  /// </summary>
  public sealed partial class LoadProgressNtf : pb::IMessage<LoadProgressNtf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LoadProgressNtf> _parser = new pb::MessageParser<LoadProgressNtf>(() => new LoadProgressNtf());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadProgressNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoRoomReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadProgressNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadProgressNtf(LoadProgressNtf other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      progress_ = other.progress_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadProgressNtf Clone() {
      return new LoadProgressNtf(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 1;
    private uint progress_;
    /// <summary>
    /// 进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Progress {
      get { if ((_hasBits0 & 1) != 0) { return progress_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        progress_ = value;
      }
    }
    /// <summary>Gets whether the "progress" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProgress {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "progress" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsProgressDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "progress" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProgress() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadProgressNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadProgressNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Progress != other.Progress) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasProgress) hash ^= Progress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasProgress)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsProgressDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(Progress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasProgress)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsProgressDirty)) {
        output.WriteRawTag(8);
        output.WriteUInt32(Progress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasProgress)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsProgressDirty)) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Progress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadProgressNtf other) {
      if (other == null) {
        return;
      }
      if (other.HasProgress) {
        Progress = other.Progress;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Progress = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Progress = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 战斗开始，客户端切换战斗状态
  /// </summary>
  public sealed partial class BattleStart : pb::IMessage<BattleStart>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BattleStart> _parser = new pb::MessageParser<BattleStart>(() => new BattleStart());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _dirtyBits0 = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ProtoRoomReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleStart(BattleStart other) : this() {
      _hasBits0 = other._hasBits0;
      _dirtyBits0 = other._dirtyBits0;
      serverTime_ = other.serverTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleStart Clone() {
      return new BattleStart(this);
    }

    public void ClearDirty() {
      _dirtyBits0 = 0;
    }
    public bool IsDirty() {
      if (_dirtyBits0 != 0) return true;
      return false;
    }
    /// <summary>Field number for the "server_time" field.</summary>
    public const int ServerTimeFieldNumber = 1;
    private float serverTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ServerTime {
      get { if ((_hasBits0 & 1) != 0) { return serverTime_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        _dirtyBits0 |= 1;
        serverTime_ = value;
      }
    }
    /// <summary>Gets whether the "server_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Gets whether the "server_time" field is dirty</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsServerTimeDirty {
      get { return (_dirtyBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "server_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerTime() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ServerTime, other.ServerTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasServerTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ServerTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if ((output.writeScope == pb.WriteScope.FULL && HasServerTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsServerTimeDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(ServerTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
      if (output.clear) ClearDirty();
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if ((output.writeScope == pb.WriteScope.FULL && HasServerTime)||(output.writeScope == pb.WriteScope.DIRTY_PUBLIC && IsServerTimeDirty)) {
        output.WriteRawTag(13);
        output.WriteFloat(ServerTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
      if (output.clear) ClearDirty();
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize(pb::WriteScope scope) {
      int size = 0;
      if ((scope == pb.WriteScope.FULL && HasServerTime)||(scope == pb.WriteScope.DIRTY_PUBLIC && IsServerTimeDirty)) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize(scope);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleStart other) {
      if (other == null) {
        return;
      }
      if (other.HasServerTime) {
        ServerTime = other.ServerTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            ServerTime = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            ServerTime = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
